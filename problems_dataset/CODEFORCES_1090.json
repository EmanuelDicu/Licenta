{
    "name": "1090_C. New Year Presents",
    "source": "CODEFORCES",
    "description": "Santa has prepared boxes with presents for n kids, one box for each kid. There are m kinds of presents: balloons, sweets, chocolate bars, toy cars... A child would be disappointed to receive two presents of the same kind, so all kinds of presents in one box are distinct.\n\nHaving packed all the presents, Santa realized that different boxes can contain different number of presents. It would be unfair to the children, so he decided to move some presents between boxes, and make their sizes similar. After all movements, the difference between the maximal and the minimal number of presents in a box must be as small as possible. All presents in each box should still be distinct. Santa wants to finish the job as fast as possible, so he wants to minimize the number of movements required to complete the task.\n\nGiven the sets of presents in each box, find the shortest sequence of movements of presents between boxes that minimizes the difference of sizes of the smallest and the largest box, and keeps all presents in each box distinct.\n\nInput\n\nThe first line of input contains two integers n, m (1 \u2264 n, m \u2264 100\\ 000), the number of boxes and the number of kinds of the presents. Denote presents with integers from 1 to m.\n\nEach of the following n lines contains the description of one box. It begins with an integer s_i (s_i \u2265 0), the number of presents in the box, s_i distinct integers between 1 and m follow, denoting the kinds of presents in that box.\n\nThe total number of presents in all boxes does not exceed 500 000.\n\nOutput\n\nPrint one integer k at the first line of output, the number of movements in the shortest sequence that makes the sizes of the boxes differ by at most one. Then print k lines that describe movements in the same order in which they should be performed. Each movement is described by three integers from_i, to_i, kind_i. It means that the present of kind kind_i is moved from the box with number from_i to the box with number to_i. Boxes are numbered from one in the order they are given in the input.\n\nAt the moment when the movement is performed the present with kind kind_i must be present in the box with number from_i. After performing all moves each box must not contain two presents of the same kind.\n\nIf there are several optimal solutions, output any of them.\n\nExample\n\nInput\n\n\n3 5\n5 1 2 3 4 5\n2 1 2\n2 3 4\n\n\nOutput\n\n\n2\n1 3 5\n1 2 3",
    "difficulty": "C",
    "tags": [
        "constructive algorithms",
        "data structures"
    ],
    "rating": 2400,
    "public_test": [
        {
            "input": "3 5\n5 1 2 3 4 5\n2 1 2\n2 3 4\n",
            "output": "2\n1 2 3\n1 3 1\n"
        }
    ],
    "generated_test": [
        {
            "input": "1 2\n0\n",
            "output": "0\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 1\n3 1 2 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 4\n"
        },
        {
            "input": "3 7\n4 4 10 7 2\n0\n16 12 14 8 10 15 13 17 7 4 6 16 19 18 11 2 5\n",
            "output": "9\n3 2 2\n3 2 4\n3 2 5\n3 2 6\n3 2 7\n3 2 8\n3 1 11\n3 1 12\n3 1 13\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 1\n4 1 2 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 5\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n1 1\n1 1 2 6\n",
            "output": "3\n1 2 3\n1 3 4\n1 3 5\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 0\n3 1 0 12\n",
            "output": "4\n1 2 1\n1 2 3\n1 3 4\n1 3 5\n"
        },
        {
            "input": "3 7\n6 3 8 1 14 6 4\n0 1\n4 1 1 12\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 6\n"
        },
        {
            "input": "3 7\n6 3 8 1 14 6 4\n0 0\n4 1 1 12\n",
            "output": "4\n1 2 1\n1 2 3\n1 3 4\n1 3 6\n"
        },
        {
            "input": "4 50\n9 26 13 12 16 39 37 42 11 18\n42 4 39 19 29 44 30 5 43 28 38 22 2 33 9 50 13 25 37 45 32 27 1 48 35 11 36 42 26 91 40 8 34 7 12 23 31 10 6 18 46 41 17\n28 22 30 48 7 23 42 37 47 41 50 14 33 13 27 18 2 15 12 16 21 32 6 25 28 4 49 45 1\n21 44 40 32 21 19 10 35 36 7 29 27 46 38 2 9 41 24 34 26 15 37\n",
            "output": "20\n2 1 1\n2 1 2\n2 1 4\n2 1 5\n2 1 6\n2 1 7\n2 1 8\n2 1 9\n2 1 10\n2 1 17\n2 1 19\n2 1 22\n2 1 23\n2 1 25\n2 1 27\n2 1 28\n2 4 11\n3 4 1\n3 4 4\n3 4 6\n"
        },
        {
            "input": "3 0\n0\n0\n5 2 1 5 3 4\n",
            "output": "3\n3 1 1\n3 2 2\n3 2 3\n"
        },
        {
            "input": "3 5\n5 1 2 3 4 5\n2 1 2\n2 2 4\n",
            "output": "2\n1 2 3\n1 3 1\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n1 1\n0 1 2 6\n",
            "output": "3\n1 3 1\n1 3 3\n1 2 4\n"
        },
        {
            "input": "2 2\n0\n1 1\n",
            "output": "0\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 2\n4 1 2 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 5\n"
        },
        {
            "input": "1 1\n0 1\n",
            "output": "0\n"
        },
        {
            "input": "2 2\n0\n1 2\n",
            "output": "0\n"
        },
        {
            "input": "100 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n0\n0\n1 1\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n1 1\n0\n0\n0\n1 1\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 1\n0 1\n",
            "output": "0\n"
        },
        {
            "input": "2 0\n0\n1 1\n",
            "output": "0\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 1\n3 1 2 12\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 4\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 1\n4 1 1 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 5\n"
        },
        {
            "input": "3 7\n6 3 5 1 9 6 4\n0 2\n4 1 2 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 5\n"
        },
        {
            "input": "1 1\n0 2\n",
            "output": "0\n"
        },
        {
            "input": "2 4\n0\n1 1\n",
            "output": "0\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 1\n3 1 0 12\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 4\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 1\n4 1 1 12\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 5\n"
        },
        {
            "input": "3 7\n6 3 5 1 9 6 4\n0 2\n3 1 2 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 4\n"
        },
        {
            "input": "3 7\n6 3 5 1 7 6 4\n0 2\n3 1 0 12\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 4\n"
        },
        {
            "input": "3 7\n6 3 5 1 14 6 4\n0 1\n4 1 1 12\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 5\n"
        },
        {
            "input": "3 7\n6 3 5 1 9 6 4\n0 2\n3 1 1 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 4\n"
        },
        {
            "input": "1 1\n1 2\n",
            "output": "0\n"
        },
        {
            "input": "1 11\n10 6 15 11 5 8 2 1 3 4 7\n",
            "output": "0\n"
        },
        {
            "input": "2 3\n0\n1 1\n",
            "output": "0\n"
        },
        {
            "input": "3 7\n6 3 10 1 7 6 4\n0 1\n4 1 2 6\n",
            "output": "3\n1 2 1\n1 2 3\n1 3 6\n"
        },
        {
            "input": "1 2\n0 1\n",
            "output": "0\n"
        },
        {
            "input": "2 2\n0\n1 4\n",
            "output": "0\n"
        }
    ]
}