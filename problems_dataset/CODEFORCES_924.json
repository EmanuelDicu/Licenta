{
    "name": "924_A. Mystical Mosaic",
    "source": "CODEFORCES",
    "description": "There is a rectangular grid of n rows of m initially-white cells each.\n\nArkady performed a certain number (possibly zero) of operations on it. In the i-th operation, a non-empty subset of rows Ri and a non-empty subset of columns Ci are chosen. For each row r in Ri and each column c in Ci, the intersection of row r and column c is coloured black.\n\nThere's another constraint: a row or a column can only be chosen at most once among all operations. In other words, it means that no pair of (i, j) (i < j) exists such that <image> or <image>, where <image> denotes intersection of sets, and <image> denotes the empty set.\n\nYou are to determine whether a valid sequence of operations exists that produces a given final grid.\n\nInput\n\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 50) \u2014 the number of rows and columns of the grid, respectively.\n\nEach of the following n lines contains a string of m characters, each being either '.' (denoting a white cell) or '#' (denoting a black cell), representing the desired setup.\n\nOutput\n\nIf the given grid can be achieved by any valid sequence of operations, output \"Yes\"; otherwise output \"No\" (both without quotes).\n\nYou can print each character in any case (upper or lower).\n\nExamples\n\nInput\n\n5 8\n.#.#..#.\n.....#..\n.#.#..#.\n#.#....#\n.....#..\n\n\nOutput\n\nYes\n\n\nInput\n\n5 5\n..#..\n..#..\n#####\n..#..\n..#..\n\n\nOutput\n\nNo\n\n\nInput\n\n5 9\n........#\n#........\n..##.#...\n.......#.\n....#.#.#\n\n\nOutput\n\nNo\n\nNote\n\nFor the first example, the desired setup can be produced by 3 operations, as is shown below.\n\n<image>\n\nFor the second example, the desired setup cannot be produced, since in order to colour the center row, the third row and all columns must be selected in one operation, but after that no column can be selected again, hence it won't be possible to colour the other cells in the center column.",
    "difficulty": "A",
    "tags": [
        "greedy",
        "implementation"
    ],
    "rating": 1300,
    "public_test": [
        {
            "input": "5 9\n........#\n#........\n..##.#...\n.......#.\n....#.#.#\n",
            "output": "No\n"
        },
        {
            "input": "5 5\n..#..\n..#..\n#####\n..#..\n..#..\n",
            "output": "No\n"
        },
        {
            "input": "5 8\n.#.#..#.\n.....#..\n.#.#..#.\n#.#....#\n.....#..\n",
            "output": "Yes\n"
        }
    ],
    "generated_test": [
        {
            "input": "9 5\n.....\n#....\n..#..\n.....\n.#..#\n...#.\n.#...\n..-.#\n.....\n",
            "output": "No\n"
        },
        {
            "input": "0 10\n###..#..##\n...##..#..\n.##..#..#.\n.........#\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...#........\n......#...#.....\n..............##\n..............#.\n.......#........\n......#.........\n............#...\n.........#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#..............\n................\n......#.....#...\n.......#........\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#..............\n",
            "output": "No\n"
        },
        {
            "input": "0 2\n##\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "5 2\n#.\n##\n#\"\n#.\n..\n",
            "output": "No\n"
        },
        {
            "input": "1 3\n#.#\n###\n",
            "output": "Yes\n"
        },
        {
            "input": "1 1\n.\n#\n",
            "output": "Yes\n"
        },
        {
            "input": "4 4\n###.\n#$.#\n#.##\n.###\n",
            "output": "No\n"
        },
        {
            "input": "5 9\n........#\n#........\n..##.#...\n.#.......\n....#.#.#\n",
            "output": "No\n"
        },
        {
            "input": "5 8\n.#.#..#.\n.....#..\n.#..#.#.\n#.#....#\n.....#..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...#........\n......#...#.....\n..............##\n..............#.\n.......#........\n......#.........\n............#...\n.........#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#............/.\n................\n......#.....#...\n.......#........\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#..............\n",
            "output": "No\n"
        },
        {
            "input": "0 4\n##\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "5 2\n#.\n##\n#\"\n.#\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "0 4\n#\"\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n.-\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n#\"\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n.#\n..\n..\n.#\n.-\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n#\"\n#-\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n./\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n./\n.#\n.-\n..\n#.\n..\n..\n#.\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "1 10\n..#......#\n.....##...\n#.........\n.#.......#\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n./\n.#\n..\n.#\n..\n.#\n.#\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n.............#..\n.............#..\n.......#...#....\n............#...\n.....#..........\n.....#..........\n#...............\n................\n........#.......\n................\n................\n.#..............\n#...............\n..........#.....\n.#..............\n............#...\n................\n................\n................\n........#.......\n..#.............\n..........#.....\n.......#...#....\n.............#..\n..........#.....\n",
            "output": "Yes\n"
        },
        {
            "input": "10 15\n.......#.......\n.....#.........\n....#..........\n....#..........\n.....#.........\n.....#.........\n#..#...........\n...#..#........\n...............\n.............#.\n",
            "output": "No\n"
        },
        {
            "input": "4 4\n###.\n##.#\n#.$#\n.###\n",
            "output": "No\n"
        },
        {
            "input": "5 8\n.#.#..#.\n.....#..\n.#..#.#.\n#.#.-..#\n.....#..\n",
            "output": "No\n"
        },
        {
            "input": "9 5\n.....\n#....\n..#..\n.....\n#..#.\n...#.\n.#...\n..-.#\n.....\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n/.\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...#........\n......#...#.....\n..............##\n..............#.\n.......#........\n......#.........\n............#...\n...../...#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#..............\n................\n......#.....#...\n.......#........\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#..............\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n##\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "5 2\n#.\n##\n#\"\n#.\n-.\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n.\n#\n",
            "output": "Yes\n"
        },
        {
            "input": "5 9\n........#\n#........\n...#.##..\n.#.......\n....#.#.#\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n./\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...#........\n......#...#.....\n..............##\n..............#.\n.......#........\n......#.........\n............#...\n.........#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#............/.\n................\n......#.....#...\n.......#......./\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#..............\n",
            "output": "No\n"
        },
        {
            "input": "0 4\n#!\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "0 2\n#.\n##\n#\"\n.#\n..\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.$\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "0 3\n#\"\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "0 0\n#\"\n#-\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n-#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n/.\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n./\n.#\n.-\n..\n#.\n..\n..\n#.\n.-\n./\n.#\n..\n#.\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "1 10\n..#......#\n...##.....\n#.........\n.#.......#\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n./\n.#\n..\n.#\n..\n.#\n.#\n.#\n..\n..\n..\n.#\n.$\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n.............#..\n.............#..\n.......#...#....\n............#...\n.....#..........\n.....#..........\n#...............\n................\n........#.......\n................\n................\n.#..............\n#...............\n..........#.....\n.#..............\n...#............\n................\n................\n................\n........#.......\n..#.............\n..........#.....\n.......#...#....\n.............#..\n..........#.....\n",
            "output": "Yes\n"
        },
        {
            "input": "10 15\n.......#.......\n.....#.........\n....#..........\n....#..........\n.....#.........\n.....#.........\n#..#...........\n...#..#........\n.....-.........\n.............#.\n",
            "output": "No\n"
        },
        {
            "input": "4 4\n.###\n##.#\n#.$#\n.###\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n-.\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n/.\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...#........\n......#...#.....\n..............##\n..............#.\n.......#........\n......#.........\n............#...\n...../...#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#............-.\n................\n......#.....#...\n.......#........\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#..............\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n#$\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "5 2\n.#\n##\n#\"\n#.\n-.\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n.\n$\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.$\n..\n./\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "0 2\n#!\n#.\n",
            "output": "Yes\n"
        },
        {
            "input": "0 3\n#\"\n#-\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n..\n..\n.\"\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n.#\n..\n..\n..\n.#\n.#\n-#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n/.\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n./\n.#\n..\n.#\n..\n.#\n/.\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n#.\n##\n./\n..\n./\n.#\n.-\n..\n#.\n..\n..\n#.\n.-\n./\n.#\n..\n#.\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "0 10\n..#......#\n...##.....\n#.........\n.#.......#\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n.-\n..\n.#\n./\n.#\n..\n.#\n..\n.#\n.#\n.#\n..\n..\n..\n.#\n.$\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "10 15\n.......#.......\n.....#.........\n....#..........\n....#..........\n.....#.........\n.....#.........\n#..#...........\n...#..#........\n.....-.........\n-............#.\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n-.\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.%\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n/.\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...#........\n......#...#.....\n..............##\n..............#.\n.......#........\n......#.........\n............#...\n...../...#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#............-.\n................\n......#.....#...\n.......#........\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#.........-....\n",
            "output": "No\n"
        },
        {
            "input": "5 2\n.#\n##\n##\n#.\n-.\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n-\n$\n",
            "output": "Yes\n"
        },
        {
            "input": "0 2\n#!\n.#\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n..\n..\n.\"\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n-#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n/.\n.#\n.-\n..\n#.\n..\n..\n.#\n.-\n./\n.#\n..\n.$\n..\n.#\n/.\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n#.\n##\n./\n..\n./\n.#\n.-\n..\n#.\n..\n..\n#.\n.-\n./\n.#\n..\n#.\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.$\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "0 10\n..#./....#\n...##.....\n#.........\n.#.......#\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n#.\n..\n..\n.#\n.-\n..\n.#\n./\n.#\n..\n.#\n..\n.#\n.#\n.#\n..\n..\n..\n.#\n.$\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n.#\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n-.\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n.%\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n/.\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...........#\n......#...#.....\n..............##\n..............#.\n.......#........\n......#.........\n............#...\n...../...#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#............-.\n................\n......#.....#...\n.......#........\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#.........-....\n",
            "output": "No\n"
        },
        {
            "input": "0 1\n-\n%\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n-.\n..\n.\"\n.-\n./\n.#\n..\n.#\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n-#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n#.\n##\n./\n..\n./\n.#\n.-\n..\n#.\n..\n..\n#.\n.-\n./\n.#\n..\n#.\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.$\n..\n..\n..\n..\n.-\n/.\n",
            "output": "No\n"
        },
        {
            "input": "0 10\n..#./-...#\n...##.....\n#.........\n.#.......#\n",
            "output": "Yes\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n#.\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n#.\n..\n..\n.#\n.-\n..\n.#\n./\n.#\n..\n.#\n..\n.#\n.#\n.#\n..\n..\n..\n.#\n.$\n.#\n..\n..\n.#\n.#\n..\n..\n..\n..\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n.#\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n..\n..\n..\n.#\n..\n..\n.#\n..\n..\n.#\n-.\n..\n.#\n..\n.#\n..\n.#\n..\n.#\n%.\n.#\n..\n..\n..\n.#\n.#\n.#\n..\n..\n.#\n.#\n..\n..\n..\n/.\n..\n..\n",
            "output": "No\n"
        },
        {
            "input": "25 16\n..............#.\n................\n...#...........#\n......#...#.....\n..............##\n..............#.\n.......#....../.\n......#.........\n............#...\n...../...#.....#\n..............#.\n.......#........\n#...........#...\n...#.#..........\n.#............-.\n................\n......#.....#...\n.......#........\n........#.....#.\n................\n......#.........\n..#.............\n................\n...#.#..........\n.#.........-....\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n.#\n##\n./\n..\n..\n.#\n.-\n..\n#.\n-.\n..\n.\"\n.-\n./\n.#\n/.\n.#\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n.#\n-#\n..\n..\n.#\n.#\n..\n..\n..\n..\n.-\n..\n",
            "output": "No\n"
        },
        {
            "input": "50 2\n..\n..\n#.\n..\n.#\n..\n..\n..\n.#\n..\n..\n#.\n##\n./\n..\n./\n.#\n.-\n..\n#.\n..\n..\n#.\n.-\n./\n.#\n..\n#.\n..\n.#\n..\n.#\n.$\n#.\n..\n..\n..\n.#\n#.\n.#\n..\n..\n.#\n.$\n..\n..\n..\n..\n.-\n/.\n",
            "output": "No\n"
        }
    ],
    "solution": [
        {
            "language": 1,
            "solution": "def main():\n    res,car=map(long,raw_input().split())\n    k=[]\n    p=[]\n    for i in xrange(res):\n        p.append(raw_input())\n    \n    ms=set(p)\n    for i in ms:\n        for cer,ver in enumerate(i):\n            if ver==\"#\":\n                k.append(cer)\n    gs=set(k)\n    for i in gs:\n        if k.count(i)>1:\n            print \"No\"\n            exit()\n    print \"Yes\"\n                \n    \nif __name__ == '__main__':\n    main()"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvector<int> g[500];\nvector<int> rg[500];\nint n, m;\nstring s[500];\nint curc = 0;\nint color[500];\nint color2[500];\nset<int> c1[500];\nset<int> c2[500];\nvoid no() {\n  cout << \"No\\n\";\n  exit(0);\n}\nvoid yes() {\n  cout << \"Yes\\n\";\n  exit(0);\n}\nvoid dfs2(int j);\nvoid dfs(int i) {\n  c1[curc].insert(i);\n  color[i] = curc;\n  for (int j : g[i]) {\n    if (color2[j] && color2[j] != curc) no();\n    if (color2[j] == 0) {\n      color2[j] = curc;\n      dfs2(j);\n    }\n  }\n}\nvoid dfs2(int j) {\n  c2[curc].insert(j);\n  color2[j] = curc;\n  for (int i : rg[j]) {\n    if (color[i] && color[i] != curc) no();\n    if (color[i] == 0) {\n      color[i] = curc;\n      dfs(i);\n    }\n  }\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        g[i].push_back(j);\n        rg[j].push_back(i);\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    curc++;\n    if (!color[i]) dfs(i);\n  }\n  for (int j = 0; j < m; j++) {\n    curc++;\n    if (!color2[j]) dfs2(j);\n  }\n  for (int c = 1; c <= curc; c++) {\n    auto ii = c1[c];\n    auto jj = c2[c];\n    for (int i : ii) {\n      for (int j : jj) {\n        if (s[i][j] != '#') no();\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar g[55][55];\nvector<int> v[55];\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> g[i][j];\n      if (g[i][j] == '#') v[i].push_back(j);\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    int cnt = 0;\n    for (int j = 1; j <= n; j++) {\n      if (i == j) continue;\n      cnt = 0;\n      for (int x = 0; x < v[i].size(); x++) {\n        ::vector<int>::iterator it;\n        it = find(v[j].begin(), v[j].end(), v[i][x]);\n        if (it != v[j].end()) cnt++;\n      }\n      if (cnt == 0) continue;\n      if (cnt > 0 && v[j].size() != v[i].size()) {\n        return cout << \"No\", 0;\n      }\n      if (v[j].size() == v[i].size()) {\n        if (cnt != v[i].size()) {\n          return cout << \"No\", 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "//package com.kanari;\n\nimport java.io.*;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\n        int n = in.nextInt(), m = in.nextInt();\n        String[] map = new String[n];\n        for (int i = 0; i < n; ++i)\n            map[i] = in.nextToken();\n\n        DisjointSet d = new DisjointSet(n + m);\n\n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < m; ++j)\n                if (map[i].charAt(j) == '#')\n                    d.union(i, n + j);\n\n        boolean answer = true;\n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < m; ++j)\n                if (d.find(i) == d.find(n + j) && map[i].charAt(j) != '#')\n                    answer = false;\n\n        out.println(answer ? \"Yes\" : \"No\");\n        out.close();\n    }\n\n    public static class DisjointSet {\n        int[] parent;\n        int n;\n\n        DisjointSet(int n) {\n            parent = new int[n];\n            this.n = n;\n            for (int i = 0; i < n; ++i)\n                parent[i] = i;\n        }\n\n        int find(int x) {\n            return parent[x] == x ? x : (parent[x] = find(parent[x]));\n        }\n\n        void union(int x, int y) {\n            parent[find(x)] = find(y);\n        }\n    }\n\n    static class InputReader {\n        BufferedReader reader;\n        StringTokenizer tokenizer;\n\n        InputReader(InputStream in) {\n            reader = new BufferedReader(new InputStreamReader(in));\n            tokenizer = null;\n        }\n\n        String nextToken() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(nextToken());\n        }\n\n        long nextLong() {\n            return Long.parseLong(nextToken());\n        }\n\n        float nextFloat() {\n            return Float.parseFloat(nextToken());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(nextToken());\n        }\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cout.tie(NULL);\n  int n, m;\n  cin >> n >> m;\n  int A[n][m], row[n], col[m];\n  char c;\n  memset(row, 0, sizeof(row));\n  memset(col, 0, sizeof(col));\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> c;\n      if (c == '.')\n        A[i][j] = 0;\n      else\n        A[i][j] = 1;\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    if (row[i] == 0) {\n      for (int j = 0; j < m; ++j) {\n        if (A[i][j] == 1 && col[j]) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n      vector<int> X;\n      for (int j = i + 1; j < n; ++j) {\n        int ans = 1;\n        if (row[j]) continue;\n        for (int k = 0; k < m; ++k) {\n          if (A[i][k] != A[j][k]) {\n            ans = 0;\n            break;\n          }\n        }\n        if (ans == 1) X.push_back(j);\n      }\n      for (int j = 0; j < X.size(); ++j) row[X[j]] = 1;\n      for (int j = 0; j < m; ++j)\n        if (A[i][j]) col[j] = 1;\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  vector<string> mas(n);\n  for (int i = 0; i < n; ++i) {\n    cin >> mas[i];\n  }\n  for (int i = 0; i < m; ++i) {\n    string last = \"\";\n    for (int j = 0; j < n; ++j) {\n      if (mas[j][i] == '#') {\n        if (last == \"\") {\n          last = mas[j];\n        } else {\n          if (last != mas[j]) {\n            cout << \"No\" << endl;\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n       \n        OutputStream outputStream = System.out;\n        Scanner in = new Scanner( System.in);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(in, out);\n        out.close();\n    }\n    \n    \n    \n\n    static class Task {\n        \n        \n        \n        public void solve( Scanner in, PrintWriter out) {\n            \n            int ans=0,n,m;\n            n=in.nextInt();\n            m=in.nextInt();\n            in.nextLine();\n            int[] ni,nj;\n            char[][] s=new char[n][m];\n            for(int i=0;i<n;i++){\n                s[i]=in.nextLine().toCharArray();\n            }\n            int[] stan=new int[n];\n                int[] stam=new int[m];\n                \n                \n            for(int i=0;i<n;i++){\n                \n                \n                ni=new int[n];\n                nj=new int[m];\n                for(int j=0;j<m;j++){\n                    if(s[i][j]!='#'){\n                        continue;\n                    }\n                    if(s[i][j]=='#'){\n                        if(stam[j]==1||stan[i]==1){\n                             out.println(\"No\");\n                            return;\n                        }\n                        s[i][j]='g';\n                       ni[i]=1;\n                        for(int k=0;k<n;k++){\n                            if(s[k][j]!='#'){\n                        continue;\n                    }\n                            if(s[k][j]=='#'){\n                                ni[k]=1;\n                                if(stan[k]==1){\n                                     out.println(\"No\");\n                            return;\n                                }\n                                s[k][j]='g';\n                                }\n                               \n                            }\n                        \n                            \n                        nj[j]=1;\n                    }\n                     \n                       \n                }\n               \n                 for(int e=0;e<n;e++){\n                                if(ni[e]==1)\n                                stan[e]=1;\n                            }\n                              for(int e=0;e<m;e++){\n                                if(nj[e]==1)\n                                stam[e]=1;\n                            }\n                            \n                            \n                            for(int u=0;u<n;u++){\n                                if(ni[u]!=1)\n                                continue;\n                                for(int j=0;j<m;j++){\n                                    if(nj[j]==1){\n                                        if(s[u][j]=='.'){\n                                             out.println(\"No\");\n                                              return;\n                                        }\n                                    }\n                                }\n                            }\n                }\n            \n            \n        \n            out.println(\"Yes\");\n       \n             \n          \n          \n          \n          //fn end\n        }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    void merge(int arr[], int l, int m, int r)\n    {\n        \n        int n1 = m - l + 1;\n        int n2 = r - m;\n \n        \n        int L[] = new int [n1];\n        int R[] = new int [n2];\n \n      \n        for (int i=0; i<n1; ++i)\n            L[i] = arr[l + i];\n        for (int j=0; j<n2; ++j)\n            R[j] = arr[m + 1+ j];\n \n \n        \n        int i = 0, j = 0;\n \n     \n        int k = l;\n        while (i < n1 && j < n2)\n        {\n            if (L[i] <= R[j])\n            {\n                arr[k] = L[i];\n                i++;\n            }\n            else\n            {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n \n \n        while (i < n1)\n        {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n \n       \n        while (j < n2)\n        {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n \n  \n    void sort(int arr[], int l, int r)\n    {\n        if (l < r)\n        {\n           \n            int m = (l+r)/2;\n\n            sort(arr, l, m);\n            sort(arr , m+1, r);\n \n         \n            merge(arr, l, m, r);\n        }\n    \n\t\n\n}\n   \n        \n\n\n}"
        },
        {
            "language": 3,
            "solution": "def read_data():\n    n, m = map(int, input().strip().split())\n    a = []\n    for i in range(n):\n        line = list(input().strip())\n        for j in range(len(line)):\n            if line[j] == \".\":\n                line[j] = 0\n            else:\n                line[j] = 1\n        a.append(line)\n    return n, m, a\n\ndef get_step(i,j):\n    rows = []\n    cols = []\n    for k in range(m):\n        if a[i][k] == 1:\n            cols.append(k)\n            if k in usedc:\n                return \"No\"\n            else:\n                usedc.append(k)\n    for k in range(n):\n        if a[k][j] == 1:\n            rows.append(k)\n            if k in usedr:\n                return \"No\"\n            else:\n                usedr.append(k)\n    for row in rows:\n        for col in cols:\n            if a[row][col] == 0:\n                return \"No\"\n            else:\n                a[row][col] = 0\n    return \"Ok\"\n\ndef solve():\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                step = get_step(i,j)\n                if step == \"No\":\n                    return \"No\"\n    return \"Yes\"\n\nn, m, a = read_data()\nusedr = []\nusedc = []\nprint(solve())\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nmt19937 mt_rand(chrono::system_clock::now().time_since_epoch().count());\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int n, m;\n  cin >> n >> m;\n  vector<string> a(n);\n  vector<bool> need(m, false);\n  vector<bool> cov(m, false);\n  vector<int> cp(n, -1);\n  vector<vector<int> > g(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        need[j] = true;\n      }\n    }\n  }\n  int cc = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < i; j++) {\n      bool common = false;\n      for (int q = 0; q < m; q++) {\n        common |= (a[i][q] == a[j][q] && a[i][q] == '#');\n      }\n      if (common) {\n        cp[i] = cp[j];\n        break;\n      }\n    }\n    if (cp[i] == -1) {\n      cp[i] = cc++;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    g[cp[i]].push_back(i);\n  }\n  for (int i = 0; i < cc; i++) {\n    for (int j = 0; j < m; j++) {\n      bool cover = true;\n      for (int x : g[i]) {\n        if (a[x][j] == '.') {\n          cover = false;\n          break;\n        }\n      }\n      if (cover) {\n        for (int x : g[i]) {\n          a[x][j] = '.';\n        }\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        cout << \"No\\n\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint mysqrt(long long x) {\n  int l = 0, r = 1e9 + 1;\n  while (r - l > 1) {\n    int m = (l + r) / 2;\n    if (m * (long long)m <= x)\n      l = m;\n    else\n      r = m;\n  }\n  return l;\n}\nmt19937 rnd(1337);\nmt19937_64 rndll(12365);\nlong long AR = 19, BR = 13, CR = 23, XR = 228, YR = 322, MODR = 1e9 + 993;\nlong long myrand() {\n  long long ZR = (XR * AR + YR * BR + CR) % MODR;\n  XR = YR;\n  YR = ZR;\n  return ZR;\n}\nconst int Mod = 1e9 + 7;\nint bpow(int x, int y) {\n  if (y == 0) return 1;\n  if (y == 1) return x;\n  int ret = bpow(x, y >> 1);\n  ret = (ret * (long long)ret) % Mod;\n  if (y & 1) ret = (ret * (long long)x) % Mod;\n  return ret;\n}\nint bdiv(int x, int y) { return (x * (long long)bpow(y, Mod - 2)) % Mod; }\nvoid setmin(int &x, int y) { x = min(x, y); }\nvoid setmax(int &x, int y) { x = max(x, y); }\nvoid setmin(long long &x, long long y) { x = min(x, y); }\nvoid setmax(long long &x, long long y) { x = max(x, y); }\nint gcd(int a, int b) { return a ? gcd(b % a, a) : b; }\nconst long long llinf = 2e18 + 100;\nconst double eps = 1e-9;\nconst int maxn = 2e5 + 100, maxw = 1e6 + 100, inf = 2e9 + 100, sq = 300,\n          mod = 1e9 + 7, LG = 17;\nint n, m;\nchar a[50][50];\nint z(char c) { return c == '#'; }\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> m;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) cin >> a[i][j];\n  for (int i1 = 0; i1 < n; i1++)\n    for (int i2 = i1 + 1; i2 < n; i2++)\n      for (int j1 = 0; j1 < m; j1++)\n        for (int j2 = j1 + 1; j2 < m; j2++)\n          if (z(a[i1][j1]) + z(a[i1][j2]) + z(a[i2][j1]) + z(a[i2][j2]) == 3) {\n            cout << \"No\";\n            return 0;\n          }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long n, m;\nchar a[55][55];\nvector<vector<pair<long long, long long> > > e(55);\nlong long color[2505];\nstruct dsu {\n  long long par[2505];\n  dsu() {\n    for (long long i = 1; i <= 2505 - 5; i++) par[i] = i;\n  }\n  long long find(long long x) {\n    if (par[x] == x) return x;\n    return par[x] = find(par[x]);\n  }\n  void uni(long long x, long long y) {\n    x = find(x);\n    y = find(y);\n    if (x != y) par[x] = y;\n  }\n} d;\nsigned main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> m;\n  for (long long i = 1; i <= n; i++) {\n    for (long long j = 1; j <= m; j++) cin >> a[i][j];\n  }\n  for (long long i = 1; i <= n; i++) {\n    for (long long j = 1; j <= m; j++) {\n      for (long long k = j + 1; k <= m; k++) {\n        if (a[i][j] == '#' && a[i][k] == '#') {\n          d.uni(j, k);\n        }\n      }\n    }\n  }\n  for (long long i = 1; i <= m; i++) {\n    long long u = d.find(i);\n    for (long long j = 1; j <= n; j++) {\n      if (a[j][i] != a[j][u]) {\n        cout << \"No\" << '\\n';\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << '\\n';\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int>> mas(n, vector<int>(m, 0));\n  for (int i = 0; i < n; ++i) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < m; ++j) {\n      if (s[j] == '#')\n        mas[i][j] = 1;\n      else\n        mas[i][j] = 0;\n    }\n  }\n  vector<bool> rows(n, 0);\n  vector<bool> cols(m, 0);\n  vector<vector<int>> mas_cur(n, vector<int>(m, 0));\n  for (int i = 0; i < n; ++i) {\n    if (rows[i]) continue;\n    vector<int> cur;\n    for (int j = 0; j < m; ++j) {\n      if (mas[i][j]) {\n        if (cols[j]) {\n          cout << \"No\\n\";\n          return 0;\n        }\n        cur.push_back(j);\n      }\n    }\n    vector<int> cnt(100, 0);\n    set<int> q;\n    for (auto to : cur) q.insert(to);\n    set<int> a;\n    for (int j = 0; j < cur.size(); ++j) {\n      for (int k = 0; k < n; ++k) {\n        if (mas[k][cur[j]]) {\n          ++cnt[k];\n          a.insert(k);\n          if (rows[k]) {\n            cout << \"No\\n\";\n            return 0;\n          }\n        }\n      }\n    }\n    for (auto to : a) {\n      for (int j = 0; j < m; ++j) {\n        if (mas[to][j] && !q.count(j)) {\n          cout << \"No\\n\";\n          return 0;\n        }\n      }\n    }\n    for (auto to : cnt) {\n      if (to && to != cur.size()) {\n        cout << \"No\\n\";\n        return 0;\n      }\n    }\n    for (int j = 0; j < cur.size(); ++j) {\n      for (int k = 0; k < n; ++k) {\n        if (mas[k][cur[j]]) {\n          mas_cur[k][cur[j]] = 1;\n          rows[k] = 1;\n          cols[cur[j]] = 1;\n        }\n      }\n    }\n  }\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j)\n      if (mas[i][j] != mas_cur[i][j]) {\n        cout << \"No\\n\";\n        return 0;\n      }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        ProblemBMysticalMosaic solver = new ProblemBMysticalMosaic();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class ProblemBMysticalMosaic {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.readInt();\n            int m = in.readInt();\n            char[][] mat = new char[n][];\n            for (int i = 0; i < n; i++) mat[i] = in.readLine().toCharArray();\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    boolean allSame = true, fewSame = false;\n                    for (int k = 0; k < m; k++) {\n                        if (mat[i][k] != mat[j][k]) allSame = false;\n                        else if (mat[i][k] == '#') fewSame = true;\n                    }\n\n                    if (fewSame && !allSame) {\n                        out.println(\"No\");\n                        return;\n                    }\n                }\n            }\n            out.println(\"Yes\");\n\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numChars == -1)\n                throw new InputMismatchException();\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0)\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n\n        public int readInt() {\n            int c = read();\n            while (isSpaceChar(c))\n                c = read();\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9')\n                    throw new InputMismatchException();\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null)\n                return filter.isSpaceChar(c);\n            return isWhitespace(c);\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        private String readLine0() {\n            StringBuilder buf = new StringBuilder();\n            int c = read();\n            while (c != '\\n' && c != -1) {\n                if (c != '\\r')\n                    buf.appendCodePoint(c);\n                c = read();\n            }\n            return buf.toString();\n        }\n\n        public String readLine() {\n            String s = readLine0();\n            while (s.trim().length() == 0)\n                s = readLine0();\n            return s;\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar a[110][110];\nint bad1[110], bad2[110];\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; i++) scanf(\"%s\", a[i] + 1);\n  for (int i = 1; i <= n; i++) {\n    vector<int> box;\n    for (int j = 1; j <= m; j++) {\n      if (a[i][j] == '#') {\n        if (bad1[j]) {\n          puts(\"No\");\n          return 0;\n        }\n        box.push_back(j);\n        bad1[j] = 1;\n      }\n    }\n    if (box.size() == 0) continue;\n    vector<int> box2;\n    for (int j = 0; j < box.size(); j++) {\n      int x = box[j];\n      for (int k = 1; k <= n; k++) {\n        if (a[k][x] == '#') {\n          box2.push_back(k);\n        }\n      }\n    }\n    sort(box2.begin(), box2.end());\n    box2.resize(unique(box2.begin(), box2.end()) - box2.begin());\n    for (int j = 0; j < box2.size(); j++) {\n      if (bad2[box2[j]]) {\n        puts(\"No\");\n        return 0;\n      }\n      bad2[box2[j]] = 1;\n    }\n    for (int j = 0; j < box2.size(); j++) {\n      for (int k = 0; k < box.size(); k++) {\n        int x = box2[j];\n        int y = box[k];\n        if (a[x][y] != '#') {\n          puts(\"No\");\n          return 0;\n        } else {\n          a[x][y] = '.';\n        }\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (a[i][j] != '.') {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 255;\nint parent[N];\nint ra[N];\nvoid make_set(int v) {\n  parent[v] = v;\n  ra[v] = 0;\n}\nint find_set(int v) {\n  if (v == parent[v]) return v;\n  return parent[v] = find_set(parent[v]);\n}\nvoid union_sets(int a, int b) {\n  a = find_set(a);\n  b = find_set(b);\n  if (a != b) {\n    if (ra[a] < ra[b]) swap(a, b);\n    parent[b] = a;\n    if (ra[a] == ra[b]) ++ra[a];\n  }\n}\nstring s[N];\nint main() {\n  cout.sync_with_stdio(false);\n  cin.tie(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  for (int i = 0; i < n; i++) make_set(i);\n  for (int j = 0; j < m; j++) make_set(100 + j);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        union_sets(i, 100 + j);\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#' && find_set(i) != find_set(100 + j)) {\n        cout << \"No\";\n        return 0;\n      }\n      if (s[i][j] != '#' && find_set(i) == find_set(100 + j)) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e2 + 5;\nint dp[N][N];\nint n, m;\nint dx[] = {1, 0, -1, 0};\nint dy[] = {0, 1, 0, -1};\nbool ck(int x, int y) {\n  for (int i = 0; i < 4; i++) {\n    int nx = x + dx[i];\n    int ny = y + dy[i];\n    if (dp[nx][ny]) return true;\n  }\n  return false;\n}\nbool ck1(int x, int y) {\n  for (int i = 1; i <= m; i++) {\n    if (dp[x][i] != dp[y][i]) {\n      return false;\n    }\n  }\n  return true;\n}\nbool ck2(int x, int y) {\n  for (int i = 1; i <= m; i++) {\n    if (dp[x][i] and dp[y][i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n  cin >> n >> m;\n  string s[n];\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n    for (int j = 1; j <= m; j++) {\n      if (s[i][j - 1] == '.')\n        dp[i + 1][j] = 0;\n      else\n        dp[i + 1][j] = 1;\n    }\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = i + 1; j <= n; j++) {\n      if (!ck1(i, j) and !ck2(i, j)) {\n        cout << \"NO\" << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"YES\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  unsigned long long a[64] = {};\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      unsigned long long c = getchar() == '#' ? 1ull : 0ull;\n      a[i] |= (c << j);\n    }\n    getchar();\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n      bool all_same = a[i] == a[j];\n      bool no_intersect = (a[i] & a[j]) == 0;\n      if (!all_same && !no_intersect) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long int MOD = 1e9 + 7;\nsigned main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  long long int n, m;\n  cin >> n >> m;\n  char a[n][m];\n  for (long long int i = 0; i < n; i++) {\n    for (long long int j = 0; j < m; j++) {\n      cin >> a[i][j];\n    }\n  }\n  long long int poss = true;\n  for (long long int i = 0; i < n; i++) {\n    vector<long long int> vec;\n    for (long long int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        vec.push_back(j);\n      }\n    }\n    if (!vec.empty()) {\n      char temp[n];\n      for (long long int k = 0; k < n; k++) {\n        temp[k] = a[k][vec[0]];\n      }\n      for (long long int j : vec) {\n        for (long long int k = 0; k < n; k++) {\n          if (temp[k] != a[k][j]) {\n            poss = false;\n            cout << \"No\" << endl;\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstring str[100];\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> str[i];\n  }\n  bool flg = true;\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      string s1 = str[i];\n      string s2 = str[j];\n      if (s1 == s2) continue;\n      for (int k = 0; k < m; k++) {\n        if (s1[k] == '#' && s2[k] == '#') flg = false;\n      }\n    }\n  }\n  if (flg)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.util.*;\n\nimport static java.lang.Long.max;\nimport static java.lang.Long.toHexString;\nimport static java.lang.Math.abs;\nimport static java.lang.Math.sin;\n\n\npublic class B {\n\n\n    public static void main(String[] args) {\n\n        MyScanner in = new MyScanner();\n        int sizeI = in.nextInt();\n        int sizeJ = in.nextInt();\n\n        String[] s = new String[sizeI];\n        for(int i=0;i<sizeI;++i){\n            s[i] = in.next();\n        }\n\n        for(int i1=0;i1<sizeI;++i1){\n            for(int i2=0;i2<sizeI;++i2){\n                for(int j=0;j<sizeJ;++j){\n                    if(s[i1].charAt(j)=='#' && s[i2].charAt(j)=='#'){\n                        if(!s[i1].equals(s[i2])){\n                            System.out.println(\"No\");\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        for(int j1=0;j1<sizeJ;++j1){\n            for(int j2=0;j2<sizeJ;++j2){\n                for(int i=0;i<sizeI;++i){\n                    if(s[i].charAt(j1)=='#' && s[i].charAt(j2)=='#'){\n                        String c1 = col(s,j1);\n                        String c2 = col(s,j2);\n                        if(!c1.equals(c2)){\n                            System.out.println(\"No\");\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        System.out.println(\"Yes\");\n\n    }\n\n    static String col(String[] s, int colIndex){\n        StringBuffer col = new StringBuffer();\n        for(int i=0;i<s.length;++i){\n            col.append(s[i].charAt(colIndex));\n        }\n        return col.toString();\n    }\n\n\n\n\n    // -----------MyScanner class for faster input----------\n    public static class MyScanner {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public MyScanner() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        String nextLine() {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n\n    }\n    // --------------------------------------------------------\n\n\n}\n"
        },
        {
            "language": 3,
            "solution": "def table(n, m, lst):\n    for i in range(n):\n        for j in range(n):\n            if lst[i] != lst[j]:\n                for k in range(m):\n                    if lst[i][k] == lst[j][k] == \"#\":\n                        return \"No\"\n    return \"Yes\"\n\n\nN, M = [int(i) for i in input().split()]\nb = list()\nfor i in range(N):\n    z = list(input())\n    b.append(z)\nprint(table(N, M, b))\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar s[55][55];\nset<int> r, c;\nvoid dfs(int x, int y) {\n  if (c.count(x) && r.count(y)) return;\n  c.insert(x);\n  r.insert(y);\n  for (int i = 0; i < n; ++i)\n    if (s[i][x] == '#') dfs(x, i);\n  for (int j = 0; j < m; ++j)\n    if (s[y][j] == '#') dfs(j, y);\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) cin >> s[i];\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (s[i][j] == '#') {\n        r.clear();\n        c.clear();\n        dfs(j, i);\n        for (int y : r)\n          for (int x : c)\n            if (s[y][x] != '#')\n              cout << \"No\" << endl, exit(0);\n            else\n              s[y][x] = '.';\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring second[100];\nint x[100], y[100];\nvector<int> a, b;\nbool u[100][100];\nbool uu[100][100];\nbool ux[100], uy[100];\nint n, m;\nvoid dfs(int x, int y) {\n  ux[x] = uy[y] = true;\n  u[x][y] = true;\n  for (int i = 0; i < n; i++)\n    if (second[i][y] == '#' && !u[i][y]) dfs(i, y);\n  for (int j = 0; j < m; j++)\n    if (second[x][j] == '#' && !u[x][j]) dfs(x, j);\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> second[i];\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++)\n      if (second[i][j] == '#' && !u[i][j]) {\n        for (int i = 0; i < n; i++) ux[i] = false;\n        for (int i = 0; i < m; i++) uy[i] = false;\n        dfs(i, j);\n        a.clear();\n        b.clear();\n        for (int i = 0; i < n; i++)\n          if (ux[i]) a.push_back(i);\n        for (int j = 0; j < m; j++)\n          if (uy[j]) b.push_back(j);\n        for (int i = 0; i < n; i++)\n          for (int j = 0; j < m; j++) uu[i][j] = false;\n        for (int i = 0; i < a.size(); i++)\n          for (int j = 0; j < b.size(); j++) {\n            uu[a[i]][b[j]] = true;\n          }\n        for (int i = 0; i < n; i++)\n          for (int j = 0; j < m; j++) {\n            if (ux[i] && second[i][j] == '#' && !uu[i][j]) {\n              cout << \"No\";\n              return 0;\n            }\n            if (second[i][j] == '.' && uu[i][j]) {\n              cout << \"No\";\n              return 0;\n            }\n          }\n      }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class Main {\n        static int n , m ; \n        static String g[][] ;\n    public static void main(String[] args) {\n        FastReader read = new FastReader();\n         n  =read.nextInt() ; \n         m = read.nextInt() ; \n        g = new String[n][m];\n        for (int i = 0; i < n; i++) {\n            String s = read.nextLine(); \n            g[i] = s.split(\"\");\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                  if(g[i][j].equals(\"#\")){\n                      if(!check(i,j))\n                      {\n                          System.out.println(\"No\");\n                          return;\n                      }\n                      else {\n                          break;\n                      }\n                  }\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n    static boolean check( int i,int j){\n        boolean idxR[] = new boolean[m];\n  \n        for (int c = j; c < m; c++) {\n             if(g[i][c].equals(\"#\")){\n                 idxR[c] = true;\n             }\n        }\n        \n        for (int k = j; k < m; k++) {\n            if(idxR[k]){\n                for (int l = i; l < n; l++) {\n                    if(g[l][k].equals(\"#\")){\n                        if (!checkRow(idxR, l))\n                            return false; \n                    }\n                }\n            }\n        }\n        return true ;\n    }\n    \n    static boolean checkRow(boolean idxR[] , int r){\n        for (int i = 0; i < m; i++) {\n            if(g[r][i].equals(\"#\") && idxR[i] == false ){\n                return false; \n            }\n            else if (g[r][i].equals(\".\") && idxR[i]){\n                return false; \n            } \n                \n        }\n        return true; \n    }\n}\n\n\nclass FastReader {\n\n    BufferedReader br;\n    StringTokenizer st;\n\n    public FastReader() {\n        br = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    String next() {\n        while (st == null || !st.hasMoreElements()) {\n            try {\n                st = new StringTokenizer(br.readLine());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return st.nextToken();\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String nextLine() {\n        String str = \"\";\n        try {\n            str = br.readLine();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<int> used(m, 0);\n  vector<vector<int>> a(m);\n  for (int i = 0; i < n; ++i) {\n    string s;\n    cin >> s;\n    vector<int> cur;\n    for (int j = 0; j < m; ++j) {\n      if (s[j] == '#') {\n        cur.push_back(j);\n      }\n    }\n    for (auto x : cur) {\n      if (used[x]) {\n        if (a[x] != cur) {\n          cout << \"No\";\n          return 0;\n        }\n      } else {\n        used[x] = 1;\n        a[x] = cur;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class B {\n\n    void solve() throws IOException {\n        in = new InputReader(\"__std\");\n        out = new OutputWriter(\"__std\");\n\n        int n = in.readInt();\n        int m = in.readInt();\n        char[][] s = new char[n][];\n        for (int i = 0; i < n; ++i) {\n            s[i] = in.readToken().toCharArray();\n        }\n        boolean can = true;\n        int k = 0;\n        int[] row = new int[n];\n        int[] col = new int[m];\n        for (int i = 0; i < n && can; ++i) {\n            for (int j = 0; j < m && can; ++j) {\n                if (s[i][j] == '#') {\n                    ++k;\n                    for (int jj = j; jj < m && can; ++jj) {\n                        if (s[i][jj] == '#') {\n                            for (int ii = i; ii < n && can; ++ii) {\n                                if (s[ii][jj] == '#') {\n                                    can = (row[ii] == 0 || row[ii] == k) && (col[jj] == 0 || col[jj] == k);\n                                    row[ii] = col[jj] = k;\n                                }\n                            }\n                        }\n                    }\n                    for (int ii = 0; ii < n && can; ++ii) {\n                        if (row[ii] == k) {\n                            for (int jj = 0; jj < m && can; ++jj) {\n                                if (col[jj] == k) {\n                                    can = s[ii][jj] == '#';\n                                    s[ii][jj] = '.';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        out.println(can ? \"Yes\" : \"No\");\n\n        exit();\n    }\n\n    void exit() {\n        out.close();\n        //System.err.println((System.currentTimeMillis() - startTime) + \" ms\");\n        System.exit(0);\n    }\n\n    InputReader in;\n    OutputWriter out;\n\n    //long startTime = System.currentTimeMillis();\n\n    public static void main(String[] args) throws IOException {\n        new B().solve();\n    }\n\n    class InputReader {\n\n        private InputStream stream;\n\n        private byte[] buffer = new byte[1024];\n        private int pos, len;\n\n        private int cur;\n\n        private StringBuilder sb = new StringBuilder(32);\n\n        InputReader(String name) throws IOException {\n            if (name.equals(\"__std\")) {\n                stream = System.in;\n            } else {\n                stream = new FileInputStream(name);\n            }\n            cur = read();\n        }\n\n        private int read() throws IOException {\n            if (len == -1) {\n                throw new EOFException();\n            }\n            if (pos >= len) {\n                pos = 0;\n                len = stream.read(buffer);\n                if (len == -1) return -1;\n            }\n            return buffer[pos++] & 0xff;\n        }\n\n        boolean whitespace() {\n            return cur == ' ' || cur == '\\t' || cur == '\\r' || cur == '\\n' || cur == -1;\n        }\n\n        boolean eol() {\n            return cur == '\\r' || cur == '\\n' || cur == -1;\n        }\n\n        boolean eof() {\n            return cur == -1;\n        }\n\n        byte readByte() throws IOException {\n            if (eof()) {\n                throw new EOFException();\n            }\n            byte res = (byte) cur;\n            cur = read();\n            return res;\n        }\n\n        char readChar() throws IOException {\n            if (eof()) {\n                throw new EOFException();\n            }\n            char res = (char) cur;\n            cur = read();\n            return res;\n        }\n\n        int readInt() throws IOException {\n            if (eof()) {\n                throw new EOFException();\n            }\n            while (whitespace()) {\n                cur = read();\n            }\n            if (eof()) {\n                throw new EOFException();\n            }\n            int sign = 1;\n            if (cur == '-') {\n                sign = -1;\n                cur = read();\n                if (cur < '0' || cur > '9') {\n                    throw new NumberFormatException();\n                }\n            }\n            int res = 0;\n            while (!whitespace()) {\n                if (cur < '0' || cur > '9') {\n                    throw new NumberFormatException();\n                }\n                res *= 10;\n                res += cur - '0';\n                cur = read();\n            }\n            return res * sign;\n        }\n\n        long readLong() throws IOException {\n            if (eof()) {\n                throw new EOFException();\n            }\n            while (whitespace()) {\n                cur = read();\n            }\n            if (eof()) {\n                throw new EOFException();\n            }\n            int sign = 1;\n            if (cur == '-') {\n                sign = -1;\n                cur = read();\n                if (cur < '0' || cur > '9') {\n                    throw new NumberFormatException();\n                }\n            }\n            long res = 0;\n            while (!whitespace()) {\n                if (cur < '0' || cur > '9') {\n                    throw new NumberFormatException();\n                }\n                res *= 10;\n                res += cur - '0';\n                cur = read();\n            }\n            return res * sign;\n        }\n\n        double readDouble() throws IOException {\n            return Double.parseDouble(readToken());\n        }\n\n        String readToken() throws IOException {\n            if (eof()) {\n                throw new EOFException();\n            }\n            while (whitespace()) {\n                cur = read();\n            }\n            if (eof()) {\n                throw new EOFException();\n            }\n            sb.setLength(0);\n            while (!whitespace()) {\n                sb.append((char) cur);\n                cur = read();\n            }\n            return sb.toString();\n        }\n\n        String readLine() throws IOException {\n            if (eof()) {\n                throw new EOFException();\n            }\n            sb.setLength(0);\n            while (!eol()) {\n                sb.append((char) cur);\n                cur = read();\n            }\n            if (cur == '\\r') {\n                cur = read();\n            }\n            if (cur == '\\n') {\n                cur = read();\n            }\n            return sb.toString();\n        }\n    }\n\n    class OutputWriter {\n\n        private PrintWriter writer;\n\n        OutputWriter(String name) throws IOException {\n            if (name.equals(\"__std\")) {\n                writer = new PrintWriter(System.out);\n            } else {\n                writer = new PrintWriter(name);\n            }\n        }\n\n        void print(String format, Object ... args) {\n            writer.print(new Formatter(Locale.US).format(format, args));\n        }\n\n        void println(String format, Object ... args) {\n            writer.println(new Formatter(Locale.US).format(format, args));\n        }\n\n        void print(Object value) {\n            writer.print(value);\n        }\n\n        void println(Object value) {\n            writer.println(value);\n        }\n\n        void println() {\n            writer.println();\n        }\n\n        void printArray(int[] a) {\n            boolean first = true;\n            for (int v : a) {\n                if (!first) {\n                    writer.print(' ');\n                } else {\n                    first = false;\n                }\n                writer.print(v);\n            }\n            writer.println();\n        }\n\n        void printArray(int[][] a) {\n            for (int[] v : a) {\n                printArray(v);\n            }\n        }\n\n        void flush() {\n            writer.flush();\n        }\n\n        void close() {\n            writer.close();\n        }\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nlong long a[60];\nchar s[60];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; ++i) {\n    scanf(\"%s\", s + 1);\n    long long res = 0;\n    for (int j = 1; j <= m; ++j)\n      if (s[j] == '#') res += (1ll << j - 1);\n    a[i] = res;\n  }\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1 + i; j <= n; ++j)\n      if ((a[i] != a[j]) && (a[i] & a[j])) {\n        puts(\"No\");\n        return 0;\n      }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Created on 5/11/2017.\n */\npublic class B {\n    Scanner sc;\n    PrintWriter pw;\n    \n    void run() throws FileNotFoundException {\n        // sc = new Scanner(new File(\"A.txt\"));\n        sc = new Scanner(System.in);\n        pw = new PrintWriter(System.out);\n        \n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        sc.nextLine();\n        String[] s = new String[n];\n\n        for (int i = 0; i < n; i++) {\n            s[i] = sc.nextLine();\n        }\n\n        boolean ok = true;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int inters = 0;\n                int ni = 0;\n                int nj = 0;\n                for (int k = 0; k < m; k++) {\n                    if (s[i].charAt(k) == '#') {\n                        if (s[j].charAt(k) == '#') {\n                            inters++;\n                        }\n                        ni += 1;\n                    }\n                    if (s[j].charAt(k) == '#') {\n                        nj += 1;\n                    }\n                }\n\n                if (inters != 0) {\n                    if (ni != nj || ni != inters) {\n                        pw.println(\"No\");\n                        pw.close();\n                        return;\n                    }\n                }\n            }\n        }\n\n        pw.println(\"Yes\");\n        pw.close();\n        return;\n    }\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        B a = new B();\n        a.run();\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 3e5 + 228;\nconst long long md = 1e9 + 7;\nbool us[100][100];\nint main(int argc, char** argv) {\n  ios_base::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  set<pair<int, int> > pts;\n  for (int i = 0; i < n; i++) {\n    string str;\n    cin >> str;\n    for (int j = 0; j < m; j++) {\n      if (str[j] == '#') {\n        pts.insert({i, j});\n      }\n    }\n  }\n  while (pts.size()) {\n    pair<int, int> pt = *pts.begin();\n    queue<pair<int, int> > q;\n    q.push(pt);\n    set<int> xs;\n    set<int> ys;\n    while (!q.empty()) {\n      pair<int, int> pt = q.front();\n      q.pop();\n      for (auto e : pts) {\n        if (us[e.first][e.second]) continue;\n        if (e.first != pt.first && e.second != pt.second) continue;\n        us[e.first][e.second] = 1;\n        xs.insert(e.first);\n        ys.insert(e.second);\n        q.push(e);\n      }\n    }\n    for (int i : xs) {\n      for (int j : ys) {\n        if (pts.find({i, j}) != pts.end()) {\n          pts.erase({i, j});\n        } else {\n          cout << \"No\\n\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "\nn, m = map( int, input().split() )\n\nM = []\nfor i in range(n):\n\tM.append(input())\n\nAdj = [[] for i in range(n+m)]\n\nfor i in range(n):\n\tfor j in range(m):\n\t\tif M[i][j] == '#':\n\t\t\tAdj[i].append(n+j)\n\t\t\tAdj[n+j].append(i)\n\np = [-1]*(n+m)\ncomp = []\n\nanswer = 'Yes'\nfor i in range(n+m):\n\tif p[i] != -1:\n\t\tcontinue\n\n\tL = [i]\n\tcomp.append([])\n\n\tnumEdges = 0\n\tnumA = 0\n\tnumB = 0\n\twhile L:\n\t\tv = L.pop()\n\t\tcomp[-1].append((v, 'A') if v < n else (v-n, 'B'))\n\t\tif v < n:\n\t\t\tnumA += 1\n\t\telse:\n\t\t\tnumB += 1\n\n\t\tfor u in Adj[v]:\n\t\t\tnumEdges += 1\n\t\t\tif p[u] == -1 and u != i:\n\t\t\t\tp[u] = v\n\t\t\t\tL.append(u)\n\n\t#print(comp[-1], numA, numB, numEdges/2)\n\tif numEdges//2 != numA*numB:\n\t\tanswer = 'No'\n\nprint(answer)\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long MOD = 1000000007;\nconst long long INF = 1000000007ll * 1000000007ll;\nconst long long N = 300002;\nconst long long logN = 20;\nconst long double PI = acos(-1);\nconst long long HashPrime = 31;\ninline void No() { puts(\"No\"); }\ninline void Yes() { puts(\"Yes\"); }\nstring s[52];\nstring c[52];\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    cin >> s[i];\n    for (int j = 0; j < m; ++j) {\n      c[j] += s[i][j];\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    string str = \"\";\n    for (int j = 0; j < m; ++j) {\n      if (s[i][j] == '#') {\n        if (str.empty()) {\n          str = c[j];\n        }\n        if (str != c[j]) {\n          No();\n          return;\n        }\n      }\n    }\n    for (int j = 0; j < str.size(); ++j) {\n      if (str[j] == '#') {\n        if (s[j] != s[i]) {\n          No();\n          return;\n        }\n      }\n    }\n  }\n  Yes();\n}\nint main() {\n  long long t = 1;\n  while (t--) {\n    solve();\n  }\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "import math,sys,bisect,heapq\nfrom collections import defaultdict,Counter,deque\nfrom itertools import groupby,accumulate\n#sys.setrecursionlimit(200000000)\ninput = iter(sys.stdin.buffer.read().decode().splitlines()).__next__\nilele = lambda: map(int,input().split())\nalele = lambda: list(map(int, input().split()))\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n#MOD = 1000000000 + 7\ndef Y(c):  print([\"NO\",\"YES\"][c])\ndef y(c):  print([\"no\",\"yes\"][c])\ndef Yy(c):  print([\"No\",\"Yes\"][c])\n    \nn,m = ilele()\nA = []\nfor i in range(n):\n    s = input()\n    B = set()\n    for j in range(m):\n        if s[j] == \"#\": B.add(j)\n    A.append(B)\nf = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        if A[i] != A[j] and len(A[i].intersection(A[j])) != 0:\n            Yy(0)\n            f = 1;break\n    if f==1:    break\nif f==0:    Yy(1)"
        },
        {
            "language": 1,
            "solution": "def do(v):\n    if v ==\".\":\n        return 0\n    else:\n        return 1\n\nmat = []\nn,m = map(int,raw_input().split(\" \"))\nfor i in range(n):\n    mat.append(map(do,raw_input()))\n\nrows = {}\ncols = {}\nflag = True\nfor i in range(n):\n    tmp = []\n    for j in range(m):\n        if mat[i][j] == 1:\n            tmp.append(j)\n    for v in tmp:\n        if not cols.has_key(v):\n            cols[v] = tmp\n        else:\n            if cols[v]!= tmp:\n                flag = False\n\nfor j in range(m):\n    tmp = []\n    for i in range(n):\n        if mat[i][j] == 1:\n            tmp.append(j)\n    for v in tmp:\n        if not rows.has_key(v):\n            rows[v] = tmp\n        else:\n            if rows[v]!= tmp:\n                flag = False\n\n\n\nif flag:\n    print \"Yes\"\nelse:\n    print \"No\"\n\n\t  \t\t\t\t  \t   \t\t  \t\t\t \t  \t    \t\t"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n  static int T;\n  static int n, m;\n  static char[][] mat = new char[51][51];\n  static long[] bitset = new long[51];\n\n  public static void main(String[] args) {\n    FastInput fi = new FastInput(System.in);\n//    BufferedWriter writer = new BufferedWriter(new FileWriter(\"/Users/adityavivek/file.txt\"));\n    n = fi.nextInt();\n    m = fi.nextInt();\n\n    for(int i = 1; i<=n; i++) {\n      String s = fi.nextString();\n      s = '\\0'+s;\n      mat[i] = s.toCharArray();\n    }\n\n    markBits();\n    if (check()) {\n      System.out.println(\"Yes\");\n    } else {\n      System.out.println(\"No\");\n    }\n\n  }\n\n  static void markBits() {\n    for(int i = 1; i<=n; i++) {\n      for(int j = 1; j<=m; j++) {\n        if(mat[i][j] == '#') {\n          bitset[i] = bitset[i] | (1L<<(j-1));\n        }\n      }\n    }\n  }\n\n  static boolean check() {\n    for(int i = 1; i<=n; i++) {\n      for(int j = 1; j<=n; j++) {\n        if(i == j)\n          continue;\n\n        if(bitset[i] != bitset[j] && ((bitset[i] & bitset[j]) != 0))\n          return false;\n        else continue;\n      }\n    }\n    return true;\n  }\n\n  private static class FastInput {\n\n    BufferedReader reader;\n    StringTokenizer st;\n\n    public FastInput(InputStream inputStream) {\n      reader = new BufferedReader(new InputStreamReader(inputStream), 32768);\n    }\n\n    String nextString() {\n      while(st == null || !st.hasMoreTokens()) {\n        try {\n          st = new StringTokenizer(reader.readLine());\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n      return st.nextToken();\n    }\n\n    int nextInt() {\n      return Integer.parseInt(nextString());\n    }\n\n    long nextLong() {\n      return Long.parseLong(nextString());\n    }\n  }\n\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m = map(int, input().split())\n\nx = []\nfor i in range(n):\n    l = list(input())\n    x.append(l)\n\nfor i in range(n):\n    for j in range(n):\n        if x[i] != x[j]:\n            for z in range(m):\n                if x[i][z] == x[j][z] == '#':\n                    print('No')\n                    exit()\n\nprint('Yes')"
        },
        {
            "language": 3,
            "solution": "from queue import Queue\nglobal a, element\n\ndef coin(st):\n    global element\n    s = set()\n    if not stroka[st]:\n        for i in stStroka[st]:\n            if not stolbic[i]:\n                for j in stStolbic[i]:\n                    if not stroka[j]:\n                        if test(st, j):\n                            s.add(j)\n                            element -=1\n            stolbic[i] = True\n    for k in s:\n        stroka[k] = True\n    return\n\ndef test(st, j):\n    if st == j:\n        return True\n    for i in stStroka[st]:\n        if not (i in stStroka[j]):\n            return False\n    else:\n        return True\n        \n\nn, m = list(map(int, input().split()))\nstStolbic = {i:set() for i in range(1, m + 1)}\nstStroka = {i:set() for i in range(1, n + 1)}\nelement = 0\n\nstroka = [False]*(n+1)\nstolbic = [False]*(m+1)\nfor i in range(1,n+1):\n    string = input()\n    for j in range(len(string)):\n        if string[j] == '#':\n            element += 1\n            stStroka[i].add(j+1)\n            stStolbic[j+1].add(i)\n\n\n\nfor i in range(1, n+1):\n    if not stroka[i]:\n        coin(i)\nif element == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MaxN = 1e2 + 15;\nconst int MOD = 1e9 + 7;\nconst long long INF = 1e9 * 1ll * 1e9;\nchar a[MaxN][MaxN];\nchar b[MaxN][MaxN];\nint used1[MaxN];\nint used2[MaxN];\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= m; ++j) {\n      cin >> a[i][j];\n      b[i][j] = a[i][j];\n    }\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= m; ++j)\n      if (b[i][j] == '#') {\n        vector<int> v1, v2;\n        int k = 1;\n        used1[i] = 1;\n        while (true) {\n          if (k & 1) {\n            ++k;\n            bool OK = true;\n            for (int i = 1; i <= n; ++i)\n              if (used1[i] == 1) {\n                OK = false;\n                used1[i] = 2;\n                for (int j = 1; j <= m; ++j)\n                  if (b[i][j] == '#' && used2[j] != 2) used2[j] = 1;\n              }\n            if (OK) break;\n          } else {\n            ++k;\n            bool OK = true;\n            for (int j = 1; j <= m; ++j)\n              if (used2[j] == 1) {\n                OK = false;\n                used2[j] = 2;\n                for (int i = 1; i <= n; ++i)\n                  if (b[i][j] == '#' && used1[i] != 2) used1[i] = 1;\n              }\n            if (OK) break;\n          }\n        }\n        for (int i = 1; i <= n; ++i)\n          for (int j = 1; j <= m; ++j) {\n            if (b[i][j] == '.') {\n              if (used1[i] && used2[j]) return cout << \"No\\n\", 0;\n            } else if (used1[i] && used2[j])\n              b[i][j] = '.';\n          }\n        for (int i = 1; i <= n; ++i) used1[i] = 0;\n        for (int j = 1; j <= m; ++j) used2[j] = 0;\n      }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 54;\nint n, m;\nstring a[N];\nvoid read() {\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    cin >> a[i];\n  }\n}\nbool lookfor(string s, int pos) {\n  for (int i = 0; i < n; ++i) {\n    if (a[i][pos] == '#' && s != a[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nbool check(int k) {\n  for (int i = 0; i < m; ++i) {\n    if (a[k][i] == '#') {\n      bool isIt = lookfor(a[k], i);\n      if (!isIt) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvoid solve() {\n  for (int i = 0; i < n; ++i) {\n    if (!check(i)) {\n      cout << \"No\";\n      return;\n    }\n  }\n  cout << \"Yes\";\n}\nint main() {\n  read();\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst int MAXINT = 2147483640;\nconst long long MAXLL = 9223372036854775800LL;\nconst long long MAXN = 1123456;\nusing namespace std;\nchar c[100][100];\nbool used[MAXN];\nvector<int> take;\nbool f[MAXN];\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) cin >> c[i][j];\n  }\n  for (int i = 1; i <= n; ++i)\n    if (!f[i]) {\n      f[i] = 1;\n      for (int j = 1; j <= m; ++j) used[j] = 0;\n      for (int j = 1; j <= m; ++j)\n        if (c[i][j] == '#') used[j] = 1;\n      for (int k = i + 1; k <= n; ++k) {\n        bool flag = 0;\n        for (int j = 1; j <= m; ++j)\n          if (c[k][j] == '#' && used[j]) {\n            flag = 1;\n            break;\n          }\n        if (flag) {\n          f[k] = 1;\n          for (int j = 1; j <= m; ++j) {\n            if (c[k][j] == '#' && !used[j]) {\n              cout << \"No\" << '\\n';\n              return 0;\n            }\n            if (c[k][j] == '.' && used[j]) {\n              cout << \"No\" << '\\n';\n              return 0;\n            }\n          }\n        }\n      }\n    }\n  cout << \"Yes\" << '\\n';\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nnum = []\nused = []\nusedstr = [0] * n\nfl = True\nusedstolb = [0] * m\nfor i in range(n):\n    num.append(input())\nfor i in range(n):\n    if usedstr[i] == 0:\n        stroki = []\n        stolbi = []\n        for j in range(m):\n            if num[i][j] == '#':\n                stolbi.append(j)\n                for x in range(n):\n                    if num[x][j] == '#' and x not in stroki:\n                        stroki.append(x)\n        for x in range(len(stroki)):\n            for y in range(m):\n                if num[stroki[x]][y] == '#' and y not in stolbi:\n                    stolbi.append(y)\n                        \n        for x in range(len(stolbi)):\n            if usedstolb[stolbi[x]]:\n                fl = False\n                break\n            else:\n                usedstolb[stolbi[x]] = 1\n        for x in range(len(stroki)):\n            if usedstr[stroki[x]]:\n                fl = False\n                break\n            else:\n                usedstr[stroki[x]] = 1\n        for x in range(len(stroki)):\n            for y in range(len(stolbi)):\n                if num[stroki[x]][stolbi[y]] == '.':\n                    fl = False\n                    break\n        if not fl:\n            break\nif fl:\n    print('Yes')\nelse:\n    print('No')\n            \n            \n            "
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvector<long long> a;\nint main() {\n  long long n, m;\n  cin >> n >> m;\n  vector<string> a;\n  for (long long i = 0; i < n; i++) {\n    string te;\n    cin >> te;\n    long long p = a.size();\n    bool f = 1;\n    for (long long j = 0; j < p; j++) {\n      if (te == a[j]) {\n        f = 0;\n      }\n    }\n    if (f) {\n      a.push_back(te);\n    }\n  }\n  long long p = a.size();\n  for (long long i = 0; i < p - 1; i++) {\n    for (long long j = i + 1; j < p; j++) {\n      for (long long k = 0; k < m; k++) {\n        if (a[i][k] == a[j][k] && a[i][k] == '#') {\n          cout << \"No\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string arr[50];\n  for (int i = 0; i < n; i++) {\n    cin >> arr[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      if (arr[i] != arr[j]) {\n        for (int k = 0; k < m; k++) {\n          if (arr[i][k] == '#' && arr[j][k] == '#') {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint pw(int a, int n) {\n  if (n == 0) return 1;\n  if (n == 1) return a;\n  int c = pw(a, n / 2);\n  return c * c * (1 + (a - 1) * (n & 1));\n}\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<bool>> a(n);\n  for (int i = 0; i < n; i++) {\n    vector<bool> b(m);\n    for (int j = 0; j < m; j++) {\n      char x;\n      cin >> x;\n      b[j] = (x == '#');\n    }\n    a[i] = b;\n  }\n  for (int j = 0; j < m; j++) {\n    vector<int> b;\n    for (int k = 0; k < n; k++)\n      if (a[k][j]) b.push_back(k);\n    for (int k = 0; k < int(b.size()) - 1; k++) {\n      if (a[b[k]] != a[b[k + 1]]) {\n        cout << \"NO\";\n        return 0;\n      }\n    }\n  }\n  cout << \"YES\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool row[52], col[52];\nbool visited[52][52];\nint32_t main() {\n  long long int n, m;\n  scanf(\"%lld\", &n);\n  scanf(\"%lld\", &m);\n  string s[n + 2];\n  for (long long int i = 0; i < n; ++i) {\n    cin >> s[i];\n  }\n  for (long long int i = 0; i < n; ++i) {\n    set<long long int> rows, cols;\n    if (row[i] == false) {\n      for (long long int j = 0; j < m; ++j) {\n        if (col[j] == false) {\n          if (s[i][j] == '#') {\n            rows.insert(i);\n            cols.insert(j);\n            for (long long int k = i + 1; k < n; ++k) {\n              if (s[k][j] == '#') {\n                rows.insert(k);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (auto l = rows.begin(); l != rows.end(); ++l) {\n      if (row[*l] == true) {\n        printf(\"No\");\n        return 0;\n      }\n    }\n    for (auto l = cols.begin(); l != cols.end(); ++l) {\n      if (col[*l] == true) {\n        printf(\"No\");\n        return 0;\n      }\n    }\n    for (auto l = rows.begin(); l != rows.end(); ++l) {\n      row[*l] = true;\n      for (auto k = cols.begin(); k != cols.end(); ++k) {\n        if (s[*l][*k] == '.') {\n          printf(\"No\");\n          return 0;\n        }\n        col[*k] = true;\n        visited[*l][*k] = true;\n      }\n    }\n  }\n  for (long long int i = 0; i < n; ++i) {\n    for (long long int j = 0; j < m; ++j) {\n      if (s[i][j] == '#') {\n        if (visited[i][j] == false) {\n          printf(\"No\");\n          return 0;\n        }\n      }\n    }\n  }\n  printf(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nmx = [list(input()) for i in range(n)]\ns = set()\nfor i in range(n):\n\tif i in s:\n\t\tcontinue\n\tfor j in range(m):\n\t\tif mx[i][j] == '#':\n\t\t\ts.add(i)\n\t\t\tfor k in range(i + 1, n):\n\t\t\t\tif mx[k][j] == '#':\n\t\t\t\t\tif mx[k] != mx[i]:\n\t\t\t\t\t\tprint('No')\n\t\t\t\t\t\texit(0)\n\t\t\t\t\ts.add(k)\nprint('Yes')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\nusing namespace std;\nconst long double PI = acos(-1);\nconst int N = 1e5 + 10;\nconst int MOD = 1e9 + 7;\nconst int mod1 = 998244353;\nconst long long INF = 2e18;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  cerr.tie(nullptr);\n  {\n    vector<string> v;\n    int n, m;\n    cin >> n >> m;\n    for (int i = 0; i < n; i++) {\n      string s;\n      cin >> s;\n      v.emplace_back(s);\n    }\n    sort(v.begin(), v.end());\n    v.resize(unique(v.begin(), v.end()) - v.begin());\n    bitset<1000> ok;\n    for (auto x : v) {\n      for (int i = 0; i < m; i++) {\n        if (x[i] == '#') {\n          if (ok[i]) {\n            return cout << \"No\", 0;\n          }\n          ok[i] = 1;\n        }\n      }\n    }\n    cout << \"Yes\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\npublic class PorB {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(); int m = in.nextInt();\n\t\tString[] s = new String[n];\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ts[i] = in.next();\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n-1; i++) {\n\t\t\tfor (int j = i+1; j < n; j++) {\n\t\t\t\tboolean same = true, noIntersect = true;\n\t\t\t\tfor (int k = 0; k < m; k++) {\n\t\t\t\t\tif (s[i].charAt(k) != s[j].charAt(k)) {\n\t\t\t\t\t\tsame = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (s[i].charAt(k) == s[j].charAt(k) && s[j].charAt(k) == '#') {\n\t\t\t\t\t\tnoIntersect = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!same && !noIntersect) {\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar mat[60][60];\nint n, m;\nvoid comprobar(int x, int y) {\n  for (int k = 0; k < n; k++) {\n    if (mat[k][x] != mat[k][y]) {\n      cout << \"No\";\n      exit(0);\n    }\n  }\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      scanf(\" %c\", &mat[i][j]);\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (mat[i][j] == '#') {\n        for (int h = j + 1; h < m; h++) {\n          if (mat[i][h] == '#') comprobar(j, h);\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "def run():\n    h, w = (int(x) for x in input().split())\n\n    g = []\n    for _ in range(h):\n        g.append(input())\n\n    rows_tkn = [False] * h\n\n    for i in range(h):\n        if rows_tkn[i]:\n            continue\n        rows_tkn[i] = True\n\n        curr_row = g[i]\n        col_i = [i for i,x in enumerate(curr_row) if x == '#']\n        # col_i = []\n        # for ii, x in enumerate(curr_row):\n        #     if x == '#':\n        #         col_i.append(ii)\n        if len(col_i) == 0:\n            continue\n\n\n        cols = [''.join([g[_][ind] for _ in range(h)]) for ind in col_i]\n        # cols = []\n        # for ii in col_i:\n        #     _col = []\n        #     for _ in range(h):\n        #         _col.append(g[_][ii])\n        #     _col = ''.join(_col)\n        #     cols.append(_col)\n        curr_col = cols[0]\n\n        for cccc in cols:\n            if cccc != curr_col:\n                return False\n\n        rows = [curr_row]\n        for ii, x in enumerate(curr_col):\n            if x == '#':\n                rows.append(g[ii])\n                rows_tkn[ii] = True\n\n        for rrrr in rows:\n            if rrrr != curr_row:\n                return False\n\n    return True\nprint('Yes' if run() else 'No')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int nmax = 100;\nconst int inf = 2000 * 1000 * 1000;\nconst long long infl = 1000ll * 1000ll * 1000ll * 1000ll * 1000ll * 1000ll;\nconst int mod = 1000 * 1000 * 1000 + 7;\nconst long double pi = acos(-1.0);\nbool used[nmax][nmax];\nvector<int> r, c;\nstring s[nmax];\nint n, m;\nvoid dfs(int x, int y) {\n  used[x][y] = true;\n  r.push_back(x);\n  c.push_back(y);\n  for (int i = 0; i < n; i++) {\n    if (s[i][y] == '#' && !used[i][y]) {\n      dfs(i, y);\n    }\n  }\n  for (int j = 0; j < m; j++) {\n    if (s[x][j] == '#' && !used[x][j]) {\n      dfs(x, j);\n    }\n  }\n}\nint main() {\n  cin >> n >> m;\n  getline(cin, s[0]);\n  for (int i = 0; i < n; i++) {\n    getline(cin, s[i]);\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#' && !used[i][j]) {\n        r.clear();\n        c.clear();\n        dfs(i, j);\n        sort(r.begin(), r.end());\n        r.resize(unique(r.begin(), r.end()) - r.begin());\n        sort(c.begin(), c.end());\n        c.resize(unique(c.begin(), c.end()) - c.begin());\n        for (int r1 : r) {\n          for (int c1 : c) {\n            if (s[r1][c1] != '#') {\n              cout << \"No\";\n              return 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 55;\nint n, m;\nchar mp[N][N];\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) cin >> mp[i][j];\n  bool f = 1;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      for (int ii = i + 1; ii <= n; ii++)\n        for (int jj = j + 1; jj <= m; jj++) {\n          if (mp[i][j] == '#' && mp[i][jj] == '#' && mp[ii][jj] == '#' &&\n              mp[ii][j] != '#')\n            f = 0;\n          if (mp[i][j] == '#' && mp[ii][j] == '#' && mp[ii][jj] == '#' &&\n              mp[i][jj] != '#')\n            f = 0;\n          if (mp[ii][j] == '#' && mp[i][jj] == '#' && mp[ii][jj] == '#' &&\n              mp[i][j] != '#')\n            f = 0;\n          if (mp[i][j] == '#' && mp[i][jj] == '#' && mp[ii][j] == '#' &&\n              mp[ii][jj] != '#')\n            f = 0;\n        }\n  if (f)\n    cout << \"Yes\\n\";\n  else\n    cout << \"No\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "import sys\ndef p(s):\n\tprint(s)\n\tsys.exit(0)\n\n\nn,m = list(map(int, input().split()))\nt = [input() for _ in range(n)]\n\nsts = []\n\nfor i in range(n):\n\tfounds = set()\n\tfor j in range(m):\n\t\tif t[i][j] == '#':\n\t\t\tfounds.add(j)\n\tsts.append(founds)\n\n\nfor i in range(n):\n\tfor j in range(i+1, n):\n\t\tif len(sts[i]&sts[j]) != 0 and sts[i]!=sts[j]:\n\t\t\tp('No')\n\np('Yes')\n\t\t\n"
        },
        {
            "language": 3,
            "solution": "n, m = list(map(int, input().split()))\na = [-1] * m\nb = []\nf = True\nfor i in range(n):\n    s = input()\n    q = set()\n    for j in range(len(s)):\n        if (s[j] == \"#\"):\n            q.add(j)\n    for j in range(len(s)):\n        if (s[j] == \"#\"):\n            if (a[j] == -1):\n                a[j] = i\n            else:\n                if b[a[j]] != q:\n                    f = False\n    b.append(q)\n    #print(a, b, f)\nif f:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    "
        },
        {
            "language": 1,
            "solution": "from __future__ import division\nfrom sys import stdin, stdout\n# from fractions import gcd\n# from math import *\n# from operator import mul\n# from functools import reduce\n# from copy import copy\nfrom collections import deque, defaultdict, Counter\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nout = []\n\nn, m = rints()\ngrid, all, ans = rstr_2d(n), [], 'YES'\n\nfor i in range(m):\n    tem = set()\n    for j in range(n):\n        if grid[j][i] == '#':\n            tem.add(j)\n\n    if tem:\n        for j in all:\n            inter = tem.intersection(j)\n            if inter:\n                if sorted(j) != sorted(tem):\n                    ans = 'NO'\n                break\n\n        if tem not in all:\n            all.append(tem)\n    # print(all)\n\nprint(ans)\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx\")\nusing std::abs;\nusing std::cerr;\nusing std::cin;\nusing std::cout;\nusing std::map;\nusing std::max;\nusing std::min;\nusing std::pair;\nusing std::set;\nusing std::string;\nusing std::swap;\nusing std::vector;\nusing ll = long long;\nusing uint = unsigned int;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\ntemplate <typename T>\nvoid _dbg(const char* _s, T _h) {\n  cerr << _s << \" = \" << _h << \"\\n\";\n}\ntemplate <typename T, typename... Ts>\nvoid _dbg(const char* _s, T _h, Ts... _t) {\n  int _b = 0;\n  while (((_b += *_s == '(') -= *_s == ')') != 0 || *_s != ',') cerr << *_s++;\n  cerr << \" = \" << _h << \",\";\n  _dbg(_s + 1, _t...);\n}\nstruct init {\n  init() {\n    cin.tie(0);\n    std::iostream::sync_with_stdio(0);\n    cout << std::fixed << std::setprecision(10);\n    cerr << std::fixed << std::setprecision(5);\n  }\n  ~init() {}\n} init;\nconst int MAXN = 55;\nchar f[MAXN][MAXN];\nll a[MAXN];\nll mb[MAXN];\nvoid no() {\n  cout << \"No\\n\";\n  exit(0);\n}\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int j = 0; j < MAXN; ++j) mb[j] = -1;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> f[i][j];\n      if (f[i][j] == '#') {\n        a[i] += 1LL << j;\n      }\n    }\n    bool b = 1;\n    bool c = 1;\n    for (int j = 0; j < m; ++j) {\n      if (f[i][j] == '#') {\n        b &= mb[j] == -1;\n        c &= mb[j] == a[i];\n      }\n    }\n    if (c)\n      continue;\n    else if (b) {\n      for (int j = 0; j < m; ++j) {\n        if (f[i][j] == '#') {\n          mb[j] = a[i];\n        }\n      }\n    } else {\n      no();\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m, flag = 0;\n  cin >> n >> m;\n  vector<int> adj[m + 1];\n  char grid[n + 1][m + 1];\n  bool vis[m + 1];\n  char black = '#';\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) cin >> grid[i][j];\n  for (int i = 1; i <= m; i++) vis[i] = false;\n  for (int i = 1; i <= n; i++) {\n    int c = 0, b = 0, r;\n    for (int j = 1; j <= m; j++) {\n      if (grid[i][j] == black) b++;\n    }\n    for (int j = 1; j <= m; j++) {\n      if (grid[i][j] == black && c == 0) {\n        if (vis[j]) {\n          if (b != adj[j].size()) {\n            flag = 1;\n            break;\n          }\n          for (int k = 0; k < adj[j].size(); k++) {\n            if (grid[i][adj[j][k]] != black) {\n              flag = 1;\n              break;\n            }\n          }\n          break;\n        } else {\n          adj[j].push_back(j);\n          r = j;\n          vis[j] = true;\n          c++;\n        }\n      } else if (grid[i][j] == black) {\n        if (vis[j]) {\n          flag = 1;\n          break;\n        } else {\n          adj[r].push_back(j);\n          vis[j] = true;\n        }\n      }\n      if (flag == 1) break;\n    }\n    if (flag == 1) break;\n  }\n  if (flag == 1)\n    cout << \"No\";\n  else\n    cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\n/**\n *\n * @author Don Li\n */\npublic class MysticalMosaic2 {\n    void solve() {\n        int n = in.nextInt(), m = in.nextInt();\n        char[][] b = new char[n][];\n        for (int i = 0; i < n; i++) b[i] = in.nextToken().toCharArray();\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                boolean all_same = true, no_intersect = true;\n                for (int k = 0; k < m; k++) {\n                    if (b[i][k] != b[j][k]) all_same = false;\n                    if (b[i][k] == '#' && b[j][k] == '#') no_intersect = false;\n                }\n                if (!all_same && !no_intersect) {\n                    out.println(\"No\");\n                    return;\n                }\n            }\n        }\n        out.println(\"Yes\");\n    }\n    \n    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new MysticalMosaic2().solve();\n        out.close();\n    }\n    \n    static FastScanner in;\n    static PrintWriter out;\n    \n    static class FastScanner {\n        BufferedReader in;\n        StringTokenizer st;\n        \n        public FastScanner(BufferedReader in) {\n            this.in = in;\n        }\n        \n        public String nextToken() {\n            while (st == null || !st.hasMoreTokens()) {\n                try {\n                    st = new StringTokenizer(in.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n        \n        public int nextInt() {\n            return Integer.parseInt(nextToken());\n        }\n        \n        public long nextLong() {\n            return Long.parseLong(nextToken());\n        }\n        \n        public double nextDouble() {\n            return Double.parseDouble(nextToken());\n        }\n    }\n}\n"
        },
        {
            "language": 3,
            "solution": "r,c=[int(x) for x in input().split()]\nm=[]\nfor i in range(r):\n    m.append(input())\nm=list(set(m))\nn=len(m)\nx=[0]*c\nflag=0\nfor i in range(n):\n    for j in range(c):\n        if(m[i][j]=='#' and x[j]==0):\n            x[j]+=1\n        elif(m[i][j]==\"#\" and x[j]!=0):\n            flag=1\n            break\n    if(flag):\n        break\nif(flag):\n    print(\"No\")\nelse:\n    print(\"Yes\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int nax = 107;\nint n, m;\nchar wcz[nax][nax];\nint oj[nax];\nint fin(int v) {\n  if (oj[v] != v) oj[v] = fin(oj[v]);\n  return oj[v];\n}\nvoid uni(int v, int u) { oj[fin(v)] = fin(u); }\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; i++) scanf(\"%s\", wcz[i] + 1);\n  for (int i = 1; i <= n + m; i++) oj[i] = i;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (wcz[i][j] == '#') uni(i, n + j);\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (wcz[i][j] == '.' && fin(i) == fin(n + j)) {\n        printf(\"No\\n\");\n        return 0;\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<string> a(n);\n  for (int i = 0; i < (int)(n); i++) {\n    cin >> a[i];\n  }\n  bool bad = false;\n  for (int i = 0; i < (int)(n); i++) {\n    for (int j = 0; j < (int)(m); j++) {\n      if (a[i][j] == '#') {\n        for (int k = 0; k < (int)(n); k++) {\n          if (k == i) continue;\n          for (int t = 0; t < (int)(m); t++) {\n            if (t == j) continue;\n            int cnt = 1;\n            if (a[i][t] == '#') cnt++;\n            if (a[k][j] == '#') cnt++;\n            if (a[k][t] == '#') cnt++;\n            if (cnt == 3) bad = true;\n          }\n        }\n      }\n    }\n  }\n  if (!bad) {\n    cout << \"Yes\" << endl;\n  } else {\n    cout << \"No\" << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m, i, j, fl = 0;\n  char A[100][100];\n  int R[100] = {0}, C[100] = {0};\n  cin >> n >> m;\n  i = 0;\n  while (i < n) {\n    scanf(\"%s\", A[i]);\n    i++;\n  }\n  i = 0;\n  while (i < n) {\n    if (R[i] == 0) {\n      R[i] = 1;\n      j = i + 1;\n      while (j < n) {\n        if (strcmp(A[i], A[j]) == 0) R[j] = 1;\n        j++;\n      }\n      j = 0;\n      while (j < m) {\n        if (A[i][j] == '#' && C[j] == 0)\n          C[j] = 1;\n        else if (A[i][j] == '#') {\n          fl = 1;\n          break;\n        }\n        j++;\n      }\n    }\n    if (fl == 1) break;\n    i++;\n  }\n  if (fl == 0)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\npublic class probmat{\n\tpublic static void main(String[] args) {\n\t\tScanner scan=new Scanner(System.in);\n\t\tint m=scan.nextInt();\n\t\tint n=scan.nextInt();\n\t\tchar[][] arr=new char[m][n];\n\t\tfor (int i=0; i<m; i++) {\n\t\t\tString x=scan.next();\n\t\t\tarr[i]=x.toCharArray();\n\t\t}\n\t\tint flag=1;\n\t\tfor (int i=0; i<m && flag==1;i++ ) {\n\t\t\tfor (int j=i+1;j<m && flag==1;j++ ) {\n\t\t\t\tint com=function(arr[i],arr[j],m,n);\n\t\t\t\t// System.out.println(\"i j com = \"+i+\" \"+j+\" \"+com);\n\t\t\t\t\t\n\t\t\t\tif(com==-1){\n\t\t\t\t\t// System.out.println(\"i j- \"+i+\" \"+j);\n\t\t\t\t\tflag=0;//not possible\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(flag==1?\"Yes\":\"No\");\n\t}\n\tstatic int function(char[] rowa,char[] rowb,int m,int n){\n\t\tint flag=0;\n\t\tint countrowa=0;\n\t\tint countrowb=0;\n\t\tint count=0;\n\t\tfor (int i=0 ;i<n;i++ ) {\n\t\t\tif(rowa[i]=='#')\n\t\t\t\tcountrowa++;\n\t\t\tif(rowb[i]=='#')\n\t\t\t\tcountrowb++;\n\t\t\tif(countrowa!=countrowb && count==0){\n\t\t\t\tcount=1;\n\t\t\t}\n\t\t\tif(flag==0){\n\t\t\t\tif(rowa[i]==rowb[i]  ) {\n\t\t\t\t\t// System.out.println(\"function-\"+i);\n\t\t\t\t\tif((rowa[i]!='.' && rowb[i]!='.') && countrowa==countrowb)\n\t\t\t\t\t\tflag=1;\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(countrowa!=countrowb && !(rowa[i]=='.' && rowb[i]=='.'))\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif(count==1 && rowa[i]=='#' && rowb[i]=='#')\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(rowa[i]!=rowb[i])\n\t\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t}\n\t\treturn flag;\n\t}\n\n}"
        },
        {
            "language": 3,
            "solution": "par = input()\npar = list(map(int, par.split()))\nn, m = par[0], par[1]\nmat = []\nfor i in range(n):\n    row = list(input())\n    mat.append(row)\n\ndef posColor(n, m, mt):\n\n    \n    for i in range(n):\n        for j in range(m):\n            if mt[i][j] == '#':\n                for x in range(i + 1, n):\n                    if mt[x][j] == '#':\n                        for y in range(m):\n                            if mt[i][y] != mt[x][y]:\n                                return 'No'\n    return 'Yes'\n       \n                         \n\nprint(posColor(n, m, mat))"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long MOD = 1e9 + 7;\nconst long long INF = 1e18;\nconst string nl = \"\\n\";\nint32_t main() {\n  ios::sync_with_stdio(0);\n  cin.tie(nullptr);\n  long long n, m;\n  cin >> n >> m;\n  vector<string> b(n);\n  for (auto& i : b) {\n    cin >> i;\n  }\n  vector<vector<long long>> a(n, vector<long long>(m));\n  for (long long i = 0; i < n; ++i) {\n    for (long long j = 0; j < m; ++j) {\n      a[i][j] = (b[i][j] == '#');\n    }\n  }\n  for (long long i = 0; i < n - 1; ++i) {\n    for (long long j = i + 1; j < n; ++j) {\n      bool same = true, inter = true;\n      for (long long k = 0; k < m; ++k) {\n        if (a[i][k] != a[j][k]) {\n          same = false;\n        }\n        if (a[i][k] && a[j][k]) {\n          inter = false;\n        }\n      }\n      if (!same && !inter) {\n        cout << \"No\" << nl;\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << nl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string s[n];\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  vector<int> v[n];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++)\n      if (s[i][j] == '#') v[i].push_back(j);\n  }\n  vector<int> used;\n  vector<int>::iterator it;\n  for (int i = 0; i < n; i++) {\n    if (!v[i].empty()) {\n      for (int j = 0; j < v[i].size(); j++) {\n        it = find(used.begin(), used.end(), v[i][j]);\n        if (it != used.end()) {\n          cout << \"No\";\n          return 0;\n        }\n      }\n      vector<int> my;\n      my.push_back(i);\n      for (int j = i + 1; j < n; j++) {\n        if (v[i] == v[j]) my.push_back(j);\n      }\n      for (int j = 0; j < v[i].size(); j++) {\n        used.push_back(v[i][j]);\n      }\n      for (int j = 0; j < my.size(); j++) {\n        v[my[j]].clear();\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring a[52];\nint n, m;\nbool ism(int k, int i) {\n  for (int j = 0; j < m; j++) {\n    if (a[k][j] != a[i][j])\n      return false;\n    else\n      continue;\n  }\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cin >> n >> m;\n  int mark[52][52];\n  for (int i = 0; i < n; i++) cin >> a[i];\n  int ss = 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        for (int k = i + 1; k < n; k++) {\n          if (a[k][j] == '#') {\n            if (ism(k, i) == false) {\n              ss = 0;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (ss == 1)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint main() {\n  int n, m;\n  std::cin >> n >> m;\n  bool mat[n][m];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      char c;\n      std::cin >> c;\n      mat[i][j] = c == '#';\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      bool all_equal = true, intersects = false;\n      for (int k = 0; k < m; k++) {\n        if (mat[i][k] != mat[j][k]) all_equal = false;\n        if (mat[i][k] and mat[j][k]) intersects = true;\n      }\n      if (intersects and !all_equal) {\n        std::cout << \"No\\n\";\n        return 0;\n      }\n    }\n  }\n  std::cout << \"Yes\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long inf = 0x3f3f3f3f;\nchar a[55][55];\nint main() {\n  int n, m, i, j, k, flag = 0;\n  cin >> n >> m;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) cin >> a[i][j];\n  }\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        for (k = i + 1; k < n; k++) {\n          if (a[k][j] == '#') {\n            int b = strcmp(a[i], a[k]);\n            if (b != 0) {\n              flag = 1;\n              break;\n            }\n          }\n        }\n      }\n      if (flag) break;\n    }\n    if (flag) break;\n  }\n  if (flag == 0)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar gird[64][64];\nset<long long int> set_of_cols;\nint main(void) {\n  int i, j;\n  scanf(\"%d%d\", &n, &m);\n  for (i = 0; i < n; ++i) scanf(\"%s\", gird[i]);\n  for (i = 0; i < n; ++i) {\n    long long int id = 0;\n    for (j = 0; j < m; ++j) {\n      id <<= 1;\n      id |= ('#' == gird[i][j]) ? 1 : 0;\n    }\n    for (auto have : set_of_cols) {\n      if (have != id && ((have & id) != 0)) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n    set_of_cols.insert(id);\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar s[55][55];\nint main() {\n  int n, m, i, j, k, l;\n  cin >> n >> m;\n  for (i = 0; i < n; i++) {\n    scanf(\"%s\", s[i]);\n  }\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if (s[i][j] == '.') {\n        continue;\n      }\n      for (k = 0; k < n; k++) {\n        for (l = 0; l < m; l++) {\n          if (s[k][l] == '.' || i == k || j == l) {\n            continue;\n          }\n          if (s[i][l] == '#' && s[k][j] == '.' ||\n              s[i][j] == '.' && s[k][l] == '#') {\n            printf(\"NO\\n\");\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  printf(\"YES\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nset<string> A;\nvector<bool> marked;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  marked.resize(m);\n  fill(marked.begin(), marked.end(), false);\n  for (int i = 0; i < n; i++) {\n    string a;\n    cin >> a;\n    A.insert(a);\n  }\n  for (auto &i : A) {\n    for (int j = 0; j < m; j++) {\n      if (i[j] == '#') {\n        if (marked[j] == true) {\n          cout << \"NO\" << endl;\n          return 0;\n        } else {\n          marked[j] = true;\n        }\n      }\n    }\n  }\n  cout << \"YES\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid dfs(int s, vector<vector<int>> &g, vector<int> &color, int c) {\n  color[s] = c;\n  for (int to : g[s]) {\n    if (color[to] == 0) dfs(to, g, color, c);\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char>> mat(n, vector<char>(m)), mat2 = mat;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) cin >> mat[i][j];\n  vector<vector<int>> g(n + m);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (mat[i][j] == '#') {\n        g[i].push_back(j + n);\n        g[j + n].push_back(i);\n      }\n    }\n  }\n  vector<vector<int>> moves;\n  vector<int> color(n + m);\n  int c = 1;\n  for (int i = 0; i < n + m; i++) {\n    if (!color[i]) dfs(i, g, color, c++);\n  }\n  c--;\n  for (int i = 0; i < n + m; i++) {\n    color[i]--;\n  }\n  moves.resize(c);\n  for (int i = 0; i < n + m; i++) {\n    moves[color[i]].push_back(i);\n  }\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) mat2[i][j] = '.';\n  for (int i = 0; i < c; i++) {\n    vector<int> h, v;\n    for (int j = 0; j < (int)moves[i].size(); j++) {\n      if (moves[i][j] < n)\n        h.push_back(moves[i][j]);\n      else\n        v.push_back(moves[i][j] - n);\n    }\n    for (int q = 0; q < h.size(); q++) {\n      for (int w = 0; w < v.size(); w++) {\n        mat2[h[q]][v[w]] = '#';\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (mat[i][j] != mat2[i][j]) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.util.TreeSet;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.io.InputStream;\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskA {\n        void find(int row, int col, TreeSet<Integer> rows, TreeSet<Integer> cols, boolean[][] shouldSelect, boolean[][] selectedHere) {\n            if (selectedHere[row][col]) return;\n            selectedHere[row][col] = true;\n            rows.add(row);\n            cols.add(col);\n            for (int otherCol = 0; otherCol < shouldSelect[0].length; otherCol++) {\n                if (shouldSelect[row][otherCol]) {\n                    find(row, otherCol, rows, cols, shouldSelect, selectedHere);\n                }\n            }\n            for (int otherRow = 0; otherRow < shouldSelect.length; otherRow++) {\n                if (shouldSelect[otherRow][col]) {\n                    find(otherRow, col, rows, cols, shouldSelect, selectedHere);\n                }\n            }\n        }\n\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n            int rows = in.readInt();\n            int cols = in.readInt();\n            char[][] tab = new char[rows][];\n            for (int row = 0; row < tab.length; row++) {\n                tab[row] = in.next().toCharArray();\n            }\n            boolean[][] shouldSelect = new boolean[rows][cols];\n            for (int row = 0; row < rows; row++) {\n                for (int col = 0; col < cols; col++) {\n                    shouldSelect[row][col] = (tab[row][col] == '#');\n                }\n            }\n            boolean[][] selected = new boolean[rows][cols];\n            for (int row = 0; row < rows; row++) {\n                for (int col = 0; col < cols; col++) {\n                    if (shouldSelect[row][col] && !selected[row][col]) {\n                        // then we select it here\n                        TreeSet<Integer> rowResult = new TreeSet<>();\n                        TreeSet<Integer> colResult = new TreeSet<>();\n                        boolean[][] selectHere = new boolean[rows][cols];\n                        find(row, col, rowResult, colResult, shouldSelect, selectHere);\n                        for (int rr : rowResult) {\n                            for (int cc : colResult) {\n                                selected[rr][cc] = true;\n                            }\n                        }\n                    }\n                }\n            }\n            for (int row = 0; row < rows; row++) {\n                for (int col = 0; col < cols; col++) {\n                    if (shouldSelect[row][col] && !selected[row][col]) {\n                        throw new RuntimeException();\n                    }\n                    if (!shouldSelect[row][col] && selected[row][col]) {\n                        out.printLine(\"No\");\n                        return;\n                    }\n                }\n            }\n            out.printLine(\"Yes\");\n        }\n    }\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public int readInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                if (Character.isValidCodePoint(c)) {\n                    res.appendCodePoint(c);\n                }\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return isWhitespace(c);\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public String next() {\n            return readString();\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n        }\n    }\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void print(Object... objects) {\n            for (int i = 0; i < objects.length; i++) {\n                if (i != 0) {\n                    writer.print(' ');\n                }\n                writer.print(objects[i]);\n            }\n        }\n\n        public void printLine(Object... objects) {\n            print(objects);\n            writer.println();\n        }\n\n        public void close() {\n            writer.close();\n        }\n    }\n}"
        },
        {
            "language": 3,
            "solution": "n = 0\nm = 0\n\n\ndef esht(a, b ):\n\n    global n, m\n\n    for ptr in range(0 ,len(a)):\n        if (a[ptr] is '#') and (a[ptr] == b[ptr]):\n            return True\n    return False\n\ndef main():\n    global n , m\n    n, m = [*map(int,input().split())]\n    s = [\"\" for i in range(0,n)]\n    for i in range(0,n):\n        s[i] = input()\n    ans = True\n    for i in range(0,n):\n        for j in range(i + 1 , n):\n            if esht(s[i], s[j]) and s[i] != s[j]:\n                ans = False\n    if ans is True:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nmain()\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar str[100][100];\nint cnt[100];\nint mark[100];\nint n, m;\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> str[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      if (!mark[j] && strcmp(str[i], str[j]) == 0) {\n        for (int k = 0; k < m; k++) str[j][k] = '.';\n        mark[j] = 1;\n      }\n    }\n  }\n  for (int j = 0; j < m; j++) {\n    for (int i = 0; i < n; i++) {\n      if (str[i][j] == '#') cnt[j]++;\n    }\n  }\n  for (int j = 0; j < m; j++) {\n    if (cnt[j] >= 2) {\n      cout << \"No\\n\";\n      return 0;\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "# -*- coding: utf - 8 -*-\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n|    author: mr.math - Hakimov Rahimjon     |\n|    e-mail: mr.math0777@gmail.com          |\n|    created: 24.03.2018 20:04              |\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n# inp = open(\"input.txt\", \"r\"); input = inp.readline; out = open(\"output.txt\", \"w\"); print = out.write\nTN = 1\n\n\n# ===========================================\n\n\ndef solution():\n    n, m = map(int, input().split())\n    lst = []\n    ans = \"Yes\"\n    for i in range(n):\n        lst.append(list(input()))\n    l = []\n    for i in range(n):\n        k = []\n        for j in range(m):\n            if lst[i][j] == \"#\":\n                k.append(j)\n        l.append(k)\n    R = []\n    r = []\n    C = []\n    for i in range(n):\n        if i not in r:\n            k = [i]\n            for j in range(i+1, n):\n                if l[i] == l[j]: k.append(j)\n                else:\n                    for x in l[i]:\n                        if x in l[j]:\n                            ans = \"No\"\n                            break\n            R.append(k)\n            r += k\n            C.append(l[i])\n    if len(R) != len(C):\n        ans = \"No\"\n    print(ans)\n\n\n# ===========================================\nwhile TN != 0:\n    solution()\n    TN -= 1\n# ===========================================\n# inp.close()\n# out.close()\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class MainA {\n\tstatic final StdIn in = new StdIn();\n\tstatic final PrintWriter out = new PrintWriter(System.out);\n\tstatic int n, m;\n\tstatic char[][] grid;\n\tstatic boolean[][] vis;\n\t\n\tpublic static void main(String[] args) {\n\t\tn=in.nextInt();\n\t\tm=in.nextInt();\n\t\tgrid = new char[n][];\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tgrid[i]=in.next().toCharArray();\n\t\tvis = new boolean[n][m];\n\t\tfor(int i=0; i<n; ++i)\n\t\t\tfor(int j=0; j<m; ++j) {\n\t\t\t\tif(grid[i][j]=='.'||vis[i][j])\n\t\t\t\t\tcontinue;\n\t\t\t\tList<Pair> con = new ArrayList<Pair>();\n\t\t\t\tdfs(i, j, con);\n\t\t\t\tSet<Integer> rows = new HashSet<Integer>(), cols = new HashSet<Integer>();\n\t\t\t\tfor(Pair p : con) {\n\t\t\t\t\trows.add(p.a);\n\t\t\t\t\tcols.add(p.b);\n\t\t\t\t}\n\t\t\t\tif(rows.size()*cols.size()!=con.size()) {\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\tout.println(\"Yes\");\n\t\tout.close();\n\t}\n\t\n\tstatic void dfs(int i, int j, List<Pair> con) {\n\t\tvis[i][j]=true;\n\t\tcon.add(new Pair(i, j));\n\t\tfor(int i2=0; i2<n; ++i2)\n\t\t\tif(grid[i2][j]=='#'&&!vis[i2][j])\n\t\t\t\tdfs(i2, j, con);\n\t\tfor(int j2=0; j2<m; ++j2)\n\t\t\tif(grid[i][j2]=='#'&&!vis[i][j2])\n\t\t\t\tdfs(i, j2, con);\n\t}\n\t\n\tstatic class Pair {\n\t\tint a, b;\n\t\tPair(int a, int b) {\n\t\t\tthis.a=a;\n\t\t\tthis.b=b;\n\t\t}\n\t}\n\t\n\tstatic class StdIn {\n\t\tfinal private int BUFFER_SIZE = 1 << 16;\n\t\tprivate DataInputStream din;\n\t\tprivate byte[] buffer;\n\t\tprivate int bufferPointer, bytesRead;\n\t\tpublic StdIn() {\n\t\t\tdin = new DataInputStream(System.in);\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\t\tpublic StdIn(InputStream in) {\n\t\t\ttry{\n\t\t\t\tdin = new DataInputStream(in);\n\t\t\t} catch(Exception e) {\n\t\t\t\tthrow new RuntimeException();\n\t\t\t}\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\t\tpublic String next() {\n\t\t\tint c;\n\t\t\twhile((c=read())!=-1&&(c==' '||c=='\\n'||c=='\\r'));\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\twhile (c != -1)\n\t\t\t{\n\t\t\t\tif (c == ' ' || c == '\\n'||c=='\\r')\n\t\t\t\t\tbreak;\n\t\t\t\ts.append((char)c);\n\t\t\t\tc=read();\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t\tpublic String nextLine() {\n\t\t\tint c;\n\t\t\twhile((c=read())!=-1&&(c==' '||c=='\\n'||c=='\\r'));\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\twhile (c != -1)\n\t\t\t{\n\t\t\t\tif (c == '\\n'||c=='\\r')\n\t\t\t\t\tbreak;\n\t\t\t\ts.append((char)c);\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t\tpublic int nextInt() {\n\t\t\tint ret = 0;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\twhile ((c = read()) >= '0' && c <= '9');\n\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\t\tpublic int[] readIntArray(int n, int os) {\n\t\t\tint[] ar = new int[n];\n\t\t\tfor(int i=0; i<n; ++i)\n\t\t\t\tar[i]=nextInt()+os;\n\t\t\treturn ar;\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\tlong ret = 0;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\twhile ((c = read()) >= '0' && c <= '9');\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\t\tpublic long[] readLongArray(int n, long os) {\n\t\t\tlong[] ar = new long[n];\n\t\t\tfor(int i=0; i<n; ++i)\n\t\t\t\tar[i]=nextLong()+os;\n\t\t\treturn ar;\n\t\t}\n\t\tpublic double nextDouble() {\n\t\t\tdouble ret = 0, div = 1;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\twhile ((c = read()) >= '0' && c <= '9');\n\t\t\tif (c == '.')\n\t\t\t\twhile ((c = read()) >= '0' && c <= '9')\n\t\t\t\t\tret += (c - '0') / (div *= 10);\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\t\tprivate void fillBuffer() throws IOException {\n\t\t\tbytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n\t\t\tif (bytesRead == -1)\n\t\t\t\tbuffer[0] = -1;\n\t\t}\n\t\tprivate byte read() {\n\t\t\ttry{\n\t\t\t\tif (bufferPointer == bytesRead)\n\t\t\t\t\tfillBuffer();\n\t\t\t\treturn buffer[bufferPointer++];\n\t\t\t} catch(IOException e) {\n\t\t\t\tthrow new RuntimeException();\n\t\t\t}\n\t\t}\n\t\tpublic void close() throws IOException {\n\t\t\tif (din == null)\n\t\t\t\treturn;\n\t\t\tdin.close();\n\t\t}\n\t}\n}"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\npublic class Main{\n    private static Map<Integer, List<Integer>> row2col = new HashMap<>();\n    private static Map<Integer, List<Integer>> col2row = new HashMap<>();\n    public static void main(String[] args){\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        int m = s.nextInt();\n        char[][] map = new char[n][m];\n        for(int i = 0; i < n; i++){\n            String line = s.next();\n            map[i] = line.toCharArray();\n        }\n\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(map[i][j] == '#'){\n                    row2col.putIfAbsent(i, new ArrayList<>());\n                    row2col.get(i).add(j);\n                    col2row.putIfAbsent(j, new ArrayList<>());\n                    col2row.get(j).add(i);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(map[i][j] == '#'){\n                    Set<Integer> rows = new HashSet<>();\n                    Set<Integer> cols = new HashSet<>();\n                    addRow(rows, cols, i);\n                    addCol(rows, cols, j);\n                    for(int r : rows){\n                        for(int c: cols){\n                            if(map[r][c] == '#'){\n                                map[r][c] = '.';\n                            }else{\n                                System.out.println(\"No\");\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n\n    private static void addRow(Set<Integer> rows, Set<Integer> cols, int r){\n        if(rows.contains(r)){\n            return;\n        }\n        rows.add(r);\n        for(int i : row2col.get(r)){\n            addCol(rows, cols, i);\n        }\n    }\n\n    private static void addCol(Set<Integer> rows, Set<Integer> cols, int c){\n        if(cols.contains(c)){\n            return;\n        }\n        cols.add(c);\n        for(int i : col2row.get(c)){\n            addRow(rows, cols, i);\n        }\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 51;\nchar a[N][N];\nbool usedR[N], usedC[N];\nint main() {\n  int n, m;\n  scanf(\"%d %d\\n\", &n, &m);\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) {\n      scanf(\"%c\", &a[i][j]);\n    }\n    scanf(\"\\n\");\n  }\n  string ans = \"Yes\";\n  for (int j = 1; j <= m; ++j) {\n    if (!usedC[j]) {\n      for (int i = 1; i <= n; ++i) {\n        if (a[i][j] == '#') {\n          if (usedR[i]) {\n            ans = \"No\";\n            break;\n          } else {\n            usedR[i] = true;\n          }\n        }\n      }\n      usedC[j] = true;\n      for (int t = j + 1; t <= m; ++t) {\n        bool isEqual = true;\n        for (int k = 1; k <= n; ++k) {\n          if (a[k][j] != a[k][t]) {\n            isEqual = false;\n            break;\n          }\n        }\n        if (isEqual) {\n          usedC[t] = true;\n        }\n      }\n    }\n  }\n  cout << ans << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char>> a(n, vector<char>(m));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) cin >> a[i][j];\n  }\n  bool flag = false;\n  for (int i = 0; i < n - 1; i++) {\n    for (int j = i + 1; j < n; j++) {\n      bool allSame = true, no_intersection = true;\n      for (int k = 0; k < m; k++) {\n        if (a[i][k] != a[j][k]) allSame = false;\n        if (a[i][k] == '#' && a[j][k] == '#') no_intersection = false;\n      }\n      if (!allSame && !no_intersection) {\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\npublic class B957 {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt(), m = in.nextInt();\n\t\tchar arr[][] = new char[n][m];\n\t\t\n\t\tfor(int i=0; i<n; i++)\n\t\t\tarr[i] = in.next().toCharArray();\n\n\t\tfor(int i=0; i<n; i++)\n\t\t{\n\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\tSet<Integer> set = new HashSet<Integer>();\n\t\t\t\n\t\t\tfor(int j=0; j<m; j++)\t\n\t\t\t\tif(arr[i][j] == '#')\n\t\t\t\t\tlist.add(j);\n\t\t\t\n\t\t\tif(list.size()>1)\n\t\t\t\tfor(int j: list)\t\n\t\t\t\t\tfor(int h=0; h<n; h++)\n\t\t\t\t\t\tif(arr[h][j] == '#')\n\t\t\t\t\t\t\tset.add(h);\n\t\t\t\n\t\t\tIterator<Integer> it = set.iterator();\n\t\t\twhile(it.hasNext())\n\t\t\t{\n\t\t\t\tint h = it.next();\n\t\t\t\tfor(int j: list)\n\t\t\t\t{\n\t\t\t\t\tif(arr[h][j] != '#')\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Yes\");\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nlong long a[60];\nchar s[60];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; ++i) {\n    scanf(\"%s\", s + 1);\n    for (int j = 1; j <= m; ++j) a[i] = (a[i] << 1 | (s[j] == '#'));\n  }\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1 + i; j <= n; ++j)\n      if ((a[i] != a[j]) && (a[i] & a[j])) {\n        puts(\"No\");\n        return 0;\n      }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class ProblemB {\n\tpublic static void main(String[] args) throws Exception{\n//\t\t\tBufferedReader bf = new BufferedReader(new FileReader(\"measurement.in\"));\n\n\t\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n//\t\t\tStringTokenizer st = new StringTokenizer(bf.readLine());\n\t\t\tString a = bf.readLine();\n\t\t\tString[] cs = a.split(\" \");\n\t\t\tint m = Integer.parseInt(cs[0]);\n\t\t\tint n = Integer.parseInt(cs[1]);\n\t\t\tchar[][] board = new char[m][n];\n\t\t\tfor(int i = 0;i<m;i++){\n\t\t\t\tboard[i] = bf.readLine().toCharArray();\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0;i<m;i++){\n\t\t\t\tfor(int i2 = i+1;i2<m;i2++){\n\t\t\t\t\tfor(int j = 0;j<n;j++){\n\t\t\t\t\t\tfor(int j2 = j+1;j2<n;j2++){\n\t\t\t\t\t\t\tchar x1 = board[i][j];\n\t\t\t\t\t\t\tchar x2 = board[i2][j];\n\t\t\t\t\t\t\tchar x3 = board[i][j2];\n\t\t\t\t\t\t\tchar x4 = board[i2][j2];\n\t\t\t\t\t\t\tif ((x1 == x2 && x2 == x3 && x4!= x1 && x1 == '#')||(x1 == x2 && x2 == x4 && x3!= x1 && x1 == '#')||(x1 == x3 && x3 == x4 && x2!= x1 && x1 == '#')||(x2 == x3 && x3 == x4 && x1!= x4 && x4 == '#')){\n\t\t\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Yes\");\n\t}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstruct ruchy {\n  bool kol[55];\n  bool wiersze[55];\n};\nint dl, szer, ilosc_ruchow;\nint kolumny[55];\nint wiersze[55];\nruchy gra[2510];\nchar palnsza[54][54];\nbool dasie = 1;\nvoid wypisgry() {\n  for (int k = 0; k < ilosc_ruchow; k++) {\n    cout << \"ruch numer\" << k + 1 << endl;\n    cout << \"kolumny;\" << endl;\n    for (int i = 1; i < 50; i++)\n      if (gra[k + 1].kol[i]) cout << i << \",\";\n    cout << endl;\n    cout << \"wiersze;\" << endl;\n    for (int i = 1; i < 50; i++)\n      if (gra[k + 1].wiersze[i]) cout << i << \",\";\n    cout << endl;\n  }\n}\nint main() {\n  cin >> dl >> szer;\n  for (int j = 0; j < dl; j++) {\n    for (int i = 0; i < szer; i++) {\n      cin >> palnsza[i + 1][j + 1];\n    }\n  }\n  for (int j = 0; j < dl; j++) {\n    for (int i = 0; i < szer; i++) {\n      if (palnsza[i + 1][j + 1] == '#') {\n        if (kolumny[i + 1] != 0) {\n          if (wiersze[j + 1] != 0 && wiersze[j + 1] != kolumny[i + 1])\n            dasie = 0;\n          wiersze[j + 1] = kolumny[i + 1];\n          gra[kolumny[i + 1]].wiersze[j + 1] = 1;\n        } else {\n          if (wiersze[j + 1] != 0) {\n            if (kolumny[i + 1] != 0 && kolumny[i + 1] != wiersze[j + 1])\n              dasie = 0;\n            kolumny[i + 1] = wiersze[j + 1];\n            gra[wiersze[j + 1]].kol[i + 1] = 1;\n          } else {\n            ilosc_ruchow++;\n            kolumny[i + 1] = ilosc_ruchow;\n            wiersze[j + 1] = ilosc_ruchow;\n            gra[ilosc_ruchow].kol[i + 1] = 1;\n            gra[ilosc_ruchow].wiersze[j + 1] = 1;\n          }\n        }\n      }\n    }\n  }\n  for (int k = 0; k < ilosc_ruchow; k++) {\n    for (int j = 0; j < dl; j++) {\n      for (int i = 0; i < szer; i++) {\n        if (gra[k + 1].wiersze[j + 1] && gra[k + 1].kol[i + 1] &&\n            palnsza[i + 1][j + 1] == '.')\n          dasie = 0;\n      }\n    }\n  }\n  if (dasie)\n    printf(\"Yes\");\n  else\n    printf(\"No\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma optimize(\"Ofast\")\nusing namespace std;\nusing ll = long long int;\nusing ull = unsigned long long int;\nusing dd = double;\nusing ldd = long double;\nusing si = short int;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nint main() {\n  ios_base::sync_with_stdio(0);\n  cout.tie(0);\n  cin.tie(0);\n  int n, m;\n  cin >> n >> m;\n  vector<bitset<60>> arr(n + 1);\n  char k;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> k;\n      arr[i][j] = (k == '#');\n    }\n  }\n  bool g = 1;\n  for (int i = 0; i < n; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n      if (arr[i] == arr[j] || (arr[i] & arr[j]) == arr.back()) continue;\n      cout << \"No\";\n      return 0;\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\nimport java.util.regex.*;\npublic class vk18\n{\n    public static void main(String[]stp) throws Exception\n    {\n    \tScanner scan=new Scanner(System.in);\n    \tPrintWriter pw = new PrintWriter(System.out);\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st=new StringTokenizer(br.readLine());\n        int n=Integer.parseInt(st.nextToken()),m=Integer.parseInt(st.nextToken()),i,j,k;\n        char [][] c=new char[n][m];\n        for(i=0;i<n;i++)\n        {\n        \tst=new StringTokenizer(br.readLine());\n        \tc[i]=st.nextToken().toCharArray();\n        }\n        boolean flag1=false,flag2=false;\n        for(i=0;i<n;i++)\n        {\n        \tfor(j=i+1;j<n;j++)\n        \t{\n        \t\tflag1=false;flag2=false;\n        \t\tfor(k=0;k<m;k++)\n        \t\t{\n        \t\t\tif(c[i][k]=='#' || c[j][k]=='#')\n        \t\t\t{\n        \t\t\t\tif(c[i][k]==c[j][k]) flag1=true;\n        \t\t\t\tif(c[i][k]!=c[j][k]) flag2=true;\n        \t\t\t}\n        \t\t}\n        \t\tif(flag1 && flag2) { pw.println(\"No\"); pw.flush(); System.exit(0); }\n        \t}\n        }\n        pw.write(\"Yes\");\n        pw.flush();\n    }\n\n    \n}"
        },
        {
            "language": 3,
            "solution": "# python3\n\ndef readline(): return tuple(map(int, input().split()))\n\n\ndef main():\n    n, m = readline()\n    unique_rows = list()\n\n    first_occ = [None] * m\n\n    while n:\n        n -= 1\n        row = input()\n        saved = None\n        for (i, char) in enumerate(row):\n            if char == '#':\n                if first_occ[i] is not None:\n                    if row != unique_rows[first_occ[i]]:\n                        return False\n                    else:\n                        break\n                else:\n                    if saved is None:\n                        unique_rows.append(row)\n                        saved = len(unique_rows) - 1\n                    first_occ[i] = saved\n            else:\n                assert char == '.'\n\n    return True\n\n\nprint(\"Yes\" if main() else \"No\")\n"
        },
        {
            "language": 3,
            "solution": "import sys\nimport math,bisect\nfrom collections import defaultdict\nfrom itertools import groupby,accumulate\nfrom heapq import heapify,heappop,heappush\nfrom collections import deque,Counter,OrderedDict\n#input = iter(sys.stdin.buffer.read().decode().splitlines())._next_\ndef neo(): return map(int,input().split())\ndef Neo(): return list(map(int,input().split()))\nn,m = neo()\nA = []\nfor i in range(n):\n    A.append(input())\nf = [False for i in range(m)]\nAl = set(A)\nfor r in Al:\n    for c in range(len(r)):\n        if r[c] == '#':\n            if f[c]:\n                print(\"No\")\n                exit()\n            else:\n                f[c]=True\nprint(\"Yes\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 110;\nint n, g[maxn], f[maxn][maxn], cnt, m, vis[maxn];\nchar ch[maxn][maxn];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%s\", ch[i]);\n    for (int j = 0; j < m; j++) {\n      if (ch[i][j] == '#') g[j]++, f[i][j] = 1;\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    memset(vis, 0, sizeof(vis));\n    cnt = 0;\n    for (int j = 0; j < m; j++) {\n      if (ch[i][j] == '#') {\n        if (!cnt) {\n          cnt = g[j];\n          for (int i = 1; i <= n; i++)\n            if (f[i][j]) vis[i] = 1;\n        } else if (g[j] != cnt) {\n          printf(\"No\");\n          return 0;\n        } else {\n          for (int i = 1; i <= n; i++) {\n            if (f[i][j] != vis[i]) {\n              printf(\"No\");\n              return 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  printf(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tchar [][]c = new char[n][m];\n\t\tfor(int i=0; i<n; i++) {\n\t\t\tc[i] = scanner.next().toCharArray();\n\t\t}\n\t\tboolean ans = true;\n\t\tfor(int i=0; i<n-1; i++) {\n\t\t\tfor(int j=i+1; j<n; j++) {\n\t\t\t\tboolean f = false;\n\t\t\t\tfor(int k=0; k<m; k++) {\n\t\t\t\t\tif(c[i][k]==c[j][k]&&c[j][k]=='#') {\n\t\t\t\t\t\tf = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(f) {\n\t\t\t\t\tString s1=\"\",s2=\"\";\n\t\t\t\t\tfor(int k=0; k<m; k++) {\n\t\t\t\t\t\ts1+=c[i][k];\n\t\t\t\t\t\ts2+=c[j][k];\n\t\t\t\t\t}\n\t\t\t\t\tif(!s1.equals(s2)) {\n\t\t\t\t\t\tans=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans?\"Yes\":\"NO\");\n\t}\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar a[100][100];\nint used[100];\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) cin >> a[i][j];\n  for (int i = 0; i < n; i++) {\n    if (!used[i]) {\n      used[i] = 1;\n      string cur = \"\";\n      for (int j = 0; j < m; j++) cur += a[i][j];\n      for (int i1 = i + 1; i1 < n; i1++) {\n        string c = \"\";\n        for (int j = 0; j < m; j++) c += a[i1][j];\n        if (c == cur) {\n          used[i1] = 1;\n          break;\n        }\n        for (int j = 0; j < m; j++) {\n          if (c[j] == '#' && cur[j] == '#') {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  memset(used, 0, sizeof(used));\n  for (int i = 0; i < m; i++) {\n    if (!used[i]) {\n      used[i] = 1;\n      string cur = \"\";\n      for (int j = 0; j < n; j++) cur += a[j][i];\n      for (int i1 = i + 1; i1 < m; i1++) {\n        string c = \"\";\n        for (int j = 0; j < n; j++) c += a[j][i1];\n        if (c == cur) {\n          used[i1] = 1;\n          break;\n        }\n        for (int j = 0; j < n; j++) {\n          if (c[j] == '#' && cur[j] == '#') {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long mod = 1000000007, N = 5e1 + 5, M = 1e5 + 5, INF = 0x3f3f3f3f;\nlong long powmod(long long a, long long b) {\n  long long res = 1;\n  a %= mod;\n  assert(b >= 0);\n  for (; b; b >>= 1) {\n    if (b & 1) res = res * a % mod;\n    a = a * a % mod;\n  }\n  return res;\n}\nlong long gcd(long long a, long long b) { return b ? gcd(b, a % b) : a; }\nint main(void) {\n  int n, m;\n  cin >> n >> m;\n  string s[n];\n  for (int i = 0; i < n; i++) cin >> s[i];\n  bool flag = 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        for (int k = i + 1; k < n; k++) {\n          if (s[k][j] == '#') {\n            if (s[i] != s[k]) flag = 0;\n          }\n        }\n      }\n    }\n  }\n  cout << (flag ? \"YES\" : \"NO\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\na=[]\nfor i in range(n):\n    a.append(input())\n\nf=[False for i in range(m)]\nal=set(a)\nfor r in al:\n    for c in range(len(r)):\n        if r[c]=='#':\n            if f[c]:\n                print(\"No\")\n                exit()\n            else:\n                f[c]=True\nprint(\"Yes\")\n\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static class InputReader {\n\t\tpublic BufferedReader reader;\n\t\tpublic StringTokenizer tokenizer;\n\n\t\tpublic InputReader() {\n\t\t\treader = new BufferedReader(new InputStreamReader(System.in), 32765);\n\t\t\ttokenizer = null;\n\t\t}\n\n\t\tpublic InputReader(InputStream stream) {\n\t\t\treader = new BufferedReader(new InputStreamReader(System.in), 32765);\n\t\t\ttokenizer = null;\n\t\t}\n\n\t\tpublic String next() {\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t\t\ttry {\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokenizer.nextToken();\n\t\t}\n\n\t\tpublic char nextChar() {\n\t\t\treturn next().charAt(0);\n\t\t}\n\n\t\tpublic int nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tpublic long nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tpublic int[] nextIntArr(int n) {\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = this.nextInt();\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\n\t\tpublic Integer[] nextIntegerArr(int n) {\n\t\t\tInteger[] arr = new Integer[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = new Integer(this.nextInt());\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\n\t\tpublic int[][] next2DIntArr(int n, int m) {\n\t\t\tint[][] arr = new int[n][m];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tarr[i][j] = this.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\n\t\tpublic int[] nextSortedIntArr(int n) {\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = this.nextInt();\n\t\t\t}\n\t\t\tArrays.sort(arr);\n\t\t\treturn arr;\n\t\t}\n\n\t\tpublic long[] nextLongArr(int n) {\n\t\t\tlong[] arr = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = this.nextLong();\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\n\t\tpublic long[] nextSortedLongArr(int n) {\n\t\t\tlong[] arr = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = this.nextInt();\n\t\t\t}\n\t\t\tArrays.sort(arr);\n\t\t\treturn arr;\n\t\t}\n\n\t\tpublic char[] nextCharArr(int n) {\n\t\t\tchar[] arr = new char[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = this.nextChar();\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\t}\n\n\tpublic static InputReader scn = new InputReader();\n\tpublic static PrintWriter out = new PrintWriter(System.out);\n\n\tpublic static class Node {\n\t\tTreeSet<Integer> row, col;\n\n\t\tNode() {\n\t\t\trow = new TreeSet<>();\n\t\t\tcol = new TreeSet<>();\n\t\t}\n\t}\n\n\tpublic static ArrayList<Node> list = new ArrayList<>();\n\tpublic static int n, m;\n\n\tpublic static void main(String[] args) {\n\t\t// InputStream inputStream = System.in; // Useful when taking input other than\n\t\t// console eg file handling // check ctor of inputReader\n\t\t// To print in file use this:- out = new PrintWriter(\"destination of file\n\t\t// including extension\");\n\t\tn = scn.nextInt();\n\t\tm = scn.nextInt();\n\n\t\tint[][] arr = new int[n + 1][m + 1], clone = new int[n + 1][m + 1];\n\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tchar[] s = (\" \" + scn.next()).toCharArray();\n\t\t\tfor (int j = 1; j <= m; j++) {\n\t\t\t\tif (s[j] != '.') {\n\t\t\t\t\tclone[i][j] = arr[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= m; j++) {\n\t\t\t\tif (arr[i][j] == 1) {\n\t\t\t\t\tNode n = new Node();\n\t\t\t\t\tfor (int k = j; k <= m; k++) {\n\t\t\t\t\t\tif (arr[i][k] == 1) {\n\t\t\t\t\t\t\tn.col.add(k);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfuncC(arr, n.row, n.col);\n\t\t\t\t\tlist.add(n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tint[] row = new int[n + 1];\n\t\tint[] col = new int[m + 1];\n\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tNode n = list.get(i);\n\t\t\tfor (int r : n.row) {\n\t\t\t\trow[r]++;\n\t\t\t}\n\t\t\tfor (int c : n.col) {\n\t\t\t\tcol[c]++;\n\t\t\t}\n\t\t}\n\n\t\tboolean ans = true;\n\n\t\tfor (int i = 1; i <= n && ans; i++) {\n\t\t\tfor (int j = 1; j <= m && ans; j++) {\n\t\t\t\tif (arr[i][j] == 1) {\n\t\t\t\t\tans = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (Node k : list) {\n\t\t\tfor (int r : k.row) {\n\t\t\t\tfor (int c : k.col) {\n\t\t\t\t\tarr[r][c]++;\n\t\t\t\t\tif(arr[r][c] != clone[r][c]) {\n\t\t\t\t\t\tans = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(ans) {\n\t\t\tSystem.out.println(\"Yes\"); \n\t\t} else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t\t\n//\t\tfor (int i = 1; i <= n; i++) {\n//\t\t\tif (row[i] > 1) {\n//\t\t\t\tSystem.out.println(\"No\");\n//\t\t\t\treturn;\n//\t\t\t}\n//\t\t}\n//\n//\t\tfor (int i = 1; i <= m; i++) {\n//\t\t\tif (col[i] > 1) {\n//\t\t\t\tSystem.out.println(\"No\");\n//\t\t\t\treturn;\n//\t\t\t}\n//\t\t}\n//\n//\t\tSystem.out.println(\"Yes\");\n\t}\n\n\tpublic static void funcC(int[][] arr, TreeSet<Integer> row, TreeSet<Integer> col) {\n\t\tboolean change = false;\n\t\tfor (int c : col) {\n\t\t\tfor (int ii = 1; ii <= n; ii++) {\n\t\t\t\tif (arr[ii][c] == 1) {\n\t\t\t\t\tarr[ii][c] = 0;\n\t\t\t\t\trow.add(ii);\n\t\t\t\t\tchange = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (change) {\n\t\t\tfuncR(arr, row, col);\n\t\t}\n\t}\n\n\tpublic static void funcR(int[][] arr, TreeSet<Integer> row, TreeSet<Integer> col) {\n\t\tboolean change = false;\n\t\tfor (int r : row) {\n\t\t\tfor (int jj = 1; jj <= m; jj++) {\n\t\t\t\tif (arr[r][jj] == 1) {\n\t\t\t\t\tarr[r][jj] = 0;\n\t\t\t\t\tcol.add(jj);\n\t\t\t\t\tchange = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (change) {\n\t\t\tfuncC(arr, row, col);\n\t\t}\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst int maxn = 60;\nint mtx[maxn][maxn];\nint n, m;\nbool col_ok(int a, int b) {\n  for (int i = 0; i < n; i++) {\n    if (mtx[i][a] != mtx[i][b]) return 0;\n  }\n  return 1;\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) scanf(\" %c\", &mtx[i][j]);\n  for (int i = 0; i < n; i++) {\n    int cmp = -1;\n    for (int j = 0; j < m; j++) {\n      if (mtx[i][j] == '#') {\n        if (cmp == -1) {\n          cmp = j;\n        } else {\n          if (!col_ok(cmp, j)) {\n            printf(\"No\\n\");\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool rows[50] = {0}, col[50] = {0};\nint main() {\n  int n, m, count;\n  set<int> s;\n  set<int>::iterator it;\n  string z[50];\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> z[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (z[i][j] == '#') {\n        s.insert(j);\n      }\n    }\n    it = s.begin();\n    for (int j = 1; j < s.size(); j++) {\n      it++;\n      for (int k = 0; k < n; k++) {\n        if (z[k][*it] != z[k][*s.begin()]) {\n          cout << \"No\\n\";\n          return 0;\n        }\n      }\n    }\n    s.clear();\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\npublic class cf924 {\n    public boolean solve2(char[][] grid) {\n        Set<Long> rowSet = new LinkedHashSet<>();\n        for (char[] row : grid) {\n            long mask = 0L;\n            for (int col = 0; col < row.length; col++) {\n                if (row[col] == '#') {\n                    mask += 1L << col;\n                }\n            }\n            if (mask > 0) {\n                rowSet.add(mask);\n            }\n        }\n\n        long mask = 0L;\n        for (long rowMask : rowSet) {\n            if ((mask & rowMask) > 0) {\n                return false;\n            }\n            mask += rowMask;\n        }\n\n        return true;\n    }\n    public static void solve3() {\n        Scanner scan = new Scanner(System.in);\n        int R = scan.nextInt();\n        int C = scan.nextInt();\n        scan.nextLine();\n        Set<Long> rowSet = new LinkedHashSet<>();\n        for (int i = 0; i < R; i++) {\n            String row = scan.nextLine();\n            long mask = 0L;\n            for (int col = 0; col < row.length(); col++) {\n                if (row.charAt(col) == '#') {\n                    mask += 1L << col;\n                }\n            }\n            if (mask > 0) {\n                rowSet.add(mask);\n            }\n        }\n\n        long mask = 0L;\n        for (long rowMask : rowSet) {\n            if ((mask & rowMask) > 0) {\n                System.out.println(\"No\");\n                return;\n            }\n            mask += rowMask;\n        }\n\n        System.out.println(\"Yes\");\n    }\n\n    public String solve(char[][] grid) {\n//        for (char[] row : grid) {\n//            System.out.println(Arrays.toString(row));\n//        }\n        Set<Integer> validRow = new HashSet<>();\n        Set<Integer> validCol = new HashSet<>();\n        for (int row = 0; row < grid.length; row++) {\n            for (int col = 0; col < grid[0].length; col++) {\n                if (grid[row][col] == '#') {\n                    validRow.add(row);\n                    validCol.add(col);\n                }\n            }\n        }\n\n        for (int row = 0; row < grid.length; row++) {\n            if (!validRow.contains(row)) {\n                continue;\n            }\n            validRow.remove(row);\n            for (int matchingRow = row + 1; matchingRow < grid.length; matchingRow++) {\n                if (rowMathces(grid, row, matchingRow)) {\n                    if (validRow.contains(matchingRow)) {\n                        validRow.remove(matchingRow);\n                    } else {\n                        return \"No\";\n                    }\n                }\n            }\n\n            for (int col = 0; col < grid[row].length; col++) {\n                if (grid[row][col] == '#') {\n                    if (validCol.contains(col)) {\n                        validCol.remove(col);\n                    } else {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n        return \"Yes\";\n    }\n\n    private boolean rowMathces(char[][] grid, int row, int matchingRow) {\n        for (int col = 0; col < grid[row].length; col++) {\n            if (grid[row][col] != grid[matchingRow][col]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n//        Scanner scan = new Scanner(System.in);\n//        int R = scan.nextInt();\n//        int C = scan.nextInt();\n//        scan.nextLine();\n//        char[][] grid = new char[R][C];\n//        for (int i = 0; i < R; i++) {\n//            grid[i] = scan.nextLine().toCharArray();\n//        }\n//\n//        cf924 sol = new cf924();\n//        System.out.println(sol.solve(grid));\n        solve3();\n\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring M[55];\nvector<int> R[55], C[55];\nbool vr[55], vc[55];\nvector<int> cr, cc;\nvoid dfs(int u, bool d) {\n  if (!d) {\n    cr.push_back(u);\n    vr[u] = 1;\n    for (int c : R[u]) {\n      if (!vc[c]) dfs(c, 1);\n    }\n  } else {\n    cc.push_back(u);\n    vc[u] = 1;\n    for (int r : C[u]) {\n      if (!vr[r]) dfs(r, 0);\n    }\n  }\n}\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> M[i];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (M[i][j] == '#') R[i].push_back(j);\n    }\n  }\n  for (int j = 0; j < m; j++) {\n    for (int i = 0; i < n; i++) {\n      if (M[i][j] == '#') C[j].push_back(i);\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (vr[i]) continue;\n    cr.clear(), cc.clear();\n    dfs(i, 0);\n    for (int r : cr) {\n      for (int c : cc) {\n        if (M[r][c] != '#') {\n          puts(\"No\");\n          return 0;\n        }\n      }\n    }\n  }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\nimport java.io.*;\n\npublic class Main\n{\n\tstatic class FastReader\n    {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastReader()\n        {\n            br = new BufferedReader(new\n                     InputStreamReader(System.in));\n        }\n\n        String next()\n        {\n            while (st == null || !st.hasMoreElements())\n            {\n                try\n                {\n                    st = new StringTokenizer(br.readLine());\n                }\n                catch (IOException  e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt()\n        {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong()\n        {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble()\n        {\n            return Double.parseDouble(next());\n        }\n\n        String nextLine()\n        {\n            String str = \"\";\n            try\n            {\n                str = br.readLine();\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n\n\tpublic static void main (String[] args)\n\t{\n\t\tFastReader reader = new FastReader();\n\t\tint n = reader.nextInt();\n\t\tint m = reader.nextInt();\n\t\tString[] input = new String[n];\n\n\t\tfor (int i=0; i<n; i++)\n\t\t\tinput[i] = reader.nextLine();\n\n\t\tboolean check = true;\n\n\t\tfor (int i=0; i<n; i++)\n\t\t{\n\t\t\tfor (int j=i+1; j<n; j++)\n\t\t\t{\n\t\t\t\tif (!input[i].equals(input[j]))\n\t\t\t\t{\n\t\t\t\t\tfor (int k=0; k<m; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (input[i].charAt(k)=='#' && input[j].charAt(k)=='#')\n\t\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (check)\n\t\t\tSystem.out.println (\"Yes\");\n\t\telse\n\t\t\tSystem.out.println (\"No\");\n\n\t}\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m = map(int,input().split())\nmat = []\nfor i in range(n):\n    mat.append(input())\narr = [[] for i in range(n)]\ncol = [[] for i in range(m)]\np = True\nfor i in range(n):\n    s = mat[i]\n    for j in range(m):\n        if s[j]=='#':\n            arr[i].append(j)\n            col[j].append(i)\n    #print(arr)\n    #print(col)\n    for x in arr[i]:\n        for y in col[x]:\n            if y!=i:\n                if arr[y]!=arr[i]:\n                    #print(y,i)\n                    #print(arr[y],arr[i])\n                    p = False\n                    break\n        if not p:\n            break\n    if not p:\n        break\nif p:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n"
        },
        {
            "language": 1,
            "solution": "import sys\nn,m = raw_input().strip().split(' ')\nsys.setrecursionlimit(50*50*50)\nn=int(n)\nm=int(m)\nx=[]\nvis=[]\nf=True\ncoun=0\nxl=[0]*n\nyl=[0]*m\ndef itis(xc,yc):\n\t# global coun\n\txl[xc]=1\n\tyl[yc]=1\n\tvis[xc][yc]=coun\n\t# print(xc,yc,coun,n,m)\n\tfor i in range(0,n):\n\t\tif (vis[i][yc]==0) and (x[i][yc]=='#'):\n\t\t\titis(i,yc)\n\tfor i in range(0,m):\n\t\tif (vis[xc][i]==0) and (x[xc][i]=='#'):\n\t\t\titis(xc,i)\n\n\nfor i in range(0,n):\n\tvis.append([0]*m)\n\ty=raw_input().strip()\n\tx.append(y)\n\nfor i in range(0,n):\n\tfor j in range(0,m):\n\t\tif x[i][j]=='#' and vis[i][j]==0:\n\t\t\t# global coun\n\t\t\tcoun+=1\n\t\t\t# print(i,j)\n\t\t\titis(i,j)\n\t\t\t# print(xl,yl)\n\t\t\tfor xc in range(0,n):\n\t\t\t\tfor yc in range(0,m):\n\t\t\t\t\tif (xl[xc]==1 and yl[yc]==1 and x[xc][yc]!='#'):\n\t\t\t\t\t\t# global f\n\t\t\t\t\t\tf=False\n\t\t\t\t\t\tbreak\n\t\t\t\txl[xc]=0\n\t\t\tfor yc in range(0,m):\n\t\t\t\tyl[yc]=0\n\t\tif not f:\n\t\t\tbreak\n\tif not f:\n\t\t\tbreak\nif f:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring s[51];\nint n, m;\nbool check(int i, int j) {\n  for (int k = 1; k <= n; ++k)\n    if (s[k][j] == '#' && s[k] != s[i]) return false;\n  return true;\n}\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i) cin >> s[i];\n  for (int i = 1; i <= n; ++i)\n    for (int j = 0; j <= m - 1; ++j)\n      if (s[i][j] == '#')\n        if (!check(i, j)) {\n          cout << \"No\";\n          return 0;\n        }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.Set;\n\n\npublic class Main {\n\n\n    public static void main(String[] args) throws IOException {\n        //BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        Scanner in = new Scanner(System.in);\n        int n,m;\n        n = in.nextInt();\n        m = in.nextInt();\n        ArrayList< ArrayList<Integer>> st = new ArrayList<>();\n        ArrayList< ArrayList<Integer>> form = new ArrayList<>();\n        for(int i=0;i<m;i++){\n            form.add(new ArrayList<>());\n        }\n        in.nextLine();\n        for(int i=0;i<n;i++){\n            String t = in.nextLine();\n            //System.out.println(t);\n            st.add(new ArrayList<>());\n            for(int j=0;j<m;j++){\n                if(t.charAt(j)=='#') {\n                    st.get(i).add(j);\n                    form.get(j).add(i);\n                }\n            }\n        }\n        for(int i=0;i<m;i++){\n            for(int j=1;j<form.get(i).size();j++)\n            {\n                //System.out.println(st.get(j));\n                //System.out.println(st.get(j-1));\n                if(!st.get(form.get(i).get(j)).equals(st.get(form.get(i).get(j-1)))){\n                    //System.out.println(i);\n                   // System.out.println(st.get(j));\n                    //System.out.println(st.get(j-1));\n                    System.out.println(\"No\");\n                    System.exit(0);\n                }\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n}"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class BMosaic {\n\n  private static final String REGEX = \" \";\n  private static final Boolean DEBUG = false;\n  private static final String FILE_NAME = \"input.txt\";\n\n\n  public static void main(String[] args) throws IOException {\n    if (DEBUG) {\n      generate();\n    }\n    Solver solver = new Solver();\n    solver.readData();\n    solver.solve();\n    solver.print();\n  }\n\n  private static void generate() throws IOException {\n//    FileWriter writer = new FileWriter(\"input.txt\");\n//    writer.close();\n  }\n\n  private static class Solver {\n    private StringBuilder myStringBuilder = new StringBuilder();\n    int n, m;\n    char[][] mos;\n\n    void readData() throws IOException {\n      Scanner scanner = new Scanner();\n      n = scanner.nextInt();\n      m = scanner.nextInt();\n      mos = new char[n][m];\n      for (int i = 0; i < n; i++) {\n        String s = scanner.nextLine();\n        for (int j = 0; j < m; j++) {\n          mos[i][j] = s.charAt(j);\n        }\n      }\n      scanner.close();\n    }\n\n    void solve() {\n\n      for (int i = 0; i < n; i++) {\n        Set<Integer> colsToCheck = new HashSet<>();\n        for (int j = 0; j < m; j++) {\n          if (mos[i][j] == '#') {\n            colsToCheck.add(j);\n          }\n        }\n\n        Set<Integer> rowsToCheck = new HashSet<>();\n        for (int i1 = 0; i1 < n; i1++) {\n          if (i1 == i) {\n            continue;\n\n          }\n          for (int col : colsToCheck) {\n            if (mos[i1][col] == '#') {\n              rowsToCheck.add(i1);\n              break;\n            }\n          }\n        }\n        for (Integer rowToCheck : rowsToCheck) {\n          if (!Arrays.equals(mos[i], mos[rowToCheck])) {\n            out(\"No\");\n            return;\n          }\n        }\n      }\n      out(\"Yes\");\n\n    }\n\n    void print() {\n      System.out.println(myStringBuilder);\n    }\n\n\n    void out(Object object) {\n      myStringBuilder.append(object);\n    }\n\n    void out(String string) {\n      myStringBuilder.append(string);\n    }\n\n    public void out(boolean b) {\n      myStringBuilder.append(b);\n    }\n\n    public void out(char c) {\n      myStringBuilder.append(c);\n    }\n\n    public void out(int i) {\n      myStringBuilder.append(i);\n    }\n\n    public void out(long lng) {\n      myStringBuilder.append(lng);\n    }\n\n    public void out(float f) {\n      myStringBuilder.append(f);\n    }\n\n    public void out(double d) {\n      myStringBuilder.append(d);\n    }\n\n    public void newLine() {\n      myStringBuilder.append(\"\\n\");\n    }\n\n    @SuppressWarnings(\"SameParameterValue\")\n    int[] splitInteger(String string, int n) {\n      final String[] split = string.split(REGEX, n);\n      int[] result = new int[split.length];\n      for (int i = 0; i < n; ++i) {\n        result[i] = Integer.parseInt(split[i]);\n      }\n      return result;\n    }\n\n    public int[] splitInteger(String string) {\n      return splitInteger(string, 0);\n    }\n\n\n    @SuppressWarnings(\"SameParameterValue\")\n    long[] splitLong(String string, int n) {\n      final String[] split = string.split(REGEX, n);\n      long[] result = new long[split.length];\n      for (int i = 0; i < n; ++i) {\n        result[i] = Long.parseLong(split[i]);\n      }\n      return result;\n    }\n\n    public long[] splitLong(String string) {\n      return splitLong(string, 0);\n    }\n\n    @SuppressWarnings(\"SameParameterValue\")\n    double[] splitDouble(String string, int n) {\n      final String[] split = string.split(REGEX, n);\n      double[] result = new double[split.length];\n      for (int i = 0; i < n; ++i) {\n        result[i] = Double.parseDouble(split[i]);\n      }\n      return result;\n    }\n\n    public double[] splitDouble(String string) {\n      return splitDouble(string, 0);\n    }\n\n    @SuppressWarnings(\"SameParameterValue\")\n    String[] splitString(String string, int n) {\n      return string.split(REGEX, n);\n    }\n\n    public int max(int a, int b) {\n      return Math.max(a, b);\n    }\n\n    public int max(int[] arr) {\n      int max = Integer.MIN_VALUE;\n      for (int x : arr) {\n        max = max(max, x);\n      }\n      return max;\n    }\n\n    public long max(long a, long b) {\n      return Math.max(a, b);\n    }\n\n    public int min(int a, int b) {\n      return Math.min(a, b);\n    }\n\n    public long min(long a, long b) {\n      return Math.min(a, b);\n    }\n\n    public double max(double a, double b) {\n      return Math.max(a, b);\n    }\n\n    public double min(double a, double b) {\n      return Math.min(a, b);\n    }\n\n    private final static int MOD = 1000000009;\n\n    int multMod(int a, int b) {\n      return ((a % MOD) * (b % MOD)) % MOD;\n    }\n\n    int sumMod(int a, int b) {\n      return ((a % MOD) + (b % MOD)) % MOD;\n    }\n\n    long multMod(long a, long b) {\n      return ((a % MOD) * (b % MOD)) % MOD;\n    }\n\n    long sumMod(long a, long b) {\n      return ((a % MOD) + (b % MOD)) % MOD;\n    }\n\n    int sum(int[] arr) {\n      int sum = 0;\n      for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n      }\n      return sum;\n    }\n\n    long sum(long[] arr) {\n      long sum = 0;\n      for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n      }\n      return sum;\n    }\n\n    private class Scanner {\n      private int currentIndex = 0;\n      private String[] objects;\n      private final BufferedReader myReader;\n      private Computable<Character> charComputer;\n      private Computable<Double> doubleComputer;\n      private Computable<Integer> intComputer;\n      private Computable<Long> longComputer;\n\n      Scanner() throws FileNotFoundException {\n        InputStream in = DEBUG ? new FileInputStream(FILE_NAME) : System.in;\n        myReader = new BufferedReader(new InputStreamReader(in));\n        charComputer = () -> objects[currentIndex].charAt(0);\n        doubleComputer = () -> Double.parseDouble(objects[currentIndex]);\n        intComputer = () -> Integer.parseInt(objects[currentIndex]);\n        longComputer = () -> Long.parseLong(objects[currentIndex]);\n      }\n\n      String nextLine() throws IOException {\n        objects = null;\n        currentIndex = 0;\n        return myReader.readLine();\n      }\n\n      int nextInt() throws IOException {\n        return next(intComputer);\n      }\n\n      int[] nextIntArray(int n) throws IOException {\n        return splitInteger(nextLine(), n);\n      }\n\n      long[] nextLongArray(int n) throws IOException {\n        return splitLong(nextLine(), n);\n      }\n\n      long nextLong() throws IOException {\n        return next(longComputer);\n\n      }\n\n      double nextDouble() throws IOException {\n        return next(doubleComputer);\n\n      }\n\n      char nextChar() throws IOException {\n        return next(charComputer);\n      }\n\n      <T> T next(Computable<T> computer) throws IOException {\n        T result;\n        if (objects == null || currentIndex >= objects.length) {\n          String s = myReader.readLine();\n          objects = s.split(\" \");\n          currentIndex = 0;\n        }\n        result = computer.compute();\n        currentIndex++;\n        return result;\n      }\n\n      public void close() throws IOException {\n        myReader.close();\n      }\n\n    }\n\n    interface Computable<T> {\n      T compute();\n    }\n\n  }\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 52;\nchar a[N][N];\nint n, m;\nbool r[N], c[N];\nbool vr[N], vc[N];\nbool check() {\n  int i, j, i2, k;\n  int first;\n  for (j = 0; j < m; j++) {\n    first = -1;\n    for (i = 0; i < n; i++)\n      if (a[i][j] == '#') {\n        if (first == -1)\n          first = i;\n        else if (strcmp(a[i], a[first]) != 0)\n          return false;\n      }\n  }\n  return true;\n}\nint main() {\n  int i;\n  cin >> n >> m;\n  for (i = 0; i < n; i++) cin >> a[i];\n  if (check())\n    cout << \"Yes\\n\";\n  else\n    cout << \"No\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "BLACK, WHITE = \"#\", \".\"\nn, m = list(map(int, input().split()))\nblacks = [{i for i, c in enumerate(input()) if c == BLACK} for i in range(n)]\nanswer = \"Yes\"\nfor i in range(n):\n    for j in range(i):\n        if blacks[i] & blacks[j] and blacks[i] != blacks[j]:\n            answer = \"No\"\nprint(answer)"
        },
        {
            "language": 4,
            "solution": "import java.awt.Point;\nimport java.util.*;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\t//////\n\tstatic class FastReader {\n\t\tBufferedReader br;\n\t\tStringTokenizer st;\n\n\t\tpublic FastReader() {\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\t}\n\n\t\tString next() {\n\t\t\twhile (st == null || !st.hasMoreElements()) {\n\t\t\t\ttry {\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn st.nextToken();\n\t\t}\n\n\t\tint nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tlong nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tdouble nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\n\t\tString nextLine() {\n\t\t\tString str = \"\";\n\t\t\ttry {\n\t\t\t\tstr = br.readLine();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\n\t//////\n\tpublic static long modularExponentiation(long x, long n, long M) {\n\t\tlong result = 1;\n\t\twhile (n > 0) {\n\t\t\tif (n % 2 == 1)\n\t\t\t\tresult = (result * x) % M;\n\t\t\tx = (x * x) % M;\n\t\t\tn = n / 2;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static long modularExponentiation1(long x, long n) {\n\t\tlong result = 1;\n\t\twhile (n > 0) {\n\t\t\tif (n % 2 == 1)\n\t\t\t\tresult = (result * x);\n\t\t\tx = (x * x);\n\t\t\tn = n / 2;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/////\n\n\tstatic public int fun(int num) {\n\t\tint prod = 1;\n\t\twhile (num > 0) {\n\t\t\tif (num % 10 != 0) {\n\t\t\t\tprod = prod * (num % 10);\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\treturn prod;\n\t}\n\n\tpublic static boolean dfs(int x, int find, boolean[] visited, int[][] matrix) {\n\n\t\tboolean ans = false;\n\t\tif (x == find) {\n\t\t\tans = true;\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\tif (visited[i] == false && matrix[x][i] == 1) {\n\t\t\t\tvisited[i] = true;\n\t\t\t\tans = ans || dfs(i, find, visited, matrix);\n\t\t\t}\n\t\t}\n\n\t\treturn ans;\n\t}\n\n\tstatic int lis(int arr[], int n, int k, int b) {\n\t\tint lis[] = new int[n];\n\t\tint i, j, max = 0;\n\n\t\t/* Initialize LIS values for all indexes */\n\t\tfor (i = 0; i < n; i++)\n\t\t\tlis[i] = 1;\n\n\t\t/* Compute optimized LIS values in bottom up manner */\n\t\tfor (i = 1; i < n; i++)\n\t\t\tfor (j = 0; j < i; j++)\n\t\t\t\tif (arr[i] >= k * arr[j] + b && lis[i] < lis[j] + 1)\n\t\t\t\t\tlis[i] = lis[j] + 1;\n\n\t\t/* Pick maximum of all LIS values */\n\t\tfor (i = 0; i < n; i++)\n\t\t\tif (max < lis[i])\n\t\t\t\tmax = lis[i];\n\n\t\treturn max;\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tFastReader scan = new FastReader();\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\n\t\tint N = scan.nextInt();\n\t\tint M = scan.nextInt();\n\t\tchar[][] A = new char[N][M];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tString str = scan.next();\n\t\t\tA[i] = str.toCharArray();\n\t\t}\n\n\t\tfor(int i=0;i<N;i++){\n\t\t\tfor(int k=i+1;k<N;k++){\n\t\t\t\tint flag1=0,flag2=0;\n\t\t\t\tfor(int j=0;j<M;j++){\n\t\t\t\t\tif(A[i][j]!=A[k][j]){\n\t\t\t\t\t\tflag1=1;\n\t\t\t\t\t}\n\t\t\t\t\tif((A[i][j]=='.'&&A[k][j]=='.')||(A[i][j]=='#'&&A[k][j]=='.')||(A[i][j]=='.'&&A[k][j]=='#')){\n\t\t\t\t\t\t\n\t\t\t\t\t}else\n\t\t\t\t\t\tflag2=1;\n\t\t\t\t}\n\t\t\t\tif(flag1==0||flag2==0){\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Yes\");\n\t\t\n\t\tpw.close();\n\t}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  string a[50];\n  int n, k, i, j, t;\n  bool flag = true;\n  cin >> n >> k;\n  for (i = 0; i < n; i++) cin >> a[i];\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < k; j++) {\n      if (a[i][j] == '#') {\n        for (t = i + 1; t < n; t++) {\n          if (a[t][j] == '#') {\n            if (a[t] != a[i]) {\n              flag = false;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (flag == true)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 55;\nint n, m;\nint used[N][N];\nint di[] = {0, 1, 0, -1};\nint dj[] = {1, 0, -1, 0};\nchar f[N][N];\nchar nf[N][N];\nvector<int> compi[N];\nvector<int> compj[N];\nbool ins(int i, int j) { return 0 <= i && i < n && 0 <= j && j < m; }\nvoid dfs(int I, int J, int cn) {\n  compi[cn].push_back(I);\n  compj[cn].push_back(J);\n  used[I][J] = 1;\n  for (int d = 0; d < 4; d++) {\n    int i = I + di[d];\n    int j = J + dj[d];\n    while (ins(i, j)) {\n      if (f[i][j] == '#' && !used[i][j]) {\n        dfs(i, j, cn);\n        break;\n      }\n      i += di[d];\n      j += dj[d];\n    }\n  }\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < m; j++) {\n      f[i][j] = s[j];\n      nf[i][j] = '.';\n    }\n  }\n  int cn = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (f[i][j] == '#' && !used[i][j]) {\n        dfs(i, j, cn);\n        cn++;\n      }\n    }\n  }\n  for (int k = 0; k < cn; k++) {\n    for (int i : compi[k]) {\n      for (int j : compj[k]) {\n        nf[i][j] = '#';\n      }\n    }\n  }\n  int eq = 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (nf[i][j] != f[i][j]) {\n        eq = 0;\n      }\n    }\n  }\n  if (eq)\n    cout << \"Yes\\n\";\n  else\n    cout << \"No\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\nimport static java.util.Arrays.fill;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.sort;\nimport static java.util.Collections.sort;\n\n\npublic class B957 \n{\n\n\tpublic static int mod = 1000000007;\n\tpublic static long INF = (1L << 60);\n\tstatic FastScanner2 in = new FastScanner2();\n\tstatic OutputWriter out = new OutputWriter(System.out);\n \n\tpublic static void main(String[] args) \n\t{\n\n\t\tint n=in.nextInt();\n\t\tint m=in.nextInt();\n\t\tchar[][] arr=new char[n+1][m+1];\n\t\tSet<Integer>[] rowlist=new HashSet[n+1];\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\trowlist[i]=new HashSet<>();\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tString s=in.nextLine();\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t{\n\t\t\t\tarr[i][j]=s.charAt(j-1);\n\t\t\t\tif(arr[i][j]=='#')\n\t\t\t\t\trowlist[i].add(j);\n\t\t\t}\n\t\t}\n\t\tboolean[] mark=new boolean[n+1];\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\t\n\t\t\tSet<Integer> set1=new HashSet<>();\n\t\t\t\tfor(int row=1;row<=n;row++)\n\t\t\t\t{\n\t\t\t\t\tfor(int col=1;col<=m;col++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(arr[row][col]=='#' && rowlist[i].contains(col))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\tset1.add(row);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSet<Integer> set2=new HashSet<>();\n\t\t\t\tfor(int row=1;row<=n;row++)\n\t\t\t\t{\n\t\t\t\t\tfor(int col=1;col<=m;col++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(arr[row][col]=='#' && set1.contains(row))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tset2.add(col);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int tt1 : set1)\n\t\t\t\t{\n\t\t\t\tfor(int tt : set2)\n\t\t\t\t{\n\t\t\t\t\tif(arr[tt1][tt]=='#')\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t\tout.close();\n\n\t}\n\t\n\tpublic static long pow(long x, long n) \n\t{\n\t\tlong res = 1;\n\t\tfor (long p = x; n > 0; n >>= 1, p = (p * p)) \n\t\t{\n\t\t\tif ((n & 1) != 0) \n\t\t\t{\n\t\t\t\tres = (res * p);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tpublic static long pow(long x, long n, long mod) \n\t{\n\t\tlong res = 1;\n\t\tfor (long p = x; n > 0; n >>= 1, p = (p * p) % mod) \n\t\t{\n\t\t\tif ((n & 1) != 0) \n\t\t\t{\n\t\t\t\tres = (res * p % mod);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static long gcd(long n1, long n2)\n\t{\n\t\tlong r;\n\t\twhile (n2 != 0) \n\t\t{\n\t\t\tr = n1 % n2;\n\t\t\tn1 = n2;\n\t\t\tn2 = r;\n\t\t}\n\t\treturn n1;\n\t}\n\n\tpublic static long lcm(long n1, long n2) \n\t{\n\t\tlong answer = (n1 * n2) / (gcd(n1, n2));\n\t\treturn answer;\n\t}\n\t\n\tstatic class FastScanner2 \n\t{\n\t\tprivate byte[] buf = new byte[1024];\n\t\tprivate int curChar;\n\t\tprivate int snumChars;\n\n\t\tpublic int read() \n\t\t{\n\t\t\tif (snumChars == -1)\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tif (curChar >= snumChars) \n\t\t\t{\n\t\t\t\tcurChar = 0;\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tsnumChars = System.in.read(buf);\n\t\t\t\t} catch (IOException e) \n\t\t\t\t{\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (snumChars <= 0)\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn buf[curChar++];\n\t\t}\n\n\t\tpublic String nextLine() \n\t\t{\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo \n\t\t\t{\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} \n\t\t\twhile (!isEndOfLine(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tpublic String nextString() \n\t\t{\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = read();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo \n\t\t\t{\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = read();\n\t\t\t} \n\t\t\twhile (!isSpaceChar(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tpublic long nextLong()\n\t\t{\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = read();\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tdo \n\t\t\t{\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = read();\n\t\t\t} \n\t\t\twhile (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic int nextInt() \n\t\t{\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = read();\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tdo \n\t\t\t{\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = read();\n\t\t\t} \n\t\t\twhile (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic int[] nextIntArray(int n)\n\t\t{\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) \n\t\t\t{\n\t\t\t\tarr[i] = nextInt();\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\n\t\tpublic long[] nextLongArray(int n)\n\t\t{\n\t\t\tlong[] arr = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) \n\t\t\t{\n\t\t\t\tarr[i] = nextLong();\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\n\t\tprivate boolean isSpaceChar(int c)\n\t\t{\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n\n\t\tprivate boolean isEndOfLine(int c) \n\t\t{\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\n\t\t}\n\t}\n\n\tstatic class InputReader \n\t{\n\t\tpublic BufferedReader reader;\n\t\tpublic StringTokenizer tokenizer;\n\n\t\tpublic InputReader(InputStream inputstream) \n\t\t{\n\t\t\treader = new BufferedReader(new InputStreamReader(inputstream));\n\t\t\ttokenizer = null;\n\t\t}\n\n\t\tpublic String nextLine() \n\t\t{\n\t\t\tString fullLine = null;\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens())\n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tfullLine = reader.readLine();\n\t\t\t\t} catch (IOException e)\n\t\t\t\t{\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\treturn fullLine;\n\t\t\t}\n\t\t\treturn fullLine;\n\t\t}\n\n\t\tpublic String next()\n\t\t{\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) \n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t\t} catch (IOException e) \n\t\t\t\t{\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokenizer.nextToken();\n\t\t}\n\n\t\tpublic long nextLong() \n\t\t{\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tpublic int[] nextIntArray(int n) \n\t\t{\n\t\t\tint a[] = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) \n\t\t\t{\n\t\t\t\ta[i] = nextInt();\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\n\t\tpublic long[] nextLongArray(int n)\n\t\t{\n\t\t\tlong a[] = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) \n\t\t\t{\n\t\t\t\ta[i] = nextLong();\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\n\t\tpublic int nextInt() \n\t\t{\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\t}\n\n\tstatic class OutputWriter \n\t{\n\t\tprivate final PrintWriter writer;\n\n\t\tpublic OutputWriter(OutputStream outputStream) \n\t\t{\n\t\t\twriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n\t\t}\n\n\t\tpublic OutputWriter(Writer writer)\n\t\t{\n\t\t\tthis.writer = new PrintWriter(writer);\n\t\t}\n\n\t\tpublic void print(Object... objects)\n\t\t{\n\t\t\tfor (int i = 0; i < objects.length; i++) \n\t\t\t{\n\t\t\t\tif (i != 0)\n\t\t\t\t\twriter.print(' ');\n\t\t\t\twriter.print(objects[i]);\n\t\t\t}\n\t\t}\n\n\t\tpublic void println(Object... objects)\n\t\t{\n\t\t\tprint(objects);\n\t\t\twriter.println();\n\t\t}\n\n\t\tpublic void close() \n\t\t{\n\t\t\twriter.close();\n\t\t}\n\n\t\tpublic void flush() \n\t\t{\n\t\t\twriter.flush();\n\t\t}\n\t}\nprivate static boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n\t\n\tprivate static void debug(Object... o) \n\t{\n\t\tif (!oj)\n\t\t\tSystem.out.println(Arrays.deepToString(o));\n\t}\n\tprivate static void tr(Object... o) \n\t{\n\t\tif (!oj)\n\t\t\tSystem.out.println(Arrays.deepToString(o));\n\t}\n}"
        },
        {
            "language": 4,
            "solution": "import java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n\npublic class B {\n\tpublic static void main (String[] args){\n\t\tScanner scanner = new Scanner (System.in);\n\t\t\n\t\tint n = scanner.nextInt();\n\t\tint m =  scanner.nextInt();\n\t\tchar[][] arr = new char[n][m];\n\t\tscanner.nextLine();\n\t\tfor (int i =  0; i < n; i++){\n\t\t\tarr[i] = scanner.nextLine().toCharArray();\n\t\t}\n\t\t\n\t\tboolean[] chosenRow = new boolean[n];\n\t\tboolean[] chosenCol =  new boolean[m];\n\t\tfor (int i = 0 ; i < n ; i++){\n\t\t\tif (chosenRow[i]) continue;\n\t\t\tfor (int j = i+1 ; j<n ; j++){\n\t\t\t\tif (Arrays.equals(arr[i], arr[j])){\n\t\t\t\t\tchosenRow[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int k = 0; k < m ; k++){\n\t\t\t\tif (arr[i][k] == '#') {\n\t\t\t\t\tif (chosenCol[k]) {\n\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tchosenCol[k] =true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t\t\n\t}\n\n\t\n\t\n\t\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport static java.lang.Math.ceil;\nimport static java.lang.Math.toDegrees;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        File file = new File(\"in.txt\");\n        File fileOut = new File(\"out.txt\");\n        InputStream inputStream = null;\n        OutputStream outputStream = null;\n        // try {inputStream= new FileInputStream(file);} catch (FileNotFoundException ex){return;};\n//        try {outputStream= new FileOutputStream(fileOut);} catch (FileNotFoundException ex){return;};\n        inputStream = System.in;\n        outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        Task solver = new Task();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n\n}\n\nclass Task {\n    public void solve(int testNumber, InputReader in, PrintWriter out) {\n        int n = in.nextInt();\n        int m = in.nextInt();\n        String[] map = new String[n];\n        for(int i=0; i<n; i++){\n            map[i] = in.next();\n        }\n\n        Set<Set<Integer>> recs = new HashSet<>();\n        for(int i=0; i<n; i++){\n            recs.add(setPos(map[i]));\n        }\n\n        for(Set<Integer> l : recs){\n            for(Set<Integer> k : recs){\n                if(l.equals(k)){\n                    continue;\n                }\n                Set<Integer> j = new HashSet<>(l);\n                j.retainAll(k);\n                if(j.size()>0){\n                    out.println(\"No\");\n                    return;\n                }\n            }\n        }\n\n        out.println(\"Yes\");\n\n\n\n\n\n    }\n\n\n    public Set<Integer> setPos(String row){\n        Set<Integer> l = new HashSet<>();\n        for(int i=0; i<row.length(); i++){\n            if(row.charAt(i) == '#'){\n                l.add(i);\n            }\n        }\n        return l;\n    }\n\n\n\n}\n\n\nclass InputReader {\n    public BufferedReader reader;\n    public StringTokenizer tokenizer;\n\n    public InputReader(InputStream stream) {\n        reader = new BufferedReader(new InputStreamReader(stream), 32768);\n        tokenizer = null;\n    }\n\n    public String next() {\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            try {\n                tokenizer = new StringTokenizer(reader.readLine());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return tokenizer.nextToken();\n    }\n\n    public String nextLine(){\n        try {\n            return reader.readLine();\n        } catch (IOException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    public int nextInt() {\n        return Integer.parseInt(next());\n    }\n    public long nextLong() { return Long.parseLong(next()); }\n\n}\n\n\n\nclass Pair<F, S> {\n    public final F first;\n    public final S second;\n\n\n\n\n    public Pair(F first, S second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof Pair)) {\n            return false;\n        }\n        Pair<?, ?> p = (Pair<?, ?>) o;\n        return Objects.equals(p.first, first) && Objects.equals(p.second, second);\n    }\n\n    @Override\n    public int hashCode() {\n        return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + first + \", \" + second + ')';\n    }\n}\n\nclass IntPair extends Pair<Integer, Integer>{\n    public IntPair(Integer first, Integer second){\n        super(first, second);\n    }\n}\n\nclass LPair extends Pair<Long, Long>{\n    public LPair(Long first, Long second){\n        super(first, second);\n    }\n}"
        },
        {
            "language": 3,
            "solution": "import functools\nimport sys\n\n\n\n\n\ndef with_args(deco):\n    @functools.wraps(deco)\n    def wrapper(*args,**kwargs):\n        def res(func):\n            return deco(func,*args,**kwargs)\n        return res\n    return wrapper\n\n\n@with_args\ndef deco(func,str = \"\u044f \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u0435\u043d\"):\n    @functools.wraps(func)\n    def res(*args,**kwargs):\n        print(str,end = \"\\n\")\n        return func(*args,**kwargs)\n    return res\n\n@deco()\ndef id(x):\n    return x\n\n\ndef fib(n):\n    a = b = 1\n    for i in range(n):\n        yield a\n        a,b = b,a+b\n\nn,m = map(int,input().split())\nvec = []\nfor i in range(n):\n    s = input()\n    res = set()\n    for j in range(m):\n        if s[j] =='#':\n            res.add(j)\n    vec.append(res)\n\nflag = False\nfor i in range(n):\n    for j in range(i,n):\n        a = vec[i].intersection(vec[j])\n        flag = flag or (a!=vec[i] or a!=vec[j]) and a!=set()\n\n\nprint(\"No\" if flag else \"Yes\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n;\n  int m;\n  cin >> n >> m;\n  char arr[n][m];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> arr[i][j];\n    }\n  }\n  vector<set<int>> positions;\n  for (int col = 0; col < m; col++) {\n    set<int> match;\n    for (int row = 0; row < n; row++) {\n      if (arr[row][col] == '#') {\n        match.insert(row);\n      }\n    }\n    positions.push_back(match);\n  }\n  for (unsigned int i = 0; i < positions.size(); i++) {\n    for (unsigned int j = 0; j < i; j++) {\n      set<int> intersect;\n      set<int>& s1 = positions[i];\n      set<int>& s2 = positions[j];\n      set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(),\n                       std::inserter(intersect, intersect.begin()));\n      if (intersect.size() != 0 &&\n          (intersect.size() != s1.size() || intersect.size() != s2.size())) {\n        cout << \"No\" << '\\n';\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << '\\n';\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m, i, j, ii, jj;\n  cin >> n >> m;\n  char a[111][111];\n  for (i = 0; i < n; i++) cin >> a[i];\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      for (ii = 0; ii < n; ii++) {\n        for (jj = 0; jj < m; jj++) {\n          if (a[i][j] == '#' && a[ii][jj] == '#') {\n            int cnt = 0;\n            if (a[i][jj] == '#') cnt++;\n            if (a[ii][j] == '#') cnt++;\n            if (cnt == 1) {\n              cout << \"NO\";\n              return 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"YES\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 52;\nstring s[N];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) cin >> s[i];\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (s[i][j] == '#') {\n        for (int k = 0; k < n; ++k) {\n          if (s[k][j] == '#' && s[i] != s[k]) {\n            cout << \"No\\n\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string grid[n];\n  for (int i = 0; i < n; i++) {\n    cin >> grid[i];\n  }\n  vector<bool> checked(n);\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      bool same = true, intersection = false;\n      for (int k = 0; k < m; k++) {\n        same &= grid[i][k] == grid[j][k];\n        intersection |= grid[i][k] == '#' && grid[j][k] == '#';\n      }\n      if (!same && intersection) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m, i, j, fl = 0;\n  char A[50][51];\n  int R[100] = {0}, C[100] = {0};\n  cin >> n >> m;\n  i = 0;\n  while (i < n) {\n    scanf(\"%s\", A[i]);\n    i++;\n  }\n  i = 0;\n  while (i < n) {\n    if (R[i] == 0) {\n      R[i] = 1;\n      j = i + 1;\n      while (j < n) {\n        if (strcmp(A[i], A[j]) == 0) R[j] = 1;\n        j++;\n      }\n      j = 0;\n      while (j < m) {\n        if (A[i][j] == '#' && C[j] == 0)\n          C[j] = 1;\n        else if (A[i][j] == '#') {\n          fl = 1;\n          break;\n        }\n        j++;\n      }\n    }\n    if (fl == 1) break;\n    i++;\n  }\n  if (fl == 0)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "import sys\nn, m = [int(i) for i in input().split(\" \")]\ngrid = []\ncolumns_idx = set()\nlines_used = set()\nfor _ in range(n):\n    line = input()\n    grid.append(line)\n\nfor line in grid:\n    if line not in lines_used:\n        lines_used.add(line)\n        for i,c in enumerate(line):\n            if c=='#':\n                if i in columns_idx:\n                    print(\"No\")\n                    sys.exit()\n                else:\n                    columns_idx.add(i)\nprint(\"Yes\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nclass UnionFind {\n private:\n  vector<int> p, rank, setSize;\n  int numSets;\n\n public:\n  UnionFind(int N) {\n    setSize.assign(N, 1);\n    numSets = N;\n    rank.assign(N, 0);\n    p.assign(N, 0);\n    for (int i = 0; i < N; i++) p[i] = i;\n  }\n  int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }\n  bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }\n  void unionSet(int i, int j) {\n    if (!isSameSet(i, j)) {\n      numSets--;\n      int x = findSet(i), y = findSet(j);\n      if (rank[x] > rank[y]) {\n        p[y] = x;\n        setSize[x] += setSize[y];\n      } else {\n        p[x] = y;\n        setSize[y] += setSize[x];\n        if (rank[x] == rank[y]) rank[y]++;\n      }\n    }\n  }\n  int numDisjointSets() { return numSets; }\n  int sizeOfSet(int i) { return setSize[findSet(i)]; }\n};\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, m, i, j, k, last;\n  cin >> n >> m;\n  vector<string> s(n);\n  UnionFind uf(n + m);\n  for (i = 0; i < n; i++) {\n    cin >> s[i];\n    last = -1;\n    for (j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        uf.unionSet(i, j + n);\n        if (last == -1)\n          last = j;\n        else\n          uf.unionSet(last + n, j + n);\n      }\n    }\n  }\n  bool valid = true;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if ((s[i][j] == '.') && (uf.isSameSet(i, j + n))) valid = false;\n    }\n  }\n  if (valid)\n    cout << \"YES\\n\";\n  else\n    cout << \"NO\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "pairs= [int(s) for s in input().split(\" \")]\nR = int(pairs[0])\nC = int(pairs[1])\n\ndef convert(s):\n    if s == '.':\n        return 0\n    else:\n        return 1\nlines =[]\nmatrix = []\nfor i in range(R):\n    inpt= input()\n    lines.append(inpt.replace('.', 'D'))\n    matrix.append([convert(s) for s in list(inpt)])\n\n\ncan = True\nfor i in range(R):\n    if 1 not in matrix[i]:\n        pass\n    step_R = []\n    step_C = []\n    for j in range(C):\n        if matrix[i][j]==1:\n            step_C.append(j)\n\n    for j_ in step_C:\n        for i_ in range(R):\n            if matrix[i_][j_] == 1:\n                step_R.append(i_)\n\n\n    for i_ in step_R:\n        indices = [i for i, x in enumerate(matrix[i_]) if x == 1]\n        if indices != step_C:\n            can = False\n            break\n\n    indices=[]\n    for j_ in step_C:\n        for i_ in range(R):\n            if matrix[i_][ j_] == 1:\n                indices.append(i_)\n\n    if indices != step_R:\n        can = False\n        break\n\n    if can == False:\n        break\n\n    for i_ in step_R:\n        for j_ in step_C:\n            matrix[i_][ j_] = 0\n\nif can == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAX_H = 50;\nconst int MAX_W = 50;\nchar fs[MAX_H][MAX_W + 4];\nlong long bs[MAX_H];\nbool check(int h, int w, long long bs[]) {\n  long long bi = 1;\n  for (int x = 0; x < w; x++, bi <<= 1) {\n    long long b0 = 0;\n    for (int y = 0; y < h; y++)\n      if ((bs[y] & bi) != 0) {\n        if (b0 == 0)\n          b0 = bs[y];\n        else if (b0 != bs[y])\n          return false;\n      }\n  }\n  return true;\n}\nint main() {\n  int h, w;\n  scanf(\"%d%d\", &h, &w);\n  for (int y = 0; y < h; y++) scanf(\"%s\", fs[y]);\n  for (int y = 0; y < h; y++) {\n    bs[y] = 0;\n    for (int x = 0; x < w; x++)\n      if (fs[y][x] == '#') bs[y] |= (1LL << x);\n  }\n  if (!check(h, w, bs)) {\n    puts(\"No\");\n    return 0;\n  }\n  for (int x = 0; x < w; x++) {\n    bs[x] = 0;\n    for (int y = 0; y < h; y++)\n      if (fs[y][x] == '#') bs[x] |= (1LL << y);\n  }\n  if (!check(w, h, bs)) {\n    puts(\"No\");\n    return 0;\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n \n \npublic class test {\n    static boolean DEBUG_FLAG = false;\n    int INF = (int)1e9;\n    long MOD = 1000000007;\n    \n    static void debug(String s) {\n        if(DEBUG_FLAG) {\n            System.out.print(s);\n        }\n    }\n\n    \n    \n    \n    void solve(InputReader in, PrintWriter out) throws IOException {\n        int n = in.nextInt();\n        int m = in.nextInt();\n        char[][] s = new char[n][];\n        for(int i=0; i<n; i++) {\n            s[i] = in.next().toCharArray();\n        }\n        boolean[][] vis = new boolean[n][m];\n        int[][] a = new int[n+1][m+1];\n        ArrayList<Integer> r = new ArrayList<>();\n        ArrayList<Integer> c = new ArrayList<>();\n        boolean ok = true;\n        outer: for(int i=0; i<n; i++) {\n            for(int j=0; j<m; j++) {\n                if(s[i][j]!='#') continue;\n                if(vis[i][j]) continue;\n                r.add(i);\n                for(int k=0; k<r.size(); k++) {\n                    int rv = r.get(k);\n                    for(int l=0; l<m; l++) {\n                        if(s[rv][l]!='#') continue;\n                        if(vis[rv][l]) {ok = false; break outer;}\n                        if(!c.contains(l)) {\n                            c.add(l);\n                            for(int d=0; d<n; d++) {\n                                if(s[d][l]!='#') continue;\n                                if(vis[d][l]) {ok = false; break outer;}\n                                r.add(d);\n                            }\n                        }\n                    }\n                }\n                for(int x: r) {\n                    for(int y: c) {\n                        a[x][y] = 1;\n                        vis[x][y] = true;\n                    }\n                }\n                r = new ArrayList<>();\n                c = new ArrayList<>();\n            }\n        }\n        sec: for(int i=0; i<n; i++) {\n            for(int j=0; j<m; j++) {\n                if(a[i][j]==1 && s[i][j]!='#') {\n                    ok = false;\n                    break sec;\n                }\n            }\n        }\n//        for(int i=0; i<n; i++) {\n//            for(int j=0; j<m; j++) {\n//                out.print(a[i][j]);\n//            }\n//            out.println();\n//        }\n        if(ok) out.println(\"Yes\");\n        else out.println(\"No\");\n    }\n    \n    \n    public static void main(String[] args) throws IOException {\n        if(args.length>0 && args[0].equalsIgnoreCase(\"d\")) {\n            DEBUG_FLAG = true;\n        }\n        InputReader in = new InputReader();\n        PrintWriter out = new PrintWriter(System.out);\n        int t = 1;//in.nextInt();\n        long start = System.nanoTime();\n        while(t-- >0) {\n            new test().solve(in, out);\n        }\n        long end = System.nanoTime();\n        debug(\"\\nTime: \" + (end-start)/1e6 + \" \\n\\n\");\n        out.close();\n    }\n    \n    static class InputReader {\n        static BufferedReader br;\n        static StringTokenizer st;\n    \n        public InputReader() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n        \n        String next() {\n            while (st == null || !st.hasMoreTokens()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n        \n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n        \n        long nextLong() {\n            return Long.parseLong(next());\n        }\n        \n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n}"
        },
        {
            "language": 1,
            "solution": "n, m = map(int, raw_input().split())\ns = []\n \nfor i in range(n):\n    s.append(raw_input())\n \nz = 'Yes'\n \nfor i in range(n):\n    r = []\n    for j in range(m):\n        if s[i][j] == '#':\n            t = ''\n            for k in range(n): t += s[k][j]\n            r.append(t)\n \n    for k in range(len(r) - 1):\n        if r[k] != r[k + 1]: z = 'No'\n \nprint z"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar grid[55][55];\nbool done[55];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      scanf(\" %c\", &grid[i][j]);\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    if (done[i]) continue;\n    done[i] = true;\n    for (int j = i + 1; j < n; ++j) {\n      for (int k = 0; k < m; ++k) {\n        if (grid[i][k] == '#' && grid[j][k] == '#') {\n          string s1 = grid[i], s2 = grid[j];\n          if (s1 != s2) {\n            printf(\"No\");\n            return 0;\n          }\n          done[j] = true;\n        }\n      }\n    }\n  }\n  printf(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\n/**\n * Date: 21 Mar, 2018\n * Link :\n *\n * @author Prasad-Chaudhari\n * @email prasadc8897@gmail.com\n */\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class New_File_3 {\n\n    public static void main (String[] args) throws java.lang.Exception {\n        FastIO2 in = new FastIO2();\n        int n = in.ni();\n        int m = in.ni();\n        boolean[][] b =new boolean[n][m];\n        char c[][] = new char[n][m];\n        boolean r[] = new boolean[n];\n        boolean c1[] = new boolean[m];\n        for(int i=0;i<n;i++){\n            c[i] = in.next().toCharArray();\n        }\n        go:\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(c[i][j]=='#'){\n                    if(r[i]||c1[j]){\n                        break go;\n                    }\n                    // System.out.println(\"First vertix \"+i+\" \"+j);\n                        boolean c2[] = new boolean[m];\n                        boolean r2[] = new boolean[n];\n                        int count=0;\n                        for(int k=j;k<m;k++){\n                            if(c[i][k]=='#'){\n                                if(c1[k]||b[i][k]){\n                                    System.out.println(\"NO\");\n                                    return;\n                                }\n                                c2[k]=true;\n                                count++;\n                            }\n                        }\n                        int count2=0;\n                        for(int k=i;k<n;k++){\n                            if(c[k][j]=='#'){\n                                if(r[k]||b[k][j]){\n                                    System.out.println(\"NO\");\n                                    return;\n                                }\n                                r2[k]=true;\n                                count2+=count;\n                            }\n                        }\n                        // for(int k=0;k<n;k++){\n                        //     if(r2[k])System.out.print(k+\" \");\n                        // }\n                        // System.out.println();\n                        // for(int k=0;k<m;k++){\n                        //     if(c2[k])System.out.print(k+\" \");\n                        // }\n                        // System.out.println();\n                        for(int k=i;k<n;k++){\n                            if(r2[k]){\n                                for(int l=j;l<m;l++){\n                                    if(c2[l]){\n                                        if(c[k][l]=='#'){\n                                            count2--;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        for(int k=0;k<n;k++){\n                            for(int l=0;l<m;l++){\n                                if(r2[k]||c2[l]){\n                                    if(b[k][l]){\n                                        System.out.println(\"NO\");\n                                        return;\n                                    }\n                                }\n                            }\n                        }\n                        if(count2==0){\n                            for(int k=i;k<n;k++){\n                                for(int l=j;l<m;l++){\n                                    if(r2[k]&&c2[l]){\n                                        if(c[k][l]=='#'){\n                                            c[k][l]='.';\n                                            b[k][l]=true;\n                                        }\n                                    }\n                                }\n                            }\n                            for(int k=0;k<n;k++){\n                                if(r2[k]){\n                                    r[k]=true;\n                                }\n                            }\n                            for(int k=0;k<m;k++){\n                                if(c2[k]){\n                                    c1[k]=true;\n                                }\n                            }\n                        }\n                        else{\n                            System.out.println(\"NO\");\n                            return;\n                        }\n                    }\n                }\n        }\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                // System.out.print(c[i][j]);\n                if(c[i][j]=='#'){\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n            // System.out.println();\n        }\n        System.out.println(\"YES\");\n    }\n\n    static class FastIO2 {\n\n        private final BufferedReader br;\n        private String s[];\n        private int index;\n\n        public FastIO2() throws IOException {\n            br = new BufferedReader(new InputStreamReader(System.in));\n            index = 0;\n        }\n\n        public int ni() throws IOException {\n            return Integer.parseInt(nextToken());\n        }\n\n        public double nd() throws IOException {\n            return Double.parseDouble(nextToken());\n        }\n\n        public long nl() throws IOException {\n            return Long.parseLong(nextToken());\n        }\n\n        public String next() throws IOException {\n            return nextToken();\n        }\n\n        public String nli() throws IOException {\n            return br.readLine();\n        }\n\n        public int[] gia(int n) throws IOException {\n            int a[] = new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = ni();\n            }\n            return a;\n        }\n\n        public int[] gia(int n, int start, int end) throws IOException {\n            validate(n, start, end);\n            int a[] = new int[n];\n            for (int i = start; i < end; i++) {\n                a[i] = ni();\n            }\n            return a;\n        }\n\n        public double[] gda(int n) throws IOException {\n            double a[] = new double[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = nd();\n            }\n            return a;\n        }\n\n        public double[] gda(int n, int start, int end) throws IOException {\n            validate(n, start, end);\n            double a[] = new double[n];\n            for (int i = start; i < end; i++) {\n                a[i] = nd();\n            }\n            return a;\n        }\n\n        public long[] gla(int n) throws IOException {\n            long a[] = new long[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = ni();\n            }\n            return a;\n        }\n\n        public long[] gla(int n, int start, int end) throws IOException {\n            validate(n, start, end);\n            long a[] = new long[n];\n            for (int i = start; i < end; i++) {\n                a[i] = ni();\n            }\n            return a;\n        }\n\n        private String nextToken() throws IndexOutOfBoundsException, IOException {\n            if(s == null){\n                s = br.readLine().split(\" \");\n            }\n            if (index == s.length) {\n                s = br.readLine().split(\" \");\n                index = 0;\n            }\n            return s[index++];\n        }\n\n        private void validate(int n, int start, int end) {\n            if (start < 0 || end >= n) {\n                throw new IllegalArgumentException();\n            }\n        }\n    }\n}\n\n"
        },
        {
            "language": 3,
            "solution": "t=set(input()for _ in [0]*int(input().split()[0]))\nprint(['No','Yes'][all(sum(c<'.'for c in s)<2for s in zip(*t))])\n\n\n\n# Made By Mostafa_Khaled"
        },
        {
            "language": 4,
            "solution": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class MysticalMosaic {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner scanner=new Scanner(System.in);\n\t\tint n=scanner.nextInt();\n\t\tint m=scanner.nextInt();\n\t\tscanner.nextLine();\n\t\tboolean can=true;\n\t\tArrayList<Row>rows=new ArrayList<>();\n\t\tfor(int i=0;i<n;i++){\n\t\t\tRow row=new Row();\n\t\t\t\n\t\t\tString c=scanner.nextLine();\n\t\t\tfor(int w=0;w<m;w++)if(c.charAt(w)=='#')row.positionOfBlack.add(w);\n\t\t\t\n\t\t\trows.add(row);\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(!rows.get(i).positionOfBlack.equals(rows.get(j).positionOfBlack) && exists(rows.get(i).positionOfBlack,rows.get(j).positionOfBlack)){\n\t\t\t\t\tcan=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!can)break;\n\t\t}\n\t\tif(can)System.out.println(\"yes\");\n\t\telse System.out.println(\"no\");\n\t}\n\tstatic boolean exists(ArrayList<Integer>a,ArrayList<Integer>b){\n\t\tboolean x[]=new boolean [50];\n\t\tfor(int i=0;i<a.size();i++)x[a.get(i)]=true;\n\t\tfor(int i=0;i<b.size();i++)if(x[b.get(i)]==true)return true;\n\t\treturn false;\n\t}\n\t\n}\n\nclass Row{\n\tpublic ArrayList<Integer> positionOfBlack=new ArrayList<>(); \n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.lang.reflect.Array;\nimport java.util.*;\nimport static java.lang.Math.*;\n\n\npublic class Main\n{\n\n    public static void solve(FastScanner in, BufferedWriter out) throws IOException {\n        int r = in.nextInt(), c = in.nextInt();\n        char[][] grid = new char[r][c];\n\n        for (int i = 0; i < r; i++) {\n            String row = in.next();\n            for (int j = 0; j < c; j++) {\n                grid[i][j] = row.charAt(j);\n            }\n        }\n\n\n        //if a cell is black in a row, col and same col is also set in other row then both rows must be same\n        // because same row or columns can not be selected again to flip it.\n\n        boolean isValid = true;\n        outer: for (int i = 0; i < r; i++) {\n            for (int j = 0; j < c ; j++) {\n                if(grid[i][j] == '#') {\n                    for (int k = i+1; k < r; k++) {\n                        if(grid[k][j] == '#') {\n                            //match row\n                            for (int m = 0; m < c; m++) {\n                                if(grid[k][m] != grid[i][m]) {\n                                    isValid = false;\n                                    break outer;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        out.append(isValid? \"Yes\" : \"No\");\n    }\n\n    /**************** ENTER HERE   ********************/\n    public static void main(String[] args) throws Exception\n    {\n        FastScanner fscan = new FastScanner(System.in);\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n        solve(fscan,bw);\n        bw.close();\n    }\n}\n\n\nclass FastScanner {\n    StringTokenizer st;\n    BufferedReader br;\n\n    public FastScanner(InputStream s) {\n        br = new BufferedReader(new InputStreamReader(s));\n    }\n\n    public void nextIntArray(int[] a) throws IOException\n    {\n        for(int i =0;i<a.length;i++)\n            a[i] = nextInt();\n    }\n\n    public String next() throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public String nextLine() throws IOException {\n        return br.readLine();\n    }\n}"
        },
        {
            "language": 3,
            "solution": "N, M = map(int, input().split())\ngrid = []\nfor _ in range(N):\n    grid.append(input())\n\nS = [set() for _ in range(N)]\n\nfor i in range(N):\n    for j in range(M):\n        if grid[i][j] == \"#\":\n            S[i].add(j)\n\nsolved = [False for _ in range(N)]\nused = [False for _ in range(M)]\n\nfor i in range(N):\n    if not solved[i]:\n        for c in S[i]:\n            if used[c]:\n                print(\"No\")\n                quit()\n            used[c] = True\n        for j in range(N):\n            if S[i] == S[j]:\n                solved[j] = True\n\nprint(\"Yes\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 50 + 7;\nchar mat[MAXN][MAXN];\nint c[MAXN];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    scanf(\"%s\", mat[i]);\n  }\n  memset(c, -1, sizeof(c));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (mat[i][j] == '#') {\n        if (c[j] == -1)\n          c[j] = i;\n        else if (strcmp(mat[c[j]], mat[i]))\n          return puts(\"No\"), 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "a,b=map(int,input().split())\nz=[0]*b\nk=[input() for _ in \" \"*a]\nok=1\nfor i in range(a):\n    t=[0]*b\n    for j in range(b):\n        t[j]+=0+(k[i][j]=='#')\n    for j in range(i+1,a):\n        o=[0]*b\n        for x in range(b):\n            o[x]+=0+(k[j][x]=='#')\n        p=0\n        for x in range(b):\n            p+=0+(o[x]==t[x]==1)\n        if p!=0 :\n            if p!=t.count(1) or p!=o.count(1):ok=0\nif ok:print(\"yes\")\nelse:print(\"no\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T>\nvoid dbs(string str, T t) {\n  cerr << str << \" : \" << t << \"\\n\";\n}\ntemplate <class T, class... S>\nvoid dbs(string str, T t, S... s) {\n  int idx = str.find(',');\n  cerr << str.substr(0, idx) << \" : \" << t << \",\";\n  dbs(str.substr(idx + 1), s...);\n}\ntemplate <class S, class T>\nostream& operator<<(ostream& os, const pair<S, T>& p) {\n  return os << \"(\" << p.first << \", \" << p.second << \")\";\n}\ntemplate <class T>\nostream& operator<<(ostream& os, const vector<T>& p) {\n  os << \"[ \";\n  for (auto& it : p) os << it << \" \";\n  return os << \"]\";\n}\ntemplate <class T>\nostream& operator<<(ostream& os, const set<T>& p) {\n  os << \"[ \";\n  for (auto& it : p) os << it << \" \";\n  return os << \"]\";\n}\ntemplate <class S, class T>\nostream& operator<<(ostream& os, const map<S, T>& p) {\n  os << \"[ \";\n  for (auto& it : p) os << it << \" \";\n  return os << \"]\";\n}\ntemplate <class T>\nvoid prc(T a, T b) {\n  cerr << \"[\";\n  for (T i = a; i != b; ++i) {\n    if (i != a) cerr << \", \";\n    cerr << *i;\n  }\n  cerr << \"]\\n\";\n}\nconst int N = 51;\nconst int M = 51;\nvector<string> arr;\nint convertA[N + 1][M + 1];\nset<string> collection[N + 1];\nvector<int> collectionIndice[N + 1];\nbool possible() {\n  int n = int(arr.size());\n  int m = int(arr[0].size());\n  for (int i = (int)(0); i <= (int)(n - 1); i++) {\n    vector<int> indices;\n    string rep;\n    for (int j = (int)(0); j <= (int)(m - 1); j++) {\n      if (convertA[i][j] == 1) indices.push_back(j);\n    }\n    sort(indices.begin(), indices.end());\n    for (auto indice : indices) {\n      rep += to_string(indice);\n    }\n    for (auto indice : indices) {\n      collection[indice].insert(rep);\n    }\n    for (int k = (int)(0); k <= (int)(int(indices.size()) - 1); k++) {\n      for (int k1 = (int)(0); k1 <= (int)(int(indices.size()) - 1); k1++) {\n        collectionIndice[indices[k]].push_back(indices[k1]);\n      }\n    }\n  }\n  for (int j = (int)(0); j <= (int)(M - 1); j++) {\n    for (auto it : collectionIndice[j]) {\n      for (auto str : collection[j])\n        if (collection[it].find(str) == collection[it].end()) return false;\n    }\n  }\n  return true;\n}\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = (int)(0); i <= (int)(n - 1); i++) {\n    string temp;\n    cin >> temp;\n    arr.push_back(temp);\n  }\n  for (int i = (int)(0); i <= (int)(n - 1); i++) {\n    for (int j = (int)(0); j <= (int)(m - 1); j++) {\n      convertA[i][j] = (arr[i][j] == '#') ? 1 : 0;\n    }\n  }\n  if (possible()) {\n    cout << \"YES\\n\";\n  } else {\n    cout << \"NO\\n\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nclass Graph {\n public:\n  vector<vector<int>> a;\n  vector<int> vis;\n  int N, M;\n  int n;\n  int R(int i) { return i; }\n  int C(int i) { return i + N; }\n  void addEdge(int l, int r) {\n    a[R(l)].push_back(C(r));\n    a[C(r)].push_back(R(l));\n  }\n  Graph() {\n    cin >> N >> M;\n    n = N + M;\n    a.assign(n, vector<int>());\n    vis.assign(n, 0);\n    for (int i = 0; i < int(N); i++) {\n      cin.get();\n      for (int j = 0; j < int(M); j++) {\n        char c = cin.get();\n        if (c == '.') continue;\n        addEdge(i, j);\n      }\n    }\n  }\n  bool dfs(int v, set<int> &r, set<int> &c) {\n    vis[v] = 1;\n    if (v < N && a[v].size() != c.size()) return 0;\n    if (v >= N && a[v].size() != r.size()) return 0;\n    for (int to : a[v]) {\n      if (!vis[to] && !dfs(to, r, c)) return 0;\n      if (v < N && !c.count(to)) return 0;\n      if (v >= N && !r.count(to)) return 0;\n    }\n    return 1;\n  }\n  bool isCompleteBipariate(int v) {\n    if (a[v].empty()) return 1;\n    set<int> c((a[v]).begin(), (a[v]).end());\n    set<int> r((a[a[v][0]]).begin(), (a[a[v][0]]).end());\n    return dfs(v, r, c);\n  }\n  void solve() {\n    for (int i = 0; i < int(N); i++)\n      if (!vis[i] && !isCompleteBipariate(i)) {\n        cout << \"No\" << endl;\n        return;\n      }\n    cout << \"Yes\" << endl;\n  }\n};\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  Graph g;\n  g.solve();\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 200;\nvector<int> g[MAXN], comp;\nbool used[MAXN];\nset<pair<int, int> > ed;\nint n, m;\nvoid dfs(int v) {\n  used[v] = true;\n  comp.push_back(v);\n  for (auto to : g[v]) {\n    if (!used[to]) dfs(to);\n  }\n}\nvoid find_comps() {\n  for (int i = 0; i < n + m; ++i) used[i] = false;\n  for (int i = 0; i < n + m; ++i)\n    if (!used[i]) {\n      comp.clear();\n      dfs(i);\n      for (auto u : comp) {\n        for (auto v : comp) {\n          if (u < n && v >= n) {\n            if (!ed.count(make_pair(u, v))) {\n              cout << \"No\";\n              exit(0);\n            }\n          }\n        }\n      }\n    }\n}\nint main() {\n  ios::sync_with_stdio(false);\n  cin >> n >> m;\n  char c;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> c;\n      if (c == '#') {\n        g[i].push_back(n + j);\n        g[n + j].push_back(i);\n        ed.insert(make_pair(i, n + j));\n      }\n    }\n  }\n  find_comps();\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m, i, j, count = 0;\n  cin >> n >> m;\n  int npre, ntemp, nz;\n  int new_sum_array[n];\n  int new_new_array[m][n];\n  int new_ara[m + 1];\n  int bug[n];\n  for (i = 0; i < n; i++) bug[i] = 0;\n  int bug2[m];\n  for (i = 0; i < m; i++) bug2[i] = 0;\n  vector<string> myfile;\n  string s;\n  for (i = 0; i < n; i++) {\n    cin >> s;\n    myfile.push_back(s);\n  }\n  if (n == 1 || m == 1) {\n    cout << \"Yes\";\n    return 0;\n  }\n  int new_array[n][m];\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if (myfile[i][j] == '#')\n        new_array[i][j] = 1;\n      else\n        new_array[i][j] = 0;\n    }\n  }\n  int ara[n + 1];\n  for (i = 0; i < n + 1; i++) ara[i] = 0;\n  for (i = 0; i < n; i++) {\n    if (ara[i + 1] != 0) continue;\n    j = i;\n    while (j < n) {\n      if (myfile[i] == myfile[j]) {\n        ara[j + 1] = i + 1;\n        count++;\n      }\n      j++;\n    }\n    bug[i] = count;\n    count = 0;\n  }\n  int sum_array[m], sum = 0;\n  for (i = 0; i < m; i++) {\n    for (j = 0; j < n; j++) {\n      sum += new_array[j][i];\n    }\n    sum_array[i] = sum;\n    sum = 0;\n  }\n  int pre, chek = 0, temp, z;\n  for (i = 0; i < n; i++) {\n    if (ara[i + 1] == 0) continue;\n    for (j = 0; j < m; j++) {\n      if (new_array[i][j] == 0) continue;\n      pre = bug[i];\n      while (j < m) {\n        if (new_array[i][j] == 0) {\n          j++;\n          continue;\n        }\n        if (pre != sum_array[j]) {\n          chek++;\n          cout << \"No\";\n          return 0;\n        }\n        j++;\n      }\n    }\n    temp = ara[i + 1];\n    for (z = i + 1; z < n + 1; z++) {\n      if (ara[z] == temp) {\n        ara[z] = 0;\n      }\n    }\n  }\n  int k, tempoo;\n  char cs[60];\n  string cpps;\n  vector<string> new_myfile;\n  for (i = 0; i < m; i++) {\n    for (k = 0; k < 60; k++) {\n      cs[k] = '\\0';\n    }\n    for (j = 0; j < n; j++) {\n      cs[j] = myfile[j][i];\n    }\n    cpps = cs;\n    new_myfile.push_back(cpps);\n  }\n  tempoo = n;\n  n = m;\n  m = tempoo;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if (new_myfile[i][j] == '#')\n        new_new_array[i][j] = 1;\n      else\n        new_new_array[i][j] = 0;\n    }\n  }\n  for (i = 0; i < n + 1; i++) new_ara[i] = 0;\n  for (i = 0; i < n; i++) {\n    if (new_ara[i + 1] != 0) continue;\n    j = i;\n    while (j < n) {\n      if (new_myfile[i] == new_myfile[j]) {\n        new_ara[j + 1] = i + 1;\n        count++;\n      }\n      j++;\n    }\n    bug2[i] = count;\n    count = 0;\n  }\n  sum = 0;\n  for (i = 0; i < m; i++) {\n    for (j = 0; j < n; j++) {\n      sum += new_new_array[j][i];\n    }\n    new_sum_array[i] = sum;\n    sum = 0;\n  }\n  for (i = 0; i < n; i++) {\n    if (new_ara[i + 1] == 0) continue;\n    for (j = 0; j < m; j++) {\n      if (new_new_array[i][j] == 0) continue;\n      npre = bug2[i];\n      while (j < m) {\n        if (new_new_array[i][j] == 0) {\n          j++;\n          continue;\n        }\n        if (npre != new_sum_array[j]) {\n          chek++;\n          cout << \"No\";\n          return 0;\n        }\n        j++;\n      }\n    }\n    ntemp = new_ara[i + 1];\n    for (nz = i + 1; nz < n + 1; nz++) {\n      if (new_ara[nz] == ntemp) {\n        new_ara[nz] = 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nbool vis[100][100];\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j <= m; ++j) {\n      char s;\n      scanf(\"%c\", &s);\n      if (s == '#')\n        vis[i][j] = 1;\n      else\n        vis[i][j] = 0;\n    }\n  }\n  int flag3 = 0;\n  for (int i = 0; i < n - 1; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n      bool flag = 0, flag1 = 0;\n      for (int k = 0; k < m; ++k) {\n        if (vis[i][k] != vis[j][k]) {\n          flag = 1;\n        }\n        if (vis[i][k] && vis[j][k]) {\n          flag1 = 1;\n        }\n      }\n      if (flag && flag1) {\n        printf(\"No\\n\");\n        flag3 = 1;\n        break;\n      }\n    }\n    if (flag3 == 1) break;\n  }\n  if (flag3 == 0) printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst long long INF = LLONG_MAX / 10;\nusing namespace std;\nconst long long dx[9] = {-1, 0, 0, 1, -1, -1, 1, 1, 0};\nconst long long dy[9] = {0, -1, 1, 0, -1, 1, -1, 1, 0};\nlong long n, m;\nchar grid[55][55];\nbool rused[55], cused[55];\nbool trused[55], tcused[55];\nbool checked[55][55];\nvoid dfs(long long r, long long c) {\n  trused[r] = tcused[c] = true;\n  for (long long i = 0; i < (n); i++) {\n    if (i == r) continue;\n    if (trused[i]) continue;\n    if (grid[i][c] == '#') dfs(i, c);\n  }\n  for (long long i = 0; i < (m); i++) {\n    if (i == c) continue;\n    if (tcused[i]) continue;\n    if (grid[r][i] == '#') dfs(r, i);\n  }\n}\nsigned main() {\n  cin >> n >> m;\n  for (long long i = 0; i < (n); i++)\n    for (long long j = 0; j < (m); j++) cin >> grid[i][j];\n  for (long long i = 0; i < (n); i++) {\n    for (long long j = 0; j < (m); j++) {\n      if (grid[i][j] == '#') {\n        if (rused[i] || cused[j]) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n        dfs(i, j);\n        for (long long ii = 0; ii < (n); ii++)\n          for (long long jj = 0; jj < (m); jj++) {\n            if (trused[ii] && !tcused[jj] && grid[ii][jj] == '#') {\n              cout << \"No\" << endl;\n              return 0;\n            }\n            if (!trused[ii] && tcused[jj] && grid[ii][jj] == '#') {\n              cout << \"No\" << endl;\n              return 0;\n            }\n            if (trused[ii] && tcused[jj] && grid[ii][jj] == '.') {\n              cout << \"No\" << endl;\n              return 0;\n            }\n          }\n        for (long long ii = 0; ii < (n); ii++)\n          for (long long jj = 0; jj < (m); jj++)\n            if (trused[ii] && tcused[jj]) {\n              grid[ii][jj] = '.';\n            }\n        for (long long ii = 0; ii < (n); ii++) {\n          rused[ii] |= trused[ii];\n        }\n        for (long long jj = 0; jj < (m); jj++) {\n          cused[jj] |= tcused[jj];\n        }\n        for (long long ii = 0; ii < (n); ii++) trused[ii] = false;\n        for (long long jj = 0; jj < (m); jj++) tcused[jj] = false;\n        break;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nstatic const int MAXN = 53;\nstatic int n, m;\nstatic bool a[MAXN][MAXN];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j <= m; ++j) {\n      a[i][j] = (getchar() == '#');\n    }\n  }\n  for (int i = 0; i < n - 1; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n      bool all_same = true, no_intersect = true;\n      for (int k = 0; k < m; ++k) {\n        if (a[i][k] != a[j][k]) {\n          all_same = false;\n        }\n        if (a[i][k] && a[j][k]) {\n          no_intersect = false;\n        }\n      }\n      if (!all_same && !no_intersect) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.util.Set;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.util.HashSet;\nimport java.util.StringTokenizer;\nimport java.io.Writer;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    TaskA solver = new TaskA();\n    solver.solve(1, in, out);\n    out.close();\n  }\n\n  static class TaskA extends SimpleSavingChelperSolution {\n    public void solve(int testNumber, InputReader in, OutputWriter out) {\n      wrapSolve(testNumber, in, out);\n    }\n\n\n    public void solve(int testNumber) {\n      int n = in.nextInt();\n      int m = in.nextInt();\n\n      boolean[][] a = new boolean[n][m];\n\n      for (int i = 0; i < n; i++) {\n        String s = in.nextString();\n        for (int j = 0; j < m; j++) {\n          a[i][j] = s.charAt(j) == '#';\n        }\n      }\n\n      boolean ok = true;\n\n      for (int i = 0; i < n; i++) {\n        Set<Integer> atBaseLine = new HashSet<>();\n\n        for (int j = 0; j < m; j++) {\n          if (a[i][j]) {\n            atBaseLine.add(j);\n          }\n        }\n\n        for (int ii = i + 1; ii < n; ii++) {\n          Set<Integer> atNextLine = new HashSet<>();\n\n          for (int j = 0; j < m; j++) {\n            if (a[ii][j]) {\n              atNextLine.add(j);\n            }\n          }\n\n          Set<Integer> intersection = new HashSet<>(atBaseLine);\n          intersection.retainAll(atNextLine);\n\n          if (!intersection.isEmpty() && !atBaseLine.equals(atNextLine)) {\n            ok = false;\n          }\n        }\n      }\n\n      out.println(ok ? \"Yes\" : \"No\");\n    }\n\n  }\n\n  static class InputReader {\n    private BufferedReader br;\n    private StringTokenizer in;\n\n    public InputReader(String fileName) {\n      try {\n        br = new BufferedReader(new FileReader(fileName));\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    public InputReader(InputStream inputStream) {\n      br = new BufferedReader(new InputStreamReader(inputStream));\n    }\n\n    private boolean hasMoreTokens() {\n      while (in == null || !in.hasMoreTokens()) {\n        String s = nextLine();\n        if (s == null) {\n          return false;\n        }\n        in = new StringTokenizer(s);\n      }\n      return true;\n    }\n\n    public String nextString() {\n      return hasMoreTokens() ? in.nextToken() : null;\n    }\n\n    public String nextLine() {\n      try {\n        in = null;\n        return br.readLine();\n      } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n      }\n    }\n\n    public int nextInt() {\n      return Integer.parseInt(nextString());\n    }\n\n  }\n\n  static abstract class SimpleSavingChelperSolution extends SavingChelperSolution {\n\n    public String processOutputPreCheck(int testNumber, String output) {\n      return output;\n    }\n\n\n    public String processOutputPostCheck(int testNumber, String output) {\n      return output;\n    }\n\n  }\n\n  static abstract class SavingChelperSolution {\n    protected int testNumber;\n    public InputReader in;\n    public OutputWriter out;\n    private OutputWriter toFile;\n    private boolean local = new File(\"chelper.properties\").exists();\n    public OutputWriter debug;\n\n    {\n      if (local) {\n        debug = new OutputWriter(System.err);\n      } else {\n        debug = new OutputWriter(new OutputStream() {\n\n          public void write(int b) {\n          }\n        });\n      }\n    }\n\n    public SavingChelperSolution() {\n      try {\n        toFile = new OutputWriter(\"last_test_output.txt\");\n      } catch (FileNotFoundException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    public abstract void solve(int testNumber);\n\n    public abstract String processOutputPreCheck(int testNumber, String output);\n\n    public abstract String processOutputPostCheck(int testNumber, String output);\n\n    public void wrapSolve(int testNumber, InputReader in, OutputWriter out) {\n      this.testNumber = testNumber;\n\n      ByteArrayOutputStream substituteOutContents = new ByteArrayOutputStream();\n      OutputWriter substituteOut = new OutputWriter(substituteOutContents);\n\n      this.in = in;\n      this.out = substituteOut;\n\n      solve(testNumber);\n      substituteOut.flush();\n\n      String result = substituteOutContents.toString();\n\n      result = processOutputPreCheck(testNumber, result);\n      out.print(result);\n      out.flush();\n\n      if (local) {\n        debug.flush();\n\n        result = processOutputPostCheck(testNumber, result);\n        toFile.print(result);\n        toFile.flush();\n      }\n    }\n\n  }\n\n  static class OutputWriter extends PrintWriter {\n\n    public void close() {\n      super.close();\n    }\n\n    public OutputWriter(String fileName) throws FileNotFoundException {\n      super(fileName);\n    }\n\n    public OutputWriter(OutputStream outputStream) {\n      super(outputStream);\n    }\n\n    public OutputWriter(Writer writer) {\n      super(writer);\n    }\n\n  }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstruct pt {\n  int x, y;\n  pt() : x(0), y(0) {}\n  pt(int _y, int _x) : x(_x), y(_y) {}\n  bool operator<(const pt other) const {\n    return x < other.x || (x == other.x && y == other.y);\n  }\n};\nint h, w;\nvector<vector<char>> field;\nset<pt> visited;\nmap<pt, vector<pt>> g;\nvector<vector<bool>> used;\nvoid print(pt p) { cerr << \"(y:\" << p.y << \", x:\" << p.x << \")\"; }\nvoid dfs(pt p) {\n  if (used[p.y][p.x]) return;\n  print(p);\n  cerr << endl;\n  used[p.y][p.x] = true;\n  visited.insert(p);\n  for (auto to : g[p]) {\n    dfs(to);\n  }\n}\nint main() {\n  cin >> h >> w;\n  field.resize(h, vector<char>(w));\n  for (int y = 0; y < h; ++y) {\n    for (int x = 0; x < w; ++x) {\n      cin >> field[y][x];\n    }\n  }\n  vector<vector<set<int>>> byy(h, vector<set<int>>(w));\n  vector<vector<set<int>>> byx(h, vector<set<int>>(w));\n  for (int y = 0; y < h; ++y) {\n    for (int x = 0; x < w; ++x) {\n      if (field[y][x] == '#') {\n        for (int y1 = 0; y1 < h; ++y1) {\n          if (field[y1][x] == '#') {\n            byy[y][x].insert(y1);\n          }\n        }\n        for (int x1 = 0; x1 < w; ++x1) {\n          if (field[y][x1] == '#') {\n            byx[y][x].insert(x1);\n          }\n        }\n      }\n    }\n  }\n  for (int y = 0; y < h; ++y) {\n    for (int x = 0; x < w; ++x) {\n      if (field[y][x] == '#') {\n        for (int y1 = 0; y1 < h; ++y1) {\n          if (field[y1][x] == '#') {\n            if (byx[y][x] != byx[y1][x]) {\n              cout << \"No\" << endl;\n              return 0;\n            }\n          }\n        }\n        for (int x1 = 0; x1 < w; ++x1) {\n          if (field[y][x1] == '#') {\n            if (byy[y][x] != byy[y][x1]) {\n              cout << \"No\" << endl;\n              return 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "li=lambda:(map(int,raw_input().strip().split()))\nni=lambda:(int(raw_input()))\nsi=lambda:(raw_input())\nimport math\nfrom collections import Counter\nn,m=li()\nl=[[] for k in range(n) ]\nl1=[]\nl2=[]\nfor i in range(0,n):\n    l[i]=list(raw_input())\nfor i in range(0,n):\n    l3=[]\n    for j in range(0,m):\n        if l[i][j]==\"#\":\n            l3.append(j)\n    if l3 in l1:\n        continue\n    else:\n        for y in l3:\n            if y in l2:\n                print \"No\"\n                exit(0)\n            else:\n                l2.append(y)\n        l1.append(l3)\nprint \"Yes\""
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst double PI = acos(-1);\nconst double eps = 1e-9;\nconst int inf = 2000000000;\nconst long long infLL = 9000000000000000000;\ninline bool checkBit(long long n, int i) { return n & (1LL << i); }\ninline long long setBit(long long n, int i) {\n  return n | (1LL << i);\n  ;\n}\ninline long long resetBit(long long n, int i) { return n & (~(1LL << i)); }\nint dx[] = {0, 0, +1, -1};\nint dy[] = {+1, -1, 0, 0};\ninline bool EQ(double a, double b) { return fabs(a - b) < 1e-9; }\ninline bool isLeapYear(long long year) {\n  return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0);\n}\ninline void normal(long long &a) {\n  a %= 1000000007;\n  (a < 0) && (a += 1000000007);\n}\ninline long long modMul(long long a, long long b) {\n  a %= 1000000007, b %= 1000000007;\n  normal(a), normal(b);\n  return (a * b) % 1000000007;\n}\ninline long long modAdd(long long a, long long b) {\n  a %= 1000000007, b %= 1000000007;\n  normal(a), normal(b);\n  return (a + b) % 1000000007;\n}\ninline long long modSub(long long a, long long b) {\n  a %= 1000000007, b %= 1000000007;\n  normal(a), normal(b);\n  a -= b;\n  normal(a);\n  return a;\n}\ninline long long modPow(long long b, long long p) {\n  long long r = 1;\n  while (p) {\n    if (p & 1) r = modMul(r, b);\n    b = modMul(b, b);\n    p >>= 1;\n  }\n  return r;\n}\ninline long long modInverse(long long a) { return modPow(a, 1000000007 - 2); }\ninline long long modDiv(long long a, long long b) {\n  return modMul(a, modInverse(b));\n}\ntemplate <typename first, typename second>\nostream &operator<<(ostream &os, const pair<first, second> &p) {\n  return os << \"(\" << p.first << \", \" << p.second << \")\";\n}\ntemplate <typename T>\nostream &operator<<(ostream &os, const vector<T> &v) {\n  os << \"{\";\n  for (auto it = v.begin(); it != v.end(); ++it) {\n    if (it != v.begin()) os << \", \";\n    os << *it;\n  }\n  return os << \"}\";\n}\ntemplate <typename T>\nostream &operator<<(ostream &os, const set<T> &v) {\n  os << \"[\";\n  for (auto it = v.begin(); it != v.end(); ++it) {\n    if (it != v.begin()) os << \", \";\n    os << *it;\n  }\n  return os << \"]\";\n}\ntemplate <typename T>\nostream &operator<<(ostream &os, const multiset<T> &v) {\n  os << \"[\";\n  for (auto it = v.begin(); it != v.end(); ++it) {\n    if (it != v.begin()) os << \", \";\n    os << *it;\n  }\n  return os << \"]\";\n}\ntemplate <typename first, typename second>\nostream &operator<<(ostream &os, const map<first, second> &v) {\n  os << \"[\";\n  for (auto it = v.begin(); it != v.end(); ++it) {\n    if (it != v.begin()) os << \", \";\n    os << it->first << \" = \" << it->second;\n  }\n  return os << \"]\";\n}\nclock_t tStart = clock();\nvoid faltu() { cerr << '\\n'; }\ntemplate <typename T>\nvoid faltu(T a[], int n) {\n  for (int i = 0; i < n; ++i) cerr << a[i] << ' ';\n  cerr << '\\n';\n}\ntemplate <typename T, typename... hello>\nvoid faltu(T arg, const hello &...rest) {\n  cerr << arg << ' ';\n  faltu(rest...);\n}\nint n, m;\nbool ro[60];\nstring s[60];\nset<int> st, temp;\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  ;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) cin >> s[i];\n  for (int i = 0; i < n; ++i) {\n    if (ro[i]) continue;\n    st.clear();\n    temp.clear();\n    for (int z = 0; z < m; ++z) {\n      if (s[i][z] == '#') {\n        st.insert(z);\n      }\n    }\n    for (int j = i + 1; j < n; ++j) {\n      temp.clear();\n      if (ro[j]) continue;\n      int cnt = 0;\n      for (int k = 0; k < m; ++k) {\n        if (s[j][k] == '#') {\n          if (st.lower_bound(k) != st.upper_bound(k)) {\n            ++cnt;\n          }\n          temp.insert(k);\n        }\n      }\n      if ((cnt == st.size() && temp.size() == st.size())) {\n        ro[j] = 1;\n      } else if (cnt) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport java.math.*;\nimport static java.lang.Math.*;\n\npublic class Sol implements Runnable {\n\n    long mod = (long)1e9 + 7;\n\n    void solve(InputReader in, PrintWriter w) {\n        int n = in.nextInt(), m = in.nextInt();\n\n        char a[][] = new char[n][m];\n        for(int i=0;i<n;i++)\n            a[i] = in.next().toCharArray();\n\n        HashSet<Integer> row = new HashSet<>();\n        HashSet<Integer> col = new HashSet<>();\n\n        for(int i=0;i<n;i++) row.add(i);\n        for(int j=0;j<m;j++) col.add(j);\n\n        ArrayList<Integer> al[] = new ArrayList[n];\n        for(int i=0;i<n;i++) al[i] = new ArrayList<>();\n\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<m;j++) {\n                if(a[i][j] == '#')\n                    al[i].add(j);\n            }\n        }\n\n        for(int i=0;i<n;i++) {\n            if(row.contains(i)) {\n                ArrayList<Integer> r_req = new ArrayList<>();\n                r_req.add(i);\n\n                for(int j=i+1;j<n;j++) {\n                    if(al[i].equals(al[j]))\n                        r_req.add(j);\n                }\n\n                for(int j=0;j<r_req.size();j++) {\n                    if(!row.contains(r_req.get(j))) {\n                        w.println(\"No\");\n                        return;\n                    }\n                    else\n                        row.remove(r_req.get(j));\n                }\n\n                for(int j=0;j<al[i].size();j++) {\n                    if(!col.contains(al[i].get(j))) {\n                        w.println(\"No\");\n                        return;\n                    }\n                    else\n                        col.remove(al[i].get(j));\n                }\n            }\n        }\n\n        w.println(\"Yes\");\n    }\n\n    // ************* Code ends here ***************\n\n    void init() throws Exception {\n        //Scanner in;\n        InputReader in;\n        PrintWriter w;\n        boolean online = false;\n\n        String common_in_fileName = \"\\\\in\";\n        String common_out_fileName = \"\\\\out\";\n        int test_files = 0;\n\n        for(int file_no = 0; file_no <= test_files; file_no++) {\n\n            String x = \"\" + file_no;\n            if (x.length() == 1) x = \"0\" + x;\n\n            String in_fileName = common_in_fileName + \"\" + x;\n            String out_fileName = common_out_fileName + \"\" + x;\n\n            if (online) {\n                //in = new Scanner(new File(in_fileName + \".txt\"));\n                in = new InputReader(new FileInputStream(new File(in_fileName + \".txt\")));\n                w = new PrintWriter(new FileWriter(out_fileName + \".txt\"));\n            } else {\n                //in = new Scanner(System.in);\n                in = new InputReader(System.in);\n                w = new PrintWriter(System.out);\n            }\n\n            solve(in, w);\n            w.close();\n        }\n    }\n\n    public void run() {\n        try {\n            init();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String args[]) throws Exception {\n        new Thread(null, new Sol(),\"Sol\",1<<28).start();\n    }\n\n    static class InputReader {\n\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public String nextLine() {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n\n        public int nextInt() {\n            int c = read();\n\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n\n            int sgn = 1;\n\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n\n            return res * sgn;\n        }\n\n        public long nextLong() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            long res = 0;\n\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public double nextDouble() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            double res = 0;\n            while (!isSpaceChar(c) && c != '.') {\n                if (c == 'e' || c == 'E') {\n                    return res * Math.pow(10, nextInt());\n                }\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            }\n            if (c == '.') {\n                c = read();\n                double m = 1;\n                while (!isSpaceChar(c)) {\n                    if (c == 'e' || c == 'E') {\n                        return res * Math.pow(10, nextInt());\n                    }\n                    if (c < '0' || c > '9') {\n                        throw new InputMismatchException();\n                    }\n                    m /= 10;\n                    res += (c - '0') * m;\n                    c = read();\n                }\n            }\n            return res * sgn;\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public String next() {\n            return readString();\n        }\n\n        public interface SpaceCharFilter {\n\n            public boolean isSpaceChar(int ch);\n        }\n    }\n}"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\npublic class CF{\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint m = scan.nextInt();\n\t\tint arr[][] = new int[n][m];\n\t\tfor(int i = 0;i < n;i++)\n\t\t{\n\t\t\tString s = scan.next();\n\t\t\tfor(int j = 0;j<m;j++)\n\t\t\t{\n\t\t\t\tarr[i][j] = (s.charAt(j) == '#')?1:0;\n\t\t\t}\n\t\t}\n\t\tboolean no = false;\n\t\tfor(int i = 0;i < n;i++)  \n\t\t{\n\t\t\tfor(int j = i+1;j < n;j++)  // for every pair of rows\n\t\t\t{\n\t\t\t\tint A[] = arr[i];\n\t\t\t\tint B[] = arr[j];\n\t\t\t\tboolean diff = false;\n\t\t\t\tint count = 0;\n\t\t\t\tfor(int k = 0;k < m;k++)\n\t\t\t\t{\n\t\t\t\t\tif(A[k] != B[k])\n\t\t\t\t\t\tdiff = true;\n\t\t\t\t\tcount+= A[k]*B[k];\n\t\t\t\t}\n\t\t\t\tif (diff && count > 0)\n\t\t\t\t{\n\t\t\t\t\tno = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (no)\n\t\t\tSystem.out.println(\"No\");\n\t\telse\n\t\t\tSystem.out.println(\"Yes\");\n}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int> > a(n, vector<int>(m, 0));\n  char e;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> e;\n      if (e == '#') {\n        a[i][j] = 1;\n        continue;\n      }\n      a[i][j] = 0;\n    }\n  }\n  bool same, dif;\n  for (int i = 0; i < n - 1; i++) {\n    for (int j = i + 1; j < n; j++) {\n      same = true;\n      dif = true;\n      for (int k = 0; k < m; k++) {\n        if (a[i][k] != a[j][k]) {\n          same = false;\n        }\n        if (a[i][k] && a[j][k]) {\n          dif = false;\n        }\n        if (!dif && !same) {\n          cout << \"NO\\n\";\n          return;\n        }\n      }\n    }\n  }\n  cout << \"YES\\n\";\n  return;\n}\nint main() { solve(); }\n"
        },
        {
            "language": 1,
            "solution": "n,m=map(int,raw_input().split())\nlstr=[]\nlstc=[]\nlstu=[]\nlstp=[]\nfor i in range(0,n):\n  vl=0\n  st=str(raw_input())\n  lstc=[]\n  for j in range(0,len(st)):\n    if st[j]==\"#\":\n      vl=1\n      lstc.append(j)\n  if lstc not in lstu:\n    lstp=lstp+lstc\n    lstu.append(lstc)\n  if vl==1:\n    lstr.append(i)\n#print lstr,lstp,len(lstc),len(list(set(lstc)))\nif len(lstr)!=len(list(set(lstr))) or len(lstp)!=len(list(set(lstp))):\n  print \"no\"\nelse:\n  print \"yes\""
        },
        {
            "language": 4,
            "solution": "/*\n\u0417\u0410\u041f\u0423\u0421\u041a\u0410\u0415\u041c \u0412\u042b\u0421\u041e\u041a\u041e\u0413\u041e\n\u2591\u0413\u0423\u0421\u042f\u2591\u2584\u2580\u2580\u2580\u2584\u2591\u0420\u0410\u0411\u041e\u0422\u042f\u0413\u0418\u2591\u2591\n\u2584\u2588\u2588\u2588\u2580\u2591\u25d0\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2590\u2591\u2591\u2591\u2591\u2591\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2591\u2590\u2584\u2584\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u258c\u2591\u2591\u2591\u2591\u2584\u2580\u2592\u2592\u2580\u2580\u2580\u2580\u2584\n\u2591\u2591\u2591\u2590\u2591\u2591\u2591\u2591\u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2580\u2584\n\u2591\u2591\u2591\u2590\u2591\u2591\u2591\u2591\u2590\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\n\u2591\u2591\u2591\u2591\u2580\u2584\u2591\u2591\u2591\u2591\u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\n\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2584\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u258c\u2591\u258c\u258c\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u258c\u2591\u258c\u258c\u2591\u2591\u2591\u2591\u2591\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2584\u258c\u258c\u2584\u258c\u258c\u2591\u2591\u2591\u2591\u2591\n */\n\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    List<Integer> g[];\n\n    void solve() throws IOException {\n        n = readInt();\n        m = readInt();\n        g = new List[n * m];\n        for (int i = 0; i < n * m; i++) g[i] = new ArrayList<>();\n        arr = new char[n][m];\n        for (int i = 0; i < n; i++) arr[i] = readString().toCharArray();\n        used = new boolean[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (used[i][j]) continue;\n                if (arr[i][j] == '#') {\n                    if (!check(i, j)) {\n                        out.print(\"No\");\n                        return;\n                    }\n                }\n            }\n        }\n        out.print(\"Yes\");\n    }\n\n    int n, m;\n\n    boolean check(int x, int y) {\n        ArrayList<Integer> yl = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (arr[i][y] == '#') {\n                for (int h = 0; h < m; h++) {\n                    if (arr[i][h] == '#') yl.add(h);\n                }\n            }\n        }\n        ArrayList<Integer> xl = new ArrayList<>();\n        for (int j = 0; j < m; j++) {\n            if (arr[x][j] == '#') {\n                for (int l = 0; l < n; l++) {\n                    if (arr[l][j] == '#') xl.add(l);\n                }\n            }\n        }\n        for (int i : xl) {\n            for (int j : yl) {\n                used[i][j] = true;\n                if (arr[i][j] != '#') return false;\n            }\n        }\n        return true;\n    }\n\n    boolean[][] used;\n    char[][] arr;\n\n    long sqrt(long a) {\n        long answer = (long) (Math.sqrt(a));\n        while (answer * answer <= a) answer++;\n        return answer - 1;\n    }\n\n    long gcd(long a, long b) {\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n\n    long binPow(long val, long pow) {\n        if (pow == 0) return 1;\n        if (pow % 2 == 1) {\n            long k = binPow(val, pow / 2);\n            return (k * k) * val;\n        } else {\n            long k = binPow(val, pow / 2);\n            return (k * k);\n        }\n    }\n\n\n    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n\n    BufferedReader in;\n    PrintWriter out;\n    StringTokenizer tok;\n\n    Main() throws FileNotFoundException {\n        try {\n            in = new BufferedReader(new FileReader(\"input.txt\"));\n            out = new PrintWriter(\"output.txt\");\n        } catch (Exception e) {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        }\n        tok = new StringTokenizer(\"\");\n    }\n\n    void run() throws IOException {\n        solve();\n        out.close();\n    }\n\n\n    class Fenwik {\n        private long[] t;\n        private int length;\n\n        Fenwik(int[] a) {\n            this.length = a.length + 100;\n            this.t = new long[length];\n            for (int i = 0; i < a.length; ++i) this.inc(i, a[i]);\n        }\n\n        void inc(int i, int delta) {\n            for (; i < this.length; i = i | (i + 1)) t[i] += delta;\n        }\n\n        long getSum(int r) {\n            long sum = 0;\n            for (; r >= 0; r = (r & (r + 1)) - 1) sum += this.t[r];\n            return sum;\n        }\n\n    }\n\n    String delimiter = \" \";\n\n    String readLine() throws IOException {\n        return in.readLine();\n    }\n\n    String readString() throws IOException {\n        while (!tok.hasMoreTokens()) {\n            String nextLine = readLine();\n            if (null == nextLine) return null;\n            tok = new StringTokenizer(nextLine);\n        }\n        return tok.nextToken(delimiter);\n    }\n\n    int readInt() throws IOException {\n        return Integer.parseInt(readString());\n    }\n\n    long readLong() throws IOException {\n        return Long.parseLong(readString());\n    }\n\n    double readDouble() throws IOException {\n        return Double.parseDouble(readString());\n    }\n\n    int[] readIntArray(int b) {\n        int a[] = new int[b];\n        for (int i = 0; i < b; i++)\n            try {\n                a[i] = readInt();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        return a;\n    }\n\n    int[] readSortedIntArray(int size) throws IOException {\n        Integer[] array = new Integer[size];\n        for (int index = 0; index < size; ++index) array[index] = readInt();\n        Arrays.sort(array);\n        int[] sortedArray = new int[size];\n        for (int index = 0; index < size; ++index) sortedArray[index] = array[index];\n        return sortedArray;\n    }\n\n    int[] sortedIntArray(int size, int[] array) throws IOException {\n        for (int index = 0; index < size; ++index) array[index] = readInt();\n        Arrays.sort(array);\n        int[] sortedArray = new int[size];\n        for (int index = 0; index < size; ++index) sortedArray[index] = array[index];\n        return sortedArray;\n    }\n\n    int minInt(int... values) {\n        int min = Integer.MAX_VALUE;\n        for (int value : values) min = Math.min(min, value);\n        return min;\n    }\n\n    int maxInt(int... values) {\n        int max = Integer.MIN_VALUE;\n        for (int value : values) max = Math.max(max, value);\n        return max;\n    }\n\n    long minLong(long... values) {\n        long min = Long.MAX_VALUE;\n        for (long value : values) min = Math.min(min, value);\n        return min;\n    }\n\n    long maxLong(long... values) {\n        long max = Long.MIN_VALUE;\n        for (long value : values) max = Math.max(max, value);\n        return max;\n    }\n\n    boolean checkIndex(int index, int size) {\n        return (0 <= index && index < size);\n    }\n\n    int abs(int a) {\n        if (a < 0) return -a;\n        return a;\n    }\n}"
        },
        {
            "language": 4,
            "solution": "/*Tough one\n\n------------------------------------------------------------\n\n-----------------------------------------------------------\n\n----------------------------------------------------------*/\n\t\t\t\t\timport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.InputMismatchException;\n\t\t\t\t\t\t\t\t\tpublic class Solution1 implements Runnable\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tstatic final long MAX = 1000000007L;\n\t\t\t\t\t\t\t\t\t\tstatic class InputReader\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tprivate InputStream stream;\n\t\t\t\t\t\t\t\t\t\t\tprivate byte[] buf = new byte[1024];\n\t\t\t\t\t\t\t\t\t\t\tprivate int curChar;\n\t\t\t\t\t\t\t\t\t\t\tprivate int numChars;\n\t\t\t\t\t\t\t\t\t\t\tprivate SpaceCharFilter filter;\n\t\t\t\t\t\t\t\t\t\t\tprivate BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\tpublic InputReader(InputStream stream)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tthis.stream = stream;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tpublic int read()\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (numChars==-1) \n\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (curChar >= numChars)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tcurChar = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\ttry \n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnumChars = stream.read(buf);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcatch (IOException e)\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(numChars <= 0)\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn buf[curChar++];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\tpublic String nextLine()\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tString str = \"\";\n\t\t\t\t\t\t\t\t\t            try\n\t\t\t\t\t\t\t\t\t            {\n\t\t\t\t\t\t\t\t\t                str = br.readLine();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\t\t\t            catch (IOException e)\n\t\t\t\t\t\t\t\t\t            {\n\t\t\t\t\t\t\t\t\t                e.printStackTrace();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\t\t\t            return str;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tpublic int nextInt()\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tint c = read();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\twhile(isSpaceChar(c)) \n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tint sgn = 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (c == '-') \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tsgn = -1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tint res = 0;\n\t\t\t\t\t\t\t\t\t\t\t\tdo \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(c<'0'||c>'9') \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t\t\t\t\t\t\t\t\t\tres *= 10;\n\t\t\t\t\t\t\t\t\t\t\t\t\tres += c - '0';\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\twhile (!isSpaceChar(c)); \n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn res * sgn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tpublic long nextLong() \n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tint c = read();\n\t\t\t\t\t\t\t\t\t\t\t\twhile (isSpaceChar(c))\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\tint sgn = 1;\n\t\t\t\t\t\t\t\t\t\t\t\tif (c == '-') \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tsgn = -1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tlong res = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdo \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t\t\t\t\t\t\t\t\t\tres *= 10;\n\t\t\t\t\t\t\t\t\t\t\t\t\tres += c - '0';\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\twhile (!isSpaceChar(c));\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn res * sgn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tpublic double nextDouble() \n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tint c = read();\n\t\t\t\t\t\t\t\t\t\t\t\twhile (isSpaceChar(c))\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\tint sgn = 1;\n\t\t\t\t\t\t\t\t\t\t\t\tif (c == '-') \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tsgn = -1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tdouble res = 0;\n\t\t\t\t\t\t\t\t\t\t\t\twhile (!isSpaceChar(c) && c != '.') \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (c == 'e' || c == 'E')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn res * Math.pow(10, nextInt());\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t\t\t\t\t\t\t\t\t\tres *= 10;\n\t\t\t\t\t\t\t\t\t\t\t\t\tres += c - '0';\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif (c == '.') \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t\tdouble m = 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\twhile (!isSpaceChar(c)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (c == 'e' || c == 'E')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn res * Math.pow(10, nextInt());\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tm /= 10;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tres += (c - '0') * m;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn res * sgn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tpublic String readString() \n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tint c = read();\n\t\t\t\t\t\t\t\t\t\t\t\twhile (isSpaceChar(c))\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\tStringBuilder res = new StringBuilder();\n\t\t\t\t\t\t\t\t\t\t\t\tdo \n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tres.appendCodePoint(c);\n\t\t\t\t\t\t\t\t\t\t\t\t\tc = read();\n\t\t\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t\t\t\twhile (!isSpaceChar(c));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn res.toString();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\tpublic boolean isSpaceChar(int c) \n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (filter != null)\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn filter.isSpaceChar(c);\n\t\t\t\t\t\t\t\t\t\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\tpublic String next() \n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treturn readString();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tpublic interface SpaceCharFilter \n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tpublic boolean isSpaceChar(int ch);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t\t\t\tpublic static void main(String args[]) throws Exception\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tnew Thread(null, new Solution1(),\"Solution1\",1<<26).start();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tlong gcd(long a, long b)\n\t\t\t\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t\t\t        if (a == 0)\n\t\t\t\t\t\t\t\t\t            return b;\n\t\t\t\t\t\t\t\t\t         \n\t\t\t\t\t\t\t\t\t        return gcd(b%a, a);\n\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t\t    // method to return LCM of two numbers\n\t\t\t\t\t\t\t\t\t\t long lcm(long a, long b)\n\t\t\t\t\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t\t\t\t        return (a*b)/gcd(a, b);\n\t\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tpublic void run()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tInputReader sc= new InputReader(System.in);\n\t\t\t\t\t\t\t\t\t\t\tPrintWriter w= new PrintWriter(System.out);\n\t\t\t\t\t\t\t\t\t\t\t int n = sc.nextInt();\n\t\t\t\t\t\t\t\t\t            int m = sc.nextInt();\n\t\t\t\t\t\t\t\t\t            char[][] ch = new char[n][m];\n\t\t\t\t\t\t\t\t\t            for(int i = 0;i < n;i++){\n\t\t\t\t\t\t\t\t\t            \tString st = sc.next();\n\t\t\t\t\t\t\t\t\t            \tch[i] = st.toCharArray();\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\t\t\t            ArrayList<Integer> ar[] = new ArrayList[n];\n\t\t\t\t\t\t\t\t\t            for(int i = 0;i < n;i++){\n\t\t\t\t\t\t\t\t\t            \tar[i] = new ArrayList();\n\t\t\t\t\t\t\t\t\t            \tfor(int j = 0;j < m;j++){\n\t\t\t\t\t\t\t\t\t            \t\tif(ch[i][j] == '#'){\n\t\t\t\t\t\t\t\t\t            \t\t\tar[i].add(j);\n\t\t\t\t\t\t\t\t\t            \t\t}\n\t\t\t\t\t\t\t\t\t            \t}\n\t\t\t\t\t\t\t\t\t            \tfor(int j = i-1;j >= 0;j--){\n\t\t\t\t\t\t\t\t\t            \t\tif(ar[i].size() == ar[j].size()){\n\t\t\t\t\t\t\t\t\t            \t\t\tint count = 0;\n\t\t\t\t\t\t\t\t\t            \t\t\tfor(int k = 0;k < ar[i].size();k++){\n\t\t\t\t\t\t\t\t\t            \t\t\t\tif(ar[i].get(k) == ar[j].get(k)){\n\t\t\t\t\t\t\t\t\t            \t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t            \t\t\t\t}\n\t\t\t\t\t\t\t\t\t            \t\t\t}\n\t\t\t\t\t\t\t\t\t            \t\t\tif(count > 0 && count < ar[i].size()){\n\t\t\t\t\t\t\t\t\t            \t\t\t\tw.println(\"no\");\n\t\t\t\t\t\t\t\t\t            \t\t\t\tw.close();\n\t\t\t\t\t\t\t\t\t            \t\t\t\tSystem.exit(0);\n\t\t\t\t\t\t\t\t\t            \t\t\t}\n\t\t\t\t\t\t\t\t\t            \t\t}else{\n\t\t\t\t\t\t\t\t\t            \t\t\tfor(int k = 0;k < ar[i].size();k++){\n\t\t\t\t\t\t\t\t\t            \t\t\t\tif(ar[j].contains(ar[i].get(k))){\n\t\t\t\t\t\t\t\t\t            \t\t\t\t\tw.println(\"no\");\n\t\t\t\t\t\t\t\t\t            \t\t\t\t\tw.close();\n\t\t\t\t\t\t\t\t\t            \t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t\t\t\t\t            \t\t\t\t}\n\t\t\t\t\t\t\t\t\t            \t\t\t}\n\t\t\t\t\t\t\t\t\t            \t\t}\n\t\t\t\t\t\t\t\t\t            \t}\n\t\t\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\t\t\t            w.println(\"yes\");\n\t\t\t\t\t\t\t\t\t            w.close();\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tstatic class Pair implements Comparable<Pair>{\n\t\t\t\t\t\t\t\t\t\t\tint a;\n\t\t\t\t\t\t\t\t\t\t\tint b;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tPair(){}\t\n\t\t\t\t\t\t\t\t\t\t\tPair(int a,int b){\n\t\t\t\t\t\t\t\t\t\t\t\tthis.a = a;\n\t\t\t\t\t\t\t\t\t\t\t\tthis.b = b;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tpublic int compareTo(Pair p){\n\t\t\t\t\t\t\t\t\t\t\t\treturn Integer.compare(this.b,p.b);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool solve(vector<vector<bool>> &f, int x, int y) {\n  set<int> R, C;\n  R.insert(x);\n  C.insert(y);\n  int added;\n  do {\n    added = 0;\n    for (int i : R)\n      for (int j = 0; j < f[i].size(); j++)\n        if (f[i][j])\n          if (C.insert(j).second) added++;\n    for (int i : C)\n      for (int j = 0; j < f.size(); j++)\n        if (f[j][i])\n          if (R.insert(j).second) added++;\n  } while (added > 0);\n  for (int i : R)\n    for (int j : C)\n      if (!f[i][j])\n        return false;\n      else\n        f[i][j] = false;\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.sync_with_stdio(false);\n  cout.sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<bool>> f(n, vector<bool>(m, false));\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) {\n      char ch;\n      cin >> ch;\n      if (ch == '.' || ch == '#')\n        f[i][j] = (ch == '#');\n      else\n        j--;\n    }\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) {\n      if (f[i][j]) {\n        if (!solve(f, i, j)) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n    }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar a[55][55];\nvector<int> t[55];\nint32_t main() {\n  ios_base ::sync_with_stdio(0);\n  cin.tie();\n  cout.tie();\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> a[i][j];\n      if (a[i][j] == '#') t[j].push_back(i);\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    vector<int> k;\n    for (int j = 1; j <= m; j++) {\n      if (a[i][j] == '#') {\n        if (k.size() == 0)\n          k = t[j];\n        else if (k != t[j]) {\n          cout << \"No\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvector<vector<int>> g;\nvector<int> cur;\nvector<bool> used;\nvoid dfs(int u) {\n  if (used[u]) return;\n  cur.push_back(u);\n  used[u] = true;\n  for (int v : g[u]) dfs(v);\n}\nint main() {\n  ios::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  vector<string> matr(n);\n  for (auto& x : matr) cin >> x;\n  g.resize(n + m);\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j)\n      if (matr[i][j] == '#') g[i].push_back(j + n), g[j + n].push_back(i);\n  used.resize(n + m);\n  for (int i = 0; i < n + m; ++i) {\n    if (used[i]) continue;\n    cur.clear();\n    dfs(i);\n    for (int x : cur)\n      for (int y : cur)\n        if (x < n && y >= n && matr[x][y - n] == '.') {\n          cout << \"No\\n\";\n          return 0;\n        }\n  }\n  cout << \"Yes\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int x, y;\n  cin >> x >> y;\n  vector<vector<int>> mas(x, vector<int>(y));\n  for (int i = 0; i < x; i++) {\n    string st;\n    cin >> st;\n    for (int q = 0; q < y; q++) {\n      if (st[q] == '#') mas[i][q] = 1;\n    }\n  }\n  vector<int> zan(x);\n  for (int i = 0; i < x; i++) {\n    if (zan[i] == 0) {\n      vector<int> zanY(y);\n      for (int q = 0; q < y; q++) {\n        if (mas[i][q] == 1) {\n          zanY[q] = 1;\n        }\n      }\n      for (int q = i + 1; q < x; q++) {\n        if (zan[q] == 0) {\n          int rav = 0, tam = 0;\n          for (int r = 0; r < y; r++) {\n            if (mas[q][r] == 1) {\n              if (zanY[r] == 1) {\n                rav = 1;\n              } else {\n                tam = 1;\n              }\n            } else {\n              if (zanY[r] == 1) tam = 1;\n            }\n          }\n          if (rav == 1) {\n            if (tam == 1) {\n              cout << \"No\";\n              return 0;\n            } else {\n              zan[q] = 1;\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar s[55][55];\nint row[55], col[55], n, m;\nint aa[55], bb[55];\nint slove(int x, int y) {\n  int r, c;\n  r = c = 0;\n  row[x] = col[y] = 1;\n  s[x][y] = '.';\n  for (int i = 0; i < m; i++) {\n    if (s[x][i] == '#' && i != c) {\n      if (col[i] == 1) return 0;\n      col[i] = 1;\n      bb[c++] = i;\n      s[x][i] = '.';\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (s[i][y] == '#' && i != r) {\n      if (row[i] == 1) return 0;\n      row[i] = 1;\n      aa[r++] = i;\n      s[i][y] = '.';\n    }\n  }\n  for (int i = 0; i < r; i++) {\n    for (int j = 0; j < c; j++)\n      if (s[aa[i]][bb[j]] == '#')\n        s[aa[i]][bb[j]] = '.';\n      else\n        return 0;\n  }\n  return 1;\n}\nint main() {\n  int f = 1;\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) scanf(\"%s\", s[i]);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        if (row[i] == 0 && col[j] == 0)\n          f = slove(i, j);\n        else\n          f = 0;\n        break;\n      }\n    }\n    if (!f) break;\n  }\n  if (f)\n    printf(\"Yes\");\n  else\n    printf(\"No\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar maze[105][105];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%s\", maze[i]);\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      if (strcmp(maze[i], maze[j])) {\n        for (int k = 0; k < m; k++) {\n          if (maze[i][k] == maze[j][k] && maze[i][k] == '#') {\n            printf(\"No\\n\");\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar used1[55], used2[55];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string s[55];\n  for (int i = 0; i < n; i++) cin >> s[i];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        vector<int> row, col;\n        row.push_back(i);\n        col.push_back(j);\n        used1[i] = used2[j] = 1;\n        int ii = 0, jj = 0;\n        while (ii < row.size() || jj < col.size()) {\n          if (ii < row.size()) {\n            for (int j1 = 0; j1 < m; j1++) {\n              if (s[row[ii]][j1] == '#') {\n                if (!used2[j1]) {\n                  used2[j1] = 1;\n                  col.push_back(j1);\n                }\n              }\n            }\n            ii++;\n          }\n          if (jj < col.size()) {\n            for (int i1 = 0; i1 < n; i1++) {\n              if (s[i1][col[jj]] == '#') {\n                if (!used1[i1]) {\n                  used1[i1] = 1;\n                  row.push_back(i1);\n                }\n              }\n            }\n            jj++;\n          }\n        }\n        for (ii = 0; ii < row.size(); ii++) {\n          for (int jj = 0; jj < col.size(); jj++) {\n            if (s[row[ii]][col[jj]] == '.') {\n              puts(\"No\");\n              return 0;\n            }\n            s[row[ii]][col[jj]] = '.';\n          }\n        }\n      }\n    }\n  }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport java.util.Arrays;\npublic class Test1{\n    public static void main(String args[])throws IOException{\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int m=sc.nextInt();\n        String s[]=new String[n];\n        int ch[]=new int[m];\n        int p[]=new int[n];\n        int i,j;\n        for(i=0;i<n;i++)\n        {\n            s[i]=sc.next();\n        }\n        boolean check=true;\n        for(i=0;i<n && check;i++)\n        {\n            if(p[i]==1)\n            continue;\n            p[i]=1;\n            for(j=i+1;j<n;j++)\n            {\n                if(s[i].equals(s[j]))\n                p[j]=1;\n            }\n            for(j=0;j<m;j++)\n            {\n                if(s[i].charAt(j)=='#')\n                {\n                    if(ch[j]==0)\n                    ch[j]=1;\n                    else\n                    {\n                       check=false;\n                       break;\n                    }\n                }\n            }\n        }\n        if(check)\n        System.out.println(\"YES\");\n        else\n        System.out.println(\"NO\");\n    } \n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar s[60];\nint n, m, d[60][60], fa[323];\ninline int read() {\n  int x = 0, p = 1;\n  char c = getchar();\n  while (c < '0' || c > '9') {\n    if (c == '-') p = -1;\n    c = getchar();\n  }\n  while (c <= '9' && c >= '0') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * p;\n}\nint find(int x) {\n  int t1 = x, t2;\n  while (x != fa[x]) x = fa[x];\n  while (t1 != fa[t1]) {\n    t2 = fa[t1];\n    fa[t1] = x;\n    t1 = t2;\n  }\n  return x;\n}\nint main() {\n  n = read();\n  m = read();\n  for (int i = 1; i <= n; ++i) fa[i] = i;\n  for (int j = 1; j <= m; ++j) fa[j + n] = j + n;\n  for (int i = 1; i <= n; ++i) {\n    scanf(\"%s\", s + 1);\n    for (int j = 1; j <= m; ++j)\n      if (s[j] == '#') {\n        d[i][j] = 1;\n        fa[find(i)] = find(j + n);\n      }\n  }\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= n; ++j) {\n      if (find(i) == find(j + n) && !d[i][j]) return puts(\"No\"), 0;\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  ios_base::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char>> table(static_cast<unsigned int>(n),\n                             vector<char>(static_cast<unsigned int>(m)));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> table[i][j];\n    }\n  }\n  vector<unordered_set<int>> columns(static_cast<unsigned int>(n)),\n      rows(static_cast<unsigned int>(m));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (table[i][j] == '#') {\n        columns[i].insert(j);\n        rows[j].insert(i);\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      bool diff = true, eq = true;\n      for (int t : columns[i]) {\n        if (columns[j].count(t) == 0) {\n          eq = false;\n        } else {\n          diff = false;\n        }\n      }\n      for (int t : columns[j]) {\n        if (columns[i].count(t) == 0) {\n          eq = false;\n        } else {\n          diff = false;\n        }\n      }\n      if (!diff && !eq) {\n        cout << \"No\\n\";\n        return 0;\n      }\n    }\n  }\n  for (int i = 0; i < m; i++) {\n    for (int j = i + 1; j < m; j++) {\n      bool diff = true, eq = true;\n      for (int t : rows[i]) {\n        if (rows[j].count(t) == 0) {\n          eq = false;\n        } else {\n          diff = false;\n        }\n      }\n      for (int t : rows[j]) {\n        if (rows[i].count(t) == 0) {\n          eq = false;\n        } else {\n          diff = false;\n        }\n      }\n      if (!diff && !eq) {\n        cout << \"No\\n\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char> > arr(n, vector<char>(m));\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> arr[i][j];\n    }\n  }\n  vector<int> col(m, 0);\n  vector<int> row(n, 0);\n  bool res = true;\n  for (int i = 0; i < n; ++i) {\n    if (!row[i]) {\n      row[i] = 1;\n      bool fl = true;\n      for (int j = 0; j < m; ++j) {\n        if (arr[i][j] == '#') {\n          if (col[j]) {\n            fl = false;\n            break;\n          } else {\n            col[j] = 1;\n          }\n        }\n      }\n      if (!fl) {\n        res = false;\n        break;\n      }\n      for (int j = i + 1; j < n; ++j) {\n        bool fl1 = true;\n        for (int r = 0; r < m; ++r) {\n          if (arr[i][r] != arr[j][r]) {\n            fl1 = false;\n            break;\n          }\n        }\n        if (fl1) {\n          row[j] = 1;\n        }\n      }\n    }\n  }\n  if (res) {\n    cout << \"Yes\";\n  } else {\n    cout << \"No\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar str[55][55];\nint n, m, pa[2505];\nvector<int> vec[2505];\nint cnt[2][55];\nint tt(int id) {\n  if (pa[id] == id) return id;\n  pa[id] = tt(pa[id]);\n  return pa[id];\n}\nvoid addedge(int u, int v) {\n  u = tt(u);\n  v = tt(v);\n  if (u == v) return;\n  if (vec[u].size() < vec[v].size()) swap(u, v);\n  for (int i = 0; i < vec[v].size(); i++) vec[u].push_back(vec[v][i]);\n  pa[v] = u;\n}\nint main() {\n  int i, j, s, p, q;\n  scanf(\"%d%d\", &n, &m);\n  for (i = 0; i < n; i++) scanf(\"%s\", str[i]);\n  for (i = 0; i < n * m; i++) {\n    pa[i] = i;\n    vec[i].push_back(i);\n  }\n  for (i = 0; i < n; i++) {\n    int pre = -1;\n    for (j = 0; j < m; j++) {\n      if (str[i][j] == '#') {\n        if (pre >= 0) addedge(pre, i * m + j);\n        pre = i * m + j;\n      }\n    }\n  }\n  for (i = 0; i < m; i++) {\n    int pre = -1;\n    for (j = 0; j < n; j++) {\n      if (str[j][i] == '#') {\n        if (pre >= 0) addedge(pre, j * m + i);\n        pre = j * m + i;\n      }\n    }\n  }\n  for (i = 0; i < n * m; i++) {\n    if (pa[i] == i) {\n      memset(cnt, 0, sizeof(cnt));\n      int ax = 0, ay = 0;\n      for (j = 0; j < vec[i].size(); j++) {\n        int id = vec[i][j];\n        cnt[0][id / m]++;\n        cnt[1][id % m]++;\n      }\n      int pre = 0, px, py;\n      for (j = 0; j < n; j++) {\n        if (pre > 0 && cnt[0][j] > 0 && pre != cnt[0][j]) {\n          puts(\"No\");\n          return 0;\n        }\n        if (pre == 0 && cnt[0][j] > 0) pre = cnt[0][j];\n      }\n      px = pre;\n      pre = 0;\n      for (j = 0; j < m; j++) {\n        if (pre > 0 && cnt[1][j] > 0 && pre != cnt[1][j]) {\n          puts(\"No\");\n          return 0;\n        }\n        if (pre == 0 && cnt[1][j] > 0) pre = cnt[1][j];\n      }\n      py = pre;\n      if (px * py != vec[i].size()) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class A, class B>\nostream& operator<<(ostream& out, const pair<A, B>& a) {\n  return out << \"(\" << a.first << \", \" << a.second << \")\";\n}\ntemplate <class A>\nostream& operator<<(ostream& out, const vector<A>& a) {\n  out << \"[\";\n  for (auto it = a.begin(); it != a.end(); ++it) {\n    if (it != a.begin()) out << \", \";\n    out << *it;\n  }\n  return out << \"]\";\n}\nconst int INF = 1e9;\nconst long long INF64 = 1e18;\nconst int MOD = 1e9 + 7;\nconst long double PI = acosl(-1.0);\nconst long double EPS = 1e-9;\nmt19937 rnd(time(NULL));\nmt19937_64 rnd64(time(NULL));\nconst int N = 100;\nint n, m;\nstring s[N];\nbool read() {\n  if (!(cin >> n >> m)) return false;\n  for (int i = 0; i < int(n); ++i) cin >> s[i];\n  return true;\n}\nvoid solve() {\n  vector<long long> rows;\n  vector<long long> columns;\n  for (int i = 0; i < int(n); ++i) {\n    long long cur = 0;\n    for (int j = 0; j < int(m); ++j) {\n      if (s[i][j] == '#') cur ^= (1ll << j);\n    }\n    rows.push_back(cur);\n  }\n  for (int j = 0; j < int(m); ++j) {\n    long long cur = 0;\n    for (int i = 0; i < int(n); ++i) {\n      if (s[i][j] == '#') cur ^= (1ll << i);\n    }\n    columns.push_back(cur);\n  }\n  bool ok = true;\n  for (auto it : rows) {\n    for (auto jt : rows) {\n      if ((it & jt) != 0 && (it ^ jt) != 0) ok = false;\n    }\n  }\n  for (auto it : columns) {\n    for (auto jt : columns) {\n      if ((it & jt) != 0 && (it ^ jt) != 0) ok = false;\n    }\n  }\n  puts(ok ? \"Yes\" : \"No\");\n}\nint main() {\n  cout << fixed << setprecision(10);\n  cerr << fixed << setprecision(10);\n  while (read()) {\n    solve();\n  }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst double PI = acos(-1.0);\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  int n, m;\n  cin >> n >> m;\n  bool **map = new bool *[n];\n  for (int i = 0; i < n; ++i) {\n    map[i] = new bool[m];\n    for (int j = 0; j < m; ++j) {\n      char c;\n      cin >> c;\n      map[i][j] = c == '#';\n    }\n  }\n  bool *r = new bool[n];\n  fill(r, r + n, false);\n  bool can = true;\n  for (int i = 0; i < n; ++i) {\n    if (r[i]) {\n      continue;\n    }\n    r[i] = true;\n    vector<int> list;\n    for (int j = 0; j < m; ++j) {\n      if (map[i][j]) {\n        list.push_back(j);\n      }\n    }\n    if ((list).size() == 0) {\n      continue;\n    }\n    for (int j = i + 1; j < n; ++j) {\n      if (r[j]) {\n        continue;\n      }\n      bool f = false;\n      for (int k = 0; k < (list).size(); ++k) {\n        if (map[j][list[k]]) {\n          f = true;\n          break;\n        }\n      }\n      if (!f) {\n        continue;\n      }\n      r[j] = true;\n      bool ff = false;\n      for (int k = 0; k < m; ++k) {\n        if (map[j][k] != map[i][k]) {\n          ff = true;\n          break;\n        }\n      }\n      if (ff) {\n        can = false;\n        break;\n      }\n    }\n    if (!can) {\n      break;\n    }\n  }\n  cout << (can ? \"Yes\" : \"No\") << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class B {\n\n    MyScanner in;\n    PrintWriter out;\n\n    public static void main(String[] args) throws Exception {\n        new B().run();\n    }\n\n    public void run() throws Exception {\n        in = new MyScanner();\n        out = new PrintWriter(System.out);\n\n        solve();\n\n        out.close();\n    }\n\n    int n, m;\n\n    boolean isClear(char[][] a) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (a[i][j] != '.') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    int findRow(char[][] a) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (a[i][j] == '#') {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    HashSet<Integer> getCols(char[][] a, int row) {\n        HashSet<Integer> ans = new HashSet<>();\n\n        for (int j = 0; j < m; j++) {\n            if (a[row][j] == '#') {\n                ans.add(j);\n            }\n        }\n\n        return ans;\n    }\n\n    HashSet<Integer> getRows(char[][] a, int col) {\n        HashSet<Integer> ans = new HashSet<>();\n\n        for (int i = 0; i < n; i++) {\n            if (a[i][col] == '#') {\n                ans.add(i);\n            }\n        }\n\n        return ans;\n    }\n\n    boolean orthogonal(char[][] a, ArrayList<HashSet<Integer>> rowSets) {\n        HashSet<Integer> firstRowSet = rowSets.get(0);\n\n        for (int i = 1; i < rowSets.size(); i++) {\n            if (!rowSets.get(i).containsAll(firstRowSet) || !firstRowSet.containsAll(rowSets.get(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    void removeFromField(char[][] a, HashSet<Integer> cols, ArrayList<HashSet<Integer>> rowSets) {\n        HashSet<Integer> firstRowSet = rowSets.get(0);\n\n        for (int i : firstRowSet) {\n            for (int j : cols) {\n                a[i][j] = '.';\n            }\n        }\n    }\n\n    public void solve() throws Exception {\n        n = in.nextInt();\n        m = in.nextInt();\n\n        char[][] a = new char[n][];\n        for (int i = 0; i < n; i++) {\n            a[i] = in.next().toCharArray();\n        }\n\n        HashSet<Integer> forbiddenRows = new HashSet<>();\n        HashSet<Integer> forbiddenCols = new HashSet<>();\n\n        while (!isClear(a)) {\n            int initRow = findRow(a);\n            HashSet<Integer> cols = getCols(a, initRow);\n            ArrayList<HashSet<Integer>> rowSets = new ArrayList<>();\n\n            for (int col : cols) {\n                rowSets.add(getRows(a, col));\n            }\n\n            if (!orthogonal(a, rowSets)) {\n                out.println(\"No\");\n                return;\n            }\n\n            for (int col : cols) {\n                if (forbiddenCols.contains(col)) {\n                    out.println(\"No\");\n                    return;\n                }\n            }\n\n            for (int row : rowSets.get(0)) {\n                if (forbiddenRows.contains(row)) {\n                    out.println(\"No\");\n                    return;\n                }\n            }\n\n            removeFromField(a, cols, rowSets);\n\n            forbiddenCols.addAll(cols);\n            forbiddenRows.addAll(rowSets.get(0));\n        }\n\n        out.println(\"Yes\");\n    }\n\n    class MyScanner {\n\n        BufferedReader br;\n        StringTokenizer st;\n\n        public MyScanner() throws Exception {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        String next() throws Exception {\n            while ((st == null) || (!st.hasMoreTokens())) {\n                String t = br.readLine();\n                if (t == null) {\n                    return null;\n                }\n                st = new StringTokenizer(t);\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() throws Exception {\n            return Integer.parseInt(next());\n        }\n\n        double nextDouble() throws Exception {\n            return Double.parseDouble(next());\n        }\n\n        boolean nextBoolean() throws Exception {\n            return Boolean.parseBoolean(next());\n        }\n\n        long nextLong() throws Exception {\n            return Long.parseLong(next());\n        }\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\nusing namespace std;\nconst long double PI = acos(-1);\nconst int N = 1e5 + 10;\nconst int MOD = 1e9 + 7;\nconst int mod1 = 998244353;\nconst long long INF = 2e18;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  cerr.tie(nullptr);\n  {\n    vector<int> v[55];\n    int n, m;\n    cin >> n >> m;\n    for (int i = 0; i < n; i++) {\n      string s;\n      cin >> s;\n      for (int j = 0; j < m; j++) {\n        if (s[j] == '#') {\n          v[i].emplace_back(j);\n        }\n      }\n    }\n    for (int i = 0; i < n; i++) {\n      sort(v[i].begin(), v[i].end());\n    }\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        if (v[i] != v[j]) {\n          for (int x = 0; x < v[i].size(); x++) {\n            for (int y = 0; y < v[j].size(); y++) {\n              if (v[i][x] == v[j][y]) {\n                return cout << \"No\", 0;\n              }\n            }\n          }\n        }\n      }\n    }\n    cout << \"Yes\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 205;\nint fa[maxn];\nint find(int x) {\n  if (fa[x] == x)\n    return x;\n  else {\n    int t = find(fa[x]);\n    fa[x] = t;\n    return t;\n  }\n}\nvoid unit(int x, int y) {\n  int a = find(x);\n  int b = find(y);\n  fa[a] = b;\n}\nchar a[maxn][maxn];\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n + m; i++) fa[i] = i;\n  for (int i = 1; i <= n; i++) {\n    getchar();\n    for (int j = 1; j <= m; j++) {\n      scanf(\"%c\", &a[i][j]);\n      if (a[i][j] == '#') unit(i, n + j);\n    }\n  }\n  int flag = 0;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (find(i) == find(n + j) && a[i][j] == '.') {\n        flag = 1;\n        break;\n      }\n    }\n  }\n  if (flag == 1)\n    printf(\"No\\n\");\n  else\n    printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\na=[]\nfor i in range(n):\n    a.append(input())\nflak=1\nfor i in range(n):\n    d=[]\n    for j in range(m):\n        if a[i][j]==\"#\":\n            d.append(j)\n    for j in range(1,len(d)):\n        for k in range(n):\n            if a[k][d[j-1]]!=a[k][d[j]]:\n                flak=0\nif flak==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class B {\n\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader bff=new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter wff=new PrintWriter(new OutputStreamWriter(System.out));\n\t\tString[] st=bff.readLine().split(\" \");\n\t\tint N=Integer.parseInt(st[0]);\n\t\tint M=Integer.parseInt(st[1]);\n\t\tArrayList<String> original=new ArrayList<>();\n\t\tfor(int i=0;i<N;i++){\n\t\t\tString cad=bff.readLine();\n\t\t\toriginal.add(cad);\n\t\t}\n\t\tboolean[] marcado=new boolean[original.size()];\n\t\tArrayList<ArrayList<Integer>> conjuntos=new ArrayList<>();\n\t\tfor(int i=0;i<original.size();i++){\n\t\t\tif(!marcado[i]){\n\t\t\t\tString a=original.get(i);\n\t\t\t\tArrayList<Integer> conj=new ArrayList<>();\n\t\t\t\tconj.add(i);\n\t\t\t\tmarcado[i]=true;\n\t\t\t\tfor(int j=i+1;j<original.size();j++){\n\t\t\t\t\tString b=original.get(j);\n\t\t\t\t\tif(a.equals(b)){\n\t\t\t\t\t\tconj.add(j);\n\t\t\t\t\t\tmarcado[j]=true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconjuntos.add(conj);\n\t\t\t}\n\t\t}\n\t\t//System.out.println(conjuntos);\n\t\tboolean res=true;\n\t\tfor(int i=0;res && i<conjuntos.size()-1;i++){\n\t\t\tString a=original.get(conjuntos.get(i).get(0));\n\t\t\tfor(int j=i+1;res && j<conjuntos.size();j++){\n\t\t\t\tString b=original.get(conjuntos.get(j).get(0));\n\t\t\t\tfor(int k=0;k<a.length();k++){\n\t\t\t\t\tchar ca=a.charAt(k);\n\t\t\t\t\tchar cb=b.charAt(k);\n\t\t\t\t\tif(ca==cb && ca=='#'){\n\t\t\t\t\t\tres=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(res){\n\t\t\twff.println(\"Yes\");\n\t\t}\n\t\telse{\n\t\t\twff.println(\"No\");\n\t\t}\n\t\twff.flush();\n\t\t\n\t}\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\nimport java.io.*;\n\npublic class B\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int n = in.nextInt();\n        int m = in.nextInt();\n        String[] cells = new String[n];\n        for(int i = 0; i < n; ++i)\n        {\n            cells[i] = in.next();\n        }\n\n        if(check(cells, n, m))\n        {\n            out.println(\"Yes\");\n        }\n        else\n        {\n            out.println(\"No\");\n        }\n\n        out.close();\n    }\n\n    private static boolean check(String[] cells, int n, int m)\n    {\n        boolean[] checked = new boolean[n];\n        for(int i = 0; i < n; ++i)\n        {\n            if(!checked[i])\n            {\n                boolean[] rows = new boolean[n];\n                rows[i] = true;\n                boolean[] cols = new boolean[m];\n\n                for(int j = 0; j < m; ++j)\n                {\n                    if(cells[i].charAt(j) == '#')\n                    {\n                        cols[j] = true;\n                        for(int k = 0; k < n; ++k)\n                        {\n                            if(cells[k].charAt(j) == '#')\n                            {\n                                rows[k] = true;\n                            }\n                        }\n                    }\n                }\n\n                for(int k = 0; k < n; ++k)\n                {\n                    if(rows[k])\n                    {\n                        for(int j = 0; j < m; ++j)\n                        {\n                            if(cols[j] && cells[k].charAt(j) != '#')\n                            {\n                                return false;\n                            }\n                            if(!cols[j] && cells[k].charAt(j) == '#')\n                            {\n                                return false;\n                            }\n                        }\n                    }\n                }\n\n                for(int k = 0; k < n; ++k)\n                {\n                    if(rows[k])\n                    {\n                        checked[k] = true;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbitset<55> dic[55];\nchar grid[55][55];\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%s\", grid[i]);\n    for (int j = 0; j < m; j++) {\n      if (grid[i][j] == '#')\n        dic[i][j] = true;\n      else\n        dic[i][j] = false;\n    }\n  }\n  bool ok = true;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++)\n      if (dic[i] != dic[j] && (dic[i] | dic[j]) != (dic[i] ^ dic[j]))\n        ok = false;\n  }\n  if (ok)\n    puts(\"Yes\");\n  else\n    puts(\"No\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> m >> n;\n  string s[m];\n  for (int i = 0; i < m; i++) {\n    cin >> s[i];\n  }\n  for (int i = 0; i < m; i++) {\n    for (int j = i + 1; j < m; j++) {\n      int flag = false;\n      for (int k = 0; k < n; k++) {\n        if (s[i][k] == '#' && s[j][k] == '#') {\n          flag = true;\n          break;\n        }\n      }\n      if (flag) {\n        for (int k = 0; k < n; k++) {\n          if (s[i][k] != s[j][k]) {\n            cout << \"No\" << endl;\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvector<vector<int>> t(55);\nvector<int> cols(55);\nvector<int> taken(55);\nint main() {\n  int m, n;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      char c;\n      cin >> c;\n      if (c == '.') {\n        t[i].push_back(0);\n      } else {\n        t[i].push_back(1);\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (taken[i]) continue;\n    for (int j = 0; j < m; j++) {\n      if (t[i][j]) {\n        if (cols[j]) {\n          cout << \"NO\";\n          return 0;\n        } else {\n          cols[j] = 1;\n        }\n      }\n    }\n    for (int j = i + 1; j < n; j++) {\n      if (t[i] == t[j]) taken[j] = 1;\n    }\n  }\n  cout << \"YES\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nnamespace {\nnamespace aimi {\ntemplate <class T>\nvoid _input(T &x) {\n  cin >> x;\n}\nvoid _input(int &x) { scanf(\"%d\", &x); }\nvoid _input(int64_t &x) { scanf(\"%\" SCNd64, &x); }\nvoid _input(double &x) { scanf(\"%lf\", &x); }\nvoid _input(char &x) { scanf(\" %c\", &x); }\nvoid _input(char *x) { scanf(\"%s\", x); }\nvoid input() {}\nvoid input(char *x) { scanf(\"%s\", x); }\ntemplate <class T, class... U>\nvoid input(T &head, U &...tail) {\n  _input(head);\n  input(tail...);\n}\ntemplate <class T>\nvoid _print(const T &x) {\n  cout << x;\n}\nvoid _print(const int &x) { printf(\"%d\", x); }\nvoid _print(const int64_t &x) { printf(\"%\" PRId64, x); }\nvoid _print(const double &x) { printf(\"%.16f\", x); }\nvoid _print(const char &x) { putchar(x); }\nvoid _print(const char *x) { printf(\"%s\", x); }\ntemplate <class T>\nvoid _print(const vector<T> &x) {\n  for (auto i = cbegin(x); i != cend(x); _print(*i++))\n    if (i != cbegin(x)) putchar(' ');\n}\nvoid print() {}\ntemplate <class T, class... U>\nvoid print(const T &head, const U &...tail) {\n  _print(head);\n  putchar(sizeof...(tail) ? ' ' : '\\n');\n  print(tail...);\n}\ntemplate <class T, class F = less<T>>\nvoid sort_unique(vector<T> &v, F f = F()) {\n  sort(begin(v), end(v), f);\n  v.resize(unique(begin(v), end(v)) - begin(v));\n}\ntemplate <class T>\ninline T get_bit(T x, int i) {\n  return (x >> i) & 1;\n}\ntemplate <class T>\ninline bool chkmax(T &a, const T &b) {\n  return b > a ? a = b, true : false;\n}\ntemplate <class T>\ninline bool chkmin(T &a, const T &b) {\n  return b < a ? a = b, true : false;\n}\ntemplate <class T>\nusing MaxHeap = priority_queue<T>;\ntemplate <class T>\nusing MinHeap = priority_queue<T, vector<T>, greater<T>>;\nconst int MAX = 55;\nint n, m;\nchar s[MAX][MAX];\nbool check(const set<int> &r, const set<int> &c) {\n  for (int i : r) {\n    for (int j = 0; j < int(m); ++j) {\n      if (c.count(j) > 0 && s[i][j] != '#') return false;\n      if (c.count(j) == 0 && s[i][j] == '#') return false;\n    }\n  }\n  for (int j : c) {\n    for (int i = 0; i < int(n); ++i) {\n      if (r.count(i) > 0 && s[i][j] != '#') return false;\n      if (r.count(i) == 0 && s[i][j] == '#') return false;\n    }\n  }\n  for (int i : r)\n    for (int j : c) s[i][j] = '.';\n  return true;\n}\nvoid main() {\n  input(n, m);\n  for (int i = 0; i < int(n); ++i) input(s[i]);\n  for (int i = 0; i < int(n); ++i)\n    for (int j = 0; j < int(m); ++j) {\n      if (s[i][j] == '.') continue;\n      set<int> r;\n      set<int> c;\n      for (int k = 0; k < int(n); ++k)\n        if (s[k][j] == '#') r.insert(k);\n      for (int k = 0; k < int(m); ++k)\n        if (s[i][k] == '#') c.insert(k);\n      if (!check(r, c)) {\n        print(\"No\");\n        cerr << i << \" \" << j << endl;\n        return;\n      }\n    }\n  print(\"Yes\");\n}\n}  // namespace aimi\n}  // namespace\nint main() {\n  aimi::main();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nstatic const int MAXN = 53;\nstatic int n, m;\nstatic bool a[MAXN][MAXN];\nstatic long long b[MAXN];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j <= m; ++j) a[i][j] = (getchar() == '#');\n  for (int i = 0; i < n - 1; ++i)\n    for (int j = i + 1; j < n; ++j) {\n      bool all_same = true, no_intersect = true;\n      for (int k = 0; k < m; ++k) {\n        if (a[i][k] != a[j][k]) all_same = false;\n        if (a[i][k] & a[j][k] != 0) no_intersect = false;\n      }\n      if (!all_same && !no_intersect) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author chaku\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskA {\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n            int n=in.nextInt(),m=in.nextInt();\n            String[] st=new String[n];\n            for(int i=0;i<n;i++)\n            {\n                st[i]=in.next();\n            }\n            for(int i=0;i<n-1;i++)\n            {\n                for(int j=i+1;j<n;j++)\n                {\n                    if(st[i].compareTo(st[j])!=0)\n                    {\n                        for(int k=0;k<m;k++)\n                        {\n                            if(st[i].charAt(k)==st[j].charAt(k) && st[i].charAt(k)=='#')\n                            {\n                                out.println(\"No\");\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n            out.println(\"Yes\");\n        }\n\n    }\n\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void print(Object... objects) {\n            for (int i = 0; i < objects.length; i++) {\n                if (i != 0) {\n                    writer.print(' ');\n                }\n                writer.print(objects[i]);\n            }\n        }\n\n        public void println(Object... objects) {\n            print(objects);\n            writer.println();\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String nextString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                if (Character.isValidCodePoint(c)) {\n                    res.appendCodePoint(c);\n                }\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return isWhitespace(c);\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public String next() {\n            return nextString();\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n\n        }\n\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nstd::string s[100];\nint n, m;\nbool jisuan(int x, int y) {\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (x == i || y == j || s[i][j] == '.') continue;\n      if ((s[x][j] == '#' && s[i][y] == '.') ||\n          (s[x][j] == '.' && s[i][y] == '#'))\n        return 0;\n    }\n  }\n  return 1;\n}\nint main() {\n  int p = 0;\n  std::cin >> n >> m;\n  for (int i = 0; i < n; i++) std::cin >> s[i];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        if (!jisuan(i, j)) p = 1;\n      }\n    }\n  }\n  if (p)\n    std::cout << \"No\\n\";\n  else\n    std::cout << \"Yes\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<string> v;\n  string s;\n  for (int i = 0; i < n; i++) {\n    cin >> s;\n    v.push_back(s);\n  }\n  vector<bool> row(n, false);\n  for (int r = 0; r < n; r++) {\n    if (row[r]) continue;\n    vector<int> col_nums;\n    vector<bool> first_col(n, false), first_row(m, false);\n    for (int c = 0; c < m; c++) {\n      if (v[r][c] == '#') {\n        col_nums.push_back(c);\n        first_row[c] = true;\n      }\n    }\n    row[r] = true;\n    if (col_nums.size() == 0) continue;\n    for (int i = 0; i < n; i++) {\n      if (v[i][col_nums[0]] == '#') {\n        first_col[i] = true;\n        row[i] = true;\n      }\n    }\n    for (int j = 1; j < col_nums.size(); j++) {\n      for (int i = 0; i < n; i++) {\n        if (first_col[i] && v[i][col_nums[j]] == '.') {\n          cout << \"No\" << endl;\n          return 0;\n        } else if (!first_col[i] && v[i][col_nums[j]] == '#') {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n    }\n    for (int i = 0; i < n; i++) {\n      if (!first_col[i]) continue;\n      for (int j = 0; j < m; j++) {\n        if (first_row[j] && v[i][j] == '.') {\n          cout << \"No\" << endl;\n          return 0;\n        } else if (!first_row[j] && v[i][j] == '#') {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  long long n, m, i, j, k;\n  cin >> n >> m;\n  string s[n];\n  for (i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        for (k = 0; k < n; k++) {\n          if (s[k][j] == '#') {\n            if (s[i] != s[k]) {\n              cout << \"No\";\n              return 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "n, m = map(int,raw_input().split())\nlines = []\nfor i in range (0, n):\n    lines.append(raw_input().strip())\nbad = 0\nfor i in range (0, n):\n    for j in range (i+1, n):\n        if lines[i] != lines[j]:\n            for k in range (0, m):\n                if lines[i][k] == \"#\" and lines[j][k] == \"#\":\n                    bad += 1\nif bad == 0:\n    print \"Yes\"\nelse:\n    print \"No\""
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstring s[55];\nvector<int> getRow(int x) {\n  vector<int> R;\n  for (int i = 1; i <= m; i++)\n    if (s[x][i] == '#') R.push_back(i);\n  return R;\n}\nvector<int> getCol(int x) {\n  vector<int> C;\n  for (int i = 1; i <= n; i++)\n    if (s[i][x] == '#') C.push_back(i);\n  return C;\n}\nint Viz[55];\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    string t;\n    cin >> t;\n    s[i] = '.' + t + '.';\n  }\n  int nope = 0;\n  for (int i = 1; i <= n && !nope; i++) {\n    if (!Viz[i]) {\n      vector<int> V, R;\n      int ok = 0;\n      for (int j = 1; j <= m; j++) {\n        if (s[i][j] == '#') {\n          R.push_back(j);\n          if (!ok)\n            V = getCol(j), ok = 1;\n          else {\n            vector<int> U = getCol(j);\n            if (U != V) nope = 1;\n          }\n        }\n      }\n      for (int j : V) {\n        Viz[j] = 1;\n        vector<int> Row = getRow(j);\n        if (R != Row) {\n          nope = 1;\n        }\n      }\n    }\n  }\n  if (nope)\n    cout << \"No\";\n  else\n    cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.util.*;\n/**\n *\n * @author SNEHITH\n */\npublic class Main {\n    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        int m = sc.nextInt();\n        int n = sc.nextInt();\n        int k=0,count=0,failure=0,prev=0,curr=0;\n//        sc.next();\n        String s[] = new String[m+1];\n        for(int i=0;i<m+1; i++){\n                s[i] = sc.nextLine();\n        }\n        for(int i=0; i < n; i++){\n            for(int j=1; j<m+1;j++){\n//                System.out.print(s[j].charAt(k));\n                if(s[j].charAt(k) == '#'){\n                    count++;\n                    prev = curr;\n                    curr = j;\n                }\n                if(count >= 2){\n//                        System.out.println(\"s[prev]\"+s[prev] + \"curr\"+ s[curr]);\n\n                    if(s[prev].equals(s[curr]) == false){\n                        failure = 1;\n//                        System.out.println(\"s[prev]\"+s[prev] + \"curr\"+ s[curr]);\n                    }\n                }\n            }\n //           System.out.println(count);\n            count=0;\n            k++;\n  //          System.out.println();\n        }\n        if(failure == 1)\n            System.out.println(\"NO\");\n        else\n            System.out.println(\"YES\");\n        \n    }\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n        String[] x = in.readLine().split(\" \");\n        int n = Integer.parseInt(x[0]);\n        int m = Integer.parseInt(x[1]);\n        char tab[][] = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            String ch = in.readLine();\n            tab[i] = ch.toCharArray();\n        }\n        ArrayList<Integer>[] p = (ArrayList<Integer>[]) new ArrayList[51];\n        HashSet<ArrayList<Integer>> s = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (tab[i][j] == '#') {\n                    if (p[i] == null) {\n                        p[i] = new ArrayList<>();\n                        p[i].add(j);\n                    } else {\n                        p[i].add(j);\n                    }\n                }\n            }\n        }\n        \n        for (ArrayList<Integer> elt : p) {\n            if (elt != null) {\n                s.add(elt);\n            }\n        }\n        Set<Integer> set = new HashSet<>();\n       // out.print(s.toString());\n        for (ArrayList<Integer> arrayList : s) {\n            for (Integer integer : arrayList) {\n                if (set.contains(integer)) {\n                    out.println(\"No\");\n                    out.close();\n                    return;\n                } else {\n                    set.add(integer);\n                }\n            }\n        }\n        out.print(\"Yes\");\n        out.close();\n    }\n    \n    static class FastScanner {\n        \n        private BufferedReader in;\n        private String[] line;\n        private int index;\n        private int size;\n        \n        public FastScanner(InputStream in) throws IOException {\n            this.in = new BufferedReader(new InputStreamReader(in));\n            init();\n        }\n        \n        public FastScanner(String file) throws FileNotFoundException {\n            this.in = new BufferedReader(new FileReader(file));\n        }\n        \n        private void init() throws IOException {\n            line = in.readLine().split(\" \");\n            index = 0;\n            size = line.length;\n        }\n        \n        public int nextInt() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Integer.parseInt(line[index++]);\n        }\n        \n        public long nextLong() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Long.parseLong(line[index++]);\n        }\n        \n        public float nextFloat() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Float.parseFloat(line[index++]);\n        }\n        \n        public double nextDouble() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Double.parseDouble(line[index++]);\n        }\n        \n        public String next() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return line[index++];\n        }\n        \n        public String nextLine() throws IOException {\n            if (index == size) {\n                init();\n            }\n            StringBuilder sb = new StringBuilder();\n            for (int i = index; i < size; i++) {\n                sb.append(line[i]).append(\" \");\n            }\n            return sb.toString();\n        }\n        \n        private int[] nextIntArray(int n) throws IOException {\n            int[] tab = new int[n];\n            for (int i = 0; i < tab.length; i++) {\n                tab[i] = nextInt();\n            }\n            return tab;\n        }\n        \n    }\n    \n}\n"
        },
        {
            "language": 3,
            "solution": "from collections import defaultdict as dd, deque\nimport sys\n\nR,C = map(int,input().split())\nA = [input() for i in range(R)]\nAt = [[A[i][j] for i in range(R)] for j in range(C)]\n\nD = dd(list)\n\nfor i,a in enumerate(A):\n    D[a].append(i)\n\nfor a in D:\n    I = D[a]\n    J = [i for i,c in enumerate(a) if c=='#']\n\n    for j in J:\n        nI = [i for i in range(R) if A[i][j]=='#']\n        if I != nI:\n            print('No')\n            sys.exit(0)\nprint('Yes')\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  vector<string> a(n);\n  for (auto &x : a) {\n    cin >> x;\n  }\n  for (int i = 0; i < n; ++i) {\n    set<int> pos;\n    for (int j = 0; j < m; ++j) {\n      if (a[i][j] == '#') {\n        pos.emplace(j);\n      }\n    }\n    if (pos.empty()) {\n      continue;\n    }\n    for (int j = i + 1; j < n; ++j) {\n      set<int> nxt;\n      bool equal = false;\n      for (int k = 0; k < m; ++k) {\n        if (a[j][k] == '#') {\n          nxt.emplace(k);\n          if (pos.count(k)) {\n            equal = true;\n          }\n        }\n      }\n      if (nxt.empty()) {\n        continue;\n      } else if (nxt != pos && equal) {\n        cout << \"No\" << endl;\n        return;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.Scanner;\n\n\npublic class MysticalMoasic {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint m = input.nextInt();\n\t\tchar[][] s = new char[n][m];\n\t\tfor(int i=0; i<n;i++)s[i] = input.next().toCharArray();\n\t  for(int i=0; i<n;i++){\n\t\t  for(int j=i+1; j<n;j++){\n\t\t\t  if(check(s[i],s[j])){\n\t\t\t\t  System.out.println(\"No\");\n\t\t\t\t  return;\n\t\t\t  }\n\t\t  }\n\t  }\n\t  //System.out.println(check(s[0],s[2]));\n\t  System.out.println(\"Yes\");\n\t}\n\t\n\tprivate static boolean check(char[] s1, char[] s2){\n\t\tboolean condition1 = false;\n\t\tint i=0;\n\t\tboolean condition2 = false;\n  //    System.out.println(String.valueOf(s1)+\" \"+String.valueOf(s2));\n\t\twhile(i<s1.length){\n\t\t\tif((s1[i]=='#' && s2[i]=='.') || (s1[i]=='.' && s2[i]=='#')){\n\t\t\t\tcondition1 = true;\n\t\t\t\t\n\t\t\t}\n\t\t\telse if(s1[i]=='#' && s2[i]=='#'){\n\t\t\t\tcondition2 = true;\n\t\t\t}\n\t\t\tif(condition1 && condition2){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m, k;\nint x[101][101];\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      char ch;\n      cin >> ch;\n      x[i][j] = ch == '#';\n    }\n  }\n  int y[101][101];\n  memset(y, 0, sizeof(y));\n  for (int i = 1; i <= n; i++) {\n    vector<int> row;\n    for (int j = 1; j <= m; j++) {\n      if (x[i][j]) row.push_back(j);\n    }\n    for (int j = 1; j <= m; j++) {\n      if (x[i][j]) {\n        for (int a = 1; a <= n; a++) {\n          if (x[a][j]) {\n            for (int k : row) y[a][k] = 1;\n          }\n        }\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (y[i][j] != x[i][j]) {\n        cout << \"NO\";\n        return 0;\n      }\n    }\n  }\n  cout << \"YES\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool flag = 0, flag1 = 0, flag2 = 0;\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  long long int t = 1;\n  while (t--) {\n    long long int n, m;\n    cin >> n >> m;\n    char a[n][m], x;\n    for (long long int i = 0; i < n; i++)\n      for (long long int j = 0; j < m; j++) cin >> x, a[i][j] = (x == '#');\n    for (long long int i = 0; i < n - 1; i++)\n      for (long long int j = i + 1; j < n; j++) {\n        flag = 0;\n        flag1 = 0;\n        for (long long int k = 0; k < m; k++) {\n          if (a[i][k] != a[j][k]) flag = 1;\n          if (a[i][k] && a[j][k]) flag1 = 1;\n        }\n        if (flag && flag1) {\n          cout << \"No\";\n          return 0;\n        }\n      }\n    cout << \"Yes\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool flag = 0, flag1 = 0, flag2 = 0;\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  long long int t = 1;\n  while (t--) {\n    long long int n, m;\n    cin >> n >> m;\n    char a[n][m], x;\n    for (long long int i = 0; i < n; i++)\n      for (long long int j = 0; j < m; j++) cin >> x, a[i][j] = (x == '#');\n    for (long long int i = 0; i < n - 1; i++)\n      for (long long int j = i + 1; j < n; j++) {\n        flag = 0;\n        flag1 = 0;\n        for (long long int k = 0; k < m; k++) {\n          if (a[i][k] != a[j][k]) flag = 1;\n          if (a[i][k] && a[j][k]) flag1 = 1;\n        }\n        if (flag && flag1) {\n          cout << \"No\";\n          return 0;\n        }\n      }\n    cout << \"Yes\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst long long mod = 1073741824;\nusing namespace std;\nconst int N = 2e5 + 5;\nvector<int> e[N];\nchar c[1001][1001];\nint vis[1001][1001];\nmap<int, int> prefix;\nlong long binpow(long long a, long long b) {\n  if (a == 0) return a;\n  if (b == 0) return 1;\n  if (b == 1) return a % mod;\n  long long temp = binpow(a, b / 2) % mod;\n  if (b & 1) return (a * temp * temp) % mod;\n  return (temp * temp) % mod;\n}\nlong long bit[N], value[N];\nvoid dfs(int i, int j, int n, int m) {\n  if (vis[i][j]) return;\n  if (c[i][j] == '.')\n    vis[i][j] = 1;\n  else\n    return;\n  if (i > 0) dfs(i - 1, j, n, m);\n  if (j > 0) dfs(i, j - 1, n, m);\n  if (i + 1 < n) dfs(i + 1, j, n, m);\n  if (j + 1 < m) dfs(i, j + 1, n, m);\n  return;\n}\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int T = 1;\n  while (T--) {\n    int n, m;\n    cin >> n >> m;\n    char c[n][m];\n    vector<vector<int>> v;\n    map<vector<int>, int> p;\n    for (int i = 0; i < n; i++) {\n      vector<int> vi;\n      for (int j = 0; j < m; j++) {\n        cin >> c[i][j];\n        if (c[i][j] == '#') vi.push_back(j);\n      }\n      if (p[vi] == 0) {\n        v.push_back(vi);\n        p[vi]++;\n      }\n    }\n    map<int, int> mi;\n    for (int i = 0; i < v.size(); i++) {\n      vector<int> u = v[i];\n      for (int j = 0; j < u.size(); j++) mi[u[j]]++;\n    }\n    bool y = true;\n    for (int i = 0; i < m; i++) {\n      if (mi[i] > 1) {\n        y = false;\n        break;\n      }\n    }\n    if (y)\n      cout << \"Yes\" << endl;\n    else\n      cout << \"No\" << endl;\n  }\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport java.util.*;\n\npublic class Solution\n{\n    public static void main(String[] args)\n    {\n        MyScanner sc = new MyScanner();\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n\n        //--------Solution-------------------------------------------------------//\n        int n=sc.nextInt();\n        int m=sc.nextInt();\n\n        int[][] a=new int[n][m];\n\n        for(int i=0;i<n;i++){\n            String s=sc.next();\n\n            for(int j=0;j<m;j++){\n                if(s.charAt(j)=='.') a[i][j]=0;\n                else a[i][j]=1;\n            }\n        }\n\n        boolean ans=true;\n\n        for(int i=0;i<n;i++){\n            boolean[] b=new boolean[m];\n            for(int j=0;j<m;j++) if(a[i][j]==1) b[j]=true;\n\n            for(int j=0; j<n; j++){\n                if(i!=j){\n                    boolean s=false;\n                    boolean d=false;\n\n                    for(int k=0;k<m;k++){\n                        if(b[k]){\n                            if(a[j][k]==0) d=true;\n                            else s=true;\n                        }\n                    }\n\n                    if(s&&d) ans=false;\n                }\n            }\n        }\n\n        if(ans) out.println(\"Yes\");\n        else out.println(\"No\");\n        //-----------------------------------------------------------------------//\n\n        out.close();\n    }\n\n    //-----------Helper Functions------------------------------------------------//\n    static int[] readIntArray(MyScanner sc,int n){\n        int[] a = new int[n];\n        for(int i=0;i<n;i++) a[i]= sc.nextInt();\n        return a;\n    }\n\n    static long[] readLongArray(MyScanner sc,int n){\n        long[] a = new long[n];\n        for(int i=0;i<n;i++) a[i]=sc.nextLong();\n        return a;\n    }\n\n    static int[] toIntArray(String s){\n        int[] a = new int[s.length()];\n        for(int i=0;i<s.length();i++) a[i]=s.charAt(i)-'0';\n        return a;\n    }\n\n    static long mod(long a){\n        long M=(long)1e9+7;\n        return (a%M + M) % M;\n    }\n\n    static int gcd(int a,int b){\n        while(b!=0){\n            int r=a%b;\n            a=b;\n            b=r;\n        }\n        return a;\n    }\n\n    static boolean isPrime(long n) {\n        if(n==2||n==3) return true;\n        if(n%2==0 || n%3==0) return false;\n\n        long i=5,w=2;\n\n        while(i*i<=n){\n            if(n%i==0) return false;\n\n            i += w;\n            w = 6 - w;\n        }\n\n        return true;\n    }\n\n    static long exp(long base,int exp){\n        long M=(long)1e9+7;\n        long res=1L;\n\n        while(exp>0){\n            if(exp%2==1) res = (res*base)%M;\n            base = (base*base)%M;\n            exp /= 2;\n        }\n\n        return res;\n    }\n\n    static int floor(int[] a,int i){\n        int lo=0,hi=a.length-1;\n        int ans=-1;\n\n        while(lo<=hi){\n            int mid = lo + (hi-lo)/2;\n            if(a[mid]==i){ans=mid; break;}\n            else if(a[mid]<i){ans=mid; lo=mid+1;}\n            else{hi=mid-1;}\n        }\n\n        return ans;\n    }\n\n    static boolean nextPermutation(int[] a){\n        int i = a.length - 1;\n        while(i>0 && a[i-1]>=a[i]) i--;\n\n        if(i==0) return false;\n\n        int j = a.length - 1;\n        while(a[j]<=a[i-1]) j--;\n\n        int temp = a[i-1];\n        a[i-1]=a[j];\n        a[j]=temp;\n\n        j = a.length - 1;\n        while(i<j){\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++; j--;\n        }\n        return true;\n    }\n\n    static boolean nextPermutation(char[] a){\n        int i = a.length - 1;\n        while(i>0 && a[i-1]>=a[i]) i--;\n\n        if(i==0) return false;\n\n        int j = a.length - 1;\n        while(a[j]<=a[i-1]) j--;\n\n        char temp = a[i-1];\n        a[i-1]=a[j];\n        a[j]=temp;\n\n        j = a.length - 1;\n        while(i<j){\n            temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            i++; j--;\n        }\n        return true;\n    }\n\n    static long max_subarray(long[] a){\n        long lmax = a[0], gmax=a[0];\n\n        for(int i=1; i<a.length; i++){\n            lmax = Math.max(a[i],lmax+a[i]);\n            gmax = Math.max(lmax,gmax);\n        }\n        return gmax;\n    }\n\n    //-----------PrintWriter for faster output-----------------------------------//\n    public static PrintWriter out;\n\n    //-----------MyScanner class for faster input--------------------------------//\n    public static class MyScanner\n    {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public MyScanner(){\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        String next()\n        {\n            while (st == null || !st.hasMoreElements())\n            {\n                try\n                {\n                    st = new StringTokenizer(br.readLine());\n                }\n                catch (IOException e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt(){\n            return Integer.parseInt(next());\n        }\n\n        long nextLong(){\n            return Long.parseLong(next());\n        }\n\n        double nextDouble(){\n            return Double.parseDouble(next());\n        }\n\n        String nextLine()\n        {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n\n    }\n}\n\n\n//-----------------------Helper Classes------------------------------------------//\nclass Pair<A extends Comparable<A>,B> implements Comparable<Pair<A,B>>\n{\n    A first;\n    B second;\n\n    Pair(A f,B s){\n        first=f;\n        second=s;\n    }\n\n    public int compareTo(Pair<A,B> p){\n        return this.first.compareTo(p.first);\n    }\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class CF1 {\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        char array[][] = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            String str = br.readLine();\n            for (int j = 0; j < m; j++)\n                array[i][j] = str.charAt(j);\n        }\n        HashSet<String> set = new HashSet<>();\n        boolean visited[] = new boolean[n];\n        for (int i = 0; i < m; i++) {\n            String str = \"\";\n            boolean check = false;\n            for (int j = 0; j < n; j++) {\n                if (array[j][i] == '#') {\n                    if (visited[j])\n                        check = true;\n                    visited[j] = true;\n                    str += Integer.toString(j);\n                }\n            }\n//            System.out.println(str + \" \" + set.contains(str) + \" \" + set);\n            if (check && !set.contains(str)) {\n                System.out.print(\"No\");\n                System.exit(0);\n            }\n            set.add(str);\n        }\n        System.out.println(\"Yes\");\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst int MAXINT = 2147483640;\nconst long long MAXLL = 9223372036854775800LL;\nconst long long MAXN = 1000000;\nconst double eps = 1e-9;\nconst long long mod = 1e9 + 7;\nusing namespace std;\nlong long binpow(long long a, long long n) {\n  long long ans = 1;\n  while (n) {\n    if (n & 1) ans *= a;\n    a *= a;\n    n >>= 1;\n  }\n  return ans;\n}\nlong long n, m;\nchar a[1000][1000];\nvector<long long> v[100];\nset<long long> s[60], s1[60];\nint main() {\n  srand(time(0));\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  ;\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) {\n      cin >> a[i][j];\n      if (a[i][j] == '#') {\n        v[j].push_back(i);\n      }\n    }\n  }\n  vector<long long> vi;\n  for (int i = 1; i <= n; ++i) {\n    long long f = 0;\n    long long ans = 0;\n    vi.clear();\n    for (int j = 1; j <= m; ++j) {\n      if (a[i][j] == '#') {\n        vi.push_back(j);\n      }\n    }\n    long long k = vi.size();\n    for (int i = 0; i < k - 1; ++i) {\n      if (v[vi[i]].size() != v[vi[i + 1]].size()) {\n        cout << \"No\" << endl;\n        return 0;\n      } else {\n        if (v[vi[i]] != v[vi[i + 1]]) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "import sys\n\nn_rows, n_cols = [int(x) for x in input().split(\" \")]\nmap = []\nfor i in range(n_rows):\n    map.append(input())\n\nmap_lines = dict()\nactivated_cols = dict()\nfor line in map:\n    activated = []\n    for col_i, col in enumerate(line):\n        if col == '#':\n            activated.append(col_i)\n    activated_str = \" \".join([str(x) for x in activated])\n    if activated_str not in map_lines:\n        for col in activated:\n            if col in activated_cols:\n                print(\"No\")\n                sys.exit()\n            else:\n                activated_cols[col] = True\n    map_lines[activated_str] = True\nprint(\"Yes\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstring A[55];\nint main() {\n  cin >> n >> m;\n  for (int i = (0); i < (n); i++) {\n    cin >> A[i];\n  }\n  for (int i = (0); i < (n); i++)\n    for (int j = (i + 1); j < (n); j++) {\n      bool haveSame = false;\n      for (int k = (0); k < (m); k++) {\n        if (A[i][k] == '#' && A[j][k] == '#') haveSame = true;\n      }\n      if (haveSame) {\n        for (int k = (0); k < (m); k++) {\n          if (A[i][k] != A[j][k]) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 1,
            "solution": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# http://codeforces.com/contest/957/problem/B\n\nimport sys\ndef can_be_achieved(n, m, s):\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == '#':\n                for k in range(n):\n                    if s[k][j] == '#' and s[i] != s[k]:\n                        return 'No'\n\n    return 'Yes'\n\ndef main(argv=None):\n    n,m = map(int, raw_input().split())\n    l = []\n    for i in range(n):\n    \tl.append(raw_input())\n    print(can_be_achieved(n, m, l))\n    return 0\n\nif __name__ == \"__main__\":\n    status = main()\n    sys.exit(status)\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int n, m;\n  cin >> n >> m;\n  vector<string> board;\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    board.push_back(s);\n  }\n  for (int i = 0; i < n - 1; i++) {\n    for (int j = i + 1; j < n; j++) {\n      bool same = true, no_intersect = true;\n      for (int k = 0; k < m; k++) {\n        if (board[i][k] != board[j][k]) same = false;\n        if (board[i][k] == '#' && board[j][k] == '#') no_intersect = false;\n      }\n      if (!same && !no_intersect) {\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = (int)1E9;\nconst long long INFLL = (long long)11E15;\nconst long long MOD = (long long)1E9 + 7;\nconst double PI = acos(-1);\nconst double EPS = 1E-9;\nbool between(int x, int l, int r) { return (l <= x && x <= r); }\nstring tostring(int x) {\n  char dum[20];\n  sprintf(dum, \"%d\", x);\n  string ret(dum);\n  return ret;\n}\nint n, m;\nbool row[60], col[60];\nbool vis[60][60];\nstring grid[60];\nbool flood(int x, int y) {\n  vector<int> R, C;\n  R.clear();\n  C.clear();\n  if (row[x]) return false;\n  if (col[y]) return false;\n  for (int i = 0; i < n; i += 1) {\n    if (grid[i][y] == '#') R.push_back(i);\n  }\n  for (int i = 0; i < m; i += 1) {\n    if (grid[x][i] == '#') C.push_back(i);\n  }\n  for (auto data : R) {\n    if (row[data]) return false;\n    row[data] = true;\n  }\n  for (auto data : C) {\n    if (col[data]) return false;\n    col[data] = true;\n  }\n  for (auto a : R)\n    for (auto b : C) {\n      if (grid[a][b] != '#') return false;\n      vis[a][b] = true;\n    }\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> m;\n  for (int i = 0; i < n; i += 1) cin >> grid[i];\n  memset(col, false, sizeof col);\n  memset(row, false, sizeof row);\n  memset(vis, false, sizeof vis);\n  for (int i = 0; i < n; i += 1)\n    for (int j = 0; j < m; j += 1) {\n      if (vis[i][j]) continue;\n      if (grid[i][j] != '#') continue;\n      bool temp = flood(i, j);\n      if (!temp) {\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing namespace chrono;\ntemplate <class T>\nvoid _print(T t) {\n  cerr << t;\n}\ntemplate <class T, class V>\nvoid _print(pair<T, V> p);\ntemplate <class T>\nvoid _print(vector<T> v);\ntemplate <class T>\nvoid _print(set<T> v);\ntemplate <class T, class V>\nvoid _print(map<T, V> v);\ntemplate <class T>\nvoid _print(multiset<T> v);\ntemplate <class T, class V>\nvoid _print(pair<T, V> p) {\n  cerr << \"{\";\n  _print(p.first);\n  cerr << \",\";\n  _print(p.second);\n  cerr << \"}\";\n}\ntemplate <class T>\nvoid _print(vector<T> v) {\n  cerr << \"[ \";\n  for (T i : v) {\n    _print(i);\n    cerr << \" \";\n  }\n  cerr << \"]\";\n}\ntemplate <class T>\nvoid _print(set<T> v) {\n  cerr << \"[ \";\n  for (T i : v) {\n    _print(i);\n    cerr << \" \";\n  }\n  cerr << \"]\";\n}\ntemplate <class T>\nvoid _print(multiset<T> v) {\n  cerr << \"[ \";\n  for (T i : v) {\n    _print(i);\n    cerr << \" \";\n  }\n  cerr << \"]\";\n}\ntemplate <class T, class V>\nvoid _print(map<T, V> v) {\n  cerr << \"[ \";\n  for (auto i : v) {\n    _print(i);\n    cerr << \" \";\n  }\n  cerr << \"]\";\n}\ntemplate <typename T>\nvector<T>& operator--(vector<T>& v) {\n  for (auto& i : v) --i;\n  return v;\n}\ntemplate <typename T>\nvector<T>& operator++(vector<T>& v) {\n  for (auto& i : v) ++i;\n  return v;\n}\ntemplate <typename T>\nistream& operator>>(istream& is, vector<T>& v) {\n  for (auto& i : v) is >> i;\n  return is;\n}\ntemplate <typename T>\nostream& operator<<(ostream& os, vector<T> v) {\n  for (auto& i : v) os << i << ' ';\n  return os;\n}\ntemplate <typename T, typename U>\npair<T, U>& operator--(pair<T, U>& p) {\n  --p.first;\n  --p.second;\n  return p;\n}\ntemplate <typename T, typename U>\npair<T, U>& operator++(pair<T, U>& p) {\n  ++p.first;\n  ++p.second;\n  return p;\n}\ntemplate <typename T, typename U>\nistream& operator>>(istream& is, pair<T, U>& p) {\n  is >> p.first >> p.second;\n  return is;\n}\ntemplate <typename T, typename U>\nostream& operator<<(ostream& os, pair<T, U> p) {\n  os << p.first << ' ' << p.second;\n  return os;\n}\ntemplate <typename T, typename U>\npair<T, U> operator-(pair<T, U> a, pair<T, U> b) {\n  return make_pair(a.first - b.first, a.second - b.second);\n}\ntemplate <typename T, typename U>\npair<T, U> operator+(pair<T, U> a, pair<T, U> b) {\n  return make_pair(a.first + b.first, a.second + b.second);\n}\ntemplate <typename T, typename U>\nvoid umin(T& a, U b) {\n  if (a > b) a = b;\n}\ntemplate <typename T, typename U>\nvoid umax(T& a, U b) {\n  if (a < b) a = b;\n}\nlong long gcd(long long a, long long b) {\n  if (b > a) {\n    return gcd(b, a);\n  }\n  if (b == 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\nlong long expo(long long a, long long b, long long mod) {\n  long long res = 1;\n  while (b > 0) {\n    if (b & 1) res = (res * a) % mod;\n    a = (a * a) % mod;\n    b = b >> 1;\n  }\n  return res;\n}\nvoid extendgcd(long long a, long long b, long long* v) {\n  if (b == 0) {\n    v[0] = 1;\n    v[1] = 0;\n    v[2] = a;\n    return;\n  }\n  extendgcd(b, a % b, v);\n  long long x = v[1];\n  v[1] = v[0] - v[1] * (a / b);\n  v[0] = x;\n  return;\n}\nlong long mminv(long long a, long long b) {\n  long long arr[3];\n  extendgcd(a, b, arr);\n  return arr[0];\n}\nlong long mminvprime(long long a, long long b) { return expo(a, b - 2, b); }\nbool revsort(long long a, long long b) { return a > b; }\nlong long combination(long long n, long long r, long long m, long long* fact,\n                      long long* ifact) {\n  long long val1 = fact[n];\n  long long val2 = ifact[n - r];\n  long long val3 = ifact[r];\n  return (((val1 * val2) % m) * val3) % m;\n}\nvoid google(int t) { cout << \"Case #\" << t << \": \"; }\nvector<long long> sieve(int n) {\n  int* arr = new int[n + 1]();\n  vector<long long> vect;\n  for (int i = 2; i <= n; i++)\n    if (arr[i] == 0) {\n      vect.push_back(i);\n      for (int j = 2 * i; j <= n; j += i) arr[j] = 1;\n    }\n  return vect;\n}\nlong long mod_add(long long a, long long b, long long m) {\n  a = a % m;\n  b = b % m;\n  return (((a + b) % m) + m) % m;\n}\nlong long mod_mul(long long a, long long b, long long m) {\n  a = a % m;\n  b = b % m;\n  return (((a * b) % m) + m) % m;\n}\nlong long mod_sub(long long a, long long b, long long m) {\n  a = a % m;\n  b = b % m;\n  return (((a - b) % m) + m) % m;\n}\nlong long mod_div(long long a, long long b, long long m) {\n  a = a % m;\n  b = b % m;\n  return (mod_mul(a, mminvprime(b, m), m) + m) % m;\n}\nlong long phin(long long n) {\n  long long number = n;\n  if (n % 2 == 0) {\n    number /= 2;\n    while (n % 2 == 0) n /= 2;\n  }\n  for (long long i = 3; i <= sqrt(n); i += 2) {\n    if (n % i == 0) {\n      while (n % i == 0) n /= i;\n      number = (number / i * (i - 1));\n    }\n  }\n  if (n > 1) number = (number / n * (n - 1));\n  return number;\n}\nbool IsPrime(long long n) {\n  if (n == 2 || n == 3) return true;\n  if (n <= 1 || n % 2 == 0 || n % 3 == 0) return false;\n  for (long long i = 5; i * i <= n; i += 6) {\n    if (n % i == 0 || n % (i + 2) == 0) {\n      return false;\n    }\n  }\n  return true;\n}\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  char a[n][m];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> a[i][j];\n    }\n  }\n  map<vector<int>, vector<int>> hash;\n  for (int i = 0; i < n; i++) {\n    vector<int> v2;\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        v2.push_back(j);\n      }\n    }\n    hash[v2].push_back(i);\n  }\n  unordered_map<int, int> r;\n  unordered_map<int, int> c;\n  for (auto& i : hash) {\n    for (auto& j : i.first) {\n      c[j]++;\n    }\n    for (auto& j : i.second) {\n      r[j]++;\n    }\n  }\n  for (auto& i : r) {\n    if (i.second > 1) {\n      cout << \"No\\n\";\n      return;\n    }\n  }\n  for (auto& i : c) {\n    if (i.second > 1) {\n      cout << \"No\\n\";\n      return;\n    }\n  }\n  cout << \"Yes\\n\";\n}\nint main() {\n  freopen(\"Error.txt\", \"w\", stderr);\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cout.tie(NULL);\n  auto start1 = high_resolution_clock::now();\n  int t = 1;\n  while (t--) solve();\n  auto stop1 = high_resolution_clock::now();\n  auto duration = duration_cast<microseconds>(stop1 - start1);\n  cerr << \"Time: \" << duration.count() / 1000 << \"\\n\";\n}\n"
        },
        {
            "language": 1,
            "solution": "from __future__ import division\nfrom sys import stdin, stdout\n# from fractions import gcd\n# from math import *\n# from operator import mul\n# from functools import reduce\n# from copy import copy\nfrom collections import deque, defaultdict, Counter\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nout = []\n\nn, m = rints()\ngrid, all, ans = rstr_2d(n), [], 'YES'\n\nfor i in range(m):\n    tem = set()\n    for j in range(n):\n        if grid[j][i] == '#':\n            tem.add(j)\n\n    for j in all:\n        inter = tem.intersection(j)\n        if inter:\n            if j != tem:\n                ans = 'NO'\n            break\n\n    if tem not in all:\n        all.append(tem)\n\nprint(ans)\n"
        },
        {
            "language": 4,
            "solution": "import java.util.Scanner;\n\npublic class P957B\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint m = scan.nextInt();\n\t\tchar[][] grid = new char[n][m];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tgrid[i] = scan.next().toCharArray();\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tString row = null;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\tString here = new String(grid[i]);\n\t\t\t\tif (grid[i][j] == '#')\n\t\t\t\t{\n\t\t\t\t\tif (row == null)\n\t\t\t\t\t\trow = here;\n\t\t\t\t\telse if (!row.equals(here))\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int sz = 1e5 + 10;\nint par[105];\nint n, m;\nstring s[105];\nint fl;\nint find_par(int x) { return x == par[x] ? x : par[x] = find_par(par[x]); }\nint main() {\n  while (cin >> n >> m) {\n    for (int i = 0; i < 105; i++) par[i] = i;\n    for (int i = 0; i < n; i++) {\n      cin >> s[i];\n    }\n    fl = 1;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        if (s[i][j] == '#') {\n          int x = find_par(i);\n          int y = find_par(j + n);\n          if (x != y) {\n            par[x] = par[y];\n          }\n        }\n      }\n    }\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        int x = find_par(i);\n        int y = find_par(j + n);\n        if (x == y) {\n          fl &= (s[i][j] == '#');\n        }\n      }\n    }\n    puts(fl ? \"Yes\" : \"No\");\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 55;\nint read() {\n  int s = 0;\n  char c = getchar(), lc = '+';\n  while (c < '0' || '9' < c) lc = c, c = getchar();\n  while ('0' <= c && c <= '9') s = s * 10 + c - '0', c = getchar();\n  return lc == '-' ? -s : s;\n}\nvoid write(int x) {\n  if (x < 0) {\n    putchar('-');\n    x = -x;\n  }\n  if (x < 10)\n    putchar(x + '0');\n  else {\n    write(x / 10);\n    putchar(x % 10 + '0');\n  }\n}\nvoid print(int x, char c = '\\n') {\n  write(x);\n  putchar(c);\n}\nbool get() {\n  char c = getchar();\n  while (c != '.' && c != '#') c = getchar();\n  return c == '#';\n}\nbool a[N][N];\nint fa[N * 2];\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); }\nsigned main() {\n  int n = read(), m = read();\n  for (int i = 1; i <= n + m; i++) fa[i] = i;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      if (a[i][j] = get()) fa[find(i)] = find(j + n);\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) {\n      for (int k = 1; k <= n; k++)\n        if (a[i][j] && a[k][j]) fa[find(i)] = find(k);\n      for (int k = 1; k <= m; k++)\n        if (a[i][j] && a[i][k]) fa[find(j + n)] = find(k + n);\n    }\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      if (!a[i][j] && find(i) == find(j + n)) return puts(\"No\");\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar c[61][61], d[61][61];\nvector<int> v[61], u[61], rr[61], cc[61];\nint gr[61], gc[61], vc[61], vr[61];\nvoid dfs(int o, int num, vector<int> e[], int w[], int g[]) {\n  w[o] = true;\n  g[o] = num;\n  for (auto x : e[o])\n    if (!w[x]) dfs(x, num, e, w, g);\n  return;\n}\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  for (int ni = 0; ni < n; ni++) scanf(\"%s\", c[ni]);\n  for (int ni = 0; ni < n; ni++)\n    for (int mi = 0; mi < m; mi++)\n      for (int mj = 0; mj < m; mj++)\n        if (c[ni][mi] == '#' && c[ni][mj] == '#')\n          v[mi].push_back(mj), v[mj].push_back(mi);\n  for (int mi = 0; mi < m; mi++)\n    for (int ni = 0; ni < n; ni++)\n      for (int nj = 0; nj < n; nj++)\n        if (c[ni][mi] == '#' && c[nj][mi] == '#')\n          u[ni].push_back(nj), u[nj].push_back(ni);\n  int cnt;\n  cnt = 1;\n  for (int ni = 0; ni < n; ni++) {\n    if (!vr[ni]) dfs(ni, cnt, u, vr, gr), cnt++;\n  }\n  cnt = 1;\n  for (int mi = 0; mi < m; mi++) {\n    if (!vc[mi]) dfs(mi, cnt, v, vc, gc), cnt++;\n  }\n  for (int ni = 0; ni < n; ni++) rr[gr[ni]].push_back(ni);\n  for (int mi = 0; mi < m; mi++) cc[gc[mi]].push_back(mi);\n  for (int ni = 0; ni < n; ni++)\n    for (int mi = 0; mi < m; mi++) d[ni][mi] = '.';\n  for (int ni = 0; ni < n; ni++)\n    for (int mi = 0; mi < m; mi++)\n      if (c[ni][mi] == '#' && d[ni][mi] == '.') {\n        for (auto x : rr[gr[ni]])\n          for (auto y : cc[gc[mi]]) d[x][y] = '#';\n      }\n  for (int ni = 0; ni < n; ni++)\n    for (int mi = 0; mi < m; mi++)\n      if (c[ni][mi] != d[ni][mi]) {\n        puts(\"No\");\n        return 0;\n      }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint usedr[100], usedc[100];\nchar a[100][100], b[100][100];\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) cin >> a[i][j];\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++)\n      if (a[i][j] == '#') {\n        vector<int> r, c;\n        if (!usedr[i]) r.push_back(i);\n        if (!usedc[j]) c.push_back(j);\n        for (int q = 0; q < n; q++)\n          if (q != i && a[q][j] == '#' && !usedr[q]) r.push_back(q);\n        for (int q = 0; q < m; q++)\n          if (q != j && a[i][q] == '#' && !usedc[q]) c.push_back(q);\n        for (int y : r)\n          for (int x : c) {\n            usedr[y] = 1;\n            usedc[x] = 1;\n            if (a[y][x] == '.') {\n              cout << \"No\";\n              return 0;\n            }\n            a[y][x] = '.';\n          }\n      }\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++)\n      if (a[i][j] != '.') {\n        cout << \"No\";\n        return 0;\n      }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\npublic class B {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint r = sc.nextInt(), c = sc.nextInt();\n\t\tchar g[][] = new char[r][];\n\t\tfor(int i=0;i<r;i++) {\n\t\t\tg[i] = sc.next().toCharArray();\n\t\t}\n\t\tboolean f = true;\n\t\tfor(int i=0;i<r;i++){\n\t\t\tfor(int j = i+1;j<r;j++){\n\t\t\t\tint cntsame = 0;\n\t\t\t\tint cnt1=0;\n\t\t\t\tint cnt2=0;\n\t\t\t\t\n\t\t\t\tfor(int k = 0;k<c;k++){\n\t\t\t\t\tif(g[i][k]=='#' && g[j][k]=='#')\n\t\t\t\t\t\tcntsame++;\n\t\t\t\t\tif(g[i][k]=='#')\n\t\t\t\t\t\tcnt1++;\n\t\t\t\t\tif(g[j][k]=='#')\n\t\t\t\t\t\tcnt2++;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(cntsame != 0 && (cnt1!=cntsame || cnt2!=cntsame))\n\t\t\t\t\tf = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(f?\"Yes\":\"No\");\n\t}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid solve();\nint main() {\n  ios_base::sync_with_stdio(false);\n  cout.tie(nullptr);\n  cin.tie(nullptr);\n  solve();\n}\nconst int MAXN = 55;\nint n, m;\nstring s[MAXN];\nvoid fail() {\n  cout << \"No\" << endl;\n  exit(0);\n}\nbool used_x[MAXN];\nbool used_y[MAXN];\nvoid dfs(int x, int y, set<int>& c, set<int>& r) {\n  used_x[x] = true;\n  used_y[y] = true;\n  c.insert(x);\n  r.insert(y);\n  for (int i = 0; i < n; i++) {\n    if (s[i][y] == '#') {\n      if (used_x[i]) {\n        continue;\n      } else {\n        dfs(i, y, c, r);\n      }\n    }\n  }\n  for (int i = 0; i < m; i++) {\n    if (s[x][i] == '#') {\n      if (used_y[i]) {\n        continue;\n      } else {\n        dfs(x, i, c, r);\n      }\n    }\n  }\n}\nvoid solve() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        set<int> c, r;\n        dfs(i, j, c, r);\n        for (int k : c) {\n          for (int l : r) {\n            if (s[k][l] != '#') {\n              fail();\n            } else {\n              s[k][l] = '.';\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static boolean available(int colm, char mat[][], int n, int m){\n\n\t\tList<Integer>rows = new ArrayList<Integer>();\n\t\t\n\t\tfor(int i = 0; i<n; i++){\n\t\t\tif(mat[i][colm] == '#'){\n\t\t\t\trows.add(i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(rows.size() > 1){\n\t\t\tchar c;\n\t\t\tfor(int i = 0; i<m; i++){\n\t\t\t\tc = mat[rows.get(0)][i];\n\t\t\t\tfor(int j =1; j < rows.size(); j++){\n\t\t\t\t\tif(mat[rows.get(j)][i] != c){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static void main(String [] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tchar grid[][] = new char[n][m];\n\t\t\n\t\tString s = \"\";\n\t\tboolean flag = true;\n\t\tfor(int i = 0 ; i < n; i++){\n\t\t\ts = scanner.next();\n\t\t\tfor(int j = 0; j < s.length(); j++){\n\t\t\t\tgrid[i][j] = s.charAt(j);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0 ; i < n; i++){\n\t\t\tfor(int j = 0; j < s.length(); j++){\n\t\t\t\tif(grid[i][j] == '#'){\n\t\t\t\t\tif(!available(j, grid, n, m)){\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!flag){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(flag){\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else{\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t\t\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstatic int n, m;\nstatic char cells[110][110];\nstatic set<int> r, c;\nbool check_cell(int colum, vector<int>& cols) {\n  for (int i = 0; i < cols.size(); i++) {\n    if (c.count(cols[i]) == 0) return false;\n  }\n  vector<int> tc;\n  for (int i = 0; i < n; i++) {\n    if (r.count(i) == 0) continue;\n    tc.clear();\n    if (cells[i][colum] != '#') continue;\n    for (int j = 0; j < m; j++)\n      if (cells[i][j] == '#') tc.push_back(j);\n    if (tc != cols)\n      return false;\n    else\n      r.erase(i);\n  }\n  return true;\n}\nint main() {\n  while (scanf(\"%d%d\", &n, &m) != EOF) {\n    vector<int> ve;\n    r.clear();\n    c.clear();\n    for (int i = 0; i < n; i++) {\n      scanf(\"%s\", cells[i]);\n      for (int j = 0; j < m; j++) {\n        if (cells[i][j] == '#') {\n          r.insert(i);\n          c.insert(j);\n        }\n      }\n    }\n    bool flag = true;\n    for (int i = 0; i < n; i++) {\n      if (r.count(i) == 0) continue;\n      ve.clear();\n      for (int j = 0; j < m; j++)\n        if (cells[i][j] == '#') ve.push_back(j);\n      flag = check_cell(ve[0], ve);\n      if (!flag) break;\n      for (int j = 0; j < ve.size(); j++) c.erase(ve[j]);\n    }\n    printf(flag && r.empty() && c.empty() ? \"Yes\\n\" : \"No\\n\");\n  }\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "/*****Author: Satyajeet Singh************************************/\n    import java.io.*;\n    import java.util.*;\n    import java.text.*; \n    import java.lang.*;\n    import java.math.*;\npublic class Main{\n/*********************************************Constants******************************************/\n    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));        \n    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    static long mod=(long)1e9+7;\n    static long mod1=998244353;\n    static ArrayList<Integer> graph[];\n    static int pptr=0,pptrmax=0;\n    static String st[];\n/*****************************************Solution Begins***************************************/    \n    static int n,m;\n    static long input[];\n    public static void main(String args[]) throws Exception{\n        n=pi();\n        m=pi();\n        input=new long[n];\n        for(int i=0;i<n;i++){\n            long c=0;\n            String str=ps();\n            for(int j=0;j<m;j++){\n                if(str.charAt(j)=='#'){\n                    c|=(1l<<j);\n                }\n            }\n            input[i]=c;\n        }\n        boolean flag=true;\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                long y=input[i]&input[j];\n                if(input[i]==input[j]||y==0)continue;\n                flag=false;\n                break;\n            }\n            if(!flag)break;\n        }\n        if(flag)out.println(\"Yes\");\n        else out.println(\"No\");\n/****************************************Solution Ends**************************************************/\n        clr();\n    }\n    static void clr(){\n        out.flush();\n        out.close();\n    }\n    static void nl() throws Exception{\n        pptr=0;\n        st=br.readLine().split(\" \");\n        pptrmax=st.length;\n    }\n    static void nls() throws Exception{\n        pptr=0;\n        st=br.readLine().split(\"\");\n        pptrmax=st.length;\n    }\n    static int pi() throws Exception{\n        if(pptr==pptrmax)\n            nl();\n        return Integer.parseInt(st[pptr++]);\n    }\n    static long pl() throws Exception{\n        if(pptr==pptrmax)\n            nl();\n        return Long.parseLong(st[pptr++]);\n    }\n    static double pd() throws Exception{\n        if(pptr==pptrmax)\n            nl();\n        return Double.parseDouble(st[pptr++]);\n    }\n    static String ps() throws Exception{\n        if(pptr==pptrmax)\n            nl();\n        return st[pptr++];\n    }\n/***************************************Precision Printing**********************************************/\n    static void printPrecision(double d){\n        DecimalFormat ft = new DecimalFormat(\"0.0000000000\"); \n        out.println(ft.format(d));\n    }\n/**************************************Bit Manipulation**************************************************/\n    static int countBit(long mask){\n        int ans=0;\n        while(mask!=0){\n            mask&=(mask-1);\n            ans++;\n        }\n        return ans;\n    }\n/******************************************Graph*********************************************************/\n    static void Makegraph(int n){\n        graph=new ArrayList[n];\n        for(int i=0;i<n;i++)\n            graph[i]=new ArrayList<>();\n    }\n    static void addEdge(int a,int b){\n        graph[a].add(b);\n    }\n    // static void addEdge(int a,int b,int c){\n    //     graph[a].add(new Pair(b,c));\n    // }    \n/*********************************************PAIR********************************************************/\n    static class Pair{\n        int u;\n        int v;\n        public Pair(int u, int v) {\n            this.u = u;\n            this.v = v;\n        }\n        public int hashCode() {\n            int hu = (int) (u ^ (u >>> 32));\n            int hv = (int) (v ^ (v >>> 32));\n            return 31 * hu + hv;\n        }\n        public boolean equals(Object o) {\n            Pair other = (Pair) o;\n            return u == other.u && v == other.v;\n        }\n        public String toString() {\n            return \"[u=\" + u + \", v=\" + v + \"]\";\n        }\n    }\n/******************************************Long Pair*******************************************************/\n    static class Pairl{\n        long u;\n        long v;\n        public Pairl(long u, long v) {\n            this.u = u;\n            this.v = v;\n        }\n        public int hashCode() {\n            int hu = (int) (u ^ (u >>> 32));\n            int hv = (int) (v ^ (v >>> 32));\n            return 31 * hu + hv;\n        }\n        public boolean equals(Object o) {\n            Pairl other = (Pairl) o;\n            return u == other.u && v == other.v;\n        }\n        public String toString() {\n            return \"[u=\" + u + \", v=\" + v + \"]\";\n        }\n    }\n/*****************************************DEBUG***********************************************************/\n    public static void debug(Object... o){\n        System.out.println(Arrays.deepToString(o));\n    }\n/************************************MODULAR EXPONENTIATION***********************************************/\n    static long modulo(long a,long b,long c){\n        long x=1,y=a%c;\n        while(b > 0){\n            if(b%2 == 1)\n                x=(x*y)%c;\n            y = (y*y)%c;\n            b = b>>1;\n        }\n        return  x%c;\n    }\n/********************************************GCD**********************************************************/\n    static long gcd(long x, long y){\n        if(x==0)\n            return y;\n        if(y==0)\n            return x;\n        long r=0, a, b;\n        a = (x > y) ? x : y; \n        b = (x < y) ? x : y;\n        r = b;\n        while(a % b != 0){\n            r = a % b;\n            a = b;\n            b = r;\n        }\n        return r;\n    }\n}"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author raghumdani\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.nextInt(), m = in.nextInt();\n\n            char[][] s = new char[n][];\n            boolean[] vis = new boolean[m];\n\n            for (int i = 0; i < n; ++i) {\n                s[i] = in.next().toCharArray();\n            }\n\n            List<String> ops = new ArrayList<>();\n\n            for (int i = 0; i < n; ++i) {\n                String cols = \"\";\n                boolean alreadyVis = false;\n\n                for (int j = 0; j < m; ++j) {\n                    if (s[i][j] == '#') {\n                        cols += (char) j;\n                        alreadyVis = alreadyVis || vis[j];\n                    }\n                }\n\n                if (!ops.contains(cols) && alreadyVis) {\n                    out.println(\"No\");\n                    return;\n                }\n                ops.add(cols);\n                for (int j = 0; j < m; ++j) {\n                    if (s[i][j] == '#') {\n                        vis[j] = true;\n                    }\n                }\n            }\n\n            out.println(\"Yes\");\n        }\n\n    }\n\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma comment(linker, \"/STACK:256000000\")\nusing namespace std;\nusing ll = long long;\nvoid solve() {\n  int n, m;\n  scanf(\"%d%d\\n\", &n, &m);\n  vector<ll> xs(n);\n  for (int i = 0; i < n; ++i) {\n    string s;\n    getline(cin, s);\n    ll x = 0;\n    for (int j = 0; j < m; ++j) {\n      x <<= 1;\n      if (s[j] == '#') x |= 1;\n    }\n    for (int j = 0; j < i; ++j) {\n      if ((xs[j] & x) && xs[j] != x) {\n        printf(\"No\");\n        return;\n      }\n    }\n    xs[i] = x;\n  }\n  printf(\"Yes\");\n}\nint main() {\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 1e9;\ntemplate <typename T>\nvoid alert(T const &t) {\n  cout << t << endl;\n  exit(0);\n}\nstruct node_t {};\nint n, m;\nvector<string> v;\nbool solve(int i) {\n  set<int> js;\n  for (int j = 0; j < m; ++j) {\n    if (v[i][j] == '#') {\n      js.insert(j);\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    int ans = 0;\n    for (int j = 0; j < m; ++j) {\n      if (v[i][j] == '#' && js.count(j)) {\n        ++ans;\n      }\n    }\n    if (ans && ans != js.size()) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cin >> n >> m;\n  v.resize(n);\n  for (string &vi : v) cin >> vi;\n  for (int i = 0; i < n; ++i) {\n    if (!solve(i)) {\n      alert(\"No\");\n    }\n  }\n  alert(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint flag[50];\nchar **CreatArray(int row, int col) {\n  char **arr = new char *[row];\n  for (int i = 0; i < row; i++) {\n    arr[i] = new char[col];\n  }\n  return arr;\n}\nvoid DeleteArray(int row, char **arr) {\n  for (int i = 0; i < row; i++) {\n    delete[] arr[i];\n  }\n}\nint CheckCol(int row1, int col1, int row2, int col, char **arr) {\n  for (int i = 0; i < col; i++) {\n    if (i == col1) continue;\n    if (arr[row1][i] == '#')\n      if (arr[row2][i] != '#') {\n        return 1;\n        ;\n      }\n  }\n  for (int j = 0; j < col; j++) {\n    if (j == col1) continue;\n    if (arr[row2][j] == '#')\n      if (arr[row1][j] != '#') {\n        return 1;\n      }\n  }\n  return 0;\n}\nint main() {\n  int row, col;\n  cin >> row >> col;\n  char **arr = CreatArray(row, col);\n  for (int i = 0; i < row; i++) {\n    flag[i] = 0;\n    for (int j = 0; j < col; j++) {\n      cin >> arr[i][j];\n    }\n  }\n  for (int i = 0; i < row; i++) {\n    for (int j = 0; j < col; j++) {\n      if (arr[i][j] == '#') {\n        if (flag[i] == 1) continue;\n        for (int k = i + 1; k < row; k++) {\n          if (arr[k][j] == '#') {\n            flag[k] = 1;\n            if (CheckCol(i, j, k, col, arr) == 1) {\n              cout << \"No\" << endl;\n              return 0;\n            }\n          } else\n            continue;\n        }\n      } else\n        continue;\n    }\n  }\n  cout << \"Yes\" << endl;\n  DeleteArray(row, arr);\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nclass CDisjointSet(object):\n    def __init__(self):\n        self.leader = {} # maps a member to the group's leader\n        self.group = {} # maps a group leader to the group (which is a set)\n    def Add(self, a, b):\n        leadera = self.leader.get(a)\n        leaderb = self.leader.get(b)\n        if leadera is not None:\n            if leaderb is not None:\n                if leadera == leaderb: return # nothing to do\n                groupa = self.group[leadera]\n                groupb = self.group[leaderb]\n                if len(groupa) < len(groupb):\n                    a, leadera, groupa, b, leaderb, groupb = b, leaderb, groupb, a, leadera, groupa\n                groupa |= groupb\n                del self.group[leaderb]\n                for k in groupb:\n                    self.leader[k] = leadera\n            else:\n                self.group[leadera].add(b)\n                self.leader[b] = leadera\n        else:\n            if leaderb is not None:\n                self.group[leaderb].add(a)\n                self.leader[a] = leaderb\n            else:\n                self.leader[a] = self.leader[b] = a\n                self.group[a] = set([a, b])\n\ndef Judge():\n    #[1]\n    ds = CDisjointSet()\n    n, m = map(int, input().split())\n    arr = list()\n    for i in range(n):\n        arr.append(input())\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == '#':\n                ds.Add(i+1, 101+j)\n    #[2]\n    for vs in ds.group.values():\n        rs = list()\n        cs = list()\n        for v in vs:\n            if v < 100:\n                rs.append(v-1)\n            else:\n                cs.append(v-101)\n        for i in rs:\n            for j in range(m):\n                if j in cs and arr[i][j] == '.':\n                    return False\n                if j not in cs and arr[i][j] == '#':\n                    return False\n    #[3]\n    return True\n\nprint('Yes') if Judge() else print('No')\n"
        },
        {
            "language": 1,
            "solution": "from copy import deepcopy\nimport sys\nraw_input = sys.stdin.readline\nn,m = map(int,raw_input().split())\ngrid = []\nrows = [[] for x in range(n)]\ncols = [[] for x in range(m)]\nchecked = [0 for x in range(n)]\nchecked2 = [0 for x in range(m)]\nfor i in range(n):\n  grid.append(list(raw_input().strip('\\n')))\n  for j in range(m):\n    if grid[i][j]=='#':\n      rows[i].append(j)\n      cols[j].append(i)\nfound = False\nfor i in range(n):\n  if not checked[i] and rows[i]:\n    queue = deepcopy(rows[i])\n    cs = deepcopy(rows[i])\n    rs = []\n    while queue:\n      for j in range(len(queue)):\n        c = queue.pop(0)\n        for k in cols[c]:\n          if k not in rs:\n            checked[k] = True\n            rs.append(k)\n            queue.append(k)\n      for j in range(len(queue)):\n        c = queue.pop(0)\n        for k in rows[c]:\n          if k not in cs:\n            cs.append(k)\n            queue.append(k)\n    for j in rs:\n      for k in cs:\n        if grid[j][k] != '#':\n          found = True\nif found:\n  print \"No\"\nelse:\n  print \"Yes\""
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  cin.tie(nullptr);\n  ios_base::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char>> mp(n, vector<char>(m));\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> mp[i][j];\n    }\n  }\n  vector<bool> rows(n), columns(m);\n  for (int i = 0; i < n; ++i) {\n    if (rows[i]) {\n      continue;\n    }\n    vector<int> cur_cols;\n    for (int j = 0; j < m; ++j) {\n      if (mp[i][j] == '#') {\n        cur_cols.push_back(j);\n      }\n    }\n    if (cur_cols.empty()) {\n      rows[i] = 1;\n      continue;\n    }\n    vector<int> cur_rows;\n    for (int k = 0; k < n; ++k) {\n      if (mp[k][cur_cols[0]] == '#') {\n        cur_rows.push_back(k);\n      }\n    }\n    for (auto j : cur_cols) {\n      vector<int> next_rows;\n      for (int k = 0; k < n; ++k) {\n        if (mp[k][j] == '#') {\n          next_rows.push_back(k);\n          if (rows[k]) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n      if (next_rows != cur_rows) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n    for (auto k : cur_rows) {\n      vector<int> next_cols;\n      for (int j = 0; j < m; ++j) {\n        if (mp[k][j] == '#') {\n          next_cols.push_back(j);\n          if (columns[j]) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n      if (next_cols != cur_cols) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n    for (auto k : cur_rows) {\n      rows[k] = 1;\n    }\n    for (auto j : cur_cols) {\n      columns[j] = 1;\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class B472 {\n\n\tprivate static boolean home = !\"true\".equals(System.getProperty(\"ONLINE_JUDGE\"));\n\tprivate static boolean debug = false;\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tint nrTeste = 3;\nString[] inputs = {\"5 8\\n.#.#..#.\\n.....#..\\n.#.#..#.\\n#.#....#\\n.....#..\\n\", \"5 5\\n..#..\\n..#..\\n#####\\n..#..\\n..#..\\n\", \"5 9\\n........#\\n#........\\n..##.#...\\n.......#.\\n....#.#.#\\n\"};\nString[] expected = {\"Yes\\n\", \"No\\n\", \"No\\n\"};\n\t\tfor (int i = 0; home && i < nrTeste; i++) {\n\t\t\tSystem.out.print(\"\\nExpect: \" + expected[i] + \"\\n   Got: \");\n\t\t\tSystem.setIn(new ByteArrayInputStream(inputs[i].getBytes()));\n\t\t\tsolve();\n\t\t}\n\t\tif (!home) {\n\t\t\tsolve();\n\t\t}\n\t\tSystem.out.close();\n\t}\n\t\n\tpublic static void solve() throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tString[] line;\n\t\tline = br.readLine().split(\" \");\n\t\tint n = Integer.parseInt(line[0]);\n\t\tint m = Integer.parseInt(line[1]);\n\t\tSet <String> lines = new HashSet<>();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlines.add(br.readLine());\n\t\t}\n\t\tboolean yes = true;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint count = 0;\n\t\t\tfor (String s : lines) {\n\t\t\t\tif (s.charAt(i) == '#') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count > 1) {\n\t\t\t\tyes = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (yes) {\n\t\t\tpw.println(\"Yes\");\n\t\t} else {\n\t\t\tpw.println(\"No\");\n\t\t}\n\t\tbr.close();\n\t\tpw.flush();\n\t}\n\t\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int oo = 1e9;\nchar grid[60][60];\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = (0); i < (n); ++i)\n    for (int j = (0); j < (m); ++j) cin >> grid[i][j];\n  int ok = 1;\n  for (int i1 = (0); i1 < (n); ++i1) {\n    for (int i2 = (0); i2 < (i1); ++i2) {\n      int a = 1, b = 1;\n      for (int j = (0); j < (m); ++j) {\n        if (grid[i1][j] == '#' && grid[i2][j] == '#') a = 0;\n        if (grid[i1][j] != grid[i2][j]) b = 0;\n      }\n      ok &= (a || b);\n    }\n  }\n  cout << (ok ? \"Yes\" : \"No\") << '\\n';\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "li, co = map(int, input().split())\n\nm = [[j for j in input()] for i in range(li)]\n\nt = [[0 for j in range(li)] for i in range(co)]\n\nfor i in range(li):\n    for j in range(co):\n        t[j][i] = m[i][j]\n\n# for aux in m:\n#     print(*aux)\n# print()\n#\n# for aux in t:\n#     print(*aux)\n# print()\n\nflag = True\nfor i in range(li):\n    if '#' in m[i]:\n        k = m[i].index('#')\n        for j in range(k+1, co):\n            if m[i][j] == '#' and t[j] != t[k]:\n                flag = False\n\nprint(\"Yes\" if flag else \"No\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main(int argc, char **argv) {\n  int n, m;\n  char buf[50][51];\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%s\", buf[i]);\n  }\n  vector<uint64_t> q(n);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      q[i] <<= 1;\n      if (buf[i][j] == '#') {\n        q[i] |= 1;\n      }\n    }\n  }\n  sort(q.begin(), q.end());\n  bool is_possible = true;\n  uint64_t um = 0;\n  for (int i = 0; i < n; i++) {\n    if (q[i] & um) {\n      if (i != 0 && q[i] == q[i - 1]) {\n        continue;\n      }\n      is_possible = false;\n      break;\n    }\n    um |= q[i];\n  }\n  printf(\"%s\\n\", is_possible ? \"Yes\" : \"No\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\nimport java.io.*;\nimport java.math.*;\npublic class code7 {\n\tInputStream is;\n\tPrintWriter out;\n\tstatic long mod=pow(10,9)+7;\n\tint dx[]= {0,0,1,-1},dy[]={+1,-1,0,0};\n\tvoid solve()\n\t{\n\t\tint n=ni();\n\t\tint m=ni();\n\t\tString arr[]=new String[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tarr[i]=ns();\n\t\tHashSet<String> hs=new HashSet<String>();\n\t\tfor(int i=0;i<n;i++)\n\t\t\ths.add(arr[i]);\n\t\tArrayList<String> al=new ArrayList<String>(hs);\n\t\tint freq[]=new int[m];\n\t\tfor(int i=0;i<al.size();i++)\n\t\t{\n\t\t\tString s=al.get(i);\n\t\t\tfor(int j=0;j<s.length();j++)\n\t\t\t{\n\t\t\t\tif(s.charAt(j)=='#')\n\t\t\t\t\tfreq[j]++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\t\tif(freq[i]>1)\n\t\t\t{\n\t\t\t\tout.println(\"No\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tout.println(\"Yes\");\n\t}\n\tArrayList<Integer>al [];\n\tvoid take(int n,int m)\n\t{\n\t\tal=new ArrayList[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tal[i]=new ArrayList<Integer>();\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\t\tint x=ni()-1;\n\t\t\tint y=ni()-1;\n\t\t\tal[x].add(y);\n\t\t\tal[y].add(x);\n\t\t}\n\t}\n\tint arr[][];\n\tint small[];\n\tvoid pre(int n)\n\t{\n\t\tsmall=new int[n+1];\n\t\tfor(int i=2;i*i<=n;i++)\n\t\t{\n\t\t\tfor(int j=i;j*i<=n;j++)\n\t\t\t{\n\t\t\t\tif(small[i*j]==0)\n\t\t\t\t\tsmall[i*j]=i;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<=n;i++)\n\t\t{\n\t\t\tif(small[i]==0)\n\t\t\t\tsmall[i]=i;\n\t\t}\n\t}\n\tpublic static int count(int x)\n\t{\n\t\tint num=0;\n\t\twhile(x!=0)\n\t\t{\n\t\t\tx=x&(x-1);\n\t\t\tnum++;\n\t\t}\n\t\treturn num;\n\t}\n\tstatic long d, x, y;\n\tvoid extendedEuclid(long A, long B) {\n\t    if(B == 0) {\n\t        d = A;\n\t        x = 1;\n\t        y = 0;\n\t    }\n\t    else {\n\t        extendedEuclid(B, A%B);\n\t        long temp = x;\n\t        x = y;\n\t        y = temp - (A/B)*y;\n\t    }\n\t}\n\tlong modInverse(long A,long M) //A and M are coprime\n\t{\n\t    extendedEuclid(A,M);\n\t    return (x%M+M)%M;    //x may be negative\n\t}\n\tpublic static void mergeSort(int[] arr, int l ,int r){\n\t\tif((r-l)>=1){\n\t\t\tint mid = (l+r)/2;\n\t\t\tmergeSort(arr,l,mid);\n\t\t\tmergeSort(arr,mid+1,r);\n\t\t\tmerge(arr,l,r,mid);\n\t\t}\n\t}\n\tpublic static void merge(int arr[], int l, int r, int mid){\n\t\tint n1 = (mid-l+1), n2 = (r-mid);\n\t\tint left[] = new int[n1];\n\t\tint right[] = new int[n2];\n\t\tfor(int i =0 ;i<n1;i++) left[i] = arr[l+i];\n\t\tfor(int i =0 ;i<n2;i++) right[i] = arr[mid+1+i];\n\t\tint i =0, j =0, k = l;\n\t\twhile(i<n1 && j<n2){\n\t\t\tif(left[i]>right[j]){\n\t\t\t\tarr[k++] = right[j++];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarr[k++] = left[i++];\n\t\t\t}\n\t\t}\n\t\twhile(i<n1) arr[k++] = left[i++];\n\t\twhile(j<n2) arr[k++] = right[j++];\n\t}\n\tpublic static void mergeSort(long[] arr, int l ,int r){\n\t\tif((r-l)>=1){\n\t\t\tint mid = (l+r)/2;\n\t\t\tmergeSort(arr,l,mid);\n\t\t\tmergeSort(arr,mid+1,r);\n\t\t\tmerge(arr,l,r,mid);\n\t\t}\n\t}\n\tpublic static void merge(long arr[], int l, int r, int mid){\n\t\tint n1 = (mid-l+1), n2 = (r-mid);\n\t\tlong left[] = new long[n1];\n\t\tlong right[] = new long[n2];\n\t\tfor(int i =0 ;i<n1;i++) left[i] = arr[l+i];\n\t\tfor(int i =0 ;i<n2;i++) right[i] = arr[mid+1+i];\n\t\tint i =0, j =0, k = l;\n\t\twhile(i<n1 && j<n2){\n\t\t\tif(left[i]>right[j]){\n\t\t\t\tarr[k++] = right[j++];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarr[k++] = left[i++];\n\t\t\t}\n\t\t}\n\t\twhile(i<n1) arr[k++] = left[i++];\n\t\twhile(j<n2) arr[k++] = right[j++];\n\t}\n\t static class Pair implements Comparable<Pair>{\n\t\t \n\t      int x;\n\t      int y,k,i;\n\t\tPair (int x,int y){\n\t\t\tthis.x=x;\n\t\t\tthis.y=y;\n\t\t}\n\t        \n\t\tpublic int compareTo(Pair o) {\n\t\t\tif(this.x!=o.x)\n\t\t\t\treturn Long.compare(this.x,o.x);\n\t\t\treturn  this.y-o.y;\n\t\t}\n\t\tpublic boolean equals(Object o) {\n\t\t\tif (o instanceof Pair) {\n\t\t\t\tPair p = (Pair)o;\n\t\t\t\treturn p.x == x && p.y == y;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tpublic int hashCode() {\n\t\t\treturn new Long(x).hashCode()*31 + new Long(y).hashCode() ;\n\t\t}\n\t           \n\t \n\t        @Override\n\t        public String toString() {\n\t            return  \"(\"+x + \" \" + y +\" \"+k+\" \"+i+\" )\";\n\t        }\n\t    \n\t    } \n\t    \n\t    public static boolean isPal(String s){\n\t        for(int i=0, j=s.length()-1;i<=j;i++,j--){\n\t                if(s.charAt(i)!=s.charAt(j)) return false;\n\t        }\n\t        return true;\n\t    }\n\t    public static String rev(String s){\n\t\t\tStringBuilder sb=new StringBuilder(s);\n\t\t\tsb.reverse();\n\t\t\treturn sb.toString();\n\t    }\n\t    \n\t    public static long gcd(long x,long y){\n\t\tif(x%y==0)\n\t\t\treturn y;\n\t\telse\n\t\t\treturn gcd(y,x%y);\n\t    }\n\t    \n\t    public static int gcd(int x,int y){\n\t    \tif(y==0) \n\t    \t\treturn x; \n\t    \treturn gcd(y,x%y);\n\t    }\n\t    \n\t    public static long gcdExtended(long a,long b,long[] x){\n\t        \n\t        if(a==0){\n\t            x[0]=0;\n\t            x[1]=1;\n\t            return b;\n\t        }\n\t        long[] y=new long[2];\n\t        long gcd=gcdExtended(b%a, a, y);\n\t        \n\t        x[0]=y[1]-(b/a)*y[0];\n\t        x[1]=y[0];\n\t        \n\t        return gcd;\n\t    }\n\t    \n\t    public static int abs(int a,int b){\n\t\treturn (int)Math.abs(a-b);\n\t    }\n\t \n\t    public static long abs(long a,long b){\n\t\treturn (long)Math.abs(a-b);\n\t    }\n\t    \n\t    public static int max(int a,int b){\n\t\tif(a>b)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn b;\n\t    }\n\t \n\t    public static int min(int a,int b){\n\t\tif(a>b)\n\t\t\treturn b;\n\t\telse \n\t\t\treturn a;\n\t    }\n\t    \n\t    public static long max(long a,long b){\n\t\tif(a>b)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn b;\n\t    }\n\t \n\t    public static long min(long a,long b){\n\t\tif(a>b)\n\t\t\treturn b;\n\t\telse \n\t\t\treturn a;\n\t    }\n\t \n\t    public static long pow(long n,long p,long m){\n\t\t long  result = 1;\n\t\t  if(p==0)\n\t\t    return 1;\n\t\tif (p==1)\n\t\t    return n;\n\t\twhile(p!=0)\n\t\t{\n\t\t    if(p%2==1)\n\t\t        result *= n;\n\t\t    if(result>=m)\n\t\t    result%=m;\n\t\t    p >>=1;\n\t\t    n*=n;\n\t\t    if(n>=m)\n\t\t    n%=m;\n\t\t}\n\t\treturn result;\n\t    }\n\t    \n\t    public static long pow(long n,long p){\n\t\tlong  result = 1;\n\t\t  if(p==0)\n\t\t    return 1;\n\t\tif (p==1)\n\t\t    return n;\n\t\twhile(p!=0)\n\t\t{\n\t\t    if(p%2==1)\n\t\t        result *= n;\t    \n\t\t    p >>=1;\n\t\t    n*=n;\t    \n\t\t}\n\t\treturn result;\n\t    }\n\t    public static void debug(Object... o) {\n\t\t\tSystem.out.println(Arrays.deepToString(o));\n\t\t}\n\t    void run() throws Exception {\n\t\t\tis = System.in;\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tout.flush();\n\t\t}\n\t   \n\t    public static void main(String[] args) throws Exception {\n\t\t\tnew Thread(null, new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnew code7().run();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, \"1\", 1 << 26).start();\n\n\t\t}\n\t    private byte[] inbuf = new byte[1024];\n\t\tpublic int lenbuf = 0, ptrbuf = 0;\n\t \n\t\tprivate int readByte() {\n\t\t\tif (lenbuf == -1)\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tif (ptrbuf >= lenbuf) {\n\t\t\t\tptrbuf = 0;\n\t\t\t\ttry {\n\t\t\t\t\tlenbuf = is.read(inbuf);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (lenbuf <= 0)\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn inbuf[ptrbuf++];\n\t\t}\n\t \n\t\tprivate boolean isSpaceChar(int c) {\n\t\t\treturn !(c >= 33 && c <= 126);\n\t\t}\n\t \n\t\tprivate int skip() {\n\t\t\tint b;\n\t\t\twhile ((b = readByte()) != -1 && isSpaceChar(b));\n\t\t\treturn b;\n\t\t}\n\t \n\t\tprivate double nd() {\n\t\t\treturn Double.parseDouble(ns());\n\t\t}\n\t \n\t\tprivate char nc() {\n\t\t\treturn (char) skip();\n\t\t}\n\t \n\t\tprivate String ns() {\n\t\t\tint b = skip();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\twhile (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != ' ')\n\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\t \n\t\tprivate char[] ns(int n) {\n\t\t\tchar[] buf = new char[n];\n\t\t\tint b = skip(), p = 0;\n\t\t\twhile (p < n && !(isSpaceChar(b))) {\n\t\t\t\tbuf[p++] = (char) b;\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\treturn n == p ? buf : Arrays.copyOf(buf, p);\n\t\t}\n\t \n\t\tprivate char[][] nm(int n, int m) {\n\t\t\tchar[][] map = new char[n][];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tmap[i] = ns(m);\n\t\t\treturn map;\n\t\t}\n\t \n\t\tprivate int[] na(int n) {\n\t\t\tint[] a = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = ni();\n\t\t\treturn a;\n\t\t}\n\t\t\n\t\tprivate long[] nl(int n) {\n\t\t\tlong[] a = new long[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = nl();\n\t\t\treturn a;\n\t\t}\n\t\t\n\t\tprivate int ni() {\n\t\t\tint num = 0, b;\n\t\t\tboolean minus = false;\n\t\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\n\t\t\t\t;\n\t\t\tif (b == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tb = readByte();\n\t\t\t}\n\t \n\t\t\twhile (true) {\n\t\t\t\tif (b >= '0' && b <= '9') {\n\t\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t\t} else {\n\t\t\t\t\treturn minus ? -num : num;\n\t\t\t\t}\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t}\n\t \n\t\tprivate long nl() {\n\t\t\tlong num = 0;\n\t\t\tint b;\n\t\t\tboolean minus = false;\n\t\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\n\t\t\t\t;\n\t\t\tif (b == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tb = readByte();\n\t\t\t}\n\t \n\t\t\twhile (true) {\n\t\t\t\tif (b >= '0' && b <= '9') {\n\t\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t\t} else {\n\t\t\t\t\treturn minus ? -num : num;\n\t\t\t\t}\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t}\n\t \n}"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author ankur\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n, m;\n            n = in.nextInt();\n            m = in.nextInt();\n            String str[] = new String[n];\n            for (int i = 0; i < n; i++) {\n                str[i] = in.readString();\n            }\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    for (int k = 0; k < n; k++) {\n                        if (str[j].charAt(i) == '#' && str[k].charAt(i) == '#') {\n                            if (!str[j].equals(str[k])) {\n                                //System.out.println(str[j]);\n                                //  System.out.println(str[i]);\n\n                                out.print(\"No\");\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n\n            out.print(\"Yes\");\n\n        }\n\n    }\n\n    static class InputReader {\n        private final InputStream stream;\n        private final byte[] buf = new byte[8192];\n        private int curChar;\n        private int snumChars;\n\n        public InputReader(InputStream st) {\n            this.stream = st;\n        }\n\n        public int read() {\n            //*-*------clare------\n//remeber while comparing 2 non primitive data type not used ==\n//remember Arrays.sort for primitive data has worst time case complexity of 0(n^2) bcoz it uses quick sort\n//again silly mistakes ,yr kb tk krta rhega ye mistakes\n//try to write simple codes ,break it into simple things\n//knowledge>rating\n        /*\n        public class Main\n        implements Runnable{\n    public static void main(String[] args) {\n        new Thread(null,new Main(),\"Main\",1<<26).start();\n\n    }\n    public void run() {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();//chenge the name of task\n        solver.solve(1, in, out);\n        out.close();\n    }\n         */\n\n            if (snumChars == -1)\n                throw new InputMismatchException();\n            if (curChar >= snumChars) {\n                curChar = 0;\n                try {\n                    snumChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (snumChars <= 0)\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int SZ = 1e2 + 10;\nint n, m;\nchar arr[SZ][SZ];\nbool check_str(int a, int b) {\n  bool one, two;\n  one = two = false;\n  for (int i = 0; i < m; i++) {\n    if (arr[a][i] == '#' && arr[b][i] == '#') one = true;\n    if (arr[a][i] == '#' && arr[b][i] != '#') two = true;\n    if (arr[a][i] != '#' && arr[b][i] == '#') two = true;\n  }\n  if (one && two) return false;\n  return true;\n}\nbool check_stolb(int a, int b) {\n  bool one, two;\n  one = two = false;\n  for (int i = 0; i < n; i++) {\n    if (arr[i][a] == '#' && arr[i][b] == '#') one = true;\n    if (arr[i][a] == '#' && arr[i][b] != '#') two = true;\n    if (arr[i][a] != '#' && arr[i][b] == '#') two = true;\n  }\n  if (one && two) return false;\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) cin >> arr[i][j];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      if (!check_str(i, j)) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  for (int i = 0; i < m; i++) {\n    for (int j = 0; j < m; j++) {\n      if (!check_stolb(i, j)) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }\nconst int MAXH = 50;\nconst int MAXW = 50;\nint h, w;\nchar g[MAXH][MAXW + 1];\nint par[MAXH + MAXW], sz[MAXH + MAXW], nrows[MAXH + MAXW], ncols[MAXH + MAXW],\n    ncells[MAXH + MAXW];\nint find(int x) {\n  if (par[x] == x) return x;\n  return par[x] = find(par[x]);\n}\nvoid unite(int a, int b) {\n  a = find(a), b = find(b);\n  if (a == b) {\n    ++ncells[a];\n    return;\n  }\n  if (sz[b] > sz[a]) swap(a, b);\n  par[b] = a, sz[a] += sz[b], nrows[a] += nrows[b], ncols[a] += ncols[b],\n  ncells[a] += ncells[b], ++ncells[a];\n}\nbool solve() {\n  for (int i = (0); i < (h + w); ++i)\n    par[i] = i, sz[i] = i, nrows[i] = i < h ? 1 : 0, ncols[i] = i >= h ? 1 : 0,\n    ncells[i] = 0;\n  for (int x = (0); x < (h); ++x)\n    for (int y = (0); y < (w); ++y)\n      if (g[x][y] == '#') unite(x, h + y);\n  for (int i = (0); i < (h + w); ++i)\n    if (find(i) == i)\n      if (nrows[i] * ncols[i] != ncells[i]) return false;\n  return true;\n}\nvoid run() {\n  scanf(\"%d%d\", &h, &w);\n  for (int x = (0); x < (h); ++x) scanf(\"%s\", g[x]);\n  printf(\"%s\\n\", solve() ? \"Yes\" : \"No\");\n}\nint main() {\n  run();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<string> a(n);\n  for (int i = 0; i < n; ++i) cin >> a[i];\n  for (int j = 0; j < m; ++j) {\n    vector<int> indx;\n    for (int i = 0; i < n; ++i) {\n      if (a[i][j] == '#') indx.push_back(i);\n    }\n    for (int i = 1; i < indx.size(); ++i) {\n      if (a[indx[i]] != a[indx[0]]) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.tie(nullptr);\n  int n, m;\n  cin >> n >> m;\n  set<string> second;\n  vector<string> b;\n  for (int i = 0; i < n; i++) {\n    string a;\n    cin >> a;\n    second.insert(a);\n  }\n  for (auto p : second) b.push_back(p);\n  n = b.size();\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (b[i][j] == '#') {\n        for (int tmp = i + 1; tmp < n; tmp++) {\n          if (b[tmp][j] == '#') {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int r, c;\n  cin >> r >> c;\n  int s[r][c];\n  for (int i = 0; i < r; i++) {\n    string s1;\n    cin >> s1;\n    for (int j = 0; j < c; j++) {\n      if (s1[j] == '.')\n        s[i][j] = 0;\n      else\n        s[i][j] = 1;\n    }\n  }\n  for (int i = 0; i < r; i++) {\n    for (int j = 0; j < c; j++) {\n      if (s[i][j] == 1) {\n        for (int k = i + 1; k <= r - 1; k++) {\n          if (s[k][j]) {\n            for (int l = 0; l <= c - 1; l++) {\n              if (s[i][l] != s[k][l]) {\n                cout << \"No\";\n                return 0;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "def findInArray(c, arr):\n\tind = []\n\tfor i in range(len(arr)):\n\t\tif arr[i] == c:\n\t\t\tind.append(i)\n\treturn ind\n\ndef solve():\n\tnumRows,numCols = map(int, input().strip().split())\n\n\tmat = [[0]*numCols for _ in range(numRows)]\n\t\n\tfor i in range(numRows):\n\t\tmat[i] = list(input().strip())\n\n\trows = [0] * numRows\n\tcols = [0] * numCols\n\n\tcounter = 1\n\tfor i in range(numRows):\n\t\tfor j in range(numCols):\n\t\t\tif mat[i][j] == '#':\n\t\t\t\tif rows[i] == 0 and cols[j] == 0:\n\t\t\t\t\trows[i] = counter\n\t\t\t\t\tcols[j] = counter\n\t\t\t\t\tmat[i][j] = counter\n\t\t\t\t\tcounter += 1\n\t\t\t\telse:\n\t\t\t\t\tif (rows[i] != 0 and cols[j] != 0) and rows[i] != cols[j]:\n\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\t\n\t\t\t\t\tc = max(rows[i], cols[j])\n\t\t\t\t\trows[i] = c\n\t\t\t\t\tcols[j] = c\n\t\t\t\t\tmat[i][j] = c\n\n\tfor c in range(1,counter):\n\t\trowsEqualToC = findInArray(c, rows)\n\t\tcolsEqualToC = findInArray(c, cols)\n\t\tfor i in rowsEqualToC:\n\t\t\tfor j in colsEqualToC:\n\t\t\t\tif (mat[i][j] != c):\n\t\t\t\t\treturn 'No'\t\t\n\n\treturn 'Yes'\n\ndef main():\n\tprint(solve())\n\nif __name__ == '__main__':\n\tmain()"
        },
        {
            "language": 4,
            "solution": "/* \n * UMANG PANCHAL\n * DAIICT\n */\n\nimport java.util.*;\nimport java.io.*;\nimport java.math.*;\nimport java.util.Comparator;\npublic class Main\n{\n \n\tprivate static final Comparator<? super Integer> Comparator = null;\n\tstatic LinkedList<Integer> adj[];\n\tstatic ArrayList<Integer> adj1[];\n\tstatic int[] color,visited1;\n\tstatic boolean b[],visited[],possible;\n\tstatic int level[];\n\tstatic Map<Integer,HashSet<Integer>> s;\n\tstatic int totalnodes,colored;\n\tstatic int count[];\n\tstatic long sum[];\n\tstatic int nodes;\n\tstatic long ans=0;\n\tstatic long[] as=new long[10001];\n\tstatic long c1=0,c2=0;\n\tstatic int[] a,d,k;\n\tstatic int max=100000000;\n\tstatic long MOD = 1000000007,sm=0,m=Long.MIN_VALUE;\n\tstatic boolean[] prime=new boolean[1000005];\n\tstatic int[] levl;\n    static int[] eat;\n    static int price[];\n    static int res[],par[],co[];\n    static int result=0;\n    static int[] root,size,du,dv;\n    static long p=Long.MAX_VALUE;\n    static int start,end,r=0;\n    static boolean[] vis1,vis2;\n  \n\t// --------------------My Code Starts Here----------------------\n\t\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tin=new InputReader(System.in);\n\t    w=new PrintWriter(System.out);\n   \n\t   int n=ni(),m=ni();\n\t   HashSet<String> h=new HashSet<String>();\n\t   for(int i=0;i<n;i++)\n\t\t   h.add(ns());\n\t   int[] c=new int[m];\n\t   for(String i:h)\n\t   {\n\t\t   for(int j=0;j<i.length();j++)\n\t\t   {\n\t\t\t   if(i.charAt(j)=='#')\n\t\t\t\t   c[j]++;\n\t\t   }\n\t   }\n\t   boolean ans=true;\n\t   for(int i=0;i<m;i++)\n\t   {\n\t\t   if(c[i]>1)\n\t\t   {\n\t\t\t   ans=false;\n\t\t\t   w.print(\"No\");\n\t\t\t   break;\n\t\t   }\n\t   }\n\t   if(ans)\n\t\t   w.print(\"Yes\");\n\t     w.close();\n    }\n\t\n\n\t// --------------------My Code Ends Here------------------------\n     \n\t\n\t/*\n\t *  PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>()\n  \t\t\t{\n  \t\t\t\tpublic int compare(Integer o1, Integer o2)\n  \t\t\t\t{\n  \t\t\t\t\treturn Integer.compare(o2,o1);\n  \t\t\t\t}\n  \t\t\t});\n\t * \n\t * \n\t */\n\tpublic static void bfs1(int u)\n\t{\n\t    Queue<Integer> q=new LinkedList();\n\t    q.add(u);\n\t    visited[u]=true;\n\t    while(!q.isEmpty())\n\t    {\n\t    \t//w.print(1);\n\t    \tint p=q.poll();\n\t      for(int i=0;i<adj[p].size();i++)\n\t     { \n\t    \t  if(!visited[adj[p].get(i)])\n\t    \t  {\n\t    \tq.add(adj[p].get(i));\n\t    \tvisited[adj[p].get(i)]=true;\n\t    \t  }\n\t    \t  levl[adj[p].get(i)]=levl[p]+1;\n\t    \t  }\n\t    }\n\t    \n\t}\n\tpublic static void bfs2(int u)\n\t{\n\t    Queue<Integer> q=new LinkedList();\n\t    q.add(u);\n\t    vis2[u]=true;\n\t    while(!q.isEmpty())\n\t    {\n\t    \tint p=q.poll();\n\t      for(int i=0;i<adj[p].size();i++)\n\t     { \n\t    \t  if(!vis2[adj[p].get(i)])\n\t    \t  {\n\t    \tdv[adj[p].get(i)]=dv[p]+1;\n\t    \tq.add(adj[p].get(i));\n\t    \t  \n\t    \tvis2[adj[p].get(i)]=true;\n\t    \t  }\n\t    \t  }\n\t    }\n\t    \n\t}\n\t public static void buildgraph(int n)\n\t {\n         adj=new LinkedList[n+1];\n         visited=new boolean[n];\n         level=new int[n];\n         par=new int[n];\n         for(int i=0;i<=n;i++)\n         \t{\n        \t adj[i]=new LinkedList<Integer>();\n         \t\n         \t}\n      \n\t }\n\t\n\t/*public static long kruskal(Pair[] p)\n\t{\n\t\tlong ans=0;\n\t\tint w=0,x=0,y=0;\n\t\tfor(int i=0;i<p.length;i++)\n\t\t{\n\t\t\tw=p[i].w;\n\t\t\tx=p[i].x;\n\t\t\ty=p[i].y;\n\t\t\tif(root(x)!=root(y))\n\t\t\t{\n\t\t\t\tans+=w;\n\t\t\t\tunion(x,y);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}*/\n\t\n\t static class Pair implements Comparable<Pair>\n\t {\n\t\t Integer x,w;\n\t        Pair(int x,int w)\n\t        {\n\t            this.x=x;\n\t            this.w=w;\n\t        }\n\t        public int compareTo(Pair p)\n\t        {\n\t            return Integer.compare(this.w,p.w);\n\t        }\n\t\t\n\t}\n\t static  class npair implements Comparable<npair>\n\t {\n\t     int a,b;\n\t     \n\t\n\t\tnpair(int a,int b)\n\t\t{\n\t\t\tthis.a=a;\n\t\t\tthis.b=b;\n\t\t\t//this.index=index;\n\t\t}\n\n\n\t\tpublic int compareTo(npair o) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn Integer.compare(this.a,o.a);\n\t\t}\n\n\n\t\n\t\t\n\t}\n\tpublic static int root(int i)\n\t{\n\t\twhile(root[i]!=i)\n\t\t{\n\t\t\troot[i]=root[root[i]];\n\t\t\ti=root[i];\n\t\t}\n\t\treturn i;\n\t}\n\t\n\tpublic static void init(int n)\n\t{\n\t\troot=new int[n+1];\n\t\tfor(int i=1;i<=n;i++)\n\t\t\troot[i]=i;\n\t}\n\tpublic static void union(int a,int b)\n\t{\n\t    int root_a=root(a);\t\n\t    int root_b=root(b);\n\t    root[root_a]=root_b;\n\t   // size[root_b]+=size[root_a];\n\t}\n\n\n\t\n\tpublic static boolean isPrime(long n)\n\t{\n\t    // Corner cases\n\t    if (n <= 1)  return false;\n\t    if (n <= 3)  return true;\n\t \n\t    // This is checked so that we can skip \n\t    // middle five numbers in below loop\n\t    if (n%2 == 0 || n%3 == 0)\n\t    \treturn false;\n\t \n\t    for (long i=5; i*i<=n; i=i+6)\n\t        if (n%i == 0 || n%(i+2) == 0)\n\t           return false;\n\t \n\t    return true;\n\t}\n\t\n\n\t\n\tpublic static String ns()\n\t{\n\t\treturn in.nextLine();\n\t}\n\tpublic static int ni()\n\t{\n\t\treturn in.nextInt();\n\t}\n\tpublic static long nl()\n\t{\n\t\treturn in.nextLong();\n\t}\n\tpublic static int[] na(int n)\n\t{\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++)\n\t\ta[i]=ni();\n\t\treturn a;\n\t}\n\tpublic static long[] nla(int n)\n\t{\n\t\tlong[] a=new long[n];\n\t\tfor(int i=0;i<n;i++)\n\t\ta[i]=nl();\n\t\treturn a;\n\t}\n\tpublic static void sieve()\n\t    {\n\t       int n=prime.length;\n\t        for(int i=0;i<n;i++)\n\t            prime[i] = true;\n\t         \n\t        for(int p = 2; p*p <=n; p++)\n\t        {\n\t            if(prime[p] == true)\n\t            {\n\t                for(int i = p*2; i <n; i += p)\n\t                    prime[i] = false;\n\t            }\n\t        }\n\t    }\n\n  public static String rev(String s)\n\t{\n\t\tStringBuilder sb=new StringBuilder(s);\n\t\tsb.reverse();\n\t\treturn sb.toString();\n\t}\n\tstatic long lcm(long a, long b)\n\t{\n\t    return a * (b / gcd(a, b));\n\t}\n\tstatic long gcd(long a, long b)\n\t{\n\t    while (b > 0)\n\t    {\n\t        long temp = b;\n\t        b = a % b; // % is remainder\n\t        a = temp;\n\t    }\n\t    return a;\n\t}\n\tstatic InputReader in;\n\tstatic PrintWriter w;\nstatic class InputReader \n{\n \nprivate final InputStream stream;\nprivate final byte[] buf = new byte[8192];\nprivate int curChar, snumChars;\nprivate SpaceCharFilter filter;\n \npublic InputReader(InputStream stream)\n{\n  this.stream = stream;\n}\n \npublic int snext()\n{\n  if (snumChars == -1)\n    throw new InputMismatchException();\n  if (curChar >= snumChars)\n  {\n    curChar = 0;\n    try \n    {\n      snumChars = stream.read(buf);\n    }\n    catch (IOException e)\n    {\n      throw new InputMismatchException();\n    }\n    if (snumChars <= 0)\n      return -1;\n  }\n  return buf[curChar++];\n}\n \npublic int nextInt() \n{\n  int c = snext();\n  while (isSpaceChar(c)) \n  {\n    c = snext();\n  }\n  int sgn = 1;\n  if (c == '-')\n  {\n    sgn = -1;\n    c = snext();\n  }\n  int res = 0;\n  do\n  {\n    if (c < '0' || c > '9')\n      throw new InputMismatchException();\n    res *= 10;\n    res += c - '0';\n    c = snext();\n  }\n  while (!isSpaceChar(c));\n  return res * sgn;\n}\n \npublic long nextLong() \n{\n  int c = snext();\n  while (isSpaceChar(c)) \n  {\n    c = snext();\n  }\n  int sgn = 1;\n  if (c == '-')\n  {\n    sgn = -1;\n    c = snext();\n  }\n  long res = 0;\n  do\n  {\n    if (c < '0' || c > '9')\n      throw new InputMismatchException();\n    res *= 10;\n    res += c - '0';\n    c = snext();\n  }\n  while (!isSpaceChar(c));\n  return res * sgn;\n}\t    \npublic String readString() \n{\n  int c = snext();\n  while (isSpaceChar(c)) \n  {\n    c = snext();\n  }\n  StringBuilder res = new StringBuilder();\n  do\n  {\n    res.appendCodePoint(c);\n    c = snext();\n  }\n  while (!isSpaceChar(c));\n  return res.toString();\n}\n \npublic String nextLine() \n{\n  int c = snext();\n  while (isSpaceChar(c))\n    c = snext();\n  StringBuilder res = new StringBuilder();\n  do\n  {\n    res.appendCodePoint(c);\n    c = snext();\n  }\n  while (!isEndOfLine(c));\n  return res.toString();\n}\n \npublic boolean isSpaceChar(int c)\n{\n  if (filter != null)\n    return filter.isSpaceChar(c);\n  return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n}\n \nprivate boolean isEndOfLine(int c) \n{\n  return c == '\\n' || c == '\\r' || c == -1;\n}\n \npublic interface SpaceCharFilter\n{\n  public boolean isSpaceChar(int ch);\n}\n}\n\t\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAX_N = 50 + 5;\nbool visr[MAX_N], visc[MAX_N], vis[MAX_N][MAX_N];\nint n, m;\nchar buf[MAX_N][MAX_N];\ninline void dfs(int i, int j) {\n  vis[i][j] = visr[i] = visc[j] = true;\n  for (register int k = 0; k < n; ++k) {\n    if (buf[k][j] == '#' && !vis[k][j]) {\n      dfs(k, j);\n    }\n  }\n  for (register int k = 0; k < m; ++k) {\n    if (buf[i][k] == '#' && !vis[i][k]) dfs(i, k);\n  }\n}\ninline char readchar() {\n  char c = getchar();\n  while (c == ' ' || c == '\\n') c = getchar();\n  return c;\n}\nvoid solve() {\n  scanf(\"%d%d\", &n, &m);\n  for (register int i = 0; i < n; ++i)\n    for (register int j = 0; j < m; ++j) buf[i][j] = readchar();\n  for (register int i = 0; i < n; ++i)\n    for (register int j = 0; j < m; ++j)\n      if (buf[i][j] == '#' && !vis[i][j]) {\n        memset(visr, 0, sizeof(visr));\n        memset(visc, 0, sizeof(visc));\n        dfs(i, j);\n        for (register int k = 0; k < n; ++k)\n          for (register int l = 0; l < m; ++l)\n            if (visr[k] && visc[l] && buf[k][l] == '.') {\n              puts(\"NO\");\n              return;\n            }\n      }\n  puts(\"YES\");\n}\nint main() {\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvector<vector<int>> graph;\nvector<int> used;\nbool dfs(int n) {\n  used[n] = 1;\n  bool res = true;\n  for (int v : graph[n]) {\n    if (used[v] == 2) {\n      return false;\n    }\n    if (used[v] == 0) {\n      res &= dfs(v);\n    }\n  }\n  return res;\n}\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int>> field(n, vector<int>(m));\n  char c;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> c;\n      if (c == '#') {\n        field[i][j] = true;\n      }\n    }\n  }\n  graph.resize(n + m);\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (field[i][j]) {\n        graph[i].push_back(n + j);\n        graph[n + j].push_back(i);\n      }\n    }\n  }\n  used.resize(n + m);\n  for (int i = 0; i < n + m; ++i) {\n    if (used[i] == 0) {\n      if (!dfs(i)) {\n        cout << \"No\";\n        return 0;\n      }\n      for (int j = 0; j < n; ++j) {\n        if (used[j] == 1) {\n          for (int k = n; k < n + m; ++k) {\n            if (used[k] == 1 && !field[j][k - n]) {\n              cout << \"No\";\n              return 0;\n            }\n          }\n          used[j] = 2;\n        }\n      }\n      for (int k = n; k < n + m; ++k) {\n        if (used[k] == 1) {\n          used[k] = 2;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<set<int>> rows(m);\n  vector<set<int>> cols(n);\n  vector<vector<int>> table(n, vector<int>(m, 0));\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      char c;\n      cin >> c;\n      if (c == '.') {\n        table[i][j] = 0;\n      } else {\n        table[i][j] = 1;\n        rows[j].insert(i);\n        cols[i].insert(j);\n      }\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < n; ++j) {\n      auto it = cols[i].begin();\n      auto it1 = cols[j].begin();\n      bool has_to_finish = false;\n      while ((it != cols[i].end()) && (it1 != cols[j].end())) {\n        if (*it != *it1) {\n          has_to_finish = true;\n        }\n        ++it;\n        ++it1;\n      }\n      if ((has_to_finish) || (it != cols[i].end()) || (it1 != cols[j].end())) {\n        it = cols[i].begin();\n        while (it != cols[i].end()) {\n          int k = *it;\n          if (cols[j].find(k) != cols[j].end()) {\n            cout << \"No\" << endl;\n            return 0;\n          }\n          ++it;\n        }\n      }\n    }\n  }\n  for (int i = 0; i < m; ++i) {\n    for (int j = 0; j < m; ++j) {\n      auto it = rows[i].begin();\n      auto it1 = rows[j].begin();\n      bool has_to_finish = false;\n      while ((it != rows[i].end()) && (it1 != rows[j].end())) {\n        if (*it != *it1) {\n          has_to_finish = true;\n        }\n        ++it;\n        ++it1;\n      }\n      if ((has_to_finish) || (it != rows[i].end()) || (it1 != rows[j].end())) {\n        it = rows[i].begin();\n        while (it != rows[i].end()) {\n          int k = *it;\n          if (rows[j].find(k) != rows[j].end()) {\n            cout << \"No\" << endl;\n            return 0;\n          }\n          ++it;\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 100;\nstruct node {\n  int x, y;\n};\nint n, m;\nchar s[N][N], p[N][N];\nset<int> row, col;\nvoid bfs(int x, int y) {\n  node a, b;\n  a.x = x, a.y = y;\n  queue<node> q;\n  q.push(a);\n  while (!q.empty()) {\n    a = q.front();\n    row.insert(a.x);\n    col.insert(a.y);\n    for (int i = 1; i <= n; i++) {\n      if (s[i][a.y] == '#' && p[i][a.y] != 1) {\n        p[i][a.y] = 1;\n        b.x = i;\n        b.y = a.y;\n        q.push(b);\n      }\n    }\n    for (int i = 1; i <= m; i++) {\n      if (s[a.x][i] == '#' && p[a.x][i] != 1) {\n        p[a.x][i] = 1;\n        b.x = a.x;\n        b.y = i;\n        q.push(b);\n      }\n    }\n    q.pop();\n  }\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%s\", s[i]);\n  }\n  int f = 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#' && p[i][j] != 1) {\n        row.clear();\n        col.clear();\n        p[i][j] = 1;\n        bfs(i, j);\n        for (set<int>::iterator it = row.begin(); it != row.end(); ++it) {\n          for (set<int>::iterator po = col.begin(); po != col.end(); ++po) {\n            if (s[*it][*po] != '#') f = 0;\n          }\n        }\n      }\n    }\n  }\n  if (f)\n    puts(\"Yes\");\n  else\n    puts(\"No\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = list(map(int, input().strip().split(' ')))\nd = {}\nvisited = {}\nok = True\nfor i in range(n):\n    line = input().strip()\n    if line not in d:\n        d[line] = 1\n        for j in range(m):\n            if line[j] == '#':\n                if j in visited:\n                    ok = False\n                    break\n                else:\n                    visited[j] = 1\nif ok:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n   \t\t  \t   \t        \t\t\t \t\t\t \t\t"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m, i, j, k, l, f;\nchar c[50][50];\nint R[50], C[50];\nint main() {\n  cin >> n >> m;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) scanf(\" %c\", &c[i][j]);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      if (c[i][j] == '#') {\n        for (k = i + 1; k < n; k++)\n          if (c[k][j] == '#') {\n            for (l = 0; l < m; l++)\n              if (c[k][l] != c[i][l]) {\n                printf(\"No\\n\");\n                return 0;\n              } else\n                c[k][l] = '.';\n          } else {\n            for (l = 0; l < m; l++)\n              if (c[i][l] == '#' && c[k][l] == '#') {\n                printf(\"No\\n\");\n                return 0;\n              }\n          }\n        for (l = 0; l < m; l++)\n          if (c[i][l] == '#') c[i][l] = '.';\n      }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = int(5e5) + 5;\nconst int inf = (int)1e9 + 7;\nint n, m;\nint ur[51], uc[51];\nchar a[51][51];\nint main() {\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) {\n      scanf(\" %c\", a[i] + j);\n    }\n  }\n  for (int t = 1;; ++t) {\n    int start = -1;\n    for (int i = 1; i <= n; ++i) {\n      for (int j = 1; j <= m; ++j) {\n        if (a[i][j] == '#') {\n          start = i;\n          break;\n        }\n      }\n    }\n    if (start == -1) {\n      break;\n    }\n    if (ur[start]) {\n      cout << \"No\";\n      return 0;\n    }\n    for (int i = 1; i <= m; ++i) {\n      if (a[start][i] == '#') {\n        if (uc[i]) {\n          cout << \"No\";\n          return 0;\n        }\n        uc[i] = 1;\n      }\n    }\n    ur[start] = 1;\n    for (int i = 1; i <= n; ++i) {\n      if (start == i) {\n        continue;\n      }\n      int good = 1;\n      for (int j = 1; j <= m; ++j) {\n        good &= a[start][j] == a[i][j];\n      }\n      if (good) {\n        for (int j = 1; j <= m; ++j) {\n          a[i][j] = '.';\n        }\n      }\n    }\n    for (int i = 1; i <= m; ++i) {\n      a[start][i] = '.';\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long a[100];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < m; ++j) {\n      if (s[j] == '#') a[i] += (1ll << (long long)j);\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n      if ((a[i] & a[j]) != 0 && a[i] != a[j]) {\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.util.*;\nimport java.io.*;\n\npublic class Main{\n  \n    \n    public static void main(String[] args) throws IOException {\n        FastScanner sc = new FastScanner(System.in);\n        int n=sc.nextInt();\n        int m=sc.nextInt();\n        if(n==1 || m==1){\n            System.out.println(\"Yes\");\n            return;\n        }\n        \n        String s[]=new String[n];\n        for(int i=0;i<n;i++){\n            s[i]=sc.next();\n            \n        }\n        for(int i=0;i<n;i++){\n            for(int j=i+1;j<n;j++){\n                if(!can(s[i],s[j])){\n                    System.out.println(\"No\");\n                    return;\n                }\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n    public static boolean can(String s1,String s2){\n        if(s1.equals(s2)){\n            return true;\n        }\n        for(int i=0;i<s1.length();i++){\n            if(s1.charAt(i)=='#' && s2.charAt(i)=='#')return false;\n        \n        }\n        return true;\n    }\n    \n\n    static class FastScanner {\n\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastScanner(InputStream i) {\n            br = new BufferedReader(new InputStreamReader(i));\n            st = new StringTokenizer(\"\");\n        }\n        public String next() throws IOException {\n            if (st.hasMoreTokens()) {\n                return st.nextToken();\n            } else {\n                st = new StringTokenizer(br.readLine());\n            }\n            return next();\n        }\n\n        public int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        public double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 55;\nconst int M = 1e9 + 7;\nint n, m;\nset<int> row, column;\nstring s[N], cpy[N];\nint dx[] = {-1, 1, 0, 0}, dy[] = {0, 0, 1, -1};\nbool final[N][N];\nvoid dfs(int x, int y) {\n  row.insert(x), column.insert(y);\n  s[x][y] = '.';\n  for (int i = 0; i < 4; i++) {\n    for (int j = 0; j <= max(n, m); j++) {\n      int xx = x + dx[i] * j, yy = y + dy[i] * j;\n      if (xx < 1 || xx > n || yy < 1 || yy > m) break;\n      if (s[xx][yy] == '.') continue;\n      dfs(xx, yy);\n    }\n  }\n}\nint32_t main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    cin >> s[i];\n    s[i] = ' ' + s[i];\n    cpy[i] = s[i];\n  }\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      if (s[i][j] == '#') {\n        dfs(i, j);\n        for (int i : row)\n          for (int j : column) final[i][j] = 1;\n        row.clear();\n        column.clear();\n      }\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      if ((final[i][j] && cpy[i][j] == '.') ||\n          !final[i][j] && cpy[i][j] == '#') {\n        cout << \"NO\\n\";\n        return 0;\n      }\n  cout << \"YES\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid dfs(long long i, long long j, vector<vector<long long> >& d,\n         vector<long long>& fg, vector<long long>& fv, long long& er) {\n  fg[i] = fv[j] = 1;\n  d[i][j] = 0;\n  long long n = d.size();\n  long long m = d[0].size();\n  for (long long(k) = 0; (k) < (m); ++(k)) {\n    if (d[i][k]) {\n      dfs(i, k, d, fg, fv, er);\n    }\n  }\n  for (long long(k) = 0; (k) < (n); ++(k)) {\n    if (d[k][j]) {\n      dfs(k, j, d, fg, fv, er);\n    }\n  }\n}\nvoid solve() {\n  long long n, m;\n  cin >> n >> m;\n  vector<vector<long long> > d(n, vector<long long>(m, 0));\n  long long cnt = 0;\n  for (long long(i) = 0; (i) < (n); ++(i)) {\n    for (long long(j) = 0; (j) < (m); ++(j)) {\n      char c;\n      cin >> c;\n      if (c == '#') {\n        d[i][j] = 1;\n        ++cnt;\n      }\n    }\n  }\n  long long er = 0;\n  for (long long(i) = 0; (i) < (n); ++(i)) {\n    for (long long(j) = 0; (j) < (m); ++(j)) {\n      if (d[i][j]) {\n        vector<long long> fg(n, 0);\n        vector<long long> fv(m, 0);\n        dfs(i, j, d, fg, fv, er);\n        for (long long(g) = 0; (g) < (n); ++(g)) {\n          for (long long(v) = 0; (v) < (m); ++(v)) {\n            if (fg[g] && fv[v]) {\n              if (d[g][v]) {\n                er = 1;\n              } else {\n                --cnt;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  if (cnt) {\n    er = 1;\n  }\n  cout << (er ? \"No\" : \"Yes\") << endl;\n}\nint main() {\n  ios::sync_with_stdio(false);\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long inf = (long long)1e18;\nconst long long mod = (long long)1e9 + 7;\nconst double eps = (double)1e-9;\nconst double pi = acos(-1.0);\nconst int dx[] = {0, 0, 1, 0, -1};\nconst int dy[] = {0, 1, 0, -1, 0};\nconst int N = 55;\nint n, m;\nchar c[N][N];\nbool urow[N], ucol[N];\nbool rows[N], cols[N];\nvector<int> grow[N], gcol[N];\nvoid dfs(int v, bool b) {\n  if (!b) {\n    urow[v] = 1;\n    rows[v] = 1;\n    for (auto to : grow[v])\n      if (!ucol[to]) dfs(to, 1);\n  } else {\n    ucol[v] = 1;\n    cols[v] = 1;\n    for (auto to : gcol[v])\n      if (!urow[to]) dfs(to, 0);\n  }\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> c[i][j];\n      if (c[i][j] == '#') {\n        grow[i].push_back(j);\n        gcol[j].push_back(i);\n      }\n    }\n  }\n  while (1) {\n    int ind = -1;\n    bool found = 0;\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= m; j++) {\n        if (c[i][j] == '#' && !urow[i]) {\n          ind = i;\n          found = 1;\n          break;\n        }\n      }\n      if (found) break;\n    }\n    if (!found) break;\n    memset(rows, 0, sizeof(rows));\n    memset(cols, 0, sizeof(cols));\n    dfs(ind, 0);\n    for (int i = 1; i <= n; i++) {\n      if (!rows[i]) continue;\n      for (int j = 1; j <= m; j++) {\n        if (cols[j]) {\n          if (c[i][j] == '.') {\n            cout << \"No\";\n            return 0;\n          }\n          c[i][j] = '.';\n        }\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (c[i][j] == '#') {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "used =[]\na = []\ndef dfs(v, c):\n    vert = v + 100*c\n    if used[vert] == 0:\n        used[vert] = 1\n        a[c].append(v)\n        for i in range(0, len(g[vert])):\n            if used[g[vert][i]] == 0:\n                dfs(g[vert][i] - (1-c)*100, 1-c)\n            \n            \n\nn,m = map(int, input().split())\nr = []\nfor i in range(0,n):\n    s = input()\n    r.append(s)\ng = []\nfor i in range (0,200):\n    g.append([])\n    used.append(0)\nfor i in range (0,n):\n    for j in range (0,m):\n        if(r[i][j] == \"#\"):\n            g[i].append(100 + j)\n            g[100+j].append(i)\n#print(g)\nfor i in range(0,n):\n    a = [[],[]]\n    dfs(i,0)\n    #print(a)\n    for j in range (0, len(a[0])):\n        for k in range (0, len(a[1])):\n            if(r[a[0][j]][a[1][k]] != \"#\"):\n                print (\"NO\")\n                raise SystemExit\nprint(\"YES\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar fi[55][55];\nbool vis[55];\nbool tmp[55];\nbool valid = 1;\nint com(int r) {\n  int ret = 3;\n  for (int i = 1; i <= m; i++) {\n    if (ret == 2) return ret;\n    if (tmp[i] && fi[r][i] == '#') {\n      if (ret == 3)\n        ret = 1;\n      else if (ret == 0)\n        return 2;\n    } else if (tmp[i] && fi[r][i] != '#') {\n      if (ret == 3)\n        ret = 0;\n      else if (ret == 1)\n        return 2;\n    } else if (!tmp[i] && fi[r][i] == '#') {\n      if (ret == 3)\n        ret = 0;\n      else if (ret == 1)\n        return 2;\n    }\n  }\n  return ret;\n}\nvoid cek(int r) {\n  for (int i = r + 1; i <= n; i++) {\n    int coba = com(i);\n    if (coba == 0 || coba == 3)\n      continue;\n    else if (coba == 1) {\n      vis[i] = 1;\n    } else {\n      valid = 0;\n      return;\n    }\n  }\n  return;\n}\nint main() {\n  memset(vis, 0, sizeof(vis));\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; i++) {\n    getchar();\n    for (int j = 1; j <= m; j++) {\n      scanf(\"%c\", &fi[i][j]);\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    if (vis[i]) continue;\n    vis[i] = 1;\n    memset(tmp, 0, sizeof(tmp));\n    for (int j = 1; j <= m; j++) {\n      if (fi[i][j] == '#') {\n        tmp[j] = 1;\n      }\n    }\n    cek(i);\n    if (!valid) break;\n  }\n  if (valid)\n    printf(\"Yes\\n\");\n  else\n    printf(\"No\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "# inp.readline()\n# int(inp.readline())\n# out.write()\n# raw_input()\n# map(int,raw_input().split())\n# map(int,inp.readline().split())\ndef main():\n    an=\"\"\n    n,m=map(int,inp.readline().split())\n    a=[0]*n\n    for i in xrange(n):\n        a[i]=(inp.readline().strip())\n    d={}\n    for i in xrange(n):\n        try:\n            d[a[i]].append(i)\n        except KeyError:\n            d[a[i]]=[i]\n    z=0\n    for i in d:\n        d[i]=set(d[i])\n    t=set([i for i in xrange(n)])\n    for i in d:\n        q=t.difference(d[i])\n        r=[]\n        for j in xrange(m):\n            if i[j]=='#':\n                r.append(j)\n        for j in r:\n            for k in q:\n                if a[k][j]=='#':\n                    print \"No\"\n                    exit(0)\n    print \"Yes\"\n    out.write(an)\nif __name__ == \"__main__\":\n    from sys import stdin as inp, stdout as out\n    main()"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  vector<string> g(n);\n  for (int i = 0; i < n; i++) {\n    cin >> g[i];\n  }\n  auto check = [&](int first, int second) {\n    vector<int> a, b;\n    for (int i = 0; i < m; i++) {\n      if (g[first][i] == '#') {\n        a.push_back(i);\n      }\n      if (g[second][i] == '#') {\n        b.push_back(i);\n      }\n    }\n    if (a == b) {\n      return true;\n    }\n    for (auto t : a) {\n      for (auto v : b) {\n        if (t == v) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      if (!check(i, j)) {\n        ;\n        cout << \"No\"\n             << \"\\n\";\n        return;\n      }\n    }\n  }\n  cout << \"Yes\"\n       << \"\\n\";\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.InputMismatchException;\n\npublic class B_472\n{\n\n\tInputStream is;\n\tPrintWriter out;\n\tint n;\n\tlong a[];\n\tprivate boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n\n\tvoid solve()\n\t{\n\t\tint n = ni();\n\t\tint m = ni();\n\t\tint arr[][] = new int[n][m];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tString s = ns();\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t{\n\t\t\t\tif (s.charAt(j) == '#')\n\t\t\t\t{\n\t\t\t\t\tarr[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttr(arr);\n\t\tboolean flag = true;\n\t\tint visited[] = new int[m];\n\t\tArrays.fill(visited, -1);\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t{\n\t\t\t\tif (arr[i][j] == 1)\n\t\t\t\t{\n\t\t\t\t\tif (visited[j] == -1)\n\t\t\t\t\t\tvisited[j] = i;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (compare(arr[i], arr[visited[j]]))\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (flag)\n\t\t{\n\t\t\tout.println(\"Yes\");\n\t\t} else\n\t\t{\n\t\t\tout.println(\"No\");\n\t\t}\n\t}\n\n\tboolean compare(int a1[], int a2[])\n\t{\n\t\ttr(\"hi\");\n\t\ttr(a1, a2);\n\t\tboolean flag = true;\n\t\tfor (int i = 0; i < a1.length; i++)\n\t\t{\n\t\t\tif (a1[i] != a2[i])\n\t\t\t\tflag = false;\n\t\t}\n\t\treturn flag;\n\t}\n\n\tvoid run() throws Exception\n\t{\n\t\tString INPUT = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\input.txt\";\n\t\tis = oj ? System.in : new FileInputStream(INPUT);\n\t\tout = new PrintWriter(System.out);\n\n\t\tlong s = System.currentTimeMillis();\n\t\tsolve();\n\t\tout.flush();\n\t\ttr(System.currentTimeMillis() - s + \"ms\");\n\t}\n\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tnew Thread(null, new Runnable()\n\t\t{\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tnew B_472().run();\n\t\t\t\t} catch (Exception e)\n\t\t\t\t{\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"1\", 1 << 26).start();\n\t}\n\n\tprivate byte[] inbuf = new byte[1024];\n\tpublic int lenbuf = 0, ptrbuf = 0;\n\n\tprivate int readByte()\n\t{\n\t\tif (lenbuf == -1)\n\t\t\tthrow new InputMismatchException();\n\t\tif (ptrbuf >= lenbuf)\n\t\t{\n\t\t\tptrbuf = 0;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlenbuf = is.read(inbuf);\n\t\t\t} catch (IOException e)\n\t\t\t{\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tif (lenbuf <= 0)\n\t\t\t\treturn -1;\n\t\t}\n\t\treturn inbuf[ptrbuf++];\n\t}\n\n\tprivate boolean isSpaceChar(int c)\n\t{\n\t\treturn !(c >= 33 && c <= 126);\n\t}\n\n\tprivate int skip()\n\t{\n\t\tint b;\n\t\twhile ((b = readByte()) != -1 && isSpaceChar(b))\n\t\t\t;\n\t\treturn b;\n\t}\n\n\tprivate double nd()\n\t{\n\t\treturn Double.parseDouble(ns());\n\t}\n\n\tprivate char nc()\n\t{\n\t\treturn (char) skip();\n\t}\n\n\tprivate String ns()\n\t{\n\t\tint b = skip();\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile (!(isSpaceChar(b)))\n\t\t{ // when nextLine, (isSpaceChar(b) && b != ' ')\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\n\tprivate char[] ns(int n)\n\t{\n\t\tchar[] buf = new char[n];\n\t\tint b = skip(), p = 0;\n\t\twhile (p < n && !(isSpaceChar(b)))\n\t\t{\n\t\t\tbuf[p++] = (char) b;\n\t\t\tb = readByte();\n\t\t}\n\t\treturn n == p ? buf : Arrays.copyOf(buf, p);\n\t}\n\n\tprivate char[][] nm(int n, int m)\n\t{\n\t\tchar[][] map = new char[n][];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tmap[i] = ns(m);\n\t\treturn map;\n\t}\n\n\tprivate int[] na(int n)\n\t{\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = ni();\n\t\treturn a;\n\t}\n\n\tprivate int ni()\n\t{\n\t\tint num = 0, b;\n\t\tboolean minus = false;\n\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\n\t\t\t;\n\t\tif (b == '-')\n\t\t{\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\n\t\twhile (true)\n\t\t{\n\t\t\tif (b >= '0' && b <= '9')\n\t\t\t{\n\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t} else\n\t\t\t{\n\t\t\t\treturn minus ? -num : num;\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\n\tprivate long nl()\n\t{\n\t\tlong num = 0;\n\t\tint b;\n\t\tboolean minus = false;\n\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\n\t\t\t;\n\t\tif (b == '-')\n\t\t{\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\n\t\twhile (true)\n\t\t{\n\t\t\tif (b >= '0' && b <= '9')\n\t\t\t{\n\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t} else\n\t\t\t{\n\t\t\t\treturn minus ? -num : num;\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\n\tprivate void tr(Object... o)\n\t{\n\t\tif (!oj)\n\t\t\tSystem.out.println(Arrays.deepToString(o));\n\t}\n\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\ns = []\na = []\nfor i in range(n):\n    s.append(input())\nfor i in range(n):\n    k = 0\n    for j in range(m):\n        if s[i][j] == '#':\n            k += 1 << j\n    a.append(k)\nfor i in range(n):\n    for j in range(i + 1, n):\n        if a[i] != a[j] and a[i] & a[j]: \n            print(\"no\")\n            quit()\nprint(\"yes\")"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\ns = {input() for i in range(n)}\nprint('No' if any(sum(si[j] == '#' for si in s) > 1 for j in range(m)) else 'Yes')"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\npublic class Main {\n\n\tstatic boolean check(char[][] G,ArrayList<Integer> al,int n,int m){\n\t\tif(al.size() == 0 || al.size()==1){\n\t\t\treturn true;\n\t\t}\n\t\tfor(int i=1;i<al.size();i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tif(G[al.get(i)][j]!=G[al.get(0)][j]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tchar[][] G = new char[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tG[i] = sc.next().toCharArray();\n\t\t}\n\t\tArrayList<Integer> al = new ArrayList<Integer>();\n\t\tfor(int i=0;i<m;i++){\n\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\tif(G[j][i] == '#'){\n\t\t\t\t\tal.add(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!check(G,al,n,m)){\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tal.clear();\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\n\t}\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  srand(1373737);\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cout.tie(NULL);\n  int n, m;\n  cin >> n >> m;\n  vector<string> arr(n);\n  for (int i = 0; i < n; i++) cin >> arr[i];\n  vector<bitset<100> > have(n);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (arr[i][j] == '#') have[i][j] = 1;\n    }\n  }\n  bool flag = true;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      bitset<100> now = (have[i] & have[j]);\n      flag &=\n          ((int)now.count() == 0 || (int)now.count() == (int)have[i].count());\n    }\n  }\n  if (flag)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "def func(ss):\n    occured = set()\n    for pr, s in zip(['']+ss[:-1], ss):\n        if pr == s:\n            continue\n        for i, el in enumerate(s):\n            if el == \"#\":\n                if i in occured:\n                    return False\n                occured.add(i)\n    return True\n\nn, m = [int(x) for x in input().split()]\nss = [input() for _ in range(n)]\nss.sort()\nprint(\"Yes\" if func(ss) else \"No\")\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\nt=[set(i for i,c in enumerate(input())if c=='#')for _ in [0]*n]\nprint(['No','Yes'][all(x==y or not x&y for x in t for y in t)])"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int inf = (int)1e9;\nconst long long INF = (long long)1e18;\nconst double eps = 1e-9;\nconst double pi = acos(-1.0);\nconst long long N = 1e18;\nint n, m;\nchar a[55][55];\nset<int> col;\nmap<set<int>, bool> u;\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; ++j) cin >> a[i][j];\n  for (int i = 0; i < n; ++i) {\n    bool ok = 0;\n    set<int> cur;\n    for (int j = 0; j < m; ++j) {\n      if (a[i][j] == '#') {\n        if (col.count(j)) ok = 1;\n        cur.insert(j);\n        col.insert(j);\n      }\n    }\n    if (ok) {\n      if (!u.count(cur)) return cout << \"No\" << endl, 0;\n    } else\n      u[cur] = 1;\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool s[50][50];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      char in;\n      cin >> in;\n      s[i][j] = (in == '#');\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      for (int p = 0; p < n - i; p++) {\n        for (int q = 0; q < m - j; q++) {\n          int cnt = 0;\n          cnt += s[i][j] ? 1 : 0;\n          cnt += s[i + p][j] ? 1 : 0;\n          cnt += s[i][j + q] ? 1 : 0;\n          cnt += s[i + p][j + q] ? 1 : 0;\n          if (cnt != 3) {\n            continue;\n          } else {\n            cout << \"NO\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"YES\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint m, n;\nchar a[302][302];\nint main() {\n  scanf(\"%d%d\", &m, &n);\n  for (int i = 0; i < m; i++) scanf(\"%s\", &a[i]);\n  for (int i = 0; i < m; i++)\n    for (int j = i + 1; j < m; j++) {\n      bool khac_nhau = false, khac_rong = false;\n      for (int k = 0; k < n; k++) {\n        if (a[i][k] != a[j][k]) khac_nhau = true;\n        if (a[i][k] == '#' && a[j][k] == '#') khac_rong = true;\n      }\n      if (khac_nhau && khac_rong) {\n        printf(\"No\\n\");\n        return 0;\n      }\n    }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\n\nopTable = {}\nanswer = 'Yes'\nfor r in range(n):\n    row = input()\n    black = set()\n\n    for i in range(m):\n        if (row[i] == '#'):\n            black.add(i)\n            if (i not in opTable):\n                opTable[i] = black\n\n    for b in black:\n        diff = black.symmetric_difference(opTable[b])\n        if (len(diff) != 0):\n            answer = 'No'\n            break\n\n    if (answer == 'No'):\n        break\nprint(answer)"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint main() {\n  int n, m;\n  std::cin >> n >> m;\n  std::vector<std::vector<int>> matrix(n, std::vector<int>(m));\n  std::set<std::pair<size_t, size_t>> points;\n  for (size_t x = 0; x < n; ++x) {\n    for (size_t y = 0; y < m; ++y) {\n      char cell;\n      std::cin >> cell;\n      matrix[x][y] = (cell == '#' ? 1 : 0);\n      if (cell == '#') {\n        points.insert({x, y});\n      }\n    }\n  }\n  std::vector<bool> x_used(n, false);\n  std::vector<bool> y_used(m, false);\n  while (!points.empty()) {\n    auto element = points.begin();\n    std::vector<size_t> xs;\n    std::vector<size_t> ys;\n    for (size_t x = 0; x < n; ++x) {\n      if (matrix[x][element->second] == 1) {\n        if (x != element->first && x_used[x]) {\n          std::cout << \"No\" << std::endl;\n          return 0;\n        }\n        x_used[x] = true;\n        xs.push_back(x);\n      }\n    }\n    for (size_t y = 0; y < m; ++y) {\n      if (matrix[element->first][y] == 1) {\n        if (y != element->second && y_used[y]) {\n          std::cout << \"No\" << std::endl;\n          return 0;\n        }\n        y_used[y] = true;\n        ys.push_back(y);\n      }\n    }\n    for (size_t x : xs) {\n      for (size_t y : ys) {\n        auto el = points.find({x, y});\n        if (el == points.end()) {\n          std::cout << \"No\" << std::endl;\n          return 0;\n        } else {\n          points.erase({x, y});\n        }\n      }\n    }\n  }\n  std::cout << \"Yes\" << std::endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T1, typename T2>\ninline void chkmin(T1 &x, T2 y) {\n  if (y < x) x = y;\n};\ntemplate <typename T1, typename T2>\ninline void chkmax(T1 &x, T2 y) {\n  if (y > x) x = y;\n};\nint n, m;\nint a[51][51];\nbool interrow(int x1, int x2) {\n  for (int y = 0; y < m; ++y) {\n    if (a[x1][y] == a[x2][y] && a[x1][y]) return true;\n  }\n  return false;\n}\nbool intercol(int y1, int y2) {\n  for (int x = 0; x < n; ++x) {\n    if (a[x][y1] == a[x][y2] && a[x][y1]) return true;\n  }\n  return false;\n}\nbool eqrow(int x1, int x2) {\n  for (int y = 0; y < m; ++y) {\n    if (a[x1][y] != a[x2][y]) return false;\n  }\n  return true;\n}\nbool eqcol(int y1, int y2) {\n  for (int x = 0; x < n; ++x) {\n    if (a[x][y1] != a[x][y2]) return false;\n  }\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(NULL), cout.tie(NULL);\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    string second;\n    cin >> second;\n    for (int j = 0; j < m; ++j) {\n      a[i][j] = (second[j] == '.' ? 0 : 1);\n    }\n  }\n  bool ok = true;\n  for (int x = 0; x < n - 1; ++x) {\n    for (int x1 = x + 1; x1 < n; ++x1) {\n      if (interrow(x, x1)) {\n        ok &= eqrow(x, x1);\n      }\n    }\n  }\n  for (int y = 0; y < m - 1; ++y) {\n    for (int y1 = y + 1; y1 < m; ++y1) {\n      if (intercol(y, y1)) {\n        ok &= eqcol(y, y1);\n      }\n    }\n  }\n  cout << (ok ? \"YES\" : \"NO\") << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.PrintStream;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            boolean[][] black = new boolean[n][m];\n            String[] temp = new String[n];\n            for (int i = 0; i < n; i++) {\n                String str = in.next();\n                temp[i] = str;\n                for (int j = 0; j < m; j++) {\n                    black[i][j] = str.charAt(j) == '#';\n                }\n            }\n            boolean[] rColored = new boolean[n];\n            boolean[] cColored = new boolean[m];\n            for (int i = 0; i < n; i++) {\n                if (rColored[i]) continue;\n                for (int j = 0; j < m; j++) {\n                    if (black[i][j]) {\n                        if (cColored[j]) {\n                            System.out.println(\"end\");\n                            out.println(\"No\");\n                            return;\n                        }\n                        for (int k = i + 1; k < n; k++) {\n                            if (!black[k][j]) continue;\n                            if (!rColored[k] && !temp[i].equals(temp[k])) {\n                                out.println(\"No\");\n                                return;\n                            } else {\n                                rColored[k] = true;\n                            }\n                        }\n                        cColored[j] = true;\n                    }\n                }\n            }\n            out.println(\"Yes\");\n        }\n\n    }\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class B {\npublic static boolean identical(char []a,char []b)\n{\n\tint n=a.length;\n\tfor(int i=0;i<n;i++)\n\t\tif(a[i]!=b[i])\n\t\t\treturn false;\n\treturn true;\n}\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc=new Scanner(System.in);\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\tint n=sc.nextInt(),m=sc.nextInt();\n\t\tchar[][]s=new char [n][m];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ts[i]=sc.nextLine().toCharArray();\n\t\tfor(int i=0;i<n;i++)\n\t\t\tfor(int j=0;j<m;j++)\n\t\t\t{\n\t\t\t\tif(s[i][j]=='.')\n\t\t\t\t\tcontinue;\n\t\t\t\tfor(int k=i+1;k<n;k++)\n\t\t\t\t\tif(s[k][j]=='#')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!identical(s[i],s[k]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t\n\t\tSystem.out.println(\"Yes\");\n\t\tpw.close();\n\n\t}\n\tstatic class Scanner\n\t{\n\t\tBufferedReader br;\n\t\tStringTokenizer st;\n\t\tpublic Scanner(InputStream s)\n\t\t{\n\t\t\tbr=new BufferedReader(new InputStreamReader(s));\n\t\t}\n\t\tpublic String nextLine() throws IOException\n\t\t{\n\t\t\treturn br.readLine();\n\t\t}\n\t\tpublic String next() throws IOException\n\t\t{\n\t\t\twhile(st==null || !st.hasMoreTokens())\n\t\t\t\tst=new StringTokenizer(br.readLine());\n\t\t\treturn st.nextToken();\n\t\t}\n\t\tpublic int nextInt() throws IOException\n\t\t{\n\t\t\treturn Integer.parseInt(next());\n\t\t\t\n\t\t}\n\t\tpublic double nextDouble() throws IOException\n\t\t{\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\t\tpublic boolean ready() throws IOException\n\t\t{\n\t\t\treturn br.ready();\n\t\t}\n\t\tpublic long nextLong() throws IOException\n\t\t{\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint mod = 1000000007;\nstring a[100];\nint col[100];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < (int)(n); ++i) {\n    cin >> a[i];\n  }\n  for (int j = 0; j < (int)(m); ++j) {\n    col[j] = -1;\n  }\n  int cur = 0;\n  for (int i = 0; i < (int)(n); ++i) {\n    set<int> s;\n    for (int j = 0; j < (int)(m); ++j) {\n      if (a[i][j] == '#') {\n        s.insert(col[j]);\n      }\n    }\n    if (s.size() == 0) {\n      continue;\n    }\n    if (s.size() > 1) {\n      cout << \"No\\n\";\n      return 0;\n    }\n    int c = *s.begin();\n    if (c == -1) {\n      c = cur++;\n    }\n    for (int j = 0; j < (int)(m); ++j) {\n      if (a[i][j] == '#') {\n        col[j] = c;\n      }\n      if (a[i][j] == '.' && col[j] == c) {\n        cout << \"No\\n\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar table[100][100];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> table[i];\n  bool ans = true;\n  for (int i1 = 0; i1 < n && ans; i1++) {\n    for (int j1 = 0; j1 < m && ans; j1++) {\n      if (table[i1][j1] == '#') {\n        vector<int> indsCol;\n        for (int j2 = j1; j2 < m && ans; j2++) {\n          if (table[i1][j2] == '#') indsCol.push_back(j2);\n        }\n        vector<int> indsRow;\n        for (int i2 = i1; i2 < n && ans; i2++) {\n          if (table[i2][j1] == '#') indsRow.push_back(i2);\n        }\n        for (int i2 : indsRow) {\n          for (int j2 : indsCol) {\n            if (table[i2][j2] != '#')\n              ans = false;\n            else\n              table[i2][j2] = '.';\n          }\n        }\n        for (int i2 = 0; i2 < n && ans; i2++) {\n          for (int j2 = 0; j2 < m && ans; j2++) {\n            if (table[i2][j2] == '#') {\n              if (binary_search(indsRow.begin(), indsRow.end(), i2) ||\n                  binary_search(indsCol.begin(), indsCol.end(), j2))\n                ans = false;\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << (ans ? \"Yes\" : \"No\") << endl;\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "rows, cols = list(map(int , input().split()))\npainting = []\nfor row in range(rows):\n    painting.append(input().strip())\n\nps = set(painting)\nused = [False] * cols\nfor r in ps:\n    for c in range(cols):\n        if r[c] == '#':\n            if used[c]:\n                print('No')\n                exit()\n            else:\n                used[c] = True\nprint('Yes')\n\n\n\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class Codeforces472No2 {\n\n\tpublic static void main(String[] args) {\n\t\trun();\n\t}\n\t\n\tpublic static void run() {\n\t\tInputReader3 ir = new InputReader3(System.in);\n\t\tint n = ir.nextInt();\n\t\tint m = ir.nextInt();\n\t\tString s;\n\t\tboolean[][] board = new boolean[n][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ts = ir.next();\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tboard[i][j] = (s.charAt(j) == '#') ? true : false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tboolean[] rowDone = new boolean[n];\n\t\tboolean on, same;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (!rowDone[i]) {\n\t\t\t\trowDone[i] = true;\n\t\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\t\tif (!rowDone[j]) {\n\t\t\t\t\t\ton = false;\n\t\t\t\t\t\tsame = true;\n\t\t\t\t\t\tfor (int k = 0; k < m && (same || !on); k++) {\n\t\t\t\t\t\t\tif (board[i][k] != board[j][k]) {\n\t\t\t\t\t\t\t\tsame = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (board[i][k] && board[j][k]) {\n\t\t\t\t\t\t\t\ton = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (on && same) {\n\t\t\t\t\t\t\trowDone[j] = true;\n\t\t\t\t\t\t} else if (on && !same) {\n\t\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n}\n\nclass InputReader3 {\n\t\n\tpublic BufferedReader br;\n    public StringTokenizer st;\n    \n\tpublic InputReader3 (InputStream is) {\n        br = new BufferedReader(new InputStreamReader(is), 32768);\n        st = null;\n    }\n\t\n\tpublic String next() {\n        while (st == null || !st.hasMoreTokens()) {\n            try {\n                st = new StringTokenizer(br.readLine());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return st.nextToken();\n    }\n\t\n\tpublic int nextInt() {\n        return Integer.parseInt(next());\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long gcd(long long a, long long b) {\n  while (b) b ^= a ^= b ^= a %= b;\n  return a;\n}\nlong long lcm(long long a, long long b) { return a * b / gcd(a, b); }\nlong long bigmod(long long b, long long p, long long m) {\n  long long ans = 1;\n  b %= m;\n  if (!b) return 0;\n  while (p) {\n    if (p & 1) ans = (ans * b) % m;\n    p >>= 1;\n    b = (b * b) % m;\n  }\n  return ans;\n}\nlong long ncr(long long n, long long r) {\n  if (n < r) return 0ll;\n  long long ans = 1, k = min(n - r, r);\n  for (long long i = 1; i <= k; i++) ans = ans * (n - i + 1) / i;\n  return ans;\n}\nlong double eu(long long x1, long long y1, long long x2, long long y2) {\n  long long dx = abs(x1 - x2), dy = abs(y1 - y2);\n  return sqrt(dx * dx + dy * dy);\n}\nlong long ham(string s, string t) {\n  long long ans = 0;\n  for (long long i = 0; i < s.size(); i++) ans += (s[i] != t[i]);\n  return ans;\n}\nlong long ce(long long a, long long b) {\n  if (a % b == 0)\n    return a / b;\n  else\n    return a / b + 1;\n}\nbool cmp() { return 1; }\nvoid gen() {}\nlong long n, m;\nchar a[51][51];\nbool go(long long i, long long j) {\n  for (long long k = 0; k < n; k++) {\n    if (a[k][j] == '#') {\n      bool rej = 0;\n      for (long long l = 0; l < m; l++) {\n        if (a[k][l] != a[i][l]) {\n          rej = 1;\n          break;\n        }\n      }\n      if (rej) return 0;\n    }\n  }\n  return 1;\n}\nvoid solve() {\n  cin >> n >> m;\n  for (long long i = 0; i < n; i++) {\n    for (long long j = 0; j < m; j++) cin >> a[i][j];\n  }\n  for (long long i = 0; i < n; i++) {\n    for (long long j = 0; j < m; j++) {\n      if (a[i][j] == '#' && !go(i, j)) {\n        cout << \"No\\n\";\n        return;\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n}\nsigned main() {\n  gen();\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  long long t = 1;\n  while (t--) solve();\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nset<string> s;\nint main() {\n  int n;\n  cin >> n;\n  int m;\n  cin >> m;\n  for (int i = 0; i < n; i++) {\n    string t;\n    cin >> t;\n    s.insert(t);\n  }\n  for (int j = 0; j < m; j++) {\n    int kol = 0;\n    for (auto &t : s) {\n      if (t[j] == '#') ++kol;\n    }\n    if (kol > 1) {\n      cout << \"NO\";\n      return 0;\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class B {\n    String fileName = \"<name>\";\n\n    public boolean check(int row, Set<Integer> rowsRef) {\n        for (int curRow : rowsRef) {\n            if (!rows.get(curRow).equals(rows.get(row)))\n                return false;\n        }\n        return true;\n    }\n\n    public List<Set<Integer>> rows;\n    public List<Set<Integer>> cols;\n\n    public void solve() throws IOException {\n        int n = nextInt();\n        int m = nextInt();\n        boolean[][] map = new boolean[n][m];\n        rows = new ArrayList<>(n);\n        cols = new ArrayList<>(m);\n        for (int i = 0; i < n; i++) {\n            rows.add(new TreeSet<>());\n        }\n        for (int i = 0; i < m; i++) {\n            cols.add(new TreeSet<>());\n        }\n        for (int i = 0; i < n; i++) {\n            String tmp = nextToken();\n            for (int j = 0; j < tmp.length(); j++) {\n                map[i][j] = tmp.charAt(j) == '#';\n                if (map[i][j]) {\n                    rows.get(i).add(j);\n                    cols.get(j).add(i);\n                }\n            }\n        }\n        int row = 0;\n        for (Set<Integer> ref : rows) {\n            for (int col : ref) {\n                Set<Integer> rowsRef = cols.get(col);\n                if (rowsRef.size() > 1 && !check(row,rowsRef)){\n                    out.print(\"No\");\n                    return;\n                }\n            }\n            row++;\n        }\n        out.print(\"Yes\");\n    }\n\n    public void run() {\n        try {\n            br = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n\n            solve();\n\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    BufferedReader br;\n    StringTokenizer in;\n    PrintWriter out;\n\n    public String nextToken() throws IOException {\n        while (in == null || !in.hasMoreTokens()) {\n            in = new StringTokenizer(br.readLine());\n        }\n        return in.nextToken();\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(nextToken());\n    }\n\n    public double nextDouble() throws IOException {\n        return Double.parseDouble(nextToken());\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(nextToken());\n    }\n\n    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new B().run();\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar map1[51][51];\nbitset<51> map2[51];\nint n, m;\nbool x[51];\nbool y[51];\nint main() {\n  int s;\n  scanf(\"%d%d\", &m, &n);\n  for (register int i = 1; i <= m; i++) {\n    scanf(\"%s\", map1[i] + 1);\n    for (register int j = 1; j <= n; j++) {\n      if (map1[i][j] == '#') {\n        map2[i][j] = true;\n      }\n    }\n  }\n  for (register int i = 1; i <= m - 1; i++) {\n    for (register int j = i + 1; j <= m; j++) {\n      if ((map2[i] & map2[j]).count() && (map2[i] ^ map2[j]).count()) {\n        printf(\"No\");\n        return 0;\n      }\n    }\n  }\n  printf(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint matr[100][100];\nint r[100], c[100];\nset<int> rows[57];\nset<int> cols[57];\nint main() {\n  int n, m;\n  cin >> m >> n;\n  getchar();\n  for (int i = 0; i < m; i++) {\n    for (int j = 0; j < n; j++) {\n      matr[i][j] = -1;\n    }\n  }\n  for (int i = 0; i < m; i++) {\n    for (int j = 0; j < n; j++) {\n      int c = getchar();\n      if (c == '#') {\n        matr[i][j] = 1;\n      } else {\n        matr[i][j] = 0;\n      }\n    }\n    getchar();\n  }\n  for (int i = 0; i < m; i++) {\n    for (int j = 0; j < n; j++) {\n      if (matr[i][j] == 1) {\n        rows[i].insert(j);\n        cols[j].insert(i);\n      }\n    }\n  }\n  for (int i = 0; i < m; i++) {\n    set<int> colsa, rowsa;\n    if (r[i] == 1) {\n      continue;\n    }\n    rowsa.insert(i);\n    for (int num : rows[i]) {\n      colsa.insert(num);\n    }\n    bool flag = 1;\n    while (flag) {\n      flag = 0;\n      for (int num : colsa) {\n        for (int rw : cols[num]) {\n          int olds = rowsa.size();\n          rowsa.insert(rw);\n          if (rowsa.size() != olds) {\n            flag = 1;\n          }\n        }\n      }\n      for (int num : rowsa) {\n        for (int cl : rows[num]) {\n          int olds = colsa.size();\n          colsa.insert(cl);\n          if (colsa.size() != olds) {\n            flag = 1;\n          }\n        }\n      }\n      for (int n1 : rowsa) {\n        for (int n2 : colsa) {\n          if (matr[n1][n2] == 0) {\n            cout << \"No\\n\";\n            return 0;\n          }\n        }\n      }\n      for (int n1 : rowsa) {\n        if (r[n1]) {\n          cout << \"No\\n\";\n          return 0;\n        }\n      }\n      for (int n2 : colsa) {\n        if (c[n2]) {\n          cout << \"No\\n\";\n          return 0;\n        }\n      }\n    }\n    for (int n1 : rowsa) {\n      r[n1] = 1;\n    }\n    for (int n2 : colsa) {\n      c[n2] = 1;\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "def partial_match(r1, r2):\n    n = len(r1)\n    match_found = False\n    mismatch_found = False\n    for i in range(n):\n        if r1[i] == '#' and r2[i] == '#':\n            match_found = True\n        if r1[i] == '#' and r2[i] == '.':\n            mismatch_found = True\n        if r2[i] == '#' and r1[i] == '.':\n            mismatch_found = True\n    return match_found and mismatch_found\n\nn , m = tuple(map(int, input().split()))\nl = []\nfor i in range(n):\n    l.append(input().strip())\n\n\ninvalid = False\nfor i in range(n):\n    for j in range(n):\n        if partial_match(l[i], l[j]):\n            invalid = True\n            break\n\nif invalid:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvector<vector<int> > G1, G2;\nint Visted[55] = {};\nchar arr[55][55];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  G1.resize(n), G2.resize(m);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> arr[i][j];\n      if (arr[i][j] == '#') {\n        G1[i].push_back(j);\n        G2[j].push_back(i);\n      }\n    }\n  }\n  for (int i = 0; i < G1.size(); i++) {\n    memset(Visted, 0, sizeof Visted);\n    int numberof = 0;\n    for (int j = 0; j < G1[i].size(); j++) {\n      int number = G1[i][j];\n      if (j == 0) {\n        for (int z = 0; z < G2[number].size(); z++) {\n          Visted[G2[number][z]] = 1;\n          numberof++;\n        }\n      } else {\n        if (G2[number].size() == numberof) {\n          for (int z = 0; z < G2[number].size(); z++) {\n            if (Visted[G2[number][z]] == 0) {\n              cout << \"No\";\n              return 0;\n            }\n          }\n        } else {\n          cout << \"No\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  ;\n  int n, m;\n  cin >> n >> m;\n  vector<string> v;\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    v.push_back(s);\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (v[i][j] == '#') {\n        for (int k = 0; k < n; k++) {\n          if (k == i) continue;\n          if (v[k][j] == v[i][j] && v[i] != v[k]) {\n            cout << \"No\"\n                 << \"\\n\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\"\n       << \"\\n\";\n}\n"
        },
        {
            "language": 3,
            "solution": "(n, m) = map(int, input().split())\n\nd = {}\nfor x in range(n):\n    s = input()\n    for y in range(len(s)):\n        if s[y] == '#':\n            if not x in d:\n                d[x] = []\n            d[x].append(y)\n\nflag = True\nfor (x, y) in d.items():\n    for (i, j) in d.items():\n        if x != i and y != j:\n            for z in y:\n                if z in j:\n                    flag = False\n                    break\n\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class Solution {\n\tpublic final static int MOD = 1000000007;\n\tpublic static int count = 0;\n\tpublic static int dx[] = {-1,1,0,0};\n\tpublic static int dy[] = {0,0,-1,1};\n\tpublic static int max = 0;\n\tpublic static LinkedList<Integer> adj[];\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static void main(String[] args) throws IOException {\n\t\tInputReader scan = new InputReader(System.in);\n\t   \tOutputStream outputStream = System.out;\n\t   \tPrintWriter pw = new PrintWriter(outputStream);\n\t   \tStringBuilder sb = new StringBuilder();\n\t   \tint n = scan.nextInt();\n\t   \tint m = scan.nextInt();\n\t   \tchar grid[][] = new char[n][m];\n\t   \tfor(int i=0;i<n;i++)\n\t   \t\tgrid[i] = scan.next().toCharArray();\n\t   \tint i;\n\t   \tfor(i=0;i<n;i++)\n\t   \t{\n\t   \t\tint count = 0;\n\t   \t\tint j;\n\t   \t\tfor(j=0;j<m;j++)\n\t   \t\t\tif(grid[i][j]=='#')\n\t   \t\t\t\tcount++;\n\t   \t\tfor(j=0;j<n;j++)\n\t   \t\t{\n\t   \t\t\tint c = 0;\n\t   \t\t\tfor(int k=0;k<m;k++)\n\t   \t\t\t\tif(grid[i][k]=='#' && grid[j][k]=='#')\n\t   \t\t\t\t\tc++;\n\t   \t\t\tif(c>0 && c!=count)\n\t   \t\t\t\tbreak;\n\t   \t\t}\n\t   \t\tif(j!=n)\n\t   \t\t\tbreak;\n\t   \t}\n\t   \tif(i==n)\n\t   \t\tSystem.out.println(\"Yes\");\n\t   \telse\n\t   \t\tSystem.out.println(\"No\");\n\t   \tpw.close();\n\t}\n\tpublic static int dfs(int node,int parent,int arr[],int k)\n\t{\n\t\tint max = 0,sec_max = 0;\n\t\tfor(int i=0;i<adj[node].size();i++)\n\t\t{\n\t\t\tif(adj[node].get(i)!=parent){\n\t\t\t\tint t = dfs(adj[node].get(i),node,arr,k);\n\t\t\t\tif(max<t)\n\t\t\t\t{\n\t\t\t\t\tsec_max = max;\n\t\t\t\t\tmax = t;\n\t\t\t\t}\n\t\t\t\telse if(sec_max<t)\n\t\t\t\t\tsec_max = t;\n\t\t\t}\n\t\t}\n\t\tif(arr[node]%k==0){\n\t\t\tcount = Math.max(count, sec_max+max+1);\n\t\t\treturn sec_max+max+1;\n\t\t}\n\t\telse\n\t\t\treturn 0;\n\t}\n\tstatic class Pair{\n\t\tint i,j,p;\n\t\tPair(int a,int b,int parent)\n\t\t{\n\t\t\ti = a;\n\t\t\tj = b;\n\t\t\tp = parent;\n\t\t}\n\t}\n\tpublic static void buildTree(int arr[],int tree[],int node,int start,int end)\n\t{\n\t\tif(start==end)\n\t\t{\n\t\t\ttree[node] = arr[start];\n\t\t\treturn;\n\t\t}\n\t\tint mid = (start+end)/2;\n\t\tbuildTree(arr,tree,2*node,start,mid);\n\t\tbuildTree(arr,tree,2*node+1,mid+1,end);\n\t\ttree[node] = tree[2*node]+tree[2*node+1];\n\t}\n\tpublic static void update(int arr[],int tree[],int node,int inx,int val,int start,int end)\n\t{ \n\t\tif(start==end)\n\t\t{\n\t\t\ttree[node] = val;\n\t\t\tarr[inx] = val;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (start+end)/2;\n\t\tif(inx<=mid)\n\t\t\tupdate(arr,tree,2*node,inx,val,start,mid);\n\t\telse\n\t\t\tupdate(arr,tree,2*node+1,inx,val,mid+1,end);\n\t\ttree[node] = tree[2*node]+tree[2*node+1];\n\t}\n\tpublic static int query(int tree[],int node,int l,int r,int start,int end)\n\t{\n\t\tif(r<start || l>end)\n\t\t\treturn 0;\n\t\tif(l<=start && end<=r)\n\t\t\treturn tree[node];\n\t\tint mid = (start+end)/2;\n\t\tint ans1 = query(tree,2*node,l,r,start,mid);\n\t\tint ans2 = query(tree,2*node+1,l,r,mid+1,end);\n\t\treturn ans1+ans2;\n\t}\n\tpublic static void merge(int arr[],int start,int mid,int end)\n\t{\n\t\tint l = start, r = mid+1;\n\t\tint temp[] = new int[end-start+1];\n\t\tint k = 0;\n\t\tfor(int i=start;i<=end;i++)\n\t\t{\n\t\t\tif(l>mid)\n\t\t\t\ttemp[k++] = arr[r++];\n\t\t\telse if(r>end)\n\t\t\t\ttemp[k++] = arr[l++];\n\t\t\telse if(arr[l]<=arr[r])\n\t\t\t\ttemp[k++] = arr[l++];\n\t\t\telse{\n\t\t\t\ttemp[k++] = arr[r++];\n\t\t\t\tcount+=(mid-l+1);\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<k;i++)\n\t\t\tarr[start++] = temp[i];\n\t}\n\tpublic static void mergeSort(int arr[],int l,int r)\n\t{\n\t\tif(l<r){\n\t\t\tint mid = (l+r)/2;\n\t\t\tmergeSort(arr,l,mid);\n\t\t\tmergeSort(arr,mid+1,r);\n\t\t\tmerge(arr,l,mid,r);\n\t\t}\n\t}\n\tpublic static void sieve(int spf[],int n)\n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tspf[i] = i;\n\t\tfor(int i=2;i*i<=n;i++)\n\t\t{\n\t\t\tif(spf[i]==i)\n\t\t\t{\n\t\t\t\tfor(int j=i;j<=n;j+=i)\n\t\t\t\t\tif(spf[j]==j)\n\t\t\t\t\t\tspf[j] = i;\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void factors(int n,int spf[],ArrayList<Integer> factors)\n\t{\n\t\tint pre = 0;\n\t\twhile(n!=1)\n\t\t{\n\t\t\tint temp = spf[n];\n\t\t\tif(temp!=pre)\n\t\t\t{\n\t\t\t\tfactors.add(temp);\n\t\t\t\tpre = temp;\n\t\t\t}\n\t\t\tn/=temp;\n\t\t}\n\t}\n\tpublic static boolean isPrime(int n)\n\t{\n\t\tif(n==0 || n==1)\n\t\t\treturn false;\n\t\tint limit = (int)Math.sqrt(n);\n\t\tfor(int i=2;i<=limit;i++)\n\t\t{\n\t\t\tif(n%i==0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static long pow(long a,long b,int m)\n\t{\n\t\tlong result = 1;\n\t\twhile(b>0)\n\t\t{\n\t\t\tif(b%2==1)\n\t\t\t\tresult = ((result%m)*(a%m))%m;\n\t\t\ta = ((a%m)*(a%m))%m;\n\t\t\tb/=2;\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static long mulinv(long a,long m)\n\t{\n\t\tlong arr[] = new long[2];\n\t\tlong gcd = gcdExtended(a,m,arr);\n\t\tif(gcd==1)\n\t\t\treturn (arr[0]%m+m)%m;\n\t\telse\n\t\t\treturn Integer.MAX_VALUE;\n\t}\n\tpublic static long gcdExtended(long a,long b,long arr[])\n\t{\n\t\tif (a == 0)\n\t    {\n\t        arr[0] = 0;\n\t        arr[1] = 1;\n\t        return b;\n\t    }\n\t    long gcd = gcdExtended(b%a, a, arr);\n\t    long temp = arr[0];\n\t    arr[0] = arr[1] - (b/a) * arr[0];\n\t    arr[1] = temp;\n\t    return gcd;\n\t}\n\tpublic static long kadane(int items[])\n\t{\n\t\tint n = items.length;\n\t\tlong max = (long)items[0];\n\t\tlong curr_max = (long)items[0];\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tcurr_max = Math.max((long)curr_max+items[i], items[i]);\n\t\t\tmax = Math.max(max, curr_max);\n\t\t}\n\t\treturn max;\n\t}\n\tpublic static long gcd(int a,int b)\n\t{\n\t\tif(a%b==0){\n\t\t\treturn pow(2,a-1,MOD);\n\t\t}\n\t\tlong ans = gcd(b,a%b);\n\t\tint len = 0;\n\t\tlong ans1 = 0;\n\t\twhile(len<a)\n\t\t{\n\t\t\tif(a-len-b<0)\n\t\t\t{\n\t\t\t\tans = ans>>(len+b-a);\n\t\t\t\tans1 = (ans1+ans)%MOD;\n\t\t\t}\n\t\t\telse\n\t\t\t\tans1 = (ans1+(ans*pow(2,a-b-len,MOD))%MOD)%MOD;\n\t\t\tlen+=b;\n\t\t}\n\t\tSystem.out.println(ans1);\n\t\treturn ans1;\n\t}\n\tpublic static int LCS(String s1,String s2) //Longest common subsequence\n\t{\n\t\tint n = s1.length();\n\t\tint m = s2.length();\n\t\tint lcs[][] = new int[n+1][m+1];\n\t\tfor(int i=0;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=0;j<=m;j++)\n\t\t\t{\n\t\t\t\tif(i==0 || j==0)\n\t\t\t\t\tlcs[i][j] = 0;\n\t\t\t\telse if(s1.charAt(i-1)==s2.charAt(j-1))\n\t\t\t\t\tlcs[i][j] = lcs[i-1][j-1] + 1;\n\t\t\t\telse\n\t\t\t\t\tlcs[i][j] = Math.max(lcs[i][j-1], lcs[i-1][j]);\n\t\t\t}\n\t\t}\n\t\treturn lcs[n][m];\n\t}\n\tstatic class FastReader\n    {\n        BufferedReader br;\n        StringTokenizer st;\n \n        public FastReader()\n        {\n            br = new BufferedReader(new\n                     InputStreamReader(System.in));\n        }\n \n        String next()\n        {\n            while (st == null || !st.hasMoreElements())\n            {\n                try\n                {\n                    st = new StringTokenizer(br.readLine());\n                }\n                catch (IOException  e)\n                {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n \n        int nextInt()\n        {\n            return Integer.parseInt(next());\n        }\n \n        long nextLong()\n        {\n            return Long.parseLong(next());\n        }\n \n        double nextDouble()\n        {\n            return Double.parseDouble(next());\n        }\n \n        String nextLine()\n        {\n            String str = \"\";\n            try\n            {\n                str = br.readLine();\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n}\nclass InputReader {\n    public BufferedReader reader;\n\tpublic StringTokenizer tokenizer;\n    public InputReader(InputStream inputstream) {\n        reader = new BufferedReader(new InputStreamReader(inputstream));\n\t\ttokenizer = null;\n\t}\n    public String nextLine(){\n        String fullLine=null;\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t    try {\n\t\t        fullLine=reader.readLine();\n\t\t    } catch (IOException e) {\n    \t\t\tthrow new RuntimeException(e);\n    \t\t\t}\n        \t\treturn fullLine;\n        }\n\t\treturn fullLine;\n\t}\n    public String next() {\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            try {\n    \t\t\ttokenizer = new StringTokenizer(reader.readLine());\n    \t\t} catch (IOException e) {\n        \t\tthrow new RuntimeException(e);\n            }\n        }\n        return tokenizer.nextToken();\n    }\n    public long nextLong() {\n        return Long.parseLong(next());\n\t}\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n}"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\ns = [input() for _ in range(n)]\nl = []\n \nfor i in range(n):\n    se = set()\n    \n    for j in range(m):\n        if s[i][j]=='#':\n            se.add(j)\n \n    for li in l:\n        if len(se&li)!=0 and se!=li:\n            print('No')\n            exit()\n    \n    l.append(se)\n    \nprint('Yes')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring a[51];\nbool sameRow(int x, int y) { return a[x] == a[y]; }\nbool solve(int n, int m) {\n  bool ans = true;\n  int i, j;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j <= m; j++) {\n      if (a[i][j] == '.') continue;\n      int k = i + 1;\n      while (k < n) {\n        if (a[k][j] == '#') ans &= sameRow(i, k);\n        k++;\n      }\n    }\n  }\n  return ans;\n}\nint main() {\n  int n, m;\n  int i;\n  cin >> n >> m;\n  for (i = 0; i < n; i++) cin >> a[i];\n  bool ans = solve(n, m);\n  if (ans)\n    cout << \"Yes\\n\";\n  else\n    cout << \"No\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstatic const int MAXN = 53;\nstatic int n, m;\nstatic bool a[MAXN][MAXN];\nstatic long long b[MAXN];\nint main() {\n  cin >> n >> m;\n  getchar();\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j <= m; ++j) a[i][j] = (getchar() == '#');\n  for (int i = 0; i < n - 1; ++i)\n    for (int j = i + 1; j < n; ++j) {\n      bool all_same = true, no_inter = true;\n      for (int k = 0; k < m; ++k) {\n        if (a[i][k] != a[j][k]) all_same = false;\n        if (a[i][k] && a[j][k]) no_inter = false;\n      }\n      if (!all_same && !no_inter) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\npublic class CF {\n\n    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        String[] tab = new String[n];\n        for (int i = 0; i < n; i++) {\n            tab[i] = in.next();\n        }\n        ArrayList<Integer> rows = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            rows.add(i);\n        }\n        ArrayList<Integer> cols = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            cols.add(i);\n        }\n        for (int i = 0; i < n; i++) {\n            if (rows.contains(i)) {\n                for (int j = 0; j < n; j++) {\n                    if (tab[i].equals(tab[j])) {\n                        if (rows.contains(j)) {\n                            rows.remove((Integer) j);\n                        } else {\n                            out.println(\"No\");\n                            out.close();\n                            return;\n                        }\n                    }\n                }\n                for (int j = 0; j < tab[i].length(); j++) {\n                    if (tab[i].charAt(j) == '#') {\n                        if (cols.contains(j)) {\n                            cols.remove((Integer) j);\n                        } else {\n                            out.println(\"No\");\n                            out.close();\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n        out.println(\"Yes\");\n        out.close();\n    }\n\n    static class FastScanner {\n\n        private BufferedReader in;\n        private String[] line;\n        private int index;\n        private int size;\n\n        public FastScanner(InputStream in) throws IOException {\n            this.in = new BufferedReader(new InputStreamReader(in));\n            init();\n        }\n\n        public FastScanner(String file) throws FileNotFoundException {\n            this.in = new BufferedReader(new FileReader(file));\n        }\n\n        private void init() throws IOException {\n            line = in.readLine().split(\" \");\n            index = 0;\n            size = line.length;\n        }\n\n        public int nextInt() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Integer.parseInt(line[index++]);\n        }\n\n        public long nextLong() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Long.parseLong(line[index++]);\n        }\n\n        public float nextFloat() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Float.parseFloat(line[index++]);\n        }\n\n        public double nextDouble() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return Double.parseDouble(line[index++]);\n        }\n\n        public String next() throws IOException {\n            if (index == size) {\n                init();\n            }\n            return line[index++];\n        }\n\n        public String nextLine() throws IOException {\n            if (index == size) {\n                init();\n            }\n            StringBuilder sb = new StringBuilder();\n            for (int i = index; i < size; i++) {\n                sb.append(line[i]).append(\" \");\n            }\n            return sb.toString();\n        }\n\n        private int[] nextIntArray(int n) throws IOException {\n            int[] tab = new int[n];\n            for (int i = 0; i < tab.length; i++) {\n                tab[i] = nextInt();\n            }\n            return tab;\n        }\n\n    }\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 55;\nchar mas[maxn][maxn];\nbool used1[maxn];\nbool used2[maxn];\ninline int solve() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> mas[i][j];\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    vector<int> ids;\n    for (int j = 0; j < m; ++j) {\n      if (mas[i][j] == '#') ids.push_back(j);\n    }\n    if (ids.empty()) continue;\n    if (used1[i]) {\n      cout << \"No\";\n      return 0;\n    }\n    for (int k = i + 1; k < n; ++k) {\n      bool isneed = false;\n      for (auto l : ids) {\n        if (mas[k][l] == '#') isneed = true;\n      }\n      if (isneed) {\n        if (used1[k]) {\n          cout << \"No\";\n          return 0;\n        }\n        used1[k] = true;\n        for (auto l : ids) {\n          if (mas[k][l] == '.') {\n            cout << \"No\";\n            return 0;\n          } else {\n            mas[k][l] = '.';\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\n\nimport java.io.*;\nimport java.util.*;\n\n/**\n *  \n * @author akashvermaofskt\n * Coding is love <3!\n */\n\npublic class B {\n    public static void main(String args[]) {\n        try {\n            int n=nextInt();\n            int m=nextInt();\n            \n            int A[][]=new int[n][m];\n            \n            ArrayList<TreeSet<Integer>> al=new ArrayList<>();\n            ArrayList<TreeSet<Integer>> al2=new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                al.add(new TreeSet<Integer>());\n            }\n            for (int i = 0; i < m; i++) {\n                al2.add(new TreeSet<Integer>());\n            }\n            \n            for (int i = 0; i < n; i++) {\n                String s=next();\n                for (int j = 0; j < m; j++) {\n                    if(s.charAt(j)=='.')\n                        A[i][j]=0;\n                    else {\n                        A[i][j]=1;\n                        al.get(i).add(j);\n                        al2.get(j).add(i);\n                    }\n                        \n                            \n                }\n            }\n            \n            int flag=0;\n//            System.out.println(\"\"+al.toString());\n//            System.out.println(\"\"+al2.toString());\n            \n            for (int i = 0; i < n; i++) {\n                TreeSet<Integer> ts=al.get(i);\n                for (int j : ts) {\n                    TreeSet<Integer> ts2=al2.get(j);\n                    \n                    TreeSet<Integer> ts3=al.get(ts2.first());\n                    for (int k :ts2) {\n                        if(!al.get(k).equals(ts3)){\n                            //System.out.println(ts3+\" \"+al.get(k));\n                            flag=1;\n                            break;\n                        }\n                    }\n                    \n                    if(flag==1)break;\n                }\n                if(flag==1)break;\n            }\n            \n            if(flag==1){\n                bw.write(\"No\\n\");\n            }else\n                bw.write(\"Yes\\n\");\n            \n            bw.flush();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    //TEMPLATE\n    \n    //******************************************************************************\n    // Fast I/O \n    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n    static StringTokenizer st = null;\n    static int mod=1000000007;\n\n    static String next() {\n        while (st == null || !st.hasMoreElements()) {\n            try {\n                st = new StringTokenizer(br.readLine());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return st.nextToken();\n    }\n    \n    static int nextInt() {\n        return Integer.parseInt(next());\n    }\n    \n    static long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    static double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    static int b_search(int l,int r,int A[],int key){\n        int ans=0;\n        l=0;r=1000000000;\n\n        while(l<r){\n            //System.out.println(ans);\n            ans=(l+r)/2;\n            long temp=0;\n            for (int i = 0; i < A.length; i++) {\n                temp+=(long)Math.ceil((double)A[i]/(double)ans);\n            }\n\n            if(temp<=key){\n                r=ans;\n            }\n            else{\n                l=ans+1;\n                ans=r;\n            }\n        }\n\n        return ans;\n    }\n\n//******************************************************************************\n//Modulo and FastExpo\n    static long modInverse(long a)\n    {\n       return power(a, mod - 2,mod);\n    }\n     \n    // To compute x^y under modulo m\n    static long power(long x, long y, int p)\n    {\n        // Initialize result\n        long res = 1;     \n        // Update x if it is more  \n        // than or equal to p\n        x = x % p; \n     while (y > 0)\n        {\n            // If y is odd, multiply x\n            // with result\n            if((y & 1)==1)\n                res = (res * x) % p;\n            // y must be even now\n            // y = y / 2\n            y = y >> 1; \n            x = (x * x) % p; \n        }\n        return res;\n    }\n//******************************************************************************\n//GCD\n    static long gcd(long a, long b)\n    {\n        if (a == 0)\n            return b;\n         \n        return gcd(b%a, a);\n    }\n\n    //******************************************************************************\n    // Useful user datatype\n    \n    static class Pair{\n        public int first;\n        public int second;\n\n        public Pair(int first, int second){\n            this.first = first;\n            this.second = second;\n            }\n        @Override\n        public String toString() {\n        return \"Pair [first=\" + first + \", second=\" + second + \"]\";\n        }\n    }\n\n    static Comparator csort=new Comparator<Pair>(){\n                    public int compare(Pair a, Pair b) {\n                        if(a.first < b.first)\n                        return -1;\n                        else if (a.first > b.first)\n                        return 1;\n                        else\n                        return 0;\n                    }\n                };\n\n    //******************************************************************************\n    //N choose K\n    public static long choose(long total, long choose){\n        if(total < choose)\n            return 0;\n        if(choose == 0 || choose == total)\n            return 1;\n        return choose(total-1,choose-1)+choose(total-1,choose);\n    }\n\n    //******************************************************************************\n    //Permutations\n    // simply prints all permutation - to see how it works\n    private static void printPermutations( Comparable[] c ) {\n            System.out.println( Arrays.toString( c ) );\n            while ( ( c = nextPermutation( c ) ) != null ) {\n                    System.out.println( Arrays.toString( c ) );\n            }\n    }\n\n    // modifies c to next permutation or returns null if such permutation does not exist\n    private static Comparable[] nextPermutation( final Comparable[] c ) {\n            // 1. finds the largest k, that c[k] < c[k+1]\n            int first = getFirst( c );\n            if ( first == -1 ) return null; // no greater permutation\n            // 2. find last index toSwap, that c[k] < c[toSwap]\n            int toSwap = c.length - 1;\n            while ( c[ first ].compareTo( c[ toSwap ] ) >= 0 )\n                    --toSwap;\n            // 3. swap elements with indexes first and last\n            swap( c, first++, toSwap );\n            // 4. reverse sequence from k+1 to n (inclusive) \n            toSwap = c.length - 1;\n            while ( first < toSwap )\n                    swap( c, first++, toSwap-- );\n            return c;\n    }\n\n    // finds the largest k, that c[k] < c[k+1]\n    // if no such k exists (there is not greater permutation), return -1\n    private static int getFirst( final Comparable[] c ) {\n            for ( int i = c.length - 2; i >= 0; --i )\n                    if ( c[ i ].compareTo( c[ i + 1 ] ) < 0 )\n                            return i;\n            return -1;\n    }\n\n    // swaps two elements (with indexes i and j) in array \n    private static void swap( final Comparable[] c, final int i, final int j ) {\n            final Comparable tmp = c[ i ];\n            c[ i ] = c[ j ];\n            c[ j ] = tmp;\n    }\n    //******************************************************************************\n    // DSU\n    //Maintain an Array A with N elements and Array size for size of each set, intialize A[i]=i and size[i]=1\n\n    static int root(int A[],int i){\n        while(A[i]!=i){\n            A[i]=A[A[i]];\n            i=A[i];\n        }\n        return i;\n    }\n\n    static boolean find(int A[],int a,int b){\n        if(root(A,a)==root(A,b))return true;\n        else return false;\n    }\n\n    static void union(int A[],int size[],int a,int b){\n        int ra=root(A,a);\n        int rb=root(A,b);\n\n        if(ra==rb)return;\n\n        if(size[ra]<size[rb]){\n            A[ra]=A[rb];\n            size[rb]+=size[ra];\n        }else{\n            A[rb]=A[ra];\n            size[ra]+=size[rb];\n        }\n    }\n\n    //**************************************************************************\n    //BinarySearch\n    /* binary search for 5:\n                v-- lower bound\n         1 2 3 4 5 5 5 6 7 9\n                      ^-- upper bound\n        \n            binary search for 8\n                        v-- lower bound\n       1 2 3 4 5 5 5 6 7 9\n                        ^-- upper bound\n    */\n    //For finding greater than \n    static int upper_bound(int A[],int key){\n        int first = 0;\n        int last = A.length;\n        int mid;\n\n        while (first < last) {\n            mid =first+(last - first)/2; \n\n            if (A[mid] <= key)  \n                first = mid + 1; \n            else \n                last = mid;\n        }\n\n        return first;\n    }\n    \n    //For finding greater than equal to\n    static int lower_bound(int A[],int key){\n        int first = 0;\n        int last = A.length;\n        int mid=0;\n        \n        while (first < last) {\n            mid = first + ((last - first) >> 1); \n            if (A[mid] < key)  \n                first = mid + 1; \n            else \n                last = mid;\n        }\n        \n        return first;\n    }\n    //**************************************************************************\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nvoid solve() {\n  ll n, m;\n  cin >> n >> m;\n  string s[50];\n  bool check[50];\n  for (ll i = 0; i < n; i++) {\n    cin >> s[i];\n    check[i] = true;\n  }\n  vector<vector<ll> > c;\n  for (ll i = 0; i < m; i++) {\n    vector<ll> temp;\n    c.push_back(temp);\n    for (ll j = 0; j < n; j++) {\n      if (s[j][i] == '#' && check[j] == true) {\n        c[i].push_back(j);\n        check[j] == false;\n      }\n    }\n  }\n  ll flag = 0;\n  for (ll j = 0; j < m; j++) {\n    for (ll i = 1; i < c[j].size(); i++) {\n      if (s[c[j][i]] != s[c[j][i - 1]]) {\n        flag = 1;\n        break;\n      }\n    }\n    if (flag == 1) {\n      break;\n    }\n  }\n  if (flag == 1)\n    cout << \"NO\\n\";\n  else\n    cout << \"YES\\n\";\n}\nint main() {\n  ll t = 1;\n  while (t--) {\n    solve();\n  }\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.util.HashSet;\n\npublic class Main4 {\n\n\tpublic Main4() throws Exception {\n\n\t\tBufferedWriter out;\n\t\ttry {\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new BufferedWriter(new OutputStreamWriter(System.out));\n\n\t\t\tString s[] = in.readLine().split(\" \");\n\t\t\tint n =  Integer.parseInt(s[0]);\n\t\t\tint m =  Integer.parseInt(s[1]);\n\t\t\t\n\t\t\tHashSet<Integer> set[] = new HashSet[n];\n\t\t\t\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tset[i] = new HashSet<>();\n\t\t\t\tString s1 = in.readLine();\n\t\t\t\tfor(int j=0; j<m; j++){\n\t\t\t\t\tif(s1.charAt(j) == '#')\n\t\t\t\t\t\tset[i].add(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint flag = 1;\n\t\t\touter:for(int i=0; i<n-1; i++){\n\t\t\t\tfor(int j=i+1; j<n; j++){\n\t\t\t\t\tHashSet<Integer> cs = new HashSet<>(set[i]);\n\t\t\t\t\tHashSet<Integer> ns = new HashSet<>(set[j]);\n\t\t\t\t\tboolean res = cs.equals(ns);\n\t\t\t\t\tcs.removeAll(ns);\n\t\t\t\t\tres = res || cs.equals(set[i]);\n\t\t\t\t\t\n\t\t\t\t\tif(!res){\n\t\t\t\t\t\tflag = 0;\n\t\t\t\t\t\tbreak outer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag == 0)\n\t\t\t\tout.write(\"No\");\n\t\t\telse\n\t\t\t\tout.write(\"Yes\");\n\n\t\t\tout.flush();\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew Main4();\n\t}\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tlong[] masks = new long[n];\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tString s = in.next();\n\t\t\tlong pow = 1l << (m-1);\n\t\t\tlong mask = 0;\n\t\t\tfor (char c : s.toCharArray()) {\n\t\t\t\tmask += 1l*pow*(c == '#'? 1 : 0);\n\t\t\t\tpow /= 2;\n\t\t\t}\n\t\t\t// System.out.print(mask + \" \");\n\t\t\tmasks[i] = mask;\n\t\t}\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tfor (int j = i + 1; j < n; ++j) {\n\t\t\t\tif (((masks[i] & masks[j]) != 0) && (masks[i] != masks[j])) {\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// System.out.println(1<<52);\n\t\tSystem.out.println(\"Yes\");\n\t}\n}"
        },
        {
            "language": 4,
            "solution": "\nimport java.lang.reflect.Array;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport java.util.Vector;\n\nimport javax.imageio.event.IIOReadWarningListener;\n\npublic class Main {\n\t\n\t\n\tstatic char ar[][] = new char[55][55];\n\tstatic Set<Integer> x =new HashSet<>();\n\tstatic Set<Integer> y = new HashSet<>();\n\tstatic int n,m;\n\tstatic void dfs(int xx,int yy)\n\t{\n\t\tx.add(xx);\n\t\ty.add(yy);\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\t\tif(ar[xx][i]=='#')\n\t\t\t{\n\t\t\t\tar[xx][i]='$';\n\t\t\t\tdfs(xx, i);\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(ar[i][yy]=='#')\n\t\t\t{\n\t\t\t\tar[i][yy]='$';\n\t\t\t\tdfs(i, yy);\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tn=scanner.nextInt();\n\t\tm=scanner.nextInt();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tar[i]=scanner.next().toCharArray();\n\t\t}\n\t\tboolean f=false;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=0;j<m;j++)\n\t\t\t{\n\t\t\t\tif(ar[i][j]=='#')\n\t\t\t\t{\n\t\t\t\t\tar[i][j]='$';\n\t\t\t\t\tx.clear();y.clear();\n\t\t\t\t\tdfs(i,j);\n\t\t\t\t\tfor (int xx : x) {\n\t\t\t\t\t\tfor (int yy : y) {\n\t\t\t\t\t\t\tif(ar[xx][yy]=='.')\n\t\t\t\t\t\t\t\tf=true;\n\t\t\t\t\t\t\tif(f)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(f)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(f)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(f)\n\t\t\t\tbreak;\n\t\t}\n\t\tif(f) System.out.println(\"No\");\n\t\telse System.out.println(\"Yes\");\n\t}\n\t\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  char cell[51][51];\n  for (int row = 1; row <= n; row++) {\n    string cells;\n    cin >> cells;\n    for (int col = 1; col <= m; col++) {\n      cell[row][col] = cells[col - 1];\n    }\n  }\n  bool achieve = true;\n  set<int> covered_rows;\n  set<int> covered_cols;\n  for (int row = 1; row <= n && achieve; row++) {\n    for (int col = 1; col <= m && achieve; col++) {\n      if (cell[row][col] == '#') {\n        if (covered_rows.find(row) == covered_rows.end() &&\n            covered_cols.find(col) == covered_cols.end()) {\n          vector<int> curr_cols;\n          for (int c = col; c <= m && achieve; c++) {\n            if (cell[row][c] == '#') {\n              if (covered_cols.find(c) != covered_cols.end()) {\n                achieve = false;\n                break;\n              }\n              curr_cols.push_back(c);\n              covered_cols.insert(c);\n            }\n          }\n          vector<int> curr_rows;\n          for (int r = row; r <= n && achieve; r++) {\n            if (cell[r][col] == '#') {\n              if (covered_rows.find(r) != covered_rows.end()) {\n                achieve = false;\n              }\n              curr_rows.push_back(r);\n              covered_rows.insert(r);\n            }\n          }\n          for (vector<int>::iterator row_itr = curr_rows.begin();\n               row_itr != curr_rows.end() && achieve; row_itr++) {\n            for (vector<int>::iterator col_itr = curr_cols.begin();\n                 col_itr != curr_cols.end(); col_itr++) {\n              char color = cell[*row_itr][*col_itr];\n              cell[*row_itr][*col_itr] = (color == '#') ? '.' : '#';\n            }\n          }\n        } else {\n          achieve = false;\n        }\n      }\n    }\n  }\n  if (achieve) {\n    cout << \"Yes\";\n  } else {\n    cout << \"No\";\n  }\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\nimport java.lang.*;\n    public class templ {\n        public static int a[]=new int[1000000];\n    int binarySearch(long arr[], int l, int r, long x)\n    {\n        if (r >= l)\n        {\n            int mid = l + (r - l)/2;\n            if (arr[mid] == x)\n            return mid;\n            if (arr[mid] > x) \n            return binarySearch(arr, l, mid-1, x);\n            return binarySearch(arr, mid+1, r, x);\n        }\n        return -1;\n    }\n    int partition(int arr[],int a[], int low, int high)\n    {\n        int pivot = arr[high]; \n        int i = (low-1);\n        for (int j=low; j<high; j++)\n        {\n            if (arr[j] <= pivot)\n            {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }\n        }\n        int temp = arr[i+1];\n        arr[i+1] = arr[high];\n        arr[high] = temp;\n        temp = a[i+1];\n        a[i+1] = a[high];\n        a[high] = temp;\n \n        return i+1;\n    }\n    void sort(int arr[],int a[], int low, int high)\n    {\n        if (low < high)\n        {\n            int pi = partition(arr,a, low, high);\n            sort(arr, a,low, pi-1);\n            sort(arr,a, pi+1, high);\n        }\n    }\n    public static void main(String[] args) throws FileNotFoundException {\n     try\n     {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        templ ob=new templ();\n        int n=in.nextInt();\n        int m=in.nextInt();\n        String s[]=new String[n];\n        int q=0;\n        s[q]=in.nextLine();\n        q++;\n        for(int i=1;i<n;i++)\n        {\n            int p=0;\n            String s1=in.nextLine();\n            for(int j=0;j<i;j++)\n            {\n                if(s1.equals(s[j]))\n                {\n                    p=1;\n                    break;\n                }\n            }\n            if(p==0)\n            {\n                s[q]=s1;\n                q++;\n            }\n        }\n        int a[]=new int[m];\n        for(int i=0;i<m;i++)\n            a[i]=0;\n        int y=0;\n        for(int i=0;i<q;i++)\n        {\n            for(int j=0;j<s[i].length();j++)\n            {\n                char c=s[i].charAt(j);\n                if(c=='#')\n                {\n                    a[j]++;\n                }\n            }\n        }\n        for(int i=0;i<m;i++)\n        {\n            if(a[i]>1)\n            {\n                y=1;\n                break;\n            }\n        }\n        if(y==1)\n            out.println(\"No\");\n        else\n            out.println(\"Yes\");\n        out.close();\n    }\n        catch(Exception e){\n        return;\n    }\n    }\n    static class InputReader {\n\n        private final InputStream stream;\n        private final byte[] buf = new byte[8192];\n        private int curChar, snumChars;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (snumChars == -1)\n                throw new InputMismatchException();\n            if (curChar >= snumChars) {\n                curChar = 0;\n                try {\n                    snumChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (snumChars <= 0)\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public long nextLong() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            long res = 0;\n            do {\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public int[] nextIntArray(int n) {\n            int a[] = new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = nextInt();\n            }\n            return a;\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public String nextLine() {\n            int c = read();\n            while (isSpaceChar(c))\n                c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isEndOfLine(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        private boolean isEndOfLine(int c) {\n            return c == '\\n' || c == '\\r' || c == -1;\n        }\n\n    }\n} \t"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long mod(long long n) {\n  n %= 1000000007;\n  if (n < 0)\n    return n + 1000000007;\n  else\n    return n;\n}\nconst long long N = 100;\nvoid solve() {\n  long long i, j, k, n, m, x, y, z, d, l, r;\n  cin >> n >> m;\n  vector<string> s(n);\n  for (i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  for (i = 0; i < n; i++) {\n    vector<long long> v;\n    for (j = 0; j < m; j++) {\n      if (s[i][j] == '#') v.push_back(j);\n    }\n    vector<long long> v1;\n    if (v.size() > 0) {\n      for (j = 0; j < n; j++) {\n        if (s[j][v[0]] == '#') v1.push_back(j);\n      }\n    }\n    for (j = 0; j < v1.size(); j++) {\n      if (s[v1[j]] != s[v1[0]]) {\n        cout << \"NO\";\n        return;\n      }\n    }\n    for (j = 0; j < v.size(); j++) {\n      for (k = 0; k < n; k++) {\n        if (s[k][v[0]] != s[k][v[j]]) {\n          cout << \"NO\";\n          return;\n        }\n      }\n    }\n  }\n  cout << \"YEs\";\n}\nint32_t main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  ;\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tString[] s = new String[n];\n\t\tfor (int i = 0 ; i < n ; ++i)\n\t\t{\n\t\t\ts[i] = sc.next();\n\t\t}\n\t\tfor (int i = 0 ; i < n ; ++i)\n\t\t{\n\t\t\tfor (int j = 0 ; j < m ; ++j)\n\t\t\t{\n\t\t\t\tif (s[i].charAt(j) == '#')\n\t\t\t\t{\n\t\t\t\t\tfor (int k = i ; k < n ; ++k)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (s[k].charAt(j) == '#')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!s[k].equals(s[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n}"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\n/**\n * @author Don Li\n */\npublic class MysticalMosaic {\n    void solve() {\n        int n = in.nextInt(), m = in.nextInt();\n        String[] rows = new String[n];\n        for (int i = 0; i < n; i++) rows[i] = in.nextToken();\n        \n        Arrays.sort(rows);\n        boolean[] used_cols = new boolean[m];\n        for (int i = 0; i < n; ) {\n            int j = i;\n            while (j < n && rows[j].equals(rows[i])) j++;\n            for (int k = 0; k < m; k++) {\n                if (rows[i].charAt(k) == '#') {\n                    if (used_cols[k]) {\n                        out.println(\"No\");\n                        return;\n                    } else {\n                        used_cols[k] = true;\n                    }\n                }\n            }\n            i = j;\n        }\n        out.println(\"Yes\");\n    }\n    \n    public static void main(String[] args) {\n        in = new FastScanner(new BufferedReader(new InputStreamReader(System.in)));\n        out = new PrintWriter(System.out);\n        new MysticalMosaic().solve();\n        out.close();\n    }\n    \n    static FastScanner in;\n    static PrintWriter out;\n    \n    static class FastScanner {\n        BufferedReader in;\n        StringTokenizer st;\n        \n        public FastScanner(BufferedReader in) {\n            this.in = in;\n        }\n        \n        public String nextToken() {\n            while (st == null || !st.hasMoreTokens()) {\n                try {\n                    st = new StringTokenizer(in.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n        \n        public int nextInt() {\n            return Integer.parseInt(nextToken());\n        }\n        \n        public long nextLong() {\n            return Long.parseLong(nextToken());\n        }\n        \n        public double nextDouble() {\n            return Double.parseDouble(nextToken());\n        }\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long mask[100];\nint n;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  int m;\n  cin >> n >> m;\n  string s;\n  for (int i = 0; i < n; i++) {\n    cin >> s;\n    for (int j = 0; j < m; j++) {\n      if (s[j] == '#') mask[i] |= (1ll << j);\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i; j < n; j++) {\n      if ((mask[i] & mask[j]) && mask[i] != mask[j]) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring s[100];\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> s[i];\n  int r[100], c[100];\n  memset(r, 0, sizeof r);\n  memset(c, 0, sizeof c);\n  set<int> st;\n  for (int i = 0; i < n; i++) {\n    if (r[i]) continue;\n    r[i] = 1;\n    for (int j = i + 1; j < n; j++) {\n      if (s[i] == s[j]) r[j] = 1;\n    }\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        if (c[j] == 1) {\n          cout << \"No\";\n          return 0;\n        }\n        c[j] = 1;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\n\nimport java.io.*;\nimport java.lang.*;\nimport java.lang.reflect.Array;\nimport java.math.*;\n\npublic class cf3 \n{\n\tstatic class pair implements Comparable<pair>\n\t {\n\t\tInteger x,y;\n\t\tpair(int x,int y)\n\t\t{\n\t\t\tthis.x=x;\n\t\t\tthis.y=y;\n\t\t}\n\t\tpublic int compareTo(pair o)\n\t\t{\n\t\t\tif(x<o.x)\n\t\t\t\treturn -1;\n\t\t\telse\n\t\t\t\treturn 1;\n\t\t}  \n\t}\n\tstatic int ans=0;\n\tstatic long mod=1000000007;\n\tstatic boolean prime[];\n\t\n\tpublic static void main(String args[])\n\t{\n\t\tInputReader in=new InputReader(System.in);\n\t\tPrintWriter pw=new PrintWriter(System.out);\n\t\tint n=in.nextInt();\n\t\tint m=in.nextInt();\n\t\tString[] str=new String[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tstr[i]=in.nextLine();\n\t\tHashSet<String> set=new HashSet<>();\n\t\tboolean[] arr=new boolean[m];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tset.add(str[i]);\n\t\tfor(int i=0;i<m;i++)\n\t\t\tarr[i]=false;\n\t\tboolean flag=false;\n\t\tfor(String s:set)\n\t\t{\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t{\n\t\t\t\tif(s.charAt(i)=='#')\n\t\t\t\t{\n\t\t\t\t\tif(!arr[i])\n\t\t\t\t\t\tarr[i]=true;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tflag=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag)\n\t\t\t\tbreak;\n\t\t}\n\t\tif(flag)\n\t\t\tpw.println(\"No\");\n\t\telse\n\t\t\tpw.println(\"Yes\");\n\t\tpw.flush();\n\t}\n\tpublic static int distance(int x,int y,int p,int q)\n\t{\n\t\tint a=(x-p)*(x-p);\n\t\tint b=(y-q)*(y-q);\n\t\tint dis=a+b;\n\t\treturn dis;\n\t}\n\tpublic static int bnum(int num)\n\t{\n\t\tint ans=0;\n\t\tfor(int i=31;i>=0;i--)\n\t\t{\n\t\t\tif((num&(1<<i))!=0)\n\t\t\t{\n\t\t\t\tans+=Math.pow(10,i);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\tpublic static int bsdown(int a[],int item)\n\t{\n\t\tint low=0,high=a.length-1,ans=-1;\n\t\twhile(low<=high)\n\t\t{\n\t\t\tint mid=low+(high-low)/2;\n\t\t\tif(a[mid]<=item)\n\t\t\t{\n\t\t\t\tans=mid;\n\t\t\t\tlow=mid+1;\n\t\t\t}\n\t\t\telse\n\t\t\t\thigh=mid-1;\n\t\t\t\t\n\t\t}\n\t\treturn ans;\n\t}\n\tpublic static long inverse(long num)\n\t{\n\t\treturn fastpow(num,mod-2,mod);\n\t}\n\tpublic static int bsupper(int a[],int item)\n\t{\n\t\tint low=0,high=a.length-1,ans=-1;\n\t\twhile(low<=high)\n\t\t{\n\t\t\tint mid=low+(high-low)/2;\n\t\t\tif(a[mid]>=item)\n\t\t\t{\n\t\t\t\tans=mid;\n\t\t\t\thigh=mid-1;\n\t\t\t}\n\t\t\telse\n\t\t\t\tlow=mid+1;\n\t\t\t\t\n\t\t}\n\t\treturn ans;\n\t}\t\n\tpublic static boolean isprime(int n)\n\t{\n\t\tfor(int i=2;i*i<=n;i++)\n\t\t{\n\t\t\tif(n%i==0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static long fact(long a,long mod)\n\t{\n\t\tlong ans=1;\n\t\tfor(int i=1;i<=a;i++)\n\t\t{\n\t\t\tans*=i;\n\t\t\tans%=mod;\n\t\t}\n\t\treturn ans%mod;\n\t\t\n\t}\n\tpublic static long ncr(long n,long r,long mod)\n\t{\n\t\tlong nom=1,dom=1;\n\t\tnom=(fact(n,mod))%mod;\n\t\tdom=(fact(r,mod)*fact(n-r,mod))%mod;\n\t\treturn (nom*fastpow(dom,mod-2,mod))%mod;\n\t}\n\tpublic static long gcd(long x, long y)\n\t{\n\t\tif(x==0)\n\t\t\treturn y;\n\t\tif(y==0)\n\t\t\treturn x;\n\t\tlong r=0, a, b;\n\t\ta = (x > y) ? x : y; // a is greater number\n\t\tb = (x < y) ? x : y; // b is smaller number\n\t\tr = b;\n\t\twhile(a % b != 0)\n\t\t{\n\t\t\tr = a % b;\n\t\t\ta = b;\n\t\t\tb = r;\n\t\t}\n\t\treturn r;\n\t}\n\tpublic static void prime(int n)\n\t{\n\t\tprime[0]=true;\n\t\tprime[1]=true;\n\t\tfor(int i=2;i*i<=n;i++)\n\t\t{\n\t\t\tif(prime[i])\n\t\t\t\tcontinue;\n\t\t\tfor(int j=i;j*i<=n;j++)\n\t\t\t{\n\t\t\t\tprime[i*j]=true;\n\t\t\t}\n\t\t}\n\t}\n\tstatic class InputReader \n\t{\n\t\t \n\t\tprivate final InputStream stream;\n\t\tprivate final byte[] buf = new byte[8192];\n\t\tprivate int curChar, snumChars;\n\t\tprivate SpaceCharFilter filter;\n\n\t\tpublic InputReader(InputStream stream) \n\t\t{\n\t\t\tthis.stream = stream;\n\t\t}\n\n\t\tpublic int snext() \n\t\t{\n\t\t\tif (snumChars == -1)\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tif (curChar >= snumChars) \n\t\t\t{\n\t\t\t\tcurChar = 0;\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tsnumChars = stream.read(buf);\n\t\t\t\t}\n\t\t\t\tcatch (IOException e) \n\t\t\t\t{\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (snumChars <= 0)\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn buf[curChar++];\n\t\t}\n\n\t\tpublic int nextInt()\n\t\t{\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t{\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-')\n\t\t\t{\n\t\t\t\tsgn = -1;\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\twhile (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic long nextLong() \n\t\t{\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c)) \n\t\t\t{\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-') \n\t\t\t{\n\t\t\t\tsgn = -1;\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\twhile (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic int[] nextIntArray(int n) \n\t\t{\n\t\t\tint a[] = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) \n\t\t\t{\n\t\t\t\ta[i] = nextInt();\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\n\t\tpublic String readString() \n\t\t{\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c)) \n\t\t\t{\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo\n\t\t\t{\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\twhile (!isSpaceChar(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tpublic String nextLine()\n\t\t{\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = snext();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo \n\t\t\t{\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\twhile (!isEndOfLine(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tpublic boolean isSpaceChar(int c) \n\t\t{\n\t\t\tif (filter != null)\n\t\t\t\treturn filter.isSpaceChar(c);\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n\n\t\tprivate boolean isEndOfLine(int c) \n\t\t{\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\n\t\t}\n\n\t\tpublic interface SpaceCharFilter \n\t\t{\n\t\t\tpublic boolean isSpaceChar(int ch);\n\t\t}\n\t}\n\tpublic static long fastpow(long a,long b,long mod)\n\t{\n\t\tlong ans=1;\n\t\twhile(b!=0)\n\t\t{\n\t\t\tif(b%2==1)\n\t\t\t{\n\t\t\t\tans=(ans*a)%mod;\n\t\t\t}\n\t\t\ta=(a*a)%mod;\n\t\t\tb/=2;\n\t\t}\n\t\treturn ans;\n\t}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e5 + 1;\nset<string> s;\nvector<int> g[maxn];\nvector<int> gr[maxn];\nbool used[100];\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    string t;\n    cin >> t;\n    s.insert(t);\n  }\n  for (int i = 0; i < m; ++i) {\n    int cnt = 0;\n    for (auto it : s)\n      if (it[i] == '#') ++cnt;\n    if (cnt > 1) {\n      cout << \"No\";\n      return 0;\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\ns=[]\nfor i in range(n):\n    s.append(input())\nvisited=[False for i in range(n)]\nused=[False for i in range(m)]\nch=True\ncount=0\nfor i in range(n):\n    if(not visited[i]):\n        rows=[]\n        visited[i]=True\n        for j in range(m):\n            if(s[i][j]=='#'):\n                rows.append(j)\n                if(used[j]):\n                    ch=False\n                    break\n                used[j]=True\n        #print(rows,i)\n        if(not ch):\n            break\n        if(len(rows)==0):\n            continue\n        cols=[]\n        for k in range(n):\n            j=rows[0]\n            if(s[k][j]=='#'):\n                cols.append(k)\n        for j in cols:\n            visited[j]=True\n        #print('cols is',cols,i)\n        for j in rows:\n            cols2=[]\n            for k in range(n):\n                if(s[k][j]=='#'):\n                    cols2.append(k)\n            if(cols!=cols2):\n                ch=False\n                break\n        if(not ch):\n            break\n        \n   \n        for k in cols:\n            rows2=[]     \n            for j in range(m):\n                if(s[k][j]=='#'):\n                    rows2.append(j)\n            if(rows!=rows2):\n                ch=False\n                break\nif(ch):\n    print('yes')\nelse:\n    print('no')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 55;\nint row[maxn];\nint col[maxn];\nchar grid[maxn][maxn];\nint m, n;\nint check(int a, int b) {\n  int book = 0;\n  for (int i = 0; i < m; i++) {\n    if (grid[a][i] != grid[b][i]) {\n      book = 1;\n      break;\n    }\n  }\n  if (book == 1) {\n    for (int i = 0; i < m; i++) {\n      if (grid[a][i] == '#' && grid[b][i] == '#') {\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  memset(col, 0, sizeof(col));\n  memset(row, 0, sizeof(row));\n  memset(grid, 0, sizeof(grid));\n  int flag = 0;\n  for (int i = 0; i < n; i++) {\n    gets(grid[i]);\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      flag = check(i, j);\n      if (flag == 1) {\n        printf(\"No\\n\");\n        return 0;\n      }\n    }\n  }\n  if (flag == 0) {\n    printf(\"Yes\\n\");\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int> > a, b;\n  a.resize(n);\n  b.resize(m);\n  for (int i = 0; i < (n); i++)\n    for (int j = 0; j < (m); j++) {\n      char c;\n      cin >> c;\n      if (c == '#') {\n        a[i].push_back(j);\n        b[j].push_back(i);\n      }\n    }\n  vector<bool> isUsed;\n  isUsed.resize(n);\n  for (int i = 0; i < (n); i++) {\n    if (isUsed[i]) continue;\n    vector<bool> could;\n    could.resize(m);\n    for (int j = 0; j < (a[i].size()); j++) could[a[i][j]] = true;\n    for (int j = i + 1; j < n; j++) {\n      int sovpad = 0;\n      for (int k = 0; k < (a[j].size()); k++)\n        if (could[a[j][k]]) sovpad++;\n      if (sovpad == 0) continue;\n      if (sovpad != a[i].size() || a[j].size() > a[i].size()) {\n        cout << \"No\";\n        return 0;\n      }\n      isUsed[j] = true;\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool check_vec(vector<int> &a, vector<int> &b) {\n  if (a.size() != b.size()) return false;\n  for (int i = 0; i < a.size(); i++)\n    if (a[i] != b[i]) return false;\n  return true;\n}\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  char **mas = new char *[n];\n  for (int i = 0; i < n; i++) {\n    mas[i] = new char[m + 1];\n    scanf(\"%s\", mas[i]);\n  }\n  vector<int> *row = new vector<int>[n], *col = new vector<int>[m];\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++)\n      if (mas[i][j] == '#') row[i].push_back(j);\n  for (int j = 0; j < m; j++)\n    for (int i = 0; i < n; i++)\n      if (mas[i][j] == '#') col[j].push_back(i);\n  for (int i = 0; i < n; i++) {\n    for (int j = 1; j < row[i].size(); j++)\n      if (!check_vec(col[row[i][j - 1]], col[row[i][j]])) {\n        printf(\"No\\n\");\n        return false;\n      }\n  }\n  for (int j = 0; j < m; j++) {\n    for (int i = 1; i < col[j].size(); i++)\n      if (!check_vec(row[col[j][i - 1]], row[col[j][i]])) {\n        printf(\"No\\n\");\n        return false;\n      }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  long long int n, m;\n  cin >> n >> m;\n  vector<string> s;\n  for (long long int i = 0; i < n; i++) {\n    string t;\n    cin >> t;\n    s.push_back(t);\n  }\n  for (long long int i = 0; i < n; i++) {\n    string t = s[i];\n    set<long long int> ck;\n    for (long long int k = 0; k < s[i].size(); k++) {\n      if (s[i][k] == '#') ck.insert(k);\n    }\n    for (long long int j = i + 1; j < n; j++) {\n      if (t == s[j])\n        continue;\n      else {\n        for (long long int k = 0; k < s[j].size(); k++) {\n          if (s[j][k] == '#' && t[k] == '#') {\n            cout << \"NO\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"YES\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar v[100][100];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> v[i];\n  for (int i = 0; i < n - 1; i++)\n    for (int j = i + 1; j < n; j++) {\n      bool ok1 = true, ok2 = true;\n      for (int k = 0; k < m; k++) {\n        if (v[i][k] != v[j][k]) ok1 = false;\n        if (v[i][k] == '#' && v[j][k] == '#') ok2 = false;\n      }\n      if (!ok1 && !ok2) {\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring s[55];\nset<int> r, c;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> s[i];\n  for (int i = 0; i < n; i++) {\n    vector<int> v, v1;\n    for (int j = 0; j < m; j++)\n      if (s[i][j] == '#') {\n        s[i][j] = '.';\n        v.push_back(j);\n      }\n    if (v.size() == 0) continue;\n    v1.push_back(i);\n    for (int i1 = i + 1; i1 < n; i1++) {\n      int j1 = v[0];\n      if (s[i1][j1] == '#') {\n        v1.push_back(i1);\n        for (auto j1 : v)\n          if (s[i1][j1] != '#') {\n            cout << \"No\";\n            return 0;\n          } else\n            s[i1][j1] = '.';\n      }\n    }\n    for (auto j1 : v)\n      if (c.count(j1)) {\n        cout << \"No\";\n        return 0;\n      } else\n        c.insert(j1);\n    for (auto i1 : v1)\n      if (r.count(i1)) {\n        cout << \"No\";\n        return 0;\n      } else\n        r.insert(i1);\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool same, noCommon, pic[55][55];\nint n, m;\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j <= m; ++j) pic[i][j] = (getchar() == '#');\n  for (int i = 0; i < n; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n      same = noCommon = true;\n      for (int k = 0; k < m; ++k) {\n        if (pic[i][k] != pic[j][k]) same = false;\n        if (pic[i][k] && pic[j][k]) noCommon = false;\n      }\n      if (!same && !noCommon) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 55;\nint field[MAXN][MAXN];\nbool AreEqual(int r1, int r2, int M) {\n  for (int i = 1; i <= M; i++) {\n    if (field[r1][i] != field[r2][i]) return false;\n  }\n  return true;\n}\nbool nonOverlaping(int r1, int r2, int M) {\n  for (int i = 1; i <= M; i++) {\n    if (field[r1][i] == field[r2][i] && field[r1][i] == 1) return false;\n  }\n  return true;\n}\nint main() {\n  int N, M;\n  cin >> N >> M;\n  for (int i = 1; i <= N; i++) {\n    for (int j = 1; j <= M; j++) {\n      char c;\n      cin >> c;\n      field[i][j] = (c == '#');\n    }\n    for (int r = 1; r < i; r++) {\n      if (!AreEqual(i, r, M) && !nonOverlaping(i, r, M)) {\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "n,m = map(int, raw_input().split())\nl = []\nfor i in range(n):\n\tl.append(raw_input())\n\t\nfor i in range(n):\n\tfor j in range(m):\n\t\tif(l[i][j] == '#'):\n\t\t\tfor k in range(n):\n\t\t\t\tif l[k][j] == '#' and l[k] != l[i]:\n\t\t\t\t\tprint 'No'\n\t\t\t\t\tquit()\nprint 'Yes'\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nint mas[60][60];\nstring s;\nint i, j, o;\nvector<int> t;\nint tlen;\nint flag1;\nint flag2;\nint main() {\n  cin >> n >> m;\n  for (i = 0; i < n; i++) {\n    cin >> s;\n    for (j = 0; j < m; j++) {\n      if (s[j] == '.') {\n        mas[i][j] = 0;\n      } else {\n        mas[i][j] = 1;\n      }\n    }\n  }\n  t.push_back(0);\n  tlen = 1;\n  for (i = 1; i < n; i++) {\n    for (o = 0; o < tlen; o++) {\n      flag1 = 0;\n      flag2 = 0;\n      for (j = 0; j < m; j++) {\n        if (mas[i][j] + mas[o][j] == 1) {\n          flag2 = 1;\n        }\n        if (mas[i][j] + mas[o][j] == 2) {\n          flag1 = 1;\n        }\n      }\n      if (flag1 + flag2 == 2) {\n        cout << \"No\" << endl;\n        return 0;\n      }\n      if (flag1 == 1) {\n        flag2 = 0;\n        break;\n      }\n    }\n    if (flag2 == 1) t.push_back(i);\n    tlen++;\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint usedc[55], usedr[55], n, m;\nchar a[55][55];\nint main() {\n  memset(usedr, 0, sizeof(usedr));\n  memset(usedc, 0, sizeof(usedc));\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> a[i][j];\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      memset(usedr, 0, sizeof(usedr));\n      memset(usedc, 0, sizeof(usedc));\n      if (a[i][j] == '#') {\n        usedr[i] = 1;\n        usedc[j] = 1;\n        for (int l = 1; l <= n; l++) {\n          if (a[l][j] == '#') {\n            usedr[l] = 1;\n            for (int k = 1; k <= m; k++) {\n              if (a[l][k] == '#') {\n                usedc[k] = 1;\n              }\n            }\n          }\n        }\n        for (int l = 1; l <= n; l++) {\n          for (int k = 1; k <= m; k++) {\n            if (usedr[l] == 1 && usedc[k] == 1) {\n              if (a[l][k] != '#') {\n                cout << \"No\";\n                return 0;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string s[n];\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        for (int k = 0; k < n; k++) {\n          if (s[i][j] == s[k][j] && s[i] != s[k]) {\n            printf(\"NO\\n\");\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  printf(\"YES\\n\");\n}\n"
        },
        {
            "language": 1,
            "solution": "n, m = map(int, raw_input().split())\na = []\narr = {}\nvis = {}\nfor i in range(1, n + 1):\n    arr[i] = []\n    vis[i] = False\nfor j in range(1, m + 1):\n    arr[-j] = []\n    vis[-j] = False\nfor i in range(n):\n    a.append(list(raw_input()))\nnew = []\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '#':\n            if vis[i + 1] == False and vis[-(j + 1)] == False:\n                new.append([i + 1, -j - 1])\n\n            elif vis[i + 1] == True :\n                for p in new:\n                    if i + 1 in p:\n                        p.append(-j - 1)\n                        break\n            elif vis[i + 1] == False :\n                for p in new:\n                    if -(j + 1) in p:\n                        p.append(i + 1)\n                        break\n            vis[i + 1] = True\n            vis[-(j + 1)] = True\n\n#print new\nc = 0\nfin = []\nnew_=[]\nfor i in new:\n    i = list(set(i))\n    new_.append(i)\n    c += len(i)\n    fin += i\nif len(list(set(fin))) != c:\n    print 'No'\n    exit()\nfor i in new_:\n    c = []\n    b = []\n    for j in i:\n        if j < 0:\n            b.append(-(j + 1))\n        else:\n            c.append(j - 1)\n    for x in c:\n        for y in b:\n            if a[x][y] != '#':\n                print 'No'\n                exit()\nprint 'Yes'\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxN = 55;\nint a[maxN][maxN];\nint main() {\n  ios_base::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i) {\n    string s;\n    cin >> s;\n    for (int j = 1; j <= m; ++j) {\n      if (s[j - 1] == '.')\n        a[i][j] = 0;\n      else\n        a[i][j] = 1;\n    }\n  }\n  bool ok = true;\n  for (int i = 1; i <= n; ++i) {\n    bool emp = true;\n    int sz = 0;\n    for (int j = 1; j <= m; ++j) {\n      if (a[i][j] == 1) emp = false, ++sz;\n    }\n    if (emp) continue;\n    for (int k = i + 1; k <= n; ++k) {\n      bool good = true;\n      int t = 0, t2 = 0;\n      for (int j = 1; j <= m; ++j) {\n        if (a[i][j] == a[k][j] && a[i][j] == 1) {\n          good = false;\n          ++t;\n        } else if (a[i][j] != a[k][j])\n          ++t2;\n      }\n      if (good) continue;\n      if (!good) {\n        if (t == sz && t2 == 0) {\n          continue;\n        } else {\n          ok = false;\n        }\n      }\n    }\n  }\n  if (ok)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.HashMap;\nimport java.util.Scanner;\n\n\npublic class Main \n{\n\tstatic char[][] arr;\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\tint row=s.nextInt();\n\t\tint column=s.nextInt();\n\t\tarr=new char[row][column];\n\t\tfor(int a=0;a<row;a++)\n\t\t{\n\t\t\tarr[a]=s.next().toCharArray();\n\t\t}\n\t\tfor(int a=0;a<column;a++)\n\t\t{\n\t\t\tboolean result=function(row, column, a);\n\t\t\tif(result==false)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\ts.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t\ts.close();\n\t}\n\tprivate static boolean function(int row, int column, int curColumn)\n\t{\n\t\tHashMap<String, Boolean> map=new HashMap<String, Boolean>();\n\t\tfor(int a=0;a<row;a++)\n\t\t{\n\t\t\tif(arr[a][curColumn]=='#')\n\t\t\t{\n\t\t\t\t//System.out.println(a+\" \"+curColumn);\n\t\t\t\tString str=new String(\"\");\n\t\t\t\tfor(int b=0;b<column;b++)\n\t\t\t\t{\n\t\t\t\t\tif(arr[a][b]=='#')\n\t\t\t\t\t\tstr+=new Integer(b).toString();\n\t\t\t\t}\n\t\t\t\t//System.out.println(str);\n\t\t\t\tif(map.isEmpty())\n\t\t\t\t\tmap.put(str, true);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(map.get(str)==null)\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nstatic const int MAXN = 53;\nstatic int n, m;\nstatic bool a[MAXN][MAXN];\nstatic long long b[MAXN];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j <= m; ++j) a[i][j] = (getchar() == '#');\n  for (int i = 0; i < n - 1; ++i)\n    for (int j = i + 1; j < n; ++j) {\n      bool all_same = true, no_intersect = true;\n      for (int k = 0; k < m; ++k) {\n        if (a[i][k] != a[j][k]) all_same = false;\n        if (a[i][k] && a[j][k]) no_intersect = false;\n      }\n      if (!all_same && !no_intersect) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int LN = 100;\nint N, M, pf;\nchar mapa[LN][LN], c[LN];\nbool cc, cf[LN];\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  ;\n  cin >> N >> M;\n  for (int i = 0; i < N; i++) cin >> mapa[i];\n  for (int i = 0; i < N; i++) {\n    cc = false;\n    pf = 0;\n    for (int j = 0; j < M; j++) {\n      if (mapa[i][j] == '.') continue;\n      if (cc) {\n        for (int k = 0; k < N; k++) {\n          if (mapa[k][j] != c[k]) {\n            cout << \"No\";\n            return 0;\n          }\n          if (k != i && mapa[k][j] == '#') cf[k] = true;\n        }\n      } else {\n        cc = true;\n        for (int k = 0; k < N; k++) {\n          c[k] = mapa[k][j];\n          if (c[k] == '#') cf[k] = true;\n        }\n      }\n    }\n    for (int k = 0; k < pf; k++) {\n      if (!cf[k]) continue;\n      for (int j = 0; j < N; j++) {\n        if (mapa[i][j] != mapa[cf[k]][j]) {\n          cout << \"No\";\n          return 0;\n        }\n      }\n      cf[k] = false;\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\nl=[]\nfor _ in range(n):\n    s=input()\n    l.append(s)\nl=set(l)\nl1=list(l)\nn=len(l1)\nx=[]\nfor _ in range(m):\n    x.append(0)\nflag=0\nfor i in range(n):\n    for j in range(m):\n        if(l1[i][j]=='#' and x[j]==0):\n            x[j]=x[j]+1\n        elif(l1[i][j]=='#' and x[j] != 0):\n            flag=1\n    if flag==1:\n        break\nif flag==1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static FastScanner in;\n    static PrintWriter out;\n    static final long MOD = 1000000007;\n\n    public static void main(String[] args) throws IOException {\n        //        Scanner in = new Scanner(new File(\"input.txt\"));\n        //        Scanner in = new Scanner(System.in);\n        //        System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"output.txt\")), true));\n        out = new PrintWriter(System.out);\n        in = new FastScanner(System.in);\n        //        in = new FastScanner(\"input.txt\");\n        int n = in.nextInt(), m = in.nextInt();\n        char s[][] = new char[n][m];\n        char ss[][] = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            s[i] = in.next().toCharArray();\n            System.arraycopy(s[i], 0, ss[i], 0, s[i].length);\n        }\n        String ans = \"Yes\";\n        for (int i = 0; i < n; i++) {\n            boolean v[] = new boolean[n];\n            for (int j = 0; j < m; j++) {\n                if (s[i][j] == '#') {\n                    for (int ii = 0; ii < s.length; ii++) {\n                        if (s[ii][j] == '#')\n                            v[ii] = true;\n                    }\n                }\n            }\n            for (int j = 0; j < m; j++) {\n                if (s[i][j] == '#') {\n                    boolean ok = setCol(s, i, j, v);\n                    if (!ok) {\n                        ans = \"No\";\n                        break;\n                    }\n                }\n            }\n        }\n        out.println(ans);\n        out.close();\n    }\n\n    static boolean setCol(char[][] s, int i, int j, boolean v[]) {\n        for (int ii = 0; ii < s.length; ii++) {\n            if (s[ii][j] == '.' && v[ii]) {\n                return false;\n            }\n            if (s[ii][j] == '#') {\n                v[ii] = true;\n            }\n        }\n        return true;\n    }\n}\n\nclass Pair {\n    public double first; //first member of pair\n    public double second; //second member of pair\n\n    public Pair(double first, double second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public Pair() {\n\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o)\n            return true;\n        if (!(o instanceof Pair))\n            return false;\n        Pair p = (Pair) o;\n        return first == p.first && second == p.second;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = (int) first;\n        result = 31 * result + (int) second;\n        return result;\n    }\n}\n\nclass PairComparable implements Comparator<Pair> {\n\n    @Override\n    public int compare(Pair o1, Pair o2) {\n        if (o1.second < o2.second)\n            return -1;\n        else if (o1.second > o2.second)\n            return 1;\n        else {\n            return 0;\n        }\n    }\n}\n\nclass FastScanner {\n\n    BufferedReader br;\n    StringTokenizer tokenizer;\n\n    FastScanner(String fileName) throws FileNotFoundException {\n        this(new FileInputStream(new File(fileName)));\n    }\n\n    FastScanner(InputStream is) {\n        br = new BufferedReader(new InputStreamReader(is));\n    }\n\n    String nextLine() throws IOException {\n        tokenizer = null;\n        return br.readLine();\n    }\n\n    String next() throws IOException {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            String line = br.readLine();\n            if (line == null) {\n                return null;\n            }\n            tokenizer = new StringTokenizer(line);\n        }\n        return tokenizer.nextToken();\n    }\n\n    int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    char nextChar() throws IOException {\n        return next().charAt(0);\n    }\n}"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\narray, Columns, count = [], [], 1\nfor i in range(n):\n\tarray.append(list(input()))\nwhile array!=[]:\n\tif array.count(array[0])>1:\n\t\telem = array[0]\n\t\tfor i in range(array.count(elem)):\n\t\t\tarray.remove(elem)\n\t\tfor k in range(elem.count('#')):\n\t\t\tindex = elem.index('#')\n\t\t\tColumns.append(index)\n\t\t\telem[index]='.'\n\telse:\n\t\telem = array[0]\n\t\tfor p in range(elem.count('#')):\n\t\t\tindex = elem.index('#')\n\t\t\tColumns.append(index)\n\t\t\telem[index]='.'\n\t\tarray.pop(0)\nfor i in range(int(len(Columns)/2)):\n\tif Columns.count(Columns[i])>count:\n\t\tcount=2\nif count==1:\n\tprint('Yes')\nelse:\n\tprint('No')\n\n\n\t\n\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Rene\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            long[] x = new long[n];\n            boolean ok = true;\n            for (int i = 0; i < n; i++) {\n                String s = in.next();\n                s = s.replace('.', '0').replace('#', '1');\n                x[i] = Long.parseLong(s, 2);\n                for (int j = 0; j < i; j++) {\n                    if ((x[i] & x[j]) != 0 && x[i] != x[j]) ok = false;\n                }\n            }\n            out.println(ok ? \"Yes\" : \"No\");\n        }\n\n    }\n\n    static interface InputInterface {\n    }\n\n    static class InputReader implements InputInterface {\n        public InputStream stream;\n        private int current;\n        private int size;\n        private byte[] buffer = new byte[10000];\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n            current = 0;\n            size = 0;\n        }\n\n        public InputReader() {\n        }\n\n\n        public String next() {\n            StringBuilder sb = new StringBuilder();\n            int c = readNextValid();\n            while (!isEmpty(c)) {\n                sb.append((char) c);\n                c = read();\n            }\n            return sb.toString();\n        }\n\n        int read() {\n            int result;\n            try {\n                if (current >= size) {\n                    current = 0;\n                    size = stream.read(buffer);\n                    if (size < 0) return -1;\n                }\n            } catch (IOException e) {\n                throw new RuntimeException();\n            }\n            return buffer[current++];\n        }\n\n\n        public int nextInt() {\n            int sign = 1;\n            int result = 0;\n            int c = readNextValid();\n            if (c == '-') {\n                sign = -1;\n                c = read();\n            }\n            do {\n                if (c < '0' || c > '9') throw new RuntimeException();\n                result = 10 * result + c - '0';\n                c = read();\n            } while (!isEmpty(c));\n            result *= sign;\n            return result;\n        }\n\n        private int readNextValid() {\n            int result;\n            do {\n                result = read();\n            } while (isEmpty(result));\n            return result;\n        }\n\n        private boolean isEmpty(int c) {\n            return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r' || c == -1;\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int rows, cols;\n  cin >> rows >> cols;\n  vector<string> config;\n  string row;\n  for (int i = 0; i < rows; ++i) {\n    cin >> row;\n    config.push_back(row);\n  }\n  for (int i = 0; i < rows; ++i)\n    for (int j = i + 1; j < rows; ++j) {\n      int flag = 0;\n      int equal_flag = 1;\n      for (int k = 0; k < cols; ++k) {\n        if (config[i][k] != config[j][k] && equal_flag == 1) {\n          equal_flag = 0;\n        }\n        if (config[i][k] == '#' && config[j][k] == '#' && flag != 1) {\n          flag = 1;\n        }\n        if (flag == 1 && equal_flag == 0) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n    }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m = map(int, input().split())\n\nr = set()\nc = set()\nss=[]\nfor i in range(n):\n    s = input()\n    ss.append(s)\n\nfor i in range(n):\n    s1 = set()\n    for j in range(m):\n        if ss[i][j] == '#':\n            s1.add(j)\n    for j in range(n):\n        s2 = set()\n        for k in range(m):\n            if ss[j][k] == '#':\n                s2.add(k)\n        isi=len(s1.intersection(s2))\n        if isi != 0 and (isi != len(s1) or isi != len(s2)):\n            print('No')\n            exit()\n\nfor i in range(m):\n    s1 = set()\n    for j in range(n):\n        if ss[j][i] == '#':\n            s1.add(j)\n    for j in range(m):\n        s2 = set()\n        for k in range(n):\n            if ss[k][j] == '#':\n                s2.add(k)\n        isi=len(s1.intersection(s2))\n        if isi != 0 and (isi != len(s1) or isi != len(s2)):\n            print('No')\n            exit()\n\nprint('Yes')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 55;\nint a[MAXN], b[MAXN];\nstring s[MAXN];\nint n, m;\nint ans;\nbool f(int x, int y) {\n  for (int i = 1; i <= n; ++i)\n    if (s[i][x - 1] != s[i][y - 1]) return 0;\n  return 1;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cout.tie(NULL);\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i) {\n    cin >> s[i];\n    for (int j = 1; j <= m; ++j) {\n      ans += s[i][j - 1] == '#';\n    }\n  }\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= m; ++j)\n      for (int k = 1; k <= n; ++k)\n        if (s[i][j - 1] == '#' && s[k][j - 1] == '#' && s[i] != s[k])\n          return cout << \"No\\n\", 0;\n  for (int i = 1; i <= m; ++i)\n    for (int j = 1; j <= n; ++j)\n      for (int k = 1; k <= m; ++k)\n        if (s[j][i - 1] == s[j][k - 1] && s[j][i - 1] == '#' && !f(i, k))\n          return cout << \"No\\n\", 0;\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "H,W=map(int,input().split())\ntiles = set()\nfor i in range(H):\n    tiles.add(input().rstrip())\nused = [0]*W\nflg = True\nfor tile in tiles:\n    for j in range(W):\n        if tile[j] == '#':\n            if used[j] == 0:\n                used[j] = 1\n            else:\n                flg = False\n                exit\nif flg:\n    print('Yes')\nelse:\n    print('No')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstring s[50];\nbool wasR[50];\nbool ans = true;\nvoid markRow(int y) {\n  bool firstC = true;\n  set<int> c, r;\n  wasR[y] = true;\n  for (int j = 0; j < m; ++j)\n    if (s[y][j] == '#') {\n      if (firstC) {\n        for (int i = y; i < n; ++i) {\n          if (s[i][j] == '#') {\n            r.insert(i);\n            wasR[i] = true;\n          }\n        }\n        firstC = false;\n      }\n      c.insert(j);\n    }\n  for (int el : c) {\n    for (int i = *r.begin(); i < n && ans; ++i)\n      if ((s[i][el] == '#' && !r.count(i)) || (s[i][el] != '#' && r.count(i)))\n        ans = false;\n  }\n  for (int el : r) {\n    for (int j = 0; j < m && ans; ++j)\n      if ((s[el][j] == '#' && !c.count(j)) || (s[el][j] != '#' && c.count(j)))\n        ans = false;\n  }\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) cin >> s[i];\n  for (int i = 0; i < n && ans; ++i) {\n    if (!wasR[i] && s[i].find('#') != string::npos) {\n      markRow(i);\n    }\n  }\n  if (ans)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  getchar();\n  getchar();\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int, input().split())\na=[]\nfor i in range(n): a.append(input())\n\nfor i in range(n):\n    for j in range(i+1,n):\n        eqv, no_inter=True, True\n        for z in range(m):\n            if a[i][z]!=a[j][z]: eqv=False\n            if a[i][z]==a[j][z]==\"#\": no_inter=False\n        if eqv==no_inter==False:\n            print(\"No\")\n            exit()\nprint(\"Yes\")\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.Locale;\nimport java.util.StringTokenizer;\n\npublic class C implements Runnable {\n\n  private static final boolean ONLINE_JUDGE = System.getProperty(\"ONLINE_JUDGE\") != null;\n\n  private BufferedReader in;\n  private PrintWriter out;\n  private StringTokenizer tok = new StringTokenizer(\"\");\n\n  private void init() throws FileNotFoundException {\n    Locale.setDefault(Locale.US);\n    String fileName = \"\";\n    if (ONLINE_JUDGE) {\n      in = new BufferedReader(new InputStreamReader(System.in));\n      out = new PrintWriter(System.out);\n    } else {\n      in = new BufferedReader(new FileReader(\"input.txt\"));\n      out = new PrintWriter(\"output.txt\");\n    }\n  }\n\n  String readString() {\n    while (!tok.hasMoreTokens()) {\n      try {\n        tok = new StringTokenizer(in.readLine());\n      } catch (Exception e) {\n        return null;\n      }\n    }\n    return tok.nextToken();\n  }\n\n  int readInt() {\n    return Integer.parseInt(readString());\n  }\n\n  long readLong() {\n    return Long.parseLong(readString());\n  }\n\n  double readDouble() {\n    return Double.parseDouble(readString());\n  }\n\n  int[] readIntArray(int size) {\n    int[] a = new int[size];\n    for (int i = 0; i < size; i++) {\n      a[i] = readInt();\n    }\n    return a;\n  }\n\n  public static void main(String[] args) {\n    //new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n    new C().run();\n  }\n\n  long timeBegin, timeEnd;\n\n  void time() {\n    timeEnd = System.currentTimeMillis();\n    // System.err.println(\"Time = \" + (timeEnd - timeBegin));\n  }\n\n  @Override\n  public void run() {\n    try {\n      timeBegin = System.currentTimeMillis();\n      init();\n      solve();\n      out.close();\n      time();\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(-1);\n    }\n  }\n\n  private int aiverson(boolean good) {\n    return good ? 1 : 0;\n  }\n\n  static final long MOD = 1_000_000_007;\n\n  static final int MAX = 1000_000 + 1;\n\n  private void solve() throws IOException {\n    int n = readInt();\n    int m = readInt();\n    char[][] matrix = new char[n][m];\n    for (int i = 0; i < n; i++) {\n      matrix[i] = readString().toCharArray();\n    }\n\n    long[] numbers = new long[n];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        numbers[i] <<= 1L;\n        numbers[i] += matrix[i][j] == '.' ? 0 : 1;\n      }\n    }\n    for (int i = 0; i < n; i++) {\n      for (int j = i + 1; j < n; j++) {\n        long sum = numbers[i] & numbers[j];\n        if(!(sum == 0 || sum == numbers[i] && sum == numbers[j])){\n          out.print(\"No\");\n          return;\n        }\n      }\n    }\n    out.print(\"Yes\");\n\n  }\n\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long dx[4] = {1, 0, -1, 0};\nlong long dy[4] = {0, -1, 0, 1};\ntemplate <class T>\nvoid inputVector(vector<T>& v, long long n) {\n  v.resize(n);\n  for (long long i = 0; i < v.size(); i++) cin >> v[i];\n}\nsigned main() {\n  long long H, W;\n  cin >> H >> W;\n  vector<string> board;\n  inputVector(board, H);\n  bool ok = true;\n  for (long long y = 0; y < (H); y++) {\n    for (long long x = 0; x < (W); x++) {\n      if (board[y][x] == '.') continue;\n      for (long long ay = 0; ay < (H); ay++) {\n        if (board[ay][x] == '.') continue;\n        ok &= board[y] == board[ay];\n      }\n    }\n  }\n  for (long long x = 0; x < (W); x++) {\n    for (long long y = 0; y < (H); y++) {\n      if (board[y][x] == '.') continue;\n      for (long long ax = 0; ax < (W); ax++) {\n        if (board[y][ax] == '.') continue;\n        for (long long ay = 0; ay < (H); ay++) {\n          ok &= board[ay][x] == board[ay][ax];\n        }\n      }\n    }\n  }\n  cout << (ok ? \"Yes\" : \"No\") << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  cin.tie(0);\n  cin.sync_with_stdio(0);\n  cout.tie(0);\n  int n, m;\n  string s[51];\n  vector<int> v;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> s[i];\n  for (int i = 0; i < n; i++) {\n    v.clear();\n    for (int j = 0; j < m; j++)\n      if (s[i][j] == '#') v.push_back(j);\n    for (int k = 1; k < v.size(); k++)\n      for (int l = 0; l < n; l++)\n        if (s[l][v[k]] != s[l][v[0]]) {\n          cout << \"No\";\n          return 0;\n        }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\np = [list(input()) for _ in range(n)]\n\nfor i in range(n):\n    column = []\n    for j in range(m):\n        if p[i][j] == '#':\n            column.append(j)\n    st1 = ''\n    for pos, el in enumerate(column):\n        st = ''\n        for k in range(n):\n            st += p[k][el]\n        if pos == 0:\n            st1 = st\n        elif st1 != st:\n            print('No')\n            break\n    else:\n        continue\n    break\nelse:\n    print('Yes')"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n\n            String[] mat = new String[n];\n\n            for (int i = 0; i < n; i++) {\n                mat[i] = in.next();\n            }\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (mat[i].charAt(j) == '#') {\n                        for (int x = i + 1; x < n; x++) {\n                            if (mat[x].charAt(j) == '#') {\n                                for (int y = 0; y < m; y++) {\n                                    if (mat[i].charAt(y) != mat[x].charAt(y)) {\n                                        out.println(\"No\");\n                                        return;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (mat[j].charAt(i) == '#') {\n                        for (int x = i + 1; x < m; x++) {\n                            if (mat[j].charAt(x) == '#') {\n                                for (int y = 0; y < n; y++) {\n                                    if (mat[y].charAt(i) != mat[y].charAt(x)) {\n                                        out.println(\"No\");\n                                        return;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            out.println(\"Yes\");\n        }\n\n    }\n\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void print(Object... objects) {\n            for (int i = 0; i < objects.length; i++) {\n                if (i != 0) {\n                    writer.print(' ');\n                }\n                writer.print(objects[i]);\n            }\n        }\n\n        public void println(Object... objects) {\n            print(objects);\n            writer.println();\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String nextString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                if (Character.isValidCodePoint(c)) {\n                    res.appendCodePoint(c);\n                }\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return isWhitespace(c);\n        }\n\n        public String next() {\n            return nextString();\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma comment(linker, \"/STACK:16777216\")\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<string> a;\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    a.push_back(s);\n  }\n  set<int> ux, uy;\n  for (int i = 0; i < n; i++) {\n    if (ux.find(i) != ux.end()) continue;\n    string cur = a[i];\n    vector<int> idxs;\n    for (int j = i + 1; j < n; j++) {\n      if (a[j] == cur) idxs.push_back(j);\n    }\n    for (int j = 0; j < (int)(cur).size(); j++) {\n      if (cur[j] == '#' && uy.find(j) != uy.end()) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n    for (int j = 0; j < (int)(cur).size(); j++) {\n      if (cur[j] == '#') uy.insert(j);\n    }\n    ux.insert((idxs).begin(), (idxs).end());\n    ux.insert(i);\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.Locale;\nimport java.util.StringTokenizer;\n\npublic class A implements Runnable {\n\n    private static final boolean ONLINE_JUDGE = System.getProperty(\"ONLINE_JUDGE\") != null;\n\n    private BufferedReader in;\n    private PrintWriter out;\n    private StringTokenizer tok = new StringTokenizer(\"\");\n\n    private void init() throws FileNotFoundException {\n        Locale.setDefault(Locale.US);\n        String fileName = \"\";\n        if (ONLINE_JUDGE && fileName.isEmpty()) {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n        } else {\n            if (fileName.isEmpty()) {\n                in = new BufferedReader(new FileReader(\"input.txt\"));\n                out = new PrintWriter(\"output.txt\");\n            } else {\n                in = new BufferedReader(new FileReader(fileName + \".in\"));\n                out = new PrintWriter(fileName + \".out\");\n            }\n        }\n    }\n\n    String readString() {\n        while (!tok.hasMoreTokens()) {\n            try {\n                tok = new StringTokenizer(in.readLine());\n            } catch (Exception e) {\n                return null;\n            }\n        }\n        return tok.nextToken();\n    }\n\n    int readInt() {\n        return Integer.parseInt(readString());\n    }\n\n    long readLong() {\n        return Long.parseLong(readString());\n    }\n\n    double readDouble() {\n        return Double.parseDouble(readString());\n    }\n\n    int[] readIntArray(int size) {\n        int[] a = new int[size];\n        for (int i = 0; i < size; i++) {\n            a[i] = readInt();\n        }\n        return a;\n    }\n\n    public static void main(String[] args) {\n        //new Thread(null, new _Solution(), \"\", 128 * (1L << 20)).start();\n        new A().run();\n    }\n\n    long timeBegin, timeEnd;\n\n    void time() {\n        timeEnd = System.currentTimeMillis();\n        System.err.println(\"Time = \" + (timeEnd - timeBegin));\n    }\n\n    @Override\n    public void run() {\n        try {\n            timeBegin = System.currentTimeMillis();\n            init();\n            solve();\n            out.close();\n            time();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(-1);\n        }\n    }\n\n    int[][] buildGraph(int n, int[] u, int[] v) {\n        int[][] graph = new int[n][];\n        int[] q = new int[n];\n        for (int i = 0; i < u.length; i++) {\n            q[u[i]]++;\n            q[v[i]]++;\n        }\n        for (int i = 0; i < n; i++) {\n            graph[i] = new int[q[i]];\n        }\n        for (int i = 0; i < u.length; i++) {\n            graph[u[i]][--q[u[i]]] = v[i];\n            graph[v[i]][--q[v[i]]] = u[i];\n        }\n        return graph;\n    }\n\n    private int aiverson(boolean good) {\n        return good ? 1 : 0;\n    }\n\n    private void solve() {\n        int n = readInt();\n        int m = readInt();\n        char[][] map = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            map[i] = readString().toCharArray();\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (map[i][j] == '#') {\n                    for (int k = 0; k < n; k++) {\n                        if (map[k][j] == '#') {\n                            for (int t = 0; t < m; t++) {\n                                if (map[i][t] != map[k][t]) {\n                                    out.println(\"No\");\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        out.println(\"Yes\");\n    }\n}"
        },
        {
            "language": 3,
            "solution": "from itertools import product\nn,m=map(int,input().split())\nl=[]\nsatir={i:[] for i in range(n)}\nsutun={i:[] for i in range(m)}\nfor i in range(n):\n    l.append(list(input()))\ng=[[\".\"]*m for _ in range(n)]\nfor i in range(n):\n    for a in range(m):\n        if l[i][a] == \"#\":\n            satir[i].append(a)\n            sutun[a].append(i)\n\nfor i in satir:\n    sa=set()\n    sa.add(i)\n\n    su=set()\n    for a in satir[i]:\n        su.add(a)\n        for k in sutun[a]:\n            sa.add(k)\n    res=product(sa,su)\n    for a,b in res:\n        g[a][b]=\"#\"\nif g==l:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstring st[55];\nbool h_used[55], v_used[55];\nvector<int> hor[55];\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    cin >> st[i];\n    for (int j = 0; j < m; ++j) {\n      if (st[i][j] == '#') {\n        hor[i].push_back(j);\n      }\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < hor[i].size(); ++j) {\n      int k = hor[i][j];\n      for (int u = 0; u < n; ++u) {\n        if (st[u][k] == '#' && hor[i] != hor[u]) {\n          cout << \"No\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nst = []\nfor i in range(n):\n    s = input()\n    x = set()\n    for j in range(m):\n        if s[j] == '#':\n            x.add(j)\n    for i in st:\n        if i & x and i != x:\n            print('No')\n            exit()\n    st.append(x)\nprint('Yes')\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nsigned main() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char> > a(n, vector<char>(m));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> a[i][j];\n    }\n  }\n  vector<bool> used(n), used1(m);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#' && !used[i] && !used1[j]) {\n        int cnt1 = 0, cnt2 = 0;\n        int c = 0;\n        queue<int> q1, q2;\n        q1.push(i);\n        q2.push(j);\n        used[i] = used1[j] = 1;\n        while (q1.size() + q2.size() != 0) {\n          while (q1.size() != 0) {\n            cnt1++;\n            int v = q1.front();\n            q1.pop();\n            for (int k = 0; k < m; k++) {\n              if (a[v][k] == '#') {\n                c++;\n              }\n              if (a[v][k] == '#' && !used1[k]) {\n                used1[k] = 1;\n                q2.push(k);\n              }\n            }\n          }\n          while (q2.size() != 0) {\n            cnt2++;\n            int v = q2.front();\n            q2.pop();\n            for (int k = 0; k < n; k++) {\n              if (a[k][v] == '#' && !used[k]) {\n                used[k] = 1;\n                q1.push(k);\n              }\n            }\n          }\n        }\n        if (c < cnt1 * cnt2) {\n          cout << \"No\\n\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int m, n;\n  cin >> m >> n;\n  vector<string> A(m);\n  for (int i = 0; i < m; i++) {\n    cin >> A[i];\n  }\n  int f = 0;\n  for (int i = 0; i < m - 1; i++) {\n    long long int x = 0;\n    for (int k = 0; k < n; k++) {\n      if (A[i][k] == '.')\n        x = 2 * x + 0;\n      else\n        x = 2 * x + 1;\n    }\n    for (int j = i + 1; j < m; j++) {\n      long long int y = 0;\n      for (int k = 0; k < n; k++) {\n        if (A[j][k] == '.')\n          y = 2 * y + 0;\n        else\n          y = 2 * y + 1;\n      }\n      if (x != y && (x & y) != 0) {\n        cout << \"No\" << endl;\n        f = 1;\n        break;\n      }\n    }\n    if (f == 1) break;\n  }\n  if (f == 0) cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.HashSet;\nimport java.util.Scanner;\n\npublic class MysticalMosaic {\n\n\tpublic static void solveProblem (String[] matrix) {\n\t\tfor (int i = 0; i < matrix.length; i++) {\n\t\t\tHashSet<Integer> set = new HashSet<>();\n\t\t\tfor (int j = 0; j < matrix[i].length(); j++) {\n\t\t\t\t\n\t\t\t\tif (matrix[i].charAt(j) == '#' ) {\n\t\t\t\t\tset.add(j);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tfor (int k = i + 1; k < matrix.length; k++) {\n\t\t\t\tboolean compare = false;\n\t\t\t\tHashSet<Integer> set2 = new HashSet<>();\n\t\t\t\tfor (int j = 0; j < matrix[k].length(); j++) {\n\t\t\t\t\tif (matrix[k].charAt(j) == '#') {\n\t\t\t\t\t\tset2.add(j);\n\t\t\t\t\t\tif (set.contains(j)) {\n\t\t\t\t\t\t\tcompare = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (compare) {\n\t\t\t\t\tif(!set.equals(set2)) {\n\t\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"YES\");\n\t}\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tint m = scanner.nextInt();\n\t\tscanner.nextLine();\n\t\tString[] matrix = new String[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tmatrix[i] = scanner.nextLine();\n\t\t\t//System.out.print(\"\\n\");\n\t\t\t//scanner.nextLine();\n\t\t}\n\t\tsolveProblem(matrix);\n\t}\n\n}\n"
        },
        {
            "language": 3,
            "solution": "t=set(input()for _ in [0]*int(input().split()[0]))\nprint(['No','Yes'][all(sum(c=='#'for c in s)<2for s in zip(*t))])"
        },
        {
            "language": 3,
            "solution": "n, m = [int(x) for x in input().split()]\ndic={}\ndi={}\nfor i in range(0,n):\n    x=input()\n    if x in di.keys():\n        di[x]+=1\n    else:\n        di[x]=1\n\nfor i in range(0,m):\n    dic[i]=0\n\nfl =1\nfor i in di:\n    for j in range(0,len(i)):\n        if i[j] == '#':\n            if dic[j]==1:\n                fl=0\n                break\n            else:\n                dic[j]=1\n    if fl==0:\n        break\nif fl ==0:\n    print('No')\nelse:\n    print('yes')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<int> v[n];\n  for (int i = 0; i < n; i++) {\n    string str;\n    cin >> str;\n    for (int j = 0; j < str.length(); j++) {\n      if (str[j] == '#') v[i].push_back(j);\n    }\n  }\n  int flag = 1;\n  for (int i = 0; i < n - 1; i++) {\n    for (int j = i + 1; j < n; j++) {\n      int cmp = 0;\n      for (int k = 0; k < v[i].size(); k++) {\n        for (int l = 0; l < v[j].size(); l++) {\n          if (v[i][k] == v[j][l]) cmp++;\n        }\n      }\n      if (cmp == 0 || (v[i].size() == v[j].size() && cmp == v[i].size())) {\n      } else\n        flag = 0;\n    }\n  }\n  if (flag == 1)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\n#pragma GCC optimization(\"unroll-loops\")\nusing namespace std;\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  long long n, m;\n  cin >> n >> m;\n  char a[n][m], b[n][m];\n  map<long long, long long> mp1, mp2;\n  for (long long i = 0; i < n; i++) {\n    for (long long j = 0; j < m; j++) {\n      cin >> a[i][j];\n      b[i][j] = a[i][j];\n    }\n  }\n  long long cur = 0;\n  for (long long i = 0; i < n; i++) {\n    vector<long long> v;\n    for (long long j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        v.push_back(j);\n      }\n    }\n    for (long long k = 0; k < n; k++) {\n      vector<long long> v1;\n      for (long long j = 0; j < m; j++) {\n        if (a[k][j] == '#') {\n          v1.push_back(j);\n        }\n      }\n      sort(v.begin(), v.end());\n      long long cnt = 0;\n      sort(v1.begin(), v1.end());\n      for (long long i = 0; i < v.size(); i++) {\n        for (long long j = 0; j < v1.size(); j++) {\n          if (v[i] == v1[j]) {\n            cnt++;\n            break;\n          }\n        }\n      }\n      if (v != v1 && cnt > 0) {\n        cout << \"NO\"\n             << \"\\n\";\n        return 0;\n      }\n    }\n  }\n  cout << \"YES\"\n       << \"\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m, i, j, k, f = 1, blank = 1;\n  cin >> n >> m;\n  int r[n], c[m];\n  for (i = 0; i < n; i++) r[i] = 0;\n  for (i = 0; i < m; i++) c[i] = 0;\n  char a[n][m + 1];\n  for (i = 0; i < n; i++) cin >> a[i];\n  for (i = 0; i < n; i++) {\n    if (r[i] == 1)\n      continue;\n    else\n      r[i] = 1;\n    for (j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        if (c[j] == 0)\n          c[j] = 1;\n        else {\n          f = 0;\n          break;\n        }\n      }\n    }\n    if (f == 0) break;\n    for (j = i + 1; j < n; j++) {\n      if (strcmp(a[i], a[j]) == 0) r[j] = 1;\n    }\n  }\n  if (f == 0)\n    cout << \"No\\n\";\n  else\n    cout << \"Yes\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long MAX_N = 1e5 + 10, INF = 1e9;\nint n, m;\nchar c[60][60];\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> c[i][j];\n    }\n  }\n  bool ans = true;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (c[i][j] == '#') {\n        for (int ii = 0; ii < n; ii++) {\n          if (ii != i) {\n            if (c[ii][j] == '#') {\n              for (int jj = 0; jj < m; jj++) {\n                if (c[ii][jj] != c[i][jj]) {\n                  ans = false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  if (ans) {\n    cout << \"Yes\" << endl;\n    return 0;\n  }\n  cout << \"No\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long mod = 1e9 + 7;\nconst long long MAX = 1e18;\nstring s[1111];\nlong long p[1111];\nlong long n, m, i, j, g1, g2;\nlong long get(long long v) {\n  if (p[v] == v) return v;\n  p[v] = get(p[v]);\n  return p[v];\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cin >> n >> m;\n  for (i = 0; i < n; i++) cin >> s[i];\n  for (i = 0; i < n; i++) p[i] = i;\n  for (i = 0; i < m; i++) p[i + 55] = i + 55;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      if (s[i][j] == '#') {\n        g1 = get(i);\n        g2 = get(j + 55);\n        if (g1 != g2) {\n          p[g1] = g2;\n        }\n      }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      g1 = get(i);\n      g2 = get(j + 55);\n      if (g1 == g2 && s[i][j] != '#') {\n        cout << \"no\";\n        return 0;\n      }\n    }\n  cout << \"yes\" << endl;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\npublic class b472 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(),m = sc.nextInt();\n        String[] s = new String[n];\n\n        for(int i = 0;i < n;++i){\n            s[i] = sc.next();\n        }\n\n        for(int i = 0;i < n-1;++i) {\n            for(int j = i+1;j < n;++j){\n                boolean same = true,noIntersect = true;\n\n                for(int k = 0;k < m;++k){\n                    if(s[i].charAt(k) != s[j].charAt(k)){\n                        same = false;\n                    }\n\n                    if(s[i].charAt(k) == s[j].charAt(k) && s[j].charAt(k) == '#'){\n                        noIntersect = false;\n                    }\n                }\n\n                if(!same && !noIntersect){\n                    System.out.println(\"No\");\n                    return;\n                }\n            }\n        }\n\n        System.out.println(\"Yes\"); \n    }\n}"
        },
        {
            "language": 1,
            "solution": "from sys import stdin \nn,m = map(int,stdin.readline().split())\na = [] \nb = []\nfor i in xrange(m):\n    a.append(set())\nfor i in xrange(n):\n    s = stdin.readline().strip()\n    b.append(s)\nfor j in xrange(m):\n    for i in xrange(n):\n        if b[i][j]=='#':\n            a[j].add(i)\nans = 'Yes'\nfor i in xrange(m):\n    for j in xrange(m):\n        if a[i]!=a[j]:\n            common = a[i] & a[j] \n            if len(common):\n                ans = 'No'\nprint ans "
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar graph[60][60];\nint type[60];\nint main() {\n  int n, m;\n  char t;\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j <= m; j++) scanf(\"%c\", &graph[i][j]);\n  unordered_set<int> sett;\n  bool ans = true;\n  int ptype = 1;\n  for (int i = 0; i < m; i++) {\n    unordered_set<int> tocompare;\n    for (int j = 0; j < n; j++) {\n      if (graph[j][i] == '#') {\n        tocompare.insert(j);\n      }\n    }\n    if (tocompare.size() == 0 || tocompare.size() == 1) {\n      for (int row : tocompare) sett.insert(row);\n      continue;\n    }\n    vector<int> cmp;\n    int firsttype = -1;\n    bool fail = false;\n    for (int row : tocompare) {\n      if (firsttype == -1)\n        firsttype = type[row];\n      else if (firsttype != type[row]) {\n        fail = true;\n        break;\n      }\n    }\n    if (fail) {\n      ans = false;\n      break;\n    }\n    if (firsttype != 0) continue;\n    fail = false;\n    for (int row : tocompare) {\n      sett.insert(row);\n      type[row] = ptype;\n    }\n    ptype++;\n    for (int c = 0; c < m; c++) {\n      int fir = 0;\n      for (int row : tocompare) {\n        if (fir == 0)\n          fir = graph[row][c];\n        else if (graph[row][c] != fir) {\n          fir = -1;\n          fail = true;\n          break;\n        }\n      }\n      if (fir == -1) break;\n    }\n    if (fail) {\n      ans = false;\n      break;\n    }\n  }\n  if (ans)\n    printf(\"Yes\\n\");\n  else\n    printf(\"No\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  char a[n][m];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> a[i][j];\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        for (int k = 0; k < n; k++) {\n          if (a[k][j] == '#') {\n            for (int l = 0; l < m; l++) {\n              if (a[k][l] == '#' && a[i][l] != '#') {\n                cout << \"No\";\n                return 0;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void read(T& x) {\n  char c = getchar();\n  bool f = false;\n  for (x = 0; !isdigit(c); c = getchar()) {\n    if (c == '-') {\n      f = true;\n    }\n  }\n  for (; isdigit(c); c = getchar()) {\n    x = x * 10 + c - '0';\n  }\n  if (f) {\n    x = -x;\n  }\n}\ntemplate <typename T, typename... U>\ninline void read(T& x, U&... y) {\n  read(x), read(y...);\n}\nint n, m;\nbool vis[55];\nchar S[55][55];\nint main() {\n  read(n, m);\n  for (int i = 1; i <= n; ++i) scanf(\"%s\", S[i] + 1);\n  bool OK = true;\n  for (int i = 1; i <= m; ++i) {\n    memset(vis, 0, sizeof(vis));\n    for (int j = 1; j <= n; ++j)\n      if (S[j][i] == '#') vis[j] = true;\n    for (int j = 1; j <= m; ++j) {\n      bool t1 = false, t2 = false;\n      for (int k = 1; k <= n; ++k) {\n        if (S[k][j] == '#') {\n          if (vis[k])\n            t1 = true;\n          else\n            t2 = true;\n        }\n      }\n      if (t1 & t2) OK = false;\n    }\n  }\n  puts(OK ? \"Yes\" : \"No\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.*;\nimport java.io.*;\n\npublic class ll {\n    public static void main(String[] args) throws Exception {\n        gg g = new gg();\n    }\n\n}\n\nclass gg {\n    int[] p;\n    int[] rank;\n    int[] umsg, rmsg;\n    boolean[] g;\n    int[] hui;\n    int n;\n    long k;\n    int[] sended;\n    PrintWriter pw;\n    int lead;\n    int[] mas;\n    TreeSet<Integer> fiiq;\n    ArrayList<int[]> ans;\n    TreeSet<Integer> sset[];\n    long dp[][];\n    boolean[] checked;\n    int mo;\n    ArrayList<Integer>[] tree;\n\n    gg() throws Exception {\n        //         FScanner fs = new FScanner(new FileReader(\"sequences.in\"));\n        //  pw = new PrintWriter(\"sequences.out\");\n        FScanner fs = new FScanner(new InputStreamReader(System.in));\n        pw = new PrintWriter(System.out);\n        int n = fs.nextInt();\n        int m = fs.nextInt();\n        char[][] mas = fs.cmas2(n, m);\n        boolean[] checked = new boolean[n];\n        for (int i = 0; i<n; i++) {\n            if (!checked[i]) {\n                ArrayList<Integer> poses = new ArrayList<>();\n                for (int j = 0; j<m; j++)\n                    if (mas[i][j] == '#')\n                        poses.add(j);\n                for (int f = i+1; f<n; f++) {\n                    int same =0;\n                    for (int j = 0; j<poses.size(); j++) {\n                        if (mas[f][poses.get(j)] == '#')\n                            same++;\n                    }\n                    if (same > 0 && same <poses.size()) {\n                        System.out.println(\"No\");\n                        System.exit(0);\n                    } else if (same != 0) {\n                        for (int j = 0; j<m; j++) {\n                            if (mas[f][j] != mas[i][j])\n                            {\n                                System.out.println(\"No\");\n                                System.exit(0);\n                            }\n                        }\n                        checked[f] = true;\n                    }\n                }\n            }\n        }\n        pw.println(\"Yes\");\n        pw.close();\n    }\n\n    long[][] pow(long[][] mat, long val) {\n        if (val == 1)\n            return mat;\n        if (val % 2 == 0) {\n            long[][] m = pow(mat, val / 2);\n            return mul(m, m);\n        } else {\n            val--;\n            long[][] ss = mat.clone();\n            return mul(pow(mat, val), ss);\n        }\n    }\n\n    long[][] mul(long[][] m1, long[][] m2) {\n        int a1 = m1.length, a2 = m1[0].length, a3 = m2[0].length;\n        long[][] ff = new long[a1][a3];\n        for (int i = 0; i < a1; i++) {\n            for (int j = 0; j < a3; j++)\n                for (int s = 0; s < a2; s++)\n                    ff[i][j] = (ff[i][j] + m1[i][s] * m2[s][j]) % mo;\n        }\n        return ff;\n    }\n\n    void dfs(int cur, long[] a, long[] b, long[] c) {\n        checked[cur] = true;\n        for (int i = 0; i < tree[cur].size(); i += 2) {\n            if (!checked[tree[cur].get(i)]) {\n                dfs(tree[cur].get(i), a, b, c);\n                a[cur] = Math.max(a[cur], b[tree[cur].get(i)] + tree[cur].get(i + 1) - c[tree[cur].get(i)]);\n                b[cur] += c[tree[cur].get(i)];\n            }\n        }\n        a[cur] += b[cur];\n        c[cur] = Math.max(a[cur], b[cur]);\n\n    }\n\n    void find(int i, int j, ArrayList<Integer> ans, int[][] dp, int[] w) {\n        if (dp[i][j] == 0)\n            return;\n        if (dp[i - 1][j] == dp[i][j])\n            find(i - 1, j, ans, dp, w);\n        else {\n            ans.add(i);\n            find(i - 1, j - w[i - 1], ans, dp, w);\n        }\n    }\n\n    void next(int[] bitmask) {\n        int r = 0;\n        while (bitmask[r] == 1)\n            bitmask[r++] = 0;\n        bitmask[r] = 1;\n    }\n\n\n}\n\nclass Pair implements Comparable<Pair> {\n    long a;\n    int x;\n\n    Pair(long x1, int y1) {\n        a = x1;\n        a = y1;\n    }\n\n    @Override\n    public int compareTo(Pair o) {\n        if (a == o.a)\n            return Integer.compare(x, o.x);\n        else return Long.compare(a, o.a);\n    }\n}\n\n\nclass FScanner {\n    StringTokenizer st;\n    BufferedReader reader;\n\n    FScanner(InputStreamReader isr) throws IOException {\n        reader = new BufferedReader(isr);\n    }\n\n    String nextLine() throws IOException {\n        return reader.readLine();\n    }\n\n    String nextToken() throws IOException {\n        while (st == null || !st.hasMoreTokens()) {\n            String s = reader.readLine();\n            if (s == null)\n                return null;\n            st = new StringTokenizer(s);\n        }\n        return st.nextToken();\n    }\n\n    int nextInt() throws IOException {\n        return Integer.parseInt(nextToken());\n    }\n\n    double nextDouble() throws IOException {\n        return Double.parseDouble(nextToken());\n    }\n\n    char nextChar() throws IOException {\n        return (char) reader.read();\n    }\n\n    long nextLong() throws IOException {\n        return Long.parseLong(nextToken());\n    }\n\n    int[] iarr(int n) throws IOException {\n        int[] mas = new int[n];\n        for (int i = 0; i < n; i++)\n            mas[i] = nextInt();\n        return mas;\n    }\n\n    double[] darr(int n) throws IOException {\n        double[] mas = new double[n];\n        for (int i = 0; i < n; i++)\n            mas[i] = nextDouble();\n        return mas;\n    }\n\n    char[][] cmas2(int n, int m) throws IOException {\n        char[][] mas = new char[n][m];\n        for (int i = 0; i < n; i++)\n            mas[i] = nextLine().toCharArray();\n        return mas;\n    }\n\n    long[] larr(int n) throws IOException {\n        long[] mas = new long[n];\n        for (int i = 0; i < n; i++)\n            mas[i] = nextLong();\n        return mas;\n    }\n}\n\nclass PairP implements Comparable<PairP> {\n    int l, r;\n\n    PairP(int l1, int r1) {\n        l = l1;\n        r = r1;\n    }\n\n    @Override\n    public int compareTo(PairP o) {\n        if (l == o.l)\n            return Integer.compare(r, o.r);\n        else return Integer.compare(l, o.l);\n    }\n}\n"
        },
        {
            "language": 3,
            "solution": "import sys, math, os.path\n\nFILE_INPUT = \"B.in\"\nDEBUG = os.path.isfile(FILE_INPUT)\nif DEBUG: \n    sys.stdin = open(FILE_INPUT)    \n\ndef ni():\n    return map(int, input().split(\" \"))\n\ndef nia(): \n    return list(map(int,input().split()))\n\ndef log(x):\n    if (DEBUG):\n        print(x)\n\nn,m = ni()\n\na = [input() for x in range(n) ]\nlog(a)\nr = [[] for k in range(n)]\nc = [[] for k in range(m)]\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '#':\n            r[i] += [j]\n            c[j] += [i]\n\nlog(r)\nlog(c)\n\ncheck = [True for x in range(n)]\nfor i in range(n):\n    # print(i, r[i])\n    for ci in r[i]:\n        #check column ci\n        for rii in c[ci]:\n            if r[rii] != r[c[ci][0]]:\n                print(\"No\")\n                # print(r[rii])\n                # print(r[c[ci][0]])\n                sys.exit()\nprint(\"Yes\")"
        },
        {
            "language": 3,
            "solution": "#!/usr/bin/env python3\n\nimport sys\n\n[n, m] = map(int, sys.stdin.readline().strip().split())\ntable = [sys.stdin.readline().strip() for _ in range(n)]\n\nfirst_to_row = dict()\n\nposs = True\nfor row in table:\n\tfirst = row.find('#')\n\tif first in first_to_row:\n\t\tif first_to_row[first] != row:\n\t\t\tposs = False\n\t\t\tbreak\n\telse:\n\t\tfirst_to_row[first] = row\n\n\nif poss:\n\tcounts = [False for _ in range(m)]\n\tfor row in first_to_row.values():\n\t\tfor i in range(m):\n\t\t\tif row[i] == '#':\n\t\t\t\tif counts[i]:\n\t\t\t\t\tposs = False\n\t\t\t\t\tbreak\n\t\t\t\tcounts[i] = True\n\t\tif not poss:\n\t\t\tbreak\n\n\nif poss:\n\tprint ('Yes')\nelse:\n\tprint ('No')\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n/*\n * \tHeart beats fast\n * \t\tColors and promises\n * \t\t\tHow to be brave\n * \t\t\t\tHow can I love when I am afraid to fall...\n */\npublic class Main \n{\n\tstatic final int mod=1000000007;\n\tstatic final double eps=1e-8;\n\tstatic final long inf=100000000000000000L;\n\tstatic final boolean debug=true;\n\tstatic Reader in=new Reader();\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tint n=ni(),m=ni();\n\t\tString s[]=new String[n];\n\t\tfor(int i=0; i<n; i++)\n\t\t\ts[i]=ns();\n\t\tboolean poss=true;\n\t\tfor(int i=0; i<n; i++)\n\t\t{\n\t\t\tfor(int j=0; j<i; j++)\n\t\t\t{\n\t\t\t\tboolean match=false;\n\t\t\t\tfor(int k=0; k<m; k++)\n\t\t\t\t{\n\t\t\t\t\tif(s[i].charAt(k)=='#'&&s[j].charAt(k)=='#')\n\t\t\t\t\t\tmatch=true;\n\t\t\t\t}\n\t\t\t\tif(match)\n\t\t\t\tfor(int k=0; k<m; k++)\n\t\t\t\t{\n\t\t\t\t\tif(s[i].charAt(k)!=s[j].charAt(k))\n\t\t\t\t\t{\n\t\t\t\t\t\tposs=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0; i<m; i++)\n\t\t{\n\t\t\tfor(int j=0; j<i; j++)\n\t\t\t{\n\t\t\t\tboolean match=false;\n\t\t\t\tfor(int k=0; k<n; k++)\n\t\t\t\t{\n\t\t\t\t\tif(s[k].charAt(i)=='#'&&s[k].charAt(j)=='#')\n\t\t\t\t\t\tmatch=true;\n\t\t\t\t}\n\t\t\t\tif(match)\n\t\t\t\tfor(int k=0; k<n; k++)\n\t\t\t\t{\n\t\t\t\t\tif(s[k].charAt(i)!=s[k].charAt(j))\n\t\t\t\t\t{\n\t\t\t\t\t\tposs=false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(poss)\n\t\t\tpr(\"Yes\");\n\t\telse\n\t\t\tpr(\"No\");\n\t\tSystem.out.println(ans);\n\t}\n\tstatic StringBuilder ans=new StringBuilder();\n\tstatic long powm(long a, long b, long m)\n\t{\n\t\tlong an=1;\n\t\tlong c=a;\n\t\twhile(b>0)\n\t\t{\n\t\t\tif(b%2==1)\n\t\t\t\tan=(an*c)%m;\n\t\t\tc=(c*c)%m;\n\t\t\tb>>=1;\n\t\t}\n\t\treturn an;\n\t}\n\tstatic Random rn=new Random();\n\tstatic void pd(){if(debug)ans.append(\"hola\");}\n\tstatic void pd(Object a){if(debug)ans.append(a+\"\\n\");}\n\tstatic void pr(Object a){ans.append(a+\"\\n\");}\n\tstatic void pr(){ans.append(\"\\n\");}\n\tstatic void p(Object a){ans.append(a);}\n\tstatic int ni(){return in.nextInt();}\n\tstatic long nl(){return in.nextLong();}\n\tstatic String ns(){return in.next();}\n\tstatic double nd(){return in.nextDouble();}\n\tstatic String pr(String a, long b)\n\t{\n\t\tString c=\"\";\n\t\twhile(b>0)\n\t\t{\n\t\t\tif(b%2==1)\n\t\t\t\tc=c.concat(a);\n\t\t\ta=a.concat(a);\n\t\t\tb>>=1;\n\t\t}\n\t\treturn c;\n\t}\n\tstatic class Reader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n        public Reader() {\n            reader = new BufferedReader(new InputStreamReader(System.in), 32768);\n            tokenizer = null;\n        }\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n        public long nextLong() {\n        \treturn Long.parseLong(next());\n        }\n        public double nextDouble() {\n        \treturn Double.parseDouble(next());\n        }\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long MOD = 1e9 + 7;\nconst double PI = 3.141592653589793238462643383279502884;\nconst double EPS = 1e-9;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n, m;\n  cin >> n >> m;\n  vector<string> strTable;\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    strTable.push_back(s);\n  }\n  bool table[1000][1000];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      table[i][j] = (strTable[i][j] == '#');\n    }\n  }\n  bool can = true;\n  for (int i = 0; i < n; i++) {\n    vector<int> cols;\n    for (int j = 0; j < m; j++) {\n      if (table[i][j]) {\n        cols.push_back(j);\n      }\n    }\n    if (cols.size() == 0) {\n      continue;\n    }\n    for (int k = 0; k < n; k++) {\n      int value = table[k][cols[0]];\n      for (int m = 0; m < cols.size(); m++) {\n        if (table[k][cols[m]] != value) {\n          can = false;\n          break;\n        }\n      }\n    }\n    if (can == false) {\n      break;\n    }\n  }\n  if (can) {\n    cout << \"Yes\";\n  } else {\n    cout << \"No\";\n  }\n  cout << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main(int argc, const char* argv[]) {\n  int m, n;\n  cin >> n >> m;\n  string matrix[50];\n  int used[50];\n  for (int i = 0; i < 50; i++) {\n    used[i] = -1;\n  }\n  for (int i = 0; i < n; i++) {\n    cin >> matrix[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (matrix[i][j] == '#' && used[j] == -1) {\n        used[j] = i;\n      }\n      if (matrix[i][j] == '#' && used[j] != -1) {\n        if (matrix[i] != matrix[used[j]]) {\n          cout << \"NO\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"YES\";\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "'''input\n5 9\n........#\n#........\n..##.#...\n.......#.\n....#.#.#\n'''\nfrom collections import defaultdict as df\nfrom bisect import bisect_left as bl \nimport sys\n\n#n=input()\n#s=raw_input().strip()\nn,m=[int(x) for x in raw_input().split()]\nM=[]\nfor i in range(n):\n    M.append(list(raw_input().strip()))\n\n\ndef check(x,y):\n    R=[]\n    C=[]\n    for i in range(m):\n        if M[x][i]==\"#\":\n            R.append(i)\n    for i in range(n):\n        if M[i][y]==\"#\":\n            C.append(i)\n   \n    for x1 in C:\n        for y1 in R:\n            if M[x1][y1]!=\"#\":\n                return True\n            #M[x1][y1]=\".\" \n    return False\nans=\"Yes\"\nfor i in range(n):\n    for j in range(m):\n        if M[i][j]==\"#\":\n            if check(i,j):\n                ans=\"No\"\nprint ans"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx\")\nusing namespace std;\nconst int N = (int)5e5 + 7, MOD = (int)1e9 + 7;\nint n, m;\nint cnt, z;\nstring second[N];\nvector<int> v;\nint main() {\n  ios_base ::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> second[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (second[i][j] == '#') {\n        v.push_back(j);\n      }\n    }\n    for (int j = i + 1; j < n; j++) {\n      cnt = 0;\n      for (auto x : v) {\n        if (second[j][x] == '#') {\n          cnt++;\n        }\n      }\n      if (cnt != 0) {\n        z = 0;\n        if (cnt != v.size()) {\n          cout << \"No\"\n               << \"\\n\";\n          exit(0);\n        }\n        for (int k = 0; k < m; k++) {\n          if (second[j][k] == '#') {\n            z++;\n          }\n        }\n        if (z != cnt) {\n          cout << \"No\"\n               << \"\\n\";\n          exit(0);\n        }\n      }\n    }\n    v.clear();\n  }\n  cout << \"Yes\"\n       << \"\\n\";\n  exit(0);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nlong long a[60];\nchar s[60];\nint main() {\n  int i, j;\n  cin >> n >> m;\n  for (i = 1; i <= n; ++i) {\n    scanf(\"%s\", s + 1);\n    for (j = 1; j <= m; ++j) a[i] = (a[i] << 1 | (s[j] == '#'));\n  }\n  for (i = 1; i <= n; i++)\n    for (j = i + 1; j <= n; j++)\n      if ((a[i] != a[j]) && (a[i] & a[j])) {\n        cout << \"No\";\n        return 0;\n      }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split(' '))\nl=[]\na=0\nfor i in range(0,n):\n    s=input()\n    st=set()\n    for j in range(0,m):\n        if s[j]=='#':\n            st.add(j)\n    if st not in l:\n        l.append(st)\nfor i in range(0,len(l)):\n    for j in range(i+1,len(l)):\n        if l[i].intersection(l[j])!=set():\n            a+=1\n            break\nif a>=1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n        "
        },
        {
            "language": 1,
            "solution": "\ndef process(a,r,c):\n    row,col= [0]*r,[0]*c \n    dic={}\n    for i in xrange(r):\n        s= a[i]\n        l=''\n        for j in xrange(c):\n            if s[j]=='#':\n                if l: l=l+','+str(j)\n                else: l=str(j)\n        if not l: continue   \n        b=0\n        for k in dic:\n            if dic[k]==l: \n                b=1 \n                nk= k+','+str(i)\n                del dic[k]\n                dic[nk]=l \n                break \n        if b==0: dic[str(i)]=l \n    #print dic \n    if not dic: return 1 \n    for ke in dic:\n        k,v=ke,dic[ke]\n        rowarr,colarr=map(int,k.split(',')), map(int,v.split(','))\n        #print rowarr,colarr\n        for x in xrange(len(rowarr)):\n            if not 0<=rowarr[x]<=r-1: continue\n            if row[rowarr[x]]==1: return 0\n            else: row[rowarr[x]]=1 \n        for y in xrange(len(colarr)):\n            if not 0<=colarr[y]<=c-1: continue\n            if col[colarr[y]]==1: return 0\n            else: col[colarr[y]]=1 \n    return 1 \n\nr,c= map(int,raw_input().split())\na= ['' for _ in xrange(r)]\nfor i in xrange(r): a[i]= str(raw_input())\nif process(a,r,c): print \"Yes\"\nelse: print \"No\"\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.Map.Entry;\n\npublic class Main\n{\n\tprivate InputStream stream;\n\tprivate byte[] buf = new byte[1024];\n\tprivate int curChar;\n\tprivate int numChars;\n\tprivate SpaceCharFilter filter;\n\tprivate PrintWriter pw;\n\tprivate long mod = 1000000000\n\t\t\t+ 7;\n\n\tprivate StringBuilder ans_sb;\n\tprivate long sum = 0;\n\tprivate int[] cnt;\n\n\tprivate void soln()\n\t{\n\t\tint n = nextInt();\n\t\tint m = nextInt();\n\t\tchar[][] grid = new char[n][m];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tString tmp = nextLine();\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\tgrid[i][j] = tmp\n\t\t\t\t\t\t.charAt(j);\n\t\t}\n\t\tHashSet[] sets = new HashSet[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tsets[i] = new HashSet<>();\n\t\t}\n\t\tboolean ff = true;\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tint f = -1;\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t{\n\t\t\t\tif (grid[i][j] == '#')\n\t\t\t\t{\n\t\t\t\t\tif (f == -1)\n\t\t\t\t\t\tf = j;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int i1 = 0; i1 < n; i1++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (grid[i1][f] != grid[i1][j])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tff = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ff)\n\t\t\tpw.println(\n\t\t\t\t\t\"Yes\");\n\t\telse\n\t\t\tpw.println(\n\t\t\t\t\t\"No\");\n\t}\n\n\tclass BitsetLong\n\t{\n\n\t\tstatic final int LOG = 6;\n\t\tstatic final int SIZE = 1 << LOG;\n\t\tstatic final int MASK = SIZE\n\t\t\t\t- 1;\n\n\t\tprivate long[] data;\n\n\t\tpublic BitsetLong(\n\t\t\t\tint n)\n\t\t{\n\t\t\tdata = new long[(n >> LOG)\n\t\t\t\t\t+ 2];\n\t\t}\n\n\t\tvoid set(\n\t\t\t\tint i)\n\t\t{\n\t\t\tdata[i >> LOG] |= 1L << (i\n\t\t\t\t\t& MASK);\n\t\t}\n\n\t\tvoid unset(\n\t\t\t\tint i)\n\t\t{\n\t\t\tdata[i >> LOG] &= ~(1L << (i\n\t\t\t\t\t& MASK));\n\t\t}\n\n\t\tvoid flip(\n\t\t\t\tint i)\n\t\t{\n\t\t\tdata[i >> LOG] ^= 1L << (i\n\t\t\t\t\t& MASK);\n\t\t}\n\n\t\tint get(int i)\n\t\t{\n\t\t\treturn (int) ((data[i >> LOG] >>> (i\n\t\t\t\t\t& MASK))\n\t\t\t\t\t& 1);\n\t\t}\n\n\t\tvoid print()\n\t\t{\n\t\t\tfor (int i = 0; i < data.length; i++)\n\t\t\t{\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.print(Long\n\t\t\t\t\t\t\t\t.toString(\n\t\t\t\t\t\t\t\t\t\tdata[i],\n\t\t\t\t\t\t\t\t\t\t2));\n\t\t\t}\n\t\t\tSystem.out\n\t\t\t\t\t.println();\n\t\t}\n\n\t\tlong getWord(\n\t\t\t\tint i)\n\t\t{\n\t\t\tif (i <= -SIZE\n\t\t\t\t\t|| (i >> LOG)\n\t\t\t\t\t\t\t+ 1 >= data.length)\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tint rem = i\n\t\t\t\t\t& MASK;\n\t\t\tint idx = i >> LOG;\n\n\t\t\tif (rem == 0)\n\t\t\t{\n\t\t\t\treturn data[idx];\n\t\t\t}\n\n\t\t\tlong head = idx < 0\n\t\t\t\t\t? 0\n\t\t\t\t\t: (data[idx] >>> rem);\n\t\t\tlong tail = data[idx\n\t\t\t\t\t+ 1] << (SIZE\n\t\t\t\t\t\t\t- rem);\n\n\t\t\treturn head\n\t\t\t\t\t| tail;\n\t\t}\n\t}\n\n\tint count(\n\t\t\tlong[] bs,\n\t\t\tint len)\n\t{\n\t\tint ret = 0;\n\t\tfor (int i = 0; i << 6 < len; i++)\n\t\t{\n\t\t\tif (((i + 1) << 6) <= len)\n\t\t\t{\n\t\t\t\tret += Long\n\t\t\t\t\t\t.bitCount(\n\t\t\t\t\t\t\t\tbs[i]);\n\t\t\t} else\n\t\t\t{\n\t\t\t\tint rem = len\n\t\t\t\t\t\t& 63;\n\t\t\t\tret += Long\n\t\t\t\t\t\t.bitCount(\n\t\t\t\t\t\t\t\tbs[i] << (64\n\t\t\t\t\t\t\t\t\t\t- rem));\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate class Pair\n\t\t\timplements\n\t\t\tComparable<Pair>\n\t{\n\t\tint v, i,\n\t\t\t\tj;\n\n\t\tpublic Pair(\n\t\t\t\tint a,\n\t\t\t\tint b,\n\t\t\t\tint c)\n\t\t{\n\t\t\tv = a;\n\t\t\ti = b;\n\t\t\tj = c;\n\t\t}\n\n\t\t@Override\n\t\tpublic int compareTo(\n\t\t\t\tPair arg0)\n\t\t{\n\t\t\treturn this.v\n\t\t\t\t\t- arg0.v;\n\t\t}\n\t}\n\n\tprivate class Bridge\n\t{\n\t\tprivate LinkedList<Edge>[] graph;\n\t\tprivate LinkedList<Integer>[] tree;\n\t\tprivate int t;\n\t\tprivate boolean[] isBridge;\n\t\tprivate int[] cno;\n\n\t\tpublic Bridge(\n\t\t\t\tint n,\n\t\t\t\tint m)\n\t\t{\n\t\t\tpre(n, m);\n\t\t}\n\n\t\tprivate class Edge\n\t\t{\n\t\t\tint u, v,\n\t\t\t\t\ti;\n\n\t\t\tpublic Edge(\n\t\t\t\t\tint a,\n\t\t\t\t\tint b,\n\t\t\t\t\tint c)\n\t\t\t{\n\t\t\t\tu = a;\n\t\t\t\tv = b;\n\t\t\t\ti = c;\n\t\t\t}\n\t\t}\n\n\t\tprivate void pre(\n\t\t\t\tint n,\n\t\t\t\tint m)\n\t\t{\n\t\t\tgraph = new LinkedList[n];\n\t\t\ttree = new LinkedList[n];\n\t\t\tfor (int i = 0; i < m; i++)\n\t\t\t{\n\t\t\t\tint u = nextInt()\n\t\t\t\t\t\t- 1;\n\t\t\t\tint v = nextInt()\n\t\t\t\t\t\t- 1;\n\t\t\t\tEdge e = new Edge(\n\t\t\t\t\t\tu,\n\t\t\t\t\t\tv,\n\t\t\t\t\t\ti);\n\t\t\t\tgraph[u].add(\n\t\t\t\t\t\te);\n\t\t\t\tgraph[v].add(\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t\tisBridge = new boolean[m];\n\t\t\tcno = new int[n];\n\t\t\tboolean[] v = new boolean[n];\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tif (!v[i])\n\t\t\t\t\tdfs(i, null,\n\t\t\t\t\t\t\tv,\n\t\t\t\t\t\t\tarr);\n\t\t}\n\n\t\tprivate int dfs(\n\t\t\t\tint u,\n\t\t\t\tEdge e,\n\t\t\t\tboolean[] v,\n\t\t\t\tint[] arr)\n\t\t{\n\t\t\tv[u] = true;\n\t\t\tarr[u] = t++;\n\t\t\tint min = arr[u];\n\t\t\tIterator<Edge> it = graph[u]\n\t\t\t\t\t.listIterator();\n\t\t\twhile (it\n\t\t\t\t\t.hasNext())\n\t\t\t{\n\t\t\t\tEdge x = it\n\t\t\t\t\t\t.next();\n\t\t\t\tint w = x.u;\n\t\t\t\tif (x.u == u)\n\t\t\t\t\tw = x.v;\n\t\t\t\tif (!v[w])\n\t\t\t\t\tmin = Math\n\t\t\t\t\t\t\t.min(min,\n\t\t\t\t\t\t\t\t\tdfs(w, x,\n\t\t\t\t\t\t\t\t\t\t\tv,\n\t\t\t\t\t\t\t\t\t\t\tarr));\n\t\t\t\telse if (x != e)\n\t\t\t\t\tmin = Math\n\t\t\t\t\t\t\t.min(min,\n\t\t\t\t\t\t\t\t\tarr[w]);\n\t\t\t}\n\t\t\tif (min == arr[u]\n\t\t\t\t\t&& e != null)\n\t\t\t\tisBridge[e.i] = true;\n\t\t\treturn min;\n\t\t}\n\n\t\tprivate void bfs(\n\t\t\t\tint u,\n\t\t\t\tint cmpNo,\n\t\t\t\tQueue<Integer>[] q,\n\t\t\t\tboolean[] v)\n\t\t{\n\t\t\tint cur = cmpNo;\n\t\t\tcno[cur] = cmpNo;\n\t\t\tq[cur].add(\n\t\t\t\t\tu);\n\t\t\tv[u] = true;\n\t\t\twhile (!q[cur]\n\t\t\t\t\t.isEmpty())\n\t\t\t{\n\t\t\t\tint x = q[cur]\n\t\t\t\t\t\t.poll();\n\t\t\t\tIterator<Edge> it = graph[x]\n\t\t\t\t\t\t.listIterator();\n\t\t\t\twhile (it\n\t\t\t\t\t\t.hasNext())\n\t\t\t\t{\n\t\t\t\t\tEdge x1 = it\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tint w = x1.u;\n\t\t\t\t\tif (w == x)\n\t\t\t\t\t\tw = x1.v;\n\t\t\t\t\tif (!v[w])\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isBridge[x1.i])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttree[cur]\n\t\t\t\t\t\t\t\t\t.add(0, cmpNo\n\t\t\t\t\t\t\t\t\t\t\t+ 1);\n\t\t\t\t\t\t\ttree[cmpNo\n\t\t\t\t\t\t\t\t\t+ 1].add(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\tcur);\n\t\t\t\t\t\t\tbfs(w, cmpNo\n\t\t\t\t\t\t\t\t\t+ 1,\n\t\t\t\t\t\t\t\t\tq,\n\t\t\t\t\t\t\t\t\tv);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbfs(w, cmpNo,\n\t\t\t\t\t\t\t\t\tq,\n\t\t\t\t\t\t\t\t\tv);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate String solveEqn(\n\t\t\tlong a,\n\t\t\tlong b)\n\t{\n\t\tlong x = 0,\n\t\t\t\ty = 1,\n\t\t\t\tlastx = 1,\n\t\t\t\tlasty = 0,\n\t\t\t\ttemp;\n\t\twhile (b != 0)\n\t\t{\n\t\t\tlong q = a\n\t\t\t\t\t/ b;\n\t\t\tlong r = a\n\t\t\t\t\t% b;\n\t\t\ta = b;\n\t\t\tb = r;\n\t\t\ttemp = x;\n\t\t\tx = lastx\n\t\t\t\t\t- q * x;\n\t\t\tlastx = temp;\n\t\t\ttemp = y;\n\t\t\ty = lasty\n\t\t\t\t\t- q * y;\n\t\t\tlasty = temp;\n\t\t}\n\t\treturn lastx\n\t\t\t\t+ \" \"\n\t\t\t\t+ lasty;\n\t}\n\n\tprivate void debug(\n\t\t\tObject... o)\n\t{\n\t\tSystem.out\n\t\t\t\t.println(\n\t\t\t\t\t\tArrays.deepToString(\n\t\t\t\t\t\t\t\to));\n\t}\n\n\tprivate long pow(\n\t\t\tlong a,\n\t\t\tlong b,\n\t\t\tlong c)\n\t{\n\t\tif (b == 0)\n\t\t\treturn 1;\n\t\tlong p = pow(\n\t\t\t\ta,\n\t\t\t\tb / 2,\n\t\t\t\tc);\n\t\tp = (p * p)\n\t\t\t\t% c;\n\t\treturn (b\n\t\t\t\t% 2 == 0)\n\t\t\t\t\t\t? p\n\t\t\t\t\t\t: (a * p)\n\t\t\t\t\t\t\t\t% c;\n\t}\n\n\tprivate long gcd(\n\t\t\tlong n,\n\t\t\tlong l)\n\t{\n\t\tif (l == 0)\n\t\t\treturn n;\n\t\treturn gcd(\n\t\t\t\tl,\n\t\t\t\tn % l);\n\t}\n\n\tpublic static void main(\n\t\t\tString[] args)\n\t\t\tthrows Exception\n\t{\n\t\tnew Thread(\n\t\t\t\tnull,\n\t\t\t\tnew Runnable()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run()\n\t\t\t\t\t{\n\t\t\t\t\t\tnew Main()\n\t\t\t\t\t\t\t\t.solve();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"1\",\n\t\t\t\t1 << 26).start();\n\t\t// new Main().solve();\n\t}\n\n\tpublic StringBuilder solve()\n\t{\n\t\tInputReader(\n\t\t\t\tSystem.in);\n\t\t/*\n\t\t * try { InputReader(new FileInputStream(\"C:\\\\Users\\\\hardik\\\\Desktop\\\\in.txt\"));\n\t\t * } catch(FileNotFoundException e) {}\n\t\t */\n\t\tpw = new PrintWriter(\n\t\t\t\tSystem.out);\n\t\t// ans_sb = new StringBuilder();\n\t\tsoln();\n\n\t\tpw.close();\n\t\t// System.out.println(ans_sb);\n\t\treturn ans_sb;\n\t}\n\n\tpublic void InputReader(\n\t\t\tInputStream stream1)\n\t{\n\t\tstream = stream1;\n\t}\n\n\tprivate boolean isWhitespace(\n\t\t\tint c)\n\t{\n\t\treturn c == ' '\n\t\t\t\t|| c == '\\n'\n\t\t\t\t|| c == '\\r'\n\t\t\t\t|| c == '\\t'\n\t\t\t\t|| c == -1;\n\t}\n\n\tprivate boolean isEndOfLine(\n\t\t\tint c)\n\t{\n\t\treturn c == '\\n'\n\t\t\t\t|| c == '\\r'\n\t\t\t\t|| c == -1;\n\t}\n\n\tprivate int read()\n\t{\n\t\tif (numChars == -1)\n\t\t\tthrow new InputMismatchException();\n\t\tif (curChar >= numChars)\n\t\t{\n\t\t\tcurChar = 0;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tnumChars = stream\n\t\t\t\t\t\t.read(buf);\n\t\t\t} catch (IOException e)\n\t\t\t{\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tif (numChars <= 0)\n\t\t\t\treturn -1;\n\t\t}\n\t\treturn buf[curChar++];\n\t}\n\n\tprivate int nextInt()\n\t{\n\t\tint c = read();\n\t\twhile (isSpaceChar(\n\t\t\t\tc))\n\t\t\tc = read();\n\t\tint sgn = 1;\n\t\tif (c == '-')\n\t\t{\n\t\t\tsgn = -1;\n\t\t\tc = read();\n\t\t}\n\t\tint res = 0;\n\t\tdo\n\t\t{\n\t\t\tif (c < '0'\n\t\t\t\t\t|| c > '9')\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tres *= 10;\n\t\t\tres += c - '0';\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(\n\t\t\t\tc));\n\t\treturn res\n\t\t\t\t* sgn;\n\t}\n\n\tprivate long nextLong()\n\t{\n\t\tint c = read();\n\t\twhile (isSpaceChar(\n\t\t\t\tc))\n\t\t\tc = read();\n\t\tint sgn = 1;\n\t\tif (c == '-')\n\t\t{\n\t\t\tsgn = -1;\n\t\t\tc = read();\n\t\t}\n\t\tlong res = 0;\n\t\tdo\n\t\t{\n\t\t\tif (c < '0'\n\t\t\t\t\t|| c > '9')\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tres *= 10;\n\t\t\tres += c - '0';\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(\n\t\t\t\tc));\n\t\treturn res\n\t\t\t\t* sgn;\n\t}\n\n\tprivate String nextToken()\n\t{\n\t\tint c = read();\n\t\twhile (isSpaceChar(\n\t\t\t\tc))\n\t\t\tc = read();\n\t\tStringBuilder res = new StringBuilder();\n\t\tdo\n\t\t{\n\t\t\tres.appendCodePoint(\n\t\t\t\t\tc);\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(\n\t\t\t\tc));\n\t\treturn res\n\t\t\t\t.toString();\n\t}\n\n\tprivate String nextLine()\n\t{\n\t\tint c = read();\n\t\twhile (isSpaceChar(\n\t\t\t\tc))\n\t\t\tc = read();\n\t\tStringBuilder res = new StringBuilder();\n\t\tdo\n\t\t{\n\t\t\tres.appendCodePoint(\n\t\t\t\t\tc);\n\t\t\tc = read();\n\t\t} while (!isEndOfLine(\n\t\t\t\tc));\n\t\treturn res\n\t\t\t\t.toString();\n\t}\n\n\tprivate int[] nextIntArray(\n\t\t\tint n)\n\t{\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tarr[i] = nextInt();\n\t\t}\n\t\treturn arr;\n\t}\n\n\tprivate long[] nextLongArray(\n\t\t\tint n)\n\t{\n\t\tlong[] arr = new long[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tarr[i] = nextLong();\n\t\t}\n\t\treturn arr;\n\t}\n\n\tprivate void pArray(\n\t\t\tint[] arr)\n\t{\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tSystem.out\n\t\t\t\t\t.print(arr[i]\n\t\t\t\t\t\t\t+ \" \");\n\t\t}\n\t\tSystem.out\n\t\t\t\t.println();\n\t\treturn;\n\t}\n\n\tprivate void pArray(\n\t\t\tlong[] arr)\n\t{\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tSystem.out\n\t\t\t\t\t.print(arr[i]\n\t\t\t\t\t\t\t+ \" \");\n\t\t}\n\t\tSystem.out\n\t\t\t\t.println();\n\t\treturn;\n\t}\n\n\tprivate boolean isSpaceChar(\n\t\t\tint c)\n\t{\n\t\tif (filter != null)\n\t\t\treturn filter\n\t\t\t\t\t.isSpaceChar(\n\t\t\t\t\t\t\tc);\n\t\treturn isWhitespace(\n\t\t\t\tc);\n\t}\n\n\tprivate char nextChar()\n\t{\n\t\tint c = read();\n\t\twhile (isSpaceChar(\n\t\t\t\tc))\n\t\t\tc = read();\n\t\tchar c1 = (char) c;\n\t\twhile (!isSpaceChar(\n\t\t\t\tc))\n\t\t\tc = read();\n\t\treturn c1;\n\t}\n\n\tprivate interface SpaceCharFilter\n\t{\n\t\tpublic boolean isSpaceChar(\n\t\t\t\tint ch);\n\t}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void Read(T &x) {\n  char c = getchar();\n  bool f = false;\n  for (x = 0; !isdigit(c); c = getchar()) {\n    if (c == '-') {\n      f = true;\n    }\n  }\n  for (; isdigit(c); c = getchar()) {\n    x = x * 10 + c - '0';\n  }\n  if (f) {\n    x = -x;\n  }\n}\ntemplate <typename T>\ninline bool CheckMax(T &a, const T &b) {\n  return a < b ? a = b, true : false;\n}\ntemplate <typename T>\ninline bool CheckMin(T &a, const T &b) {\n  return a > b ? a = b, true : false;\n}\nconst int N = 55;\nchar s[N][N];\nint n, m;\nint main() {\n  Read(n), Read(m);\n  for (int i = 1; i <= n; ++i) {\n    scanf(\"%s\", s[i] + 1);\n  }\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j < i; ++j) {\n      bool u = true, v = true;\n      for (int k = 1; k <= m; ++k) {\n        if (s[i][k] == '#' || s[j][k] == '#') {\n          if (s[i][k] == '#' && s[j][k] == '#') {\n            v = false;\n          } else {\n            u = false;\n          }\n        }\n      }\n      if (!u && !v) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\t\n\t\tsc.nextLine();\n\t\tString [] s = new String [n];\n\t\t\n\t\tfor (int i =0;i<n;i++)\n\t\t{\n\t\t\ts[i] = sc.nextLine();\n\t\t}\n\t\tboolean notSame=false,match=false;\n\t\tfor (int i =0;i<n-1;i++)\n\t\t{\n\t\t\t\n\t\t\tfor (int k=i+1;k<n;k++)\n\t\t\t{\n\t\t\t\t notSame=false;\n\t\t\t\tmatch=false;\n\t\t\t\tfor (int j =0;j<m;j++)\n\t\t\t\t{\n\t\t\t\t\tif (s[i].charAt(j)!=s[k].charAt(j))\n\t\t\t\t\t\tnotSame=true;\n\t\t\t\t\tif (s[i].charAt(j)=='#' && s[k].charAt(j)=='#')\n\t\t\t\t\t\tmatch=true;\n\t\t\t\t}\n\t\t\t\tif (notSame && match)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (notSame && match)\n\t\t\t\tbreak;\n\t\t\t\n\t\t}\n\t\t\n\t\tif (notSame && match)\n\t\t\tSystem.out.println(\"No\");\n\t\telse\n\t\t\tSystem.out.println(\"Yes\");\n\t\t\n\t\tsc.close();\n\n\t}\n\n}\n"
        },
        {
            "language": 1,
            "solution": "n,m=map(int,raw_input().split())\ncomp=[]\na=[]\nfor i in range(n):\n\ta.append(raw_input())\nfor i in range(m):\n\tfor j in range(n):\n\t\tif a[j][i]=='#':\n\t\t\ty=a[j]\n\t\t\tfor k in range(n):\n\t\t\t\tif a[k][i]=='#':\n\t\t\t\t\tif y!=a[k]:\n\t\t\t\t\t\tprint \"No\"\n\t\t\t\t\t\texit(0)\nprint \"Yes\"\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long n, m, flag = 0;\nstring s[51];\nlong long cnt[51][51];\nvoid go(long long x, long long y) {\n  memset(cnt, 0, sizeof cnt);\n  cnt[x][y] = 2;\n  for (long long i = y + 1; i < m; i++) {\n    if (s[x][i] == '#') {\n      cnt[x][i] = 2;\n      for (long long j = 0; j < n; j++) {\n        cnt[j][i]++;\n      }\n    }\n  }\n  for (long long i = x + 1; i < n; i++) {\n    if (s[i][y] == '#') {\n      cnt[i][y] = 2;\n      for (long long j = 0; j < m; j++) {\n        cnt[i][j]++;\n      }\n    }\n  }\n  for (long long i = 0; i < n; i++) {\n    for (long long j = 0; j < m; j++) {\n      if (s[i][j] == '.' && cnt[i][j] > 1) {\n        flag = 1;\n        break;\n      }\n      if (s[i][j] == '#' && cnt[i][j] == 1) {\n        flag = 1;\n        break;\n      } else if (cnt[i][j] > 1) {\n        s[i][j] = '.';\n      }\n    }\n    if (flag) break;\n  }\n}\nint main() {\n  cin >> n >> m;\n  for (long long i = 0; i < n; i++) cin >> s[i];\n  for (long long i = 0; i < n; i++) {\n    for (long long j = 0; j < m; j++) {\n      if (s[i][j] == '#') {\n        go(i, j);\n        break;\n      }\n    }\n    if (flag) {\n      cout << \"No\" << endl;\n      return 0;\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "import re\n\nn, m = map(int, input().split())\nrows = [input() for _ in range(n)]\n\ncols = set()\n\nwhile (rows):\n    r = rows.pop()\n#    print(\"ROW: \", r)\n    if (r.find('#') >= 0):\n        # at least one # in line\n        # Check if not in columns\n        c = set([occ.start() for occ in re.finditer('#', r)])\n        if c & cols:  # reusing column\n            print(\"No\")\n            break\n        cols |= c\n        rows = [o for o in rows if o != r]\n#    print(\"  remaining: \", cols, rows)\nelse:\n    print(\"Yes\")\n"
        },
        {
            "language": 3,
            "solution": "import sys\n\nn, m = map(int, input().split())\n\nsys.setrecursionlimit(10000)\n\ngrid = [[i for i in input()] for _ in range(n)]\n# print(*grid, sep='\\n')\n\nvisited_cells = [[False] * m for _ in range(n)]\n\n\ndef correct_grid(row, column, parent_row, parent_column):\n    visited_cells[row][column] = True\n    # print(*visited_cells, sep='\\n')\n    visited_rows[row] = True\n    visited_columns[column] = True\n    if row + 1 < n and (row + 1 != parent_row or column != parent_column):\n        down = row + 1\n        while down < n:\n            if grid[down][column] == '.' and visited_rows[down]:\n                print('No')\n                sys.exit()\n            elif grid[down][column] == '.':\n                down += 1\n            elif grid[down][column] == '#' and not visited_cells[down][column]:\n                correct_grid(down, column, down - 1, column)\n                break\n            else:\n                break\n    if row - 1 > -1 and (row - 1 != parent_row or column != parent_column):\n        up = row - 1\n        while up > -1:\n            if grid[up][column] == '.' and visited_rows[up]:\n                print('No')\n                sys.exit()\n            elif grid[up][column] == '.':\n                up -= 1\n            elif grid[up][column] == '#' and not visited_cells[up][column]:\n                correct_grid(up, column, up + 1, column)\n                break\n            else:\n                break\n    # print('Here')\n    if column + 1 < m and (row != parent_row or column + 1 != parent_column):\n        right = column + 1\n        while right < m:\n            if grid[row][right] == '.' and visited_columns[right]:\n                print('No')\n                sys.exit()\n            elif grid[row][right] == '.':\n                right += 1\n            elif grid[row][right] == '#' and not visited_cells[row][right]:\n                correct_grid(row, right, row, right - 1)\n                break\n            else:\n                break\n    # print('And here')\n    if column - 1 > -1 and (row != parent_row or column - 1 != parent_column):\n        left = column - 1\n        while left > -1:\n            if grid[row][left] == '.' and visited_columns[left]:\n                print('No')\n                sys.exit()\n            elif grid[row][left] == '.':\n                left -= 1\n            elif grid[row][left] == '#' and not visited_cells[row][left]:\n                correct_grid(row, left, row, left + 1)\n                break\n            else:\n                break\n\n\nfor r in range(n):\n    for col in range(m):\n        if grid[r][col] == '#':\n            visited_rows = [False] * n\n            visited_columns = [False] * m\n            correct_grid(r, col, r, col)\n\nprint('Yes')\n\n\n# 1 1\n# .\n#\n# 1 1\n# #\n#\n# 1 2\n# #.\n#\n# 1 2\n# ##\n#\n# 2 2\n# ##\n# ..\n#\n# 2 2\n# ##\n# .#\n#\n# 1 4\n# ....\n#\n# 1 4\n# .#.#\n#\n# 1 4\n# .###\n#\n# 3 1\n# #\n# #\n# #\n#\n# 3 1\n# #\n# .\n# #\n#\n# 3 1\n# #\n# .\n# .\n#\n# 3 3\n# #..\n# .#.\n# ..#\n#\n# 3 3\n# #.#\n# .#.\n# #.#\n#\n# 3 3\n# #.#\n# .##\n# #.#\n#\n# 3 4\n# #.#.\n# .##.\n# #.#.\n#\n# 3 4\n# #.#.\n# .#..\n# #.#.\n#\n# 3 4\n# #.#.\n# .#.#\n# #.#.\n#\n# 3 4\n# ####\n# ####\n# ####\n#\n# 3 4\n# ####\n# #.##\n# ####\n#\n# 3 4\n# ####\n# #..#\n# ####\n#\n# 3 4\n# ####\n# #...\n# ####\n#\n# 3 4\n# ####\n# ....\n# ####\n#\n# 3 4\n# ....\n# ....\n# ....\n"
        },
        {
            "language": 3,
            "solution": "import sys\nn,m = [int(x) for x in input().split(' ')]\na=[]\nfor i in range(n):\n    b=[]\n    s = input().strip()\n    for j in range(m):\n        if s[j]=='#':\n            b.append(j)\n    if b not in a:\n        a.append(b)\nc=[0]*m\nans=True\n#print(a)\nfor i in a:\n    for j in i:\n        c[j]+=1\n        if c[j]>1:\n            ans=False\n            break\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\n// import java.io.FileInputStream;\n// import java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\nimport static java.lang.Math.*;\nimport static java.util.Arrays.sort;\nimport static java.util.Collections.reverseOrder;\nimport static java.util.Collections.sort;\n\npublic class Main {\n    FastScanner in;\n    PrintWriter out;\n\n    private void solve() throws IOException {\n        int n = in.nextInt(), m = in.nextInt();\n        boolean[][] a = new boolean[n][m];\n        boolean[][] b = new boolean[m][n];\n        char[] s;\n        for (int i = 0; i < n; i++) {\n            s = in.nextLine().toCharArray();\n            for (int j = 0; j < m; j++) {\n                a[i][j] = b[j][i] = s[j] == '#';\n            }\n        }\n\n        out.print(solve(a) && solve(b) ? \"Yes\" : \"No\");\n    }\n\n    private boolean solve(boolean[][] a) {\n        int n = a.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (!cmp(a[i], a[j])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private boolean cmp(boolean[] a, boolean[] b) {\n        int n = a.length;\n\n        boolean cmp = false;\n        for (int i = 0; i < n; i++) {\n            if (a[i] && a[i] == b[i]) {\n                cmp = true;\n                break;\n            }\n        }\n\n        return !cmp || Arrays.equals(a, b);\n    }\n\n    class FastScanner {\n        StringTokenizer st;\n        BufferedReader br;\n\n        FastScanner(InputStream s) {\n            br = new BufferedReader(new InputStreamReader(s));\n        }\n\n        String next() throws IOException {\n            while (st == null || !st.hasMoreTokens())\n                st = new StringTokenizer(br.readLine());\n            return st.nextToken();\n        }\n\n        boolean hasNext() throws IOException {\n            return br.ready() || (st != null && st.hasMoreTokens());\n        }\n\n        int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() throws IOException {\n            return Double.parseDouble(next().replace(',', '.'));\n        }\n\n        String nextLine() throws IOException {\n            return br.readLine();\n        }\n\n        boolean hasNextLine() throws IOException {\n            return br.ready();\n        }\n    }\n\n    private void run() throws IOException {\n        in = new FastScanner(System.in); // new FastScanner(new FileInputStream(\".in\"));\n        out = new PrintWriter(System.out); // new PrintWriter(new FileOutputStream(\".out\"));\n\n        solve();\n\n        out.flush();\n        out.close();\n    }\n\n    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\npublic class cf924 {\n\n    public String solve(char[][] grid) {\n//        for (char[] row : grid) {\n//            System.out.println(Arrays.toString(row));\n//        }\n        Set<Integer> validRow = new HashSet<>();\n        Set<Integer> validCol = new HashSet<>();\n        for (int row = 0; row < grid.length; row++) {\n            for (int col = 0; col < grid[0].length; col++) {\n                if (grid[row][col] == '#') {\n                    validRow.add(row);\n                    validCol.add(col);\n                }\n            }\n        }\n\n        for (int row = 0; row < grid.length; row++) {\n            if (!validRow.contains(row)) {\n                continue;\n            }\n            validRow.remove(row);\n            for (int matchingRow = row + 1; matchingRow < grid.length; matchingRow++) {\n                if (rowMathces(grid, row, matchingRow)) {\n                    if (validRow.contains(matchingRow)) {\n                        validRow.remove(matchingRow);\n                    } else {\n                        return \"No\";\n                    }\n                }\n            }\n\n            for (int col = 0; col < grid[row].length; col++) {\n                if (grid[row][col] == '#') {\n                    if (validCol.contains(col)) {\n                        validCol.remove(col);\n                    } else {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n        return \"Yes\";\n    }\n\n    private boolean rowMathces(char[][] grid, int row, int matchingRow) {\n        for (int col = 0; col < grid[row].length; col++) {\n            if (grid[row][col] != grid[matchingRow][col]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scan = new Scanner(System.in);\n        int R = scan.nextInt();\n        int C = scan.nextInt();\n        scan.nextLine();\n        char[][] grid = new char[R][C];\n        for (int i = 0; i < R; i++) {\n            grid[i] = scan.nextLine().toCharArray();\n        }\n\n        cf924 sol = new cf924();\n        System.out.println(sol.solve(grid));\n\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 100;\nchar d[100][100];\nbool row[N], col[N];\nint n, m;\nvoid mark(int r) {\n  vector<int> ind;\n  for (int i = 0; i < m; ++i) {\n    if (d[r][i] == '#') {\n      ind.push_back(i);\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    bool was = 0;\n    for (int j : ind) {\n      if (d[i][j] == '#') {\n        was = 1;\n        if (row[i]) {\n          cout << \"No\\n\";\n          exit(0);\n        }\n      }\n    }\n    if (was) {\n      row[i] = 1;\n      for (int j : ind) {\n        if (d[i][j] == '.') {\n          cout << \"No\\n\";\n          exit(0);\n        } else {\n          d[i][j] = '.';\n        }\n      }\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> d[i][j];\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (d[i][j] == '#') {\n        mark(i);\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\n/*\nTASK: Main\nLANG: JAVA\n */\npublic class Main {\n    static int n , m;\n    static boolean good;\n    static HashSet<Integer> x , y;\n    static String tmp;\n    static boolean[][] grid , used;\n    static boolean[] seen;\n    static ArrayList<coord>[][] graph;\n\n    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner(System.in);\n        n = in.nextInt();\n        m = in.nextInt();\n        grid = new boolean[n][m];\n        graph = new ArrayList[n][m];\n        seen = new boolean[n];\n        good = true;\n        for(int i = 0;i < n; i++){\n            tmp = in.next();\n            for(int j = 0;j < m; j++){\n                grid[i][j] = tmp.charAt(j) == '#';\n                if(grid[i][j])graph[i][j] = new ArrayList<coord>();\n            }\n        }\n        for(int i = 0;i < n; i++){\n            for(int j =0;j < m; j++){\n                if(grid[i][j]) {\n                    for (int k = i + 1; k < n; k++) {\n                        if (grid[k][j]) {\n                            graph[i][j].add(new coord(k, j));\n                            break;\n                        }\n                    }\n                    for (int k = i - 1; k >= 0; k--) {\n                        if (grid[k][j]) {\n                            graph[i][j].add(new coord(k, j));\n                            break;\n                        }\n                    }\n                    for (int k = j + 1; k < m; k++) {\n                        if (grid[i][k]) {\n                            graph[i][j].add(new coord(i , k));\n                            break;\n                        }\n                    }\n                    for (int k = j - 1; k >= 0; k--) {\n                        if (grid[i][k]) {\n                            graph[i][j].add(new coord(i , k));\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        for(int i = 0;i < n; i++){\n            if(!seen[i]){\n                for(int j = 0;j < m; j++){\n                    if(grid[i][j]){\n                        used = new boolean[n][m];\n                        x = new HashSet<Integer>();\n                        y = new HashSet<Integer>();\n                        dfs(i , j);\n                        for(Integer a : x){\n                            for(Integer b : y){\n                                if(!grid[a][b]){\n                                    System.out.println(\"No\");\n                                    return;\n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n    private static void dfs(int a , int b){\n        if(used[a][b])return;\n        used[a][b] = true;\n        seen[a] = true;\n        x.add(a);\n        y.add(b);\n        for(coord c : graph[a][b]){\n            dfs(c.x , c.y);\n        }\n    }\n    private static class coord{\n        int x , y;\n        public coord(int a , int b){\n            x = a;\n            y = b;\n        }\n    }\n\n    private static class FastScanner {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n\n        public FastScanner(InputStream stream) {\n            this.stream = stream;\n        }\n\n        int read() {\n            if (numChars == -1)\n                throw new InputMismatchException();\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) return -1;\n            }\n            return buf[curChar++];\n        }\n\n        boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        boolean isEndline(int c) {\n            return c == '\\n' || c == '\\r' || c == -1;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        public String next() {\n            int c = read();\n            while (isSpaceChar(c)) c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public String nextLine() {\n            int c = read();\n            while (isEndline(c))\n                c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isEndline(c));\n            return res.toString();\n        }\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 2 * int(1e9);\nconst long long INFll = 1ll * int(1e9) * int(1e9);\nconst int MOD = 1000000007;\ntemplate <typename T, typename Q>\nostream& operator<<(ostream& out, pair<T, Q>& a) {\n  out << a.first << \" \" << a.second;\n  return out;\n}\ntemplate <typename T, typename Q>\nistream& operator>>(istream& in, pair<T, Q>& a) {\n  in >> a.first >> a.second;\n  return in;\n}\ntemplate <typename T>\nistream& operator>>(istream& in, vector<T>& a) {\n  for (int i = 0; i < a.size(); ++i) in >> a[i];\n  return in;\n}\ntemplate <typename T>\nostream& operator<<(ostream& out, vector<T> a) {\n  for (int i = 0; i < a.size(); ++i)\n    if (i == a.size() - 1)\n      out << a[i];\n    else\n      out << a[i] << \" \";\n  return out;\n}\nbool usedr[51];\nbool usedc[51];\nint n, m;\nvector<int> rows;\nvector<int> cols;\nchar field[51][51];\nchar nfield[51][51];\nvoid dfsc(int j);\nvoid dfsr(int i) {\n  usedr[i] = true;\n  rows.push_back(i);\n  for (int j = 0; j < m; ++j)\n    if (field[i][j] == '#' && !usedc[j]) {\n      dfsc(j);\n    }\n}\nvoid dfsc(int j) {\n  usedc[j] = true;\n  cols.push_back(j);\n  for (int i = 0; i < n; ++i)\n    if (field[i][j] == '#' && !usedr[i]) {\n      dfsr(i);\n    }\n}\nint main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(0);\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> field[i][j];\n      nfield[i][j] = '.';\n    }\n  }\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j)\n      if (field[i][j] == '#') {\n        if (usedr[i] + usedc[j] == 1) {\n          cout << \"No\\n\";\n          return 0;\n        }\n        if (!usedr[i]) {\n          rows.clear();\n          cols.clear();\n          dfsr(i);\n          for (int row : rows)\n            for (int col : cols) nfield[row][col] = '#';\n        }\n      }\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j)\n      if (nfield[i][j] != field[i][j]) {\n        cout << \"No\\n\";\n        return 0;\n      }\n  cout << \"Yes\\n\";\n  if (0)\n    cerr << fixed << setprecision(0)\n         << \"TIME = \" << clock() / (long double)CLOCKS_PER_SEC * 1000 << \"\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool check(string s1, string s2) {\n  if (s1 == s2) return 0;\n  for (int i = 0; i < (int)s1.size(); i++)\n    if ((s1[i] == '#') && (s2[i] == '#')) return 1;\n  return 0;\n}\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string s[n];\n  for (int i = 0; i < n; i++) cin >> s[i];\n  for (int i = 0; i < n; i++)\n    for (int j = i + 1; j < n; j++)\n      if (check(s[i], s[j])) {\n        cout << \"No\";\n        return 0;\n      }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\nt=set(input()for _ in [0]*n)\nprint(['No','Yes'][all(sum(c=='#'for c in s)<2for s in zip(*t))])"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int> > a(n, vector<int>(m, 0));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      char t;\n      cin >> t;\n      if (t == '#')\n        a[i][j] = 1;\n      else\n        a[i][j] = 0;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      int intersect = true, same = 1;\n      for (int k = 0; k < m; k++) {\n        if (a[i][k] != a[j][k]) same = 0;\n        if (a[i][k] && a[j][k]) intersect = 0;\n      }\n      if (!same && !intersect) {\n        cout << \"No\\n\";\n        exit(0);\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "import sys\nsys.setrecursionlimit(1000000)\ndef dfsn(x):\n    global n, m, usedn, usedm, a\n    usedn[x] = 1\n    f = 1\n    for i in range(m):\n        if a[x][i] == '#':\n            if usedm[i] == 2:\n                return 0\n            elif not usedm[i]:\n                f = min(dfsm(i), f)\n        else:\n            if usedm[i] == 1:\n                return 0\n    return f\n    \ndef dfsm(x):\n    global n, m, usedn, usedm, a\n    usedm[x] = 1\n    f = 1\n    for i in range(n):\n        if a[i][x] == '#':\n            if usedn[i] == 2:\n                return 0\n            elif not usedn[i]:\n                f = min(dfsn(i), f)\n        else:\n            if usedn[i] == 1:\n                return 0\n    return f\n\n\nn, m = map(int, input().split())\na = [input() for i in range(n)]\nusedn = [0] * n\nusedm = [0] * m\nf = 1\nfor i in range(n):\n    if not usedn[i]:\n        if not dfsn(i):\n            f = 0\n        for j in range(n):\n             if usedn[j] == 1:\n                 usedn[j] = 2\n        for j in range(m):\n             if usedm[j] == 1:\n                 usedm[j] = 2\nfor i in range(m):\n    if not usedm[i]:\n        if not dfsm(i):\n            f = 0\n        for j in range(m):\n             if usedm[j] == 1:\n                 usedm[j] = 2\n        for j in range(n):\n             if usedn[j] == 1:\n                 usedn[j] = 2\nif f:\n    print('Yes')\nelse:\n    print('No')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint a[55][55];\nint n, m;\nbool visr[55], visc[55];\nint vis[55];\nint main() {\n  cin >> n >> m;\n  char t;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> t;\n      if (t == '.')\n        a[i][j] = 0;\n      else {\n        vis[i] = 1;\n        a[i][j] = 1;\n      }\n    }\n  }\n  vector<int> v1, v2;\n  for (int i = 1; i <= n; i++) {\n    v1.clear();\n    v2.clear();\n    if (vis[i] && !visr[i]) {\n      for (int j = 1; j <= m; j++) {\n        if (a[i][j] && !visc[j]) {\n          v2.push_back(j);\n          visc[j] = 1;\n          for (int k = i; k <= n; k++) {\n            if (a[k][j] && !visr[k]) {\n              v1.push_back(k);\n              visr[k] = 1;\n            }\n          }\n        }\n      }\n      for (int j = 0; j < v1.size(); j++) {\n        for (int k = 0; k < v2.size(); k++) {\n          a[v1[j]][v2[k]] = 1 - a[v1[j]][v2[k]];\n        }\n      }\n    }\n  }\n  int flag = 1;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (a[i][j]) {\n        flag = 0;\n        break;\n      }\n    }\n  }\n  if (flag)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstring k[60];\nint usedI[60] = {0};\nint usedJ[60] = {0};\nqueue<int> qI, qJ;\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> k[i];\n  bool res = true;\n  int cont = 1;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) {\n      cont++;\n      if (k[i][j] == '#') {\n        if (usedI[i] == 0) {\n          qI.push(i);\n          usedI[i] = cont;\n        }\n        if (usedJ[j] == 0) {\n          qJ.push(j);\n          usedJ[j] = cont;\n        }\n        while (!qI.empty() || !qJ.empty()) {\n          if (!qJ.empty()) {\n            int _j = qJ.front();\n            qJ.pop();\n            for (int ii = 0; ii < n; ii++) {\n              if (k[ii][_j] == '#') {\n                if (usedI[ii] == 0) {\n                  qI.push(ii);\n                  usedI[ii] = cont;\n                }\n              }\n            }\n          } else {\n            int _i = qI.front();\n            qI.pop();\n            for (int jj = 0; jj < m; jj++) {\n              if (k[_i][jj] == '#') {\n                if (usedJ[jj] == 0) {\n                  qJ.push(jj);\n                  usedJ[jj] = cont;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (usedI[i] != 0 && usedI[i] == usedJ[j] && k[i][j] == '.') res = false;\n      if (usedI[i] == 0 && usedJ[j] == 0 && k[i][j] == '#') res = false;\n      if (usedI[i] != usedJ[j] && k[i][j] == '#') res = false;\n    }\n  }\n  if (res)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing lint = long long;\ntemplate <typename T>\nusing vc = std::vector<T>;\nvoid solve(istream& cin, ostream& cout) {\n  int n, m;\n  cin >> n >> m;\n  vector<string> a(n);\n  for (int i = (0); i < int(n); ++i) {\n    cin >> a[i];\n  }\n  while (true) {\n    int x = -1, y = -1;\n    for (int i = (0); i < int(n); ++i) {\n      for (int j = (0); j < int(m); ++j) {\n        if (a[i][j] == '#') {\n          x = i;\n          y = j;\n        }\n      }\n    }\n    if (x == -1) {\n      break;\n    }\n    vector<int> rs(n), cs(m);\n    for (int i = (0); i < int(n); ++i) {\n      if (a[i][y] == '#') {\n        rs[i] = 1;\n      }\n    }\n    for (int i = (0); i < int(m); ++i) {\n      if (a[x][i] == '#') {\n        cs[i] = 1;\n      }\n    }\n    for (int i = (0); i < int(n); ++i) {\n      if (rs[i]) {\n        for (int j = (0); j < int(m); ++j) {\n          if (cs[j] == 0 && a[i][j] == '#' || cs[j] == 1 && a[i][j] == '.') {\n            cout << \"No\";\n            return;\n          }\n        }\n      }\n    }\n    for (int j = (0); j < int(m); ++j) {\n      if (cs[j]) {\n        for (int i = (0); i < int(n); ++i) {\n          if (rs[i] == 0 && a[i][j] == '#' || rs[i] == 1 && a[i][j] == '.') {\n            cout << \"No\";\n            return;\n          }\n        }\n      }\n    }\n    for (int i = (0); i < int(n); ++i) {\n      for (int j = (0); j < int(m); ++j) {\n        if (rs[i] && cs[j]) {\n          assert(a[i][j] == '#');\n          a[i][j] = '.';\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  solve(cin, cout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class t>\ninline t read(t &x) {\n  char c = getchar();\n  bool f = 0;\n  x = 0;\n  while (!isdigit(c)) f |= c == '-', c = getchar();\n  while (isdigit(c)) x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();\n  if (f) x = -x;\n  return x;\n}\ntemplate <class t, class... A>\ninline void read(t &x, A &...a) {\n  read(x);\n  read(a...);\n}\ntemplate <class t>\ninline void write(t x) {\n  if (x < 0)\n    putchar('-'), write(-x);\n  else {\n    if (x > 9) write(x / 10);\n    putchar('0' + x % 10);\n  }\n}\nconst int N = 55;\nstring cur, s[N];\nint n, m;\nsigned main() {\n  read(n, m);\n  for (int i = 1; i <= n; i++) cin >> s[i], s[i] = ' ' + s[i];\n  for (int j = 1; j <= m; j++) {\n    bool fl = 0;\n    for (int i = 1; i <= n; i++)\n      if (s[i][j] == '#') {\n        if (fl) {\n          if (cur != s[i]) {\n            puts(\"No\");\n            exit(0);\n          }\n        } else\n          cur = s[i], fl = 1;\n      }\n  }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\npublic class cf924 {\n    public boolean solve2(char[][] grid) {\n        Set<Long> rowSet = new LinkedHashSet<>();\n        for (char[] row : grid) {\n            long mask = 0L;\n            for (int col = 0; col < row.length; col++) {\n                if (row[col] == '#') {\n                    mask += 1L << col;\n                }\n            }\n            if (mask > 0) {\n                rowSet.add(mask);\n            }\n        }\n\n        long mask = 0L;\n        for (long rowMask : rowSet) {\n            if ((mask & rowMask) > 0) {\n                return false;\n            }\n            mask += rowMask;\n        }\n\n        return true;\n    }\n    public static void solve3() {\n        Scanner scan = new Scanner(System.in);\n        int R = scan.nextInt();\n        int C = scan.nextInt();\n        scan.nextLine();\n        Set<Long> rowSet = new HashSet<>(50);\n        for (int i = 0; i < R; i++) {\n            String row = scan.nextLine();\n            long mask = 0L;\n            for (int col = 0; col < row.length(); col++) {\n                if (row.charAt(col) == '#') {\n                    mask += 1L << col;\n                }\n            }\n            if (mask > 0) {\n                rowSet.add(mask);\n            }\n        }\n\n        long mask = 0L;\n        for (long rowMask : rowSet) {\n            if ((mask & rowMask) > 0) {\n                System.out.println(\"No\");\n                return;\n            }\n            mask += rowMask;\n        }\n\n        System.out.println(\"Yes\");\n    }\n\n    public String solve(char[][] grid) {\n//        for (char[] row : grid) {\n//            System.out.println(Arrays.toString(row));\n//        }\n        Set<Integer> validRow = new HashSet<>();\n        Set<Integer> validCol = new HashSet<>();\n        for (int row = 0; row < grid.length; row++) {\n            for (int col = 0; col < grid[0].length; col++) {\n                if (grid[row][col] == '#') {\n                    validRow.add(row);\n                    validCol.add(col);\n                }\n            }\n        }\n\n        for (int row = 0; row < grid.length; row++) {\n            if (!validRow.contains(row)) {\n                continue;\n            }\n            validRow.remove(row);\n            for (int matchingRow = row + 1; matchingRow < grid.length; matchingRow++) {\n                if (rowMathces(grid, row, matchingRow)) {\n                    if (validRow.contains(matchingRow)) {\n                        validRow.remove(matchingRow);\n                    } else {\n                        return \"No\";\n                    }\n                }\n            }\n\n            for (int col = 0; col < grid[row].length; col++) {\n                if (grid[row][col] == '#') {\n                    if (validCol.contains(col)) {\n                        validCol.remove(col);\n                    } else {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n        return \"Yes\";\n    }\n\n    private boolean rowMathces(char[][] grid, int row, int matchingRow) {\n        for (int col = 0; col < grid[row].length; col++) {\n            if (grid[row][col] != grid[matchingRow][col]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n//        Scanner scan = new Scanner(System.in);\n//        int R = scan.nextInt();\n//        int C = scan.nextInt();\n//        scan.nextLine();\n//        char[][] grid = new char[R][C];\n//        for (int i = 0; i < R; i++) {\n//            grid[i] = scan.nextLine().toCharArray();\n//        }\n//\n//        cf924 sol = new cf924();\n//        System.out.println(sol.solve(grid));\n        solve3();\n\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 50 + 5;\nint n, m;\nchar mos[MAXN][MAXN];\nsigned main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; ++i) scanf(\"%s\", mos[i] + 1);\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) {\n      if (mos[i][j] ^ '.') {\n        for (int k = 1; k <= n; ++k) {\n          for (int l = 1; l <= m; ++l) {\n            if (!(mos[k][l] ^ '#' || k == i || l == j)) {\n              if (mos[i][l] ^ '.' && mos[k][j] ^ '#' ||\n                  mos[i][l] ^ '#' && mos[k][j] ^ '.')\n                return puts(\"No\") & 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  return puts(\"Yes\") & 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\n// import java.awt.Point;\n \npublic class Main {\n    InputStream is;\n    PrintWriter out;\n    String INPUT = \"\";\n \n    long mod = 1_000_000_007;\n    long inf = Long.MAX_VALUE;\n\n    void solve(){\n        int n = ni();\n        int m = ni();\n        char[][] map = nm(n,m);\n        boolean[] usedr = new boolean[n];\n        boolean[] usedc = new boolean[m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                boolean match = false;\n                boolean diff = false;\n                for(int k = 0; k < m; k++){\n                    if(map[i][k]=='#' && map[j][k]=='#') match = true;\n                    if(map[i][k]=='#' && map[j][k]=='.') diff = true;\n                }\n                if(match&&diff){\n                    out.println(\"No\");\n                    return;\n                }\n            }\n        }\n        out.println(\"Yes\");\n\n    }\n\n    void run() throws Exception\n    {\n        is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\n        out = new PrintWriter(System.out);\n        long s = System.currentTimeMillis();\n        solve();\n        out.flush();\n        if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+\"ms\");\n    }\n    \n    public static void main(String[] args) throws Exception { new Main().run(); }\n    \n    private byte[] inbuf = new byte[1024];\n    private int lenbuf = 0, ptrbuf = 0;\n    \n    private int readByte()\n    {\n        if(lenbuf == -1)throw new InputMismatchException();\n        if(ptrbuf >= lenbuf){\n            ptrbuf = 0;\n            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }\n            if(lenbuf <= 0)return -1;\n        }\n        return inbuf[ptrbuf++];\n    }\n    \n    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }\n    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }\n    \n    private double nd() { return Double.parseDouble(ns()); }\n    private char nc() { return (char)skip(); }\n    \n    private String ns()\n    {\n        int b = skip();\n        StringBuilder sb = new StringBuilder();\n        while(!(isSpaceChar(b) && b != ' ')){\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    \n    private char[] ns(int n)\n    {\n        char[] buf = new char[n];\n        int b = skip(), p = 0;\n        while(p < n && !(isSpaceChar(b))){\n            buf[p++] = (char)b;\n            b = readByte();\n        }\n        return n == p ? buf : Arrays.copyOf(buf, p);\n    }\n    \n    private char[][] nm(int n, int m)\n    {\n        char[][] map = new char[n][];\n        for(int i = 0;i < n;i++)map[i] = ns(m);\n        return map;\n    }\n    \n    private int[] na(int n)\n    {\n        int[] a = new int[n];\n        for(int i = 0;i < n;i++)a[i] = ni();\n        return a;\n    }\n    \n    private int ni()\n    {\n        int num = 0, b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n        \n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n    \n    private long nl()\n    {\n        long num = 0;\n        int b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n        \n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n    \n    private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }\n \n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint static fast = []() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  return 0;\n}();\nint main() {\n  int r, c;\n  cin >> r >> c;\n  vector<int> used_rows(r, 0);\n  vector<int> used_cols(c, 0);\n  vector<string> grid;\n  string s;\n  for (int i = 0; i < r; i++) {\n    cin >> s;\n    grid.push_back(s);\n  }\n  for (int i = 0; i < r; i++) {\n    for (int j = 0; j < c; j++) {\n      if (grid[i][j] == '#') {\n        if (used_rows[i] == 1 || used_cols[j] == 1) {\n          cout << \"No\"\n               << \"\\n\";\n          return 0;\n        }\n        vector<int> rs;\n        vector<int> cs;\n        for (int c2 = 0; c2 < c; c2++) {\n          if (grid[i][c2] == '#') {\n            if (used_cols[c2] == 1) {\n              cout << \"No\"\n                   << \"\\n\";\n              return 0;\n            }\n            used_cols[c2] = 1;\n            cs.push_back(c2);\n          }\n        }\n        for (int r2 = 0; r2 < r; r2++) {\n          if (grid[r2][j] == '#') {\n            if (used_rows[r2] == 1) {\n              cout << \"No\"\n                   << \"\\n\";\n              return 0;\n            }\n            used_rows[r2] = 1;\n            rs.push_back(r2);\n          }\n        }\n        for (int r2 : rs) {\n          for (int c2 : cs) {\n            if (grid[r2][c2] != '#') {\n              cout << \"No\"\n                   << \"\\n\";\n              return 0;\n            } else {\n              grid[r2][c2] = '.';\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\"\n       << \"\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring mat[50];\nint track[50];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> mat[i];\n  }\n  for (int i = 0; i < m; i++) {\n    track[i] = -1;\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (mat[i][j] == '#') {\n        if (track[j] == -1)\n          track[j] = i;\n        else if (mat[i] != mat[track[j]]) {\n          return cout << \"No\", 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar v[55][55];\nbool used[2][55];\nvector<int> r, c;\nvoid check() {\n  for (int i = 0; i < r.size(); i++) {\n    for (int j = 0; j < c.size(); j++) {\n      if (v[r[i]][c[j]] != '#') {\n        cout << \"No\" << endl;\n        exit(0);\n      }\n    }\n  }\n  r.clear();\n  c.clear();\n}\nsigned main() {\n  cin.tie(0);\n  cout.tie(0);\n  cin.sync_with_stdio(0);\n  cout.sync_with_stdio(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < m; j++) {\n      v[i][j] = s[j];\n    }\n  }\n  queue<pair<int, int>> q;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (v[i][j] == '#' && !used[0][i] && !used[1][j]) {\n        q.push({1, i});\n        q.push({0, j});\n        while (!q.empty()) {\n          int x, y;\n          tie(x, y) = q.front();\n          q.pop();\n          if (x == 0) {\n            c.push_back(y);\n            for (int t = 0; t < n; t++) {\n              if (v[t][y] == '#' && !used[1][t]) {\n                used[1][t] = 1;\n                q.push({1, t});\n              }\n            }\n          } else {\n            r.push_back(y);\n            for (int t = 0; t < m; t++) {\n              if (v[y][t] == '#' && !used[0][t]) {\n                used[0][t] = 1;\n                q.push({0, t});\n              }\n            }\n          }\n        }\n        check();\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.util.TreeSet;\n\npublic class CF_957_B_MYSTICAL_MOSAIC {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\t\n\t\tchar[][] mat = new char[n][m];\n\t\t\n\t\tfor(int i = 0 ; i<n ;i++)\n\t\t\tmat[i] = sc.next().toCharArray();\n\t\tboolean [] row = new boolean [n];\n\t\tboolean [] column = new boolean [m];\n\t\tfor(int i = 0 ; i<n ;i++)\n\t\t{\n\t\t\tif(row[i]) continue;\n\t\t\tTreeSet<Integer> col = new TreeSet<>();\n\t\t\t\n\t\t\tfor(int j = 0 ; j<m ;j++)\n\t\t\t\tif(mat[i][j] == '#') {\n\t\t\t\t\tif(!column[j]) {\n\t\t\t\t\t\tcolumn[j] = true;\n\t\t\t\t\t\tcol.add(j);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\touter :for(int k = i+1 ; k<n ;k++)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tfor(int j = 0 ; j<m ;j++)\n\t\t\t\t\tif(!((mat[k][j] == '#' && col.contains(j)) || \n\t\t\t\t\t\t(mat[k][j] == '.' && !col.contains(j))))\n\t\t\t\t\t continue outer;\n\t\t\t\t\t\t\n\t\t\t\tif(!row[k])\n\t\t\t\t\trow[k] = true;\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\t\t\n\t\t\n\t\tSystem.out.println(\"YES\");\n\t\t\n\t}\n\t\n\tstatic class Scanner {\n\t\tStringTokenizer st;\n\t\tBufferedReader br;\n\n\t\tpublic Scanner(InputStream s) {\n\t\t\tbr = new BufferedReader(new InputStreamReader(s));\n\t\t}\n\n\t\tpublic String next() throws IOException {\n\t\t\twhile (st == null || !st.hasMoreTokens())\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\treturn st.nextToken();\n\t\t}\n\n\t\tpublic int nextInt() throws IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tpublic long nextLong() throws IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tpublic String nextLine() throws IOException {\n\t\t\treturn br.readLine();\n\t\t}\n\n\t\tpublic double nextDouble() throws IOException {\n\t\t\tString x = next();\n\t\t\tStringBuilder sb = new StringBuilder(\"0\");\n\t\t\tdouble res = 0, f = 1;\n\t\t\tboolean dec = false, neg = false;\n\t\t\tint start = 0;\n\t\t\tif (x.charAt(0) == '-') {\n\t\t\t\tneg = true;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tfor (int i = start; i < x.length(); i++)\n\t\t\t\tif (x.charAt(i) == '.') {\n\t\t\t\t\tres = Long.parseLong(sb.toString());\n\t\t\t\t\tsb = new StringBuilder(\"0\");\n\t\t\t\t\tdec = true;\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(x.charAt(i));\n\t\t\t\t\tif (dec)\n\t\t\t\t\t\tf *= 10;\n\t\t\t\t}\n\t\t\tres += Long.parseLong(sb.toString()) / f;\n\t\t\treturn res * (neg ? -1 : 1);\n\t\t}\n\n\t\tpublic boolean ready() throws IOException {\n\t\t\treturn br.ready();\n\t\t}\n\n\t}\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1e2 + 5;\nchar mat[N][N];\nint n, m;\nvoid dfs(int i, int j, set<int>& x, set<int>& y) {\n  if (!x.count(i)) {\n    x.insert(i);\n    for (int q = 0; q < m; ++q) {\n      if (mat[i][q] == '#') dfs(i, q, x, y);\n    }\n  }\n  if (!y.count(j)) {\n    y.insert(j);\n    for (int k = 0; k < n; ++k)\n      if (mat[k][j] == '#') dfs(k, j, x, y);\n  }\n}\nbool check(int i, int j, set<int>& x, set<int>& y) {\n  dfs(i, j, x, y);\n  for (int k : x) {\n    for (int q : y) {\n      if (mat[k][q] != '#') return false;\n    }\n  }\n  return true;\n}\nbool solve() {\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    scanf(\"%*c\");\n    for (int j = 0; j < m; ++j) {\n      scanf(\"%c\", &mat[i][j]);\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (mat[i][j] == '#') {\n        set<int> x, y;\n        if (check(i, j, x, y)) {\n          for (int k : x) {\n            for (int q : y) {\n              mat[k][q] = '.';\n            }\n          }\n        } else {\n          puts(\"No\");\n          return 0;\n        }\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\nint main() {\n  while (solve())\n    ;\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m = map(int,input().split())\na = []\nf = 0\nfor i in range(n):a.append(input())\nfor i in range(n):\n    for j in range(i+1,n):\n        r1 = a[i]\n        r2 = a[j]\n        f1 = f2 = 0\n        for k in range(m):\n            if r1[k] != r2[k]:f1 = 1\n            if (r1[k] == '#') and (r2[k]=='#'):f2 = 1\n        if f1 == 1:\n            if f2 == 1:\n                f = 1\nif f:print('No')\nelse:print('Yes')\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long INF = 2e18;\nconst long double EPS = 1e-9;\nlong long n, m;\nvector<bool> used_l, used_s;\nbool dfs(long long i, long long j, vector<vector<char>> &r,\n         vector<vector<char>> &v, bool line) {\n  if ((line && used_l[i]) || (!line && used_s[j])) {\n    return true;\n  }\n  bool res = true;\n  if (line) {\n    used_l[i] = true;\n    for (int j1 = 0; j1 < m; ++j1) {\n      if (used_s[j1] && v[i][j1] != '#') {\n        return false;\n      }\n      if (v[i][j1] == '#') {\n        res &= dfs(i, j1, r, v, !line);\n      }\n    }\n  } else {\n    used_s[j] = true;\n    for (int i1 = 0; i1 < n; ++i1) {\n      if (used_l[i1] && v[i1][j] != '#') {\n        return false;\n      }\n      if (v[i1][j] == '#') {\n        res &= dfs(i1, j, r, v, !line);\n      }\n    }\n  }\n  r[i][j] = '.';\n  return res;\n}\nint main() {\n  srand(time(0));\n  ios::sync_with_stdio(false);\n  cin >> n >> m;\n  used_l.resize(n, false), used_s.resize(m, false);\n  vector<vector<char>> v(n, vector<char>(m)), r;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> v[i][j];\n    }\n  }\n  r = v;\n  bool ans = true;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (r[i][j] == '#') {\n        ans &= dfs(i, j, r, v, true);\n        fill(used_l.begin(), used_l.end(), false),\n            fill(used_s.begin(), used_s.end(), false);\n      }\n    }\n  }\n  if (ans) {\n    cout << \"Yes\";\n  } else {\n    cout << \"No\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  long long n, m;\n  cin >> n >> m;\n  long long a[n][m];\n  for (long long i = 0; i < n; i++) {\n    for (long long j = 0; j < m; j++) {\n      char temp;\n      cin >> temp;\n      if (temp == '.')\n        a[i][j] = 0;\n      else\n        a[i][j] = 1;\n    }\n  }\n  for (long long i = 0; i < n; i++) {\n    for (long long j = 0; j < m; j++) {\n      if (a[i][j] == 1) {\n        long long north = -1, south = -1, west = -1, east = -1;\n        for (long long k = i - 1; k >= 0; k--) {\n          if (a[k][j] == 1) {\n            north = k;\n            break;\n          }\n        }\n        for (long long k = i + 1; k < n; k++) {\n          if (a[k][j] == 1) {\n            south = k;\n            break;\n          }\n        }\n        for (long long k = j - 1; k >= 0; k--) {\n          if (a[i][k] == 1) {\n            west = k;\n            break;\n          }\n        }\n        for (long long k = j + 1; k < m; k++) {\n          if (a[i][k] == 1) {\n            east = k;\n            break;\n          }\n        }\n        if (north >= 0 && east >= 0) {\n          if (a[north][east] == 0) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n        if (north >= 0 && west >= 0) {\n          if (a[north][west] == 0) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n        if (south >= 0 && west >= 0) {\n          if (a[south][west] == 0) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n        if (south >= 0 && east >= 0) {\n          if (a[south][east] == 0) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1004;\nint n, m;\nbool g[N][N];\nvector<int> c[N];\nbool checked[N] = {false};\nint main() {\n  cin >> n >> m;\n  getchar();\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j <= m; ++j) {\n      g[i][j] = (getchar() == '#');\n      if (g[i][j]) c[j].push_back(i);\n    }\n  for (int i = 0; i < n; ++i)\n    if (!checked[i]) {\n      vector<int> r;\n      for (int j = 0; j < m; ++j)\n        if (g[i][j])\n          for (int k : c[j]) r.push_back(k);\n      sort(r.begin(), r.end());\n      r.resize(unique(r.begin(), r.end()) - r.begin());\n      for (int k : r) {\n        if (checked[k]) {\n          cout << \"No\";\n          return 0;\n        }\n        checked[k] = true;\n        for (int p = 0; p < m; ++p)\n          if (g[i][p] != g[k][p]) {\n            cout << \"No\";\n            return 0;\n          }\n      }\n    }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "import sys\nfrom collections import defaultdict as di\n\nrange = xrange\ninput = raw_input\n\nn,m = [int(x) for x in input().split()]\ndata = [c for _ in range(n) for c in input()]\nnext_x = di(lambda:-1)\nnext_y = di(lambda:-1)\n\nprev_x = di(lambda:-1)\nprev_y = di(lambda:-1)\nfor x in range(m):\n    for y in range(n):\n        if data[x+y*m]=='#':\n            ix = x+1\n            while ix<m and data[ix+y*m]=='.':\n                ix+=1\n            if ix<m:\n                next_x[x,y]=ix\n            iy = y+1\n            while iy<n and data[x+iy*m]=='.':\n                iy+=1\n            if iy<n:\n                next_y[x,y]=iy\n            ix = x-1\n            while ix>=0 and data[ix+y*m]=='.':\n                ix-=1\n            if ix>=0:\n                prev_x[x,y]=ix\n            iy = y-1\n            while iy>=0 and data[x+iy*m]=='.':\n                iy-=1\n            if iy>=0:\n                prev_y[x,y]=iy\nfound = set()\nfor x in range(m):\n    for y in range(n):\n        if (x,y) not in found and data[x+y*m]=='#':\n            ys_of_same_X = di(set)\n            #Y = di(list)\n            #print('searching from',x,y)\n            Q = [(x,y)]\n            while Q:\n                ix,iy = Q.pop()\n                if (ix,iy) in found:\n                    continue\n                found.add((ix,iy))\n                ys_of_same_X[ix].add(iy)\n                if next_x[ix,iy]!=-1:\n                    Q.append( (next_x[ix,iy],iy) )\n                if next_y[ix,iy]!=-1:\n                    Q.append( (ix,next_y[ix,iy]) )\n                if prev_x[ix,iy]!=-1:\n                    Q.append( (prev_x[ix,iy],iy) )\n                if prev_y[ix,iy]!=-1:\n                    Q.append( (ix,prev_y[ix,iy]) )\n            root = -1\n            #print(ys_of_same_X)\n            for iy in ys_of_same_X:\n                root = ys_of_same_X[ix]\n                break\n            for iy in ys_of_same_X:\n                #print(root,ys_of_same_X[iy])\n                if root!=ys_of_same_X[iy]:\n                    print('No')\n                    sys.exit()\nprint('Yes')\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long LINF = 1e18;\nconst long long INF = 1e9;\nconst long long MOD = 10000007;\nlong long strtoll(string s) {\n  stringstream str(s);\n  long long number = 0;\n  str >> number;\n  return number;\n}\nstring lltostr(long long n) {\n  stringstream ss;\n  ss << n;\n  return ss.str();\n}\nlong long power(long long a, long long b, long long m) {\n  if (b == 0) return 1;\n  if (b == 1) return a % m;\n  long long t = power(a, b / 2, m);\n  t = (t * t) % m;\n  if (b & 1) t = (t * a) % m;\n  return t;\n}\nlong long llsqrt(long long x) {\n  if (x == 0 || x == 1) return x;\n  long long start = 1, end = x / 2, ans;\n  while (start <= end) {\n    long long mid = (start + end) / 2;\n    if (mid * mid == x)\n      return mid;\n    else if (mid <= x / mid)\n      ans = mid, start = mid + 1;\n    else\n      end = mid - 1;\n  }\n  return ans;\n}\nvector<long long> spf;\nvoid sieve(long long size) {\n  spf.resize(size + 1);\n  for (long long i = 1; i <= size; ++i) spf[i] = i;\n  for (long long i = 4; i <= size; i += 2) spf[i] = 2;\n  for (long long i = 3; i * i <= size; ++i) {\n    if (spf[i] == i) {\n      for (long long j = i * i; j <= size; j += i)\n        if (spf[j] == j) spf[j] = i;\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  long long n, m;\n  cin >> n >> m;\n  vector<string> s;\n  for (long long i = 0; i < n; i++) {\n    string p;\n    cin >> p;\n    s.push_back(p);\n  }\n  for (long long i = 0; i < n; i++) {\n    set<long long> ss;\n    for (long long j = 0; j < m; j++) {\n      if (s[i][j] == '#') ss.insert(j);\n    }\n    for (auto it = ss.begin(); it != ss.end(); it++) {\n      long long c = *it;\n      for (long long j = 0; j < n; j++) {\n        if (s[j][c] == '#') {\n          for (auto it1 = ss.begin(); it1 != ss.end(); it1++)\n            if (s[j][*it1] == '#')\n              continue;\n            else {\n              cout << \"No\";\n              return 0;\n            }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "import sys\nn, m = (int(x) for x in raw_input().split())\nrows = []\nfor i in range(n):\n    rows.append(raw_input())\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(m):\n            if rows[i][k] == '#':\n                if rows[i][k] == rows[j][k]:\n                    if rows[i] != rows[j]:\n                        print \"No\"\n                        sys.exit()\nprint \"Yes\"\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\na=[]\nb=[]\nfor i in range(n):\n    l=input()\n    r=list(l)\n    a.append(r)\n    b.append(l)\nfor j in range(m):\n    s=[]\n    for i in range(n):   \n        if a[i][j]==\"#\":\n            s.append(b[i])       \n    if len(list(set(s)))>1:\n        print(\"No\")\n        exit(0)\nprint(\"Yes\")                "
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint n, m;\nbool **Grid;\nbool *usedArr;\nstd::vector<int> getPainted(int i) {\n  std::vector<int> result;\n  result.reserve(m);\n  for (int j = 0; j < m; j++)\n    if (Grid[i][j]) result.push_back(j);\n  return result;\n}\nbool check() {\n  for (int i = 0; i < n; i++) {\n    std::vector<int> painted = getPainted(i);\n    if (usedArr[i] && painted.size() != 0) return false;\n    if (painted.size() == 0) continue;\n    usedArr[i] = true;\n    for (int i2 = i + 1; i2 < n; i2++) {\n      bool first = Grid[i2][painted[0]];\n      Grid[i2][painted[0]] = false;\n      if (first) {\n        if (usedArr[i2]) return false;\n        usedArr[i2] = true;\n      }\n      for (int j = 1; j < painted.size(); j++) {\n        if (Grid[i2][painted[j]] != first) return false;\n        Grid[i2][painted[j]] = false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  Grid = new bool *[n];\n  usedArr = new bool[n];\n  memset(usedArr, 0, n);\n  for (int i = 0; i < n; i++) {\n    Grid[i] = new bool[m];\n    for (int j = 0; j < m; j++) {\n      char c;\n      scanf(\" %c\", &c);\n      Grid[i][j] = (c == '#');\n    }\n  }\n  printf(check() ? \"Yes\" : \"No\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\npublic class Main{\n    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n\n        int n = scn.nextInt();\n        int m = scn.nextInt();\n        String[] str = new String[n];\n\n        for(int i = 0 ; i <n ;i++){\n            str[i] = scn.next();\n        }\n\n        boolean flagValue = true;\n\n        for(int i = 0;i<n;i++){\n            for(int j = 0 ;j<m;j++){\n                if(str[i].charAt(j)=='#'){\n                    for(int k = 0 ; k < n && k!=i ;k++){\n                        if(str[k].charAt(j)=='#'){\n                            if(!str[i].equals(str[k])){\n                                flagValue = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if(flagValue) System.out.println(\"Yes\");\n        else System.out.println(\"No\");\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar a[55][55];\nmap<int, int> ma;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> a[i][j];\n      if (a[i][j] == '#') {\n        if (!ma.count(j)) ma[j] = i;\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        for (int k = 0; k < m; k++) {\n          if (a[i][k] != a[ma[j]][k]) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = list(map(int, input().split()))\n\ngrid = []\nfor i in range(n):\n    l = input()\n    grid.append(l)\n\n# print(grid)\ng = set(grid)\n# print(g)\n\ndef check_ok(i, g):\n    count = 0\n    for row in g:\n        if row[i] == \"#\":\n            count += 1\n        if count >= 2:\n            return False\n    return count < 2\n\nans = True\nfor i in range(m):\n    ans &= check_ok(i, g)\n    if not(ans):\n        break\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\nimport java.io.*;\nimport java.text.*;\npublic class Solution{\n    static final long mod = (long)1e9+7, IINF = (long)1e18;\n    static int MAX = (int)1e6+1, L = 31;\n    static FastReader in;\n    static PrintWriter out;\n    static boolean multipleTC = false;\n    public static void main(String[] args) throws Exception{\n        in = new FastReader();\n        out = new PrintWriter(System.out);\n        for(int tc = 1, tt = (multipleTC)?ni():1; tc<=tt; tc++)solve(tc);\n        out.flush();\n        out.close();\n    }\n    \n    static void solve(int tc){\n        int n = ni(), m = ni();\n        boolean yes = true;\n        boolean[][] grid = new boolean[n][m];\n        for(int i = 0; i< n; i++){\n            String s = n();\n            for(int j = 0; j< m; j++)grid[i][j] = s.charAt(j) == '#';\n        }\n        boolean[] row = new boolean[n], col = new boolean[m];\n        for(int i = 0; i< n && yes; i++){\n            for(int j = 0; j< m && yes; j++){\n                if(grid[i][j]){\n                    ArrayList<Integer> r = new ArrayList<>(), c = new ArrayList<>();\n                    for(int k = i; k< n; k++)if(grid[k][j]){\n                        if(row[k])yes = false;\n                        else r.add(k);\n                    }\n                    for(int k = j; k< m; k++)if(grid[i][k]){\n                        if(col[k])yes = false;\n                        else c.add(k);\n                    }\n                    \n                    for(int k:r)for(int l:c)if(!grid[k][l])yes = false;else grid[k][l] = false;\n                    for(int k:r)row[k] = true;\n                    for(int k:c)col[k] = true;\n                }\n            }\n        }\n        pn((yes)?\"Yes\":\"No\");\n    }\n    \n    \n    \n    static void p(Object o){\n        out.print(o);\n    }\n    \n    static void pn(Object o){\n        out.println(o);\n    }\n    \n    static void pni(Object o){\n        out.println(o);\n        out.flush();\n    }\n    \n    static String n(){\n        return in.next();\n    }\n    \n    static String nln(){\n        return in.nextLine();\n    }\n    \n    static int ni(){\n        return Integer.parseInt(in.next());\n    }\n    \n    static long nl(){\n            return Long.parseLong(in.next());\n    }\n    \n    static double nd(){\n        return Double.parseDouble(in.next());\n    }\n    \n    static class FastReader{\n        BufferedReader br;\n        StringTokenizer st;\n        public FastReader(){\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n        \n        public FastReader(String s) throws Exception{\n            br = new BufferedReader(new FileReader(s));\n        }\n \n        String next(){\n            while (st == null || !st.hasMoreElements()){\n                try{\n                    st = new StringTokenizer(br.readLine());\n                }catch (IOException  e){\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n \n        String nextLine(){\n            String str = \"\";\n            try{\n                str = br.readLine();\n            }catch (IOException e){\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n} "
        },
        {
            "language": 4,
            "solution": "import java.util.*;\npublic class B {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt(), m=sc.nextInt();\n\t\tString t[] = new String[n];\n\t\t\n\t\tfor(int i=0; i<n; i++)\n\t\t\tt[i] = sc.next();\n\t\t\n\t\t\n\t\tfor(int i=0; i<n-1; i++)\n\t\t{\n\t\t\tfor(int j=i+1; j<n; j++)\n\t\t\t{\n\t\t\t\tif(t[i].compareTo(t[j]) == 0)\n\t\t\t\t\tt[j]=\"0\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tboolean test=true;\n\t\t\n\t\tfor(int i=0; i<n-1; i++)\n\t\t{\n\t\t\tif(t[i].compareTo(\"0\") != 0)\n\t\t\t{\n\t\t\t\tfor(int k=i+1; k<n; k++)\n\t\t\t\t{\n\t\t\t\t\tif(t[k].compareTo(\"0\") != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(int j=0; j<m; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(t[i].charAt(j) == '#')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(t[i].charAt(j) == t[k].charAt(j))\n\t\t\t\t\t\t\t\t\ttest = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(test)\n\t\t{\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 1e9;\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie();\n  int n, m;\n  cin >> n >> m;\n  long long used[n];\n  for (int i = 0; i < n; i++) {\n    used[i] = 0;\n    for (int j = 0; j < m; j++) {\n      char c;\n      cin >> c;\n      if (c == '#') used[i] |= ((long long)1 << j);\n    }\n  }\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < n; j++)\n      if ((used[i] & used[j]) && (used[i] != used[j])) {\n        cout << \"No\\n\";\n        return 0;\n      }\n  cout << \"Yes\\n\";\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public void solve() throws IOException {\n        int n = nextInt();\n        int m = nextInt();\n        TreeSet<String> q = new TreeSet<>();\n        for (int i = 0; i < n; i++) {\n            q.add(nextToken());\n        }\n        String[] d = new String[q.size()];\n        for (int i = 0; i < d.length; i++) {\n            d[i] = q.pollFirst();\n        }\n        for (int i = 0; i < m; i++) {\n            int h = 0;\n            for (int j = 0; j < d.length; j++) {\n                if (d[j].charAt(i) == '#'){\n                    h++;\n                }\n            }\n            if (h > 1){\n                out.print(\"No\");\n                return;\n            }\n        }\n        out.print(\"Yes\");\n        return;\n    }\n\n    BufferedReader br;\n    StringTokenizer sc;\n    PrintWriter out;\n\n    String nextToken() throws IOException {\n        while (sc == null || !sc.hasMoreTokens()) {\n            try {\n                sc = new StringTokenizer(br.readLine());\n            } catch (Exception e) {\n                sc = null;\n            }\n        }\n        return sc.nextToken();\n    }\n\n    boolean hasNext() throws IOException {\n        while (sc == null || !sc.hasMoreTokens()) {\n            try {\n                sc = new StringTokenizer(br.readLine());\n            } catch (Exception e) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    Integer nextInt() throws IOException {\n        return Integer.parseInt(nextToken());\n    }\n\n    Long nextLong() throws IOException {\n        return Long.parseLong(nextToken());\n    }\n\n    public static void main(String[] args) throws IOException {\n        Locale.setDefault(Locale.US);\n        new Main().run();\n    }\n\n    public void run() throws IOException {\n        try {\n            br = new BufferedReader(new InputStreamReader(System.in));\n            out = new PrintWriter(System.out);\n//            br = new BufferedReader(new FileReader(\"rmq.in\"));\n//            out = new PrintWriter(new File(\"rmq.out\"));\n            solve();\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n}"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\nimport java.io.*;\n\npublic class A {\n  FastScanner in;\n  PrintWriter out;\n\n  char[][] table;\n  boolean[][] checked;\n  Set<Integer> rows = new HashSet<>();\n  Set<Integer> cols = new HashSet<>();\n  \n  public void check(int x, int y) {\n    checked[x][y] = true;\n    rows.add(x);\n    cols.add(y);\n    for (int i = 0; i < table.length; i++) {\n      if (i != x && table[i][y] == '#' && !checked[i][y]) {\n        check(i, y);\n      }\n    }\n    for (int j = 0; j < table[0].length; j++) {\n      if (j != y && table[x][j] == '#' && !checked[x][j]) {\n        check(x, j);\n      }\n    }\n  }\n\n  public void solve() throws IOException {\n    int n = in.nextInt();\n    int m = in.nextInt();\n    table = new char[n][];\n    checked = new boolean[n][m];\n    for (int i = 0; i < n; i++) {\n      table[i] = in.next().toCharArray();\n    }\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        if (table[i][j] == '#' && !checked[i][j]) {\n          rows.clear();\n          cols.clear();\n          check(i, j);\n          for (int rowi: rows) {\n            for (int coli: cols) {\n              if (table[rowi][coli] != '#') {\n                out.println(\"No\");\n                return;\n              }\n            }\n          }\n        }\n      }\n    }\n    out.println(\"Yes\");\n  }\n\n  public void run() {\n    try {\n      in = new FastScanner(System.in);\n      out = new PrintWriter(System.out);\n      solve();\n\n      out.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  class FastScanner {\n    BufferedReader br;\n    StringTokenizer st;\n\n    FastScanner(InputStream is) {\n      br = new BufferedReader(new InputStreamReader(is));\n    }\n\n    String next() {\n      while (st == null || !st.hasMoreTokens()) {\n        try {\n          st = new StringTokenizer(br.readLine());\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      return st.nextToken();\n    }\n\n    int nextInt() {\n      return Integer.parseInt(next());\n    }\n  }\n\n  public static void main(String[] arg) {\n    new A().run();\n  }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n, m;\n  cin >> n >> m;\n  vector<string> grid(n);\n  for (int i = 0; i < n; i++) cin >> grid[i];\n  set<int> cols;\n  bool flag = true;\n  for (int i = 0; i < n; i++) {\n    if (!flag) break;\n    for (int j = 0; j < m; j++) {\n      if (grid[i][j] == '#') {\n        if (cols.count(j) > 0) {\n          for (int k = i - 1; k >= 0; k--) {\n            if (grid[k][j] == '#') {\n              if (grid[k] != grid[i]) flag = false;\n            }\n          }\n        } else\n          cols.insert(j);\n      }\n    }\n  }\n  if (flag)\n    cout << \"Yes\\n\";\n  else\n    cout << \"No\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, t;\n  cin >> n >> t;\n  map<string, pair<vector<int>, vector<int> > > m;\n  bool row[n];\n  for (int i = 0; i < n; i++) row[i] = false;\n  bool col[t];\n  for (int i = 0; i < t; i++) col[i] = false;\n  string s;\n  for (int i = 0; i < n; i++) {\n    cin >> s;\n    m[s].first.push_back(i);\n    for (int j = 0; j < t; j++) {\n      if (s[j] == '#') {\n        if (find(m[s].second.begin(), m[s].second.end(), j) ==\n            m[s].second.end())\n          m[s].second.push_back(j);\n      }\n    }\n  }\n  for (auto it = m.begin(); it != m.end(); it++) {\n    for (int i = 0; i < it->second.first.size(); i++) {\n      if (!row[it->second.first[i]])\n        row[it->second.first[i]] = true;\n      else {\n        cout << \"NO\";\n        return 0;\n      }\n    }\n    for (int i = 0; i < it->second.second.size(); i++) {\n      if (!col[it->second.second[i]])\n        col[it->second.second[i]] = true;\n      else {\n        cout << \"NO\";\n        return 0;\n      }\n    }\n  }\n  cout << \"YES\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  vector<string> data(n);\n  for (auto &x : data) {\n    cin >> x;\n  }\n  bool flag = true;\n  for (int i = 0; i < n && flag; ++i) {\n    vector<int> can_be;\n    for (int j = 0; j < m; ++j) {\n      if (data[i][j] == '#') {\n        can_be.push_back(j);\n      }\n    }\n    vector<int> good_rows;\n    vector<int> my_rows;\n    for (int j = 0; j < can_be.size(); ++j) {\n      if (!flag) {\n        break;\n      }\n      int col = can_be[j];\n      for (int r = i + 1; r < n; ++r) {\n        if (data[r][col] != '#') {\n          continue;\n        }\n        if (j == 0) {\n          good_rows.push_back(r);\n        }\n        my_rows.push_back(r);\n      }\n      if (my_rows != good_rows) {\n        flag = false;\n      }\n      my_rows.clear();\n    }\n    if (flag) {\n      vector<int> good_columns;\n      for (int j = 0; j < good_rows.size(); ++j) {\n        for (int k = 0; k < m; ++k) {\n          if (data[good_rows[j]][k] == '#') {\n            good_columns.push_back(k);\n          }\n        }\n        if (good_columns != can_be) {\n          flag = false;\n          break;\n        }\n        good_columns.clear();\n      }\n    }\n  }\n  if (flag) {\n    cout << \"Yes\\n\";\n  } else {\n    cout << \"No\\n\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint const MAX = 55;\nchar s[MAX][MAX];\nint n, m;\nint a[MAX][MAX];\nvector<int> e[MAX][2];\nint u[MAX][2];\nvector<int> st[2];\nvoid bad() {\n  printf(\"No\\n\");\n  exit(0);\n}\nvoid dfs(int x, int p) {\n  u[x][p] = 1;\n  st[p].push_back(x);\n  for (int y : e[x][p]) {\n    if (!u[y][1 - p]) dfs(y, 1 - p);\n  }\n}\nvoid push() {\n  for (int r : st[0]) {\n    for (int c : st[1]) {\n      a[r][c] = 1;\n    }\n  }\n  st[0].clear();\n  st[1].clear();\n}\nvoid solve() {\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (s[i][j] == '#') {\n        e[i][0].push_back(j);\n        e[j][1].push_back(i);\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    if (!u[i][0]) {\n      dfs(i, 0);\n      push();\n    }\n  }\n  for (int i = 1; i <= m; i++) {\n    if (!u[i][1]) {\n      dfs(i, 1);\n      push();\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      while (false) {\n      };\n    }\n    while (false) {\n    };\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (a[i][j] && s[i][j] != '#') bad();\n      if (!a[i][j] && s[i][j] != '.') bad();\n    }\n  }\n  printf(\"Yes\\n\");\n}\nint main() {\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 1; i <= n; i++) {\n    scanf(\" %s\", s[i] + 1);\n  }\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class VKCUP18B {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        int m = s.nextInt();\n        char[][] grid = new char[n][m];\n        HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();\n        boolean bool = true;\n        for(int i = 0;i<n;i++){\n            String str = s.next();\n            ArrayList<Integer> list = new ArrayList<>();\n            for(int j = 0;j<m;j++){\n                if(str.charAt(j)=='#'){\n                    list.add(j);\n                }\n            }\n\n            if(!list.isEmpty()){\n                for(int j = 0;j<list.size();j++){\n                    if(map.containsKey(list.get(j))){\n                        if(!map.get(list.get(j)).equals(list)){\n                            bool = false;\n                            break;\n                        }\n                    }else{\n                        map.put(list.get(j),list);\n                    }\n                }\n                if(!bool){\n                    break;\n                }\n            }\n        }\n        if(!bool){\n            System.out.println(\"No\");\n        }else{\n            System.out.println(\"Yes\");\n        }\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int N, M;\n  cin >> N >> M;\n  string s[N];\n  for (int lol = 0; lol < N; lol++) {\n    cin >> s[lol];\n  }\n  int yes = 0;\n  for (int lol = 0; lol < N; lol++) {\n    for (int i = 0; i < M; i++) {\n      if (s[lol][i] == '#') {\n        for (int j = 0; j < N; j++) {\n          if (s[j][i] == '#') {\n            if (j != lol) {\n              for (int j2 = 0; j2 < M; j2++) {\n                if (s[lol][j2] != s[j][j2]) {\n                  yes = 1;\n                }\n              }\n            }\n          }\n        }\n        for (int k = 0; k < M; k++) {\n          if (s[lol][k] == '#') {\n            if (k != i) {\n              for (int j2 = 0; j2 < N; j2++) {\n                if (s[j2][k] != s[j2][i]) {\n                  yes = 1;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  if (yes) {\n    cout << \"No\";\n  } else {\n    cout << \"Yes\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar mat[55][55];\nlong long int row[55];\nint main() {\n  ios::sync_with_stdio(0);\n  int n, m, f = 1, op = 1;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j) {\n      cin >> mat[i][j];\n      if (mat[i][j] == '#') row[i] |= 1LL << j;\n    }\n  for (int i = 0; i < n - 1 && f; ++i)\n    for (int j = i + 1; j < n && f; ++j)\n      if (row[i] != row[j])\n        if (row[i] & row[j]) f = 0;\n  if (f)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint r, c;\nchar ch[100][100];\nvector<int> boo[100];\nbool cek(int i, int j) {\n  if (boo[i].size() != boo[j].size())\n    return false;\n  else {\n    for (int k = 0; k < boo[i].size(); k++) {\n      if (boo[i][k] != boo[j][k]) return false;\n    }\n  }\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cin >> r >> c;\n  for (int i = 1; i <= r; i++) {\n    for (int j = 1; j <= c; j++) {\n      cin >> ch[i][j];\n      if (ch[i][j] == '#') boo[i].push_back(j);\n    }\n  }\n  for (int i = 1; i <= r; i++) {\n    if (!boo[i].empty()) {\n      for (int j = i + 1; j <= r; j++) {\n        if (!boo[j].empty()) {\n          if (cek(i, j)) {\n            boo[j].clear();\n          } else {\n            for (int k = 0; k < boo[i].size(); k++)\n              for (int l = 0; l < boo[j].size(); l++)\n                if (boo[i][k] == boo[j][l]) {\n                  cout << \"No\\n\";\n                  return 0;\n                }\n          }\n        }\n      }\n      boo[i].clear();\n    }\n  }\n  for (int i = 1; i <= r; i++) {\n    if (!boo[i].empty()) {\n      cout << \"No\\n\";\n      return 0;\n    }\n  }\n  cout << \"Yes\\n\";\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\ns = set((input() for _ in range(n)))\nfor c in zip(*s):\n\tif ''.join(c).count('#') > 1:\n\t\tprint(\"No\")\n#\n\t\texit()\nprint(\"Yes\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint main() {\n  long n, m;\n  std::cin >> n >> m;\n  bool possible(true);\n  std::vector<long> color(m, 0);\n  for (long row = 1; row <= n; row++) {\n    std::string s;\n    std::cin >> s;\n    long cur(-1);\n    for (int col = 0; col < m; col++) {\n      if (s[col] == '#') {\n        if (!color[col]) {\n          color[col] = row;\n        }\n        if (cur == -1) {\n          cur = color[col];\n        }\n        if (cur != color[col]) {\n          possible = false;\n        }\n      } else if (color[col] == cur) {\n        possible = false;\n      }\n    }\n  }\n  puts(possible ? \"Yes\" : \"No\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma GCC optimize(\"O3\")\n#pragma GCC target(\"tune=native\")\nusing namespace std;\nconst int MAX = 1e6 + 5;\nconst long long MOD = 1000000007;\nconst long long MOD2 = 2010405347;\nconst long long INF = 2e18;\nconst int dr[] = {1, 0, -1, 0, 1, 1, -1, -1, 0};\nconst int dc[] = {0, 1, 0, -1, 1, -1, 1, -1, 0};\nconst double pi = acos(-1);\nconst double EPS = 1e-9;\nconst int block = 315;\ninline long long pw(long long x, long long y, long long md = MOD) {\n  long long ret = 1;\n  while (y) {\n    if (y & 1) ret = ret * x % md;\n    x = x * x % md, y >>= 1;\n  }\n  return ret;\n}\ninline void add(int &a, int b, int md = MOD) {\n  a = a + b >= md ? a + b - md : a + b;\n}\nint n, m, p[105], a, b;\nchar x[55][55], y[55][55];\nvector<int> r[55], c[105];\nint par(int z) {\n  if (p[z] == z) return z;\n  return p[z] = par(p[z]);\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> m;\n  for (int i = (1); i <= (n + m); ++i) p[i] = i;\n  for (int i = (1); i <= (n); ++i)\n    for (int j = (1); j <= (m); ++j) {\n      cin >> x[i][j];\n      if (x[i][j] == '#') {\n        a = par(i), b = par(n + j);\n        p[b] = a;\n      }\n    }\n  for (int i = (1); i <= (n); ++i) r[par(i)].push_back(i);\n  for (int i = (n + 1); i <= (n + m); ++i) {\n    c[par(i)].push_back(i - n);\n  }\n  memset(y, '.', sizeof y);\n  for (int i = (1); i <= (n); ++i) {\n    for (int a : r[i])\n      for (int b : c[i]) y[a][b] = '#';\n  }\n  for (int i = (1); i <= (n); ++i)\n    for (int j = (1); j <= (m); ++j)\n      if (x[i][j] != y[i][j]) return cout << \"No\\n\", 0;\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long INF = (long long)1e16;\nint main() {\n  ios_base::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  string grid[52];\n  for (int i = 0; i < n; i++) cin >> grid[i];\n  bool rows[52], cols[52];\n  for (int i = 0; i < 52; i++) rows[i] = cols[i] = false;\n  for (int i = 0; i < n; i++) {\n    if (rows[i]) continue;\n    vector<int> same;\n    for (int j = i + 1; j < n; j++) {\n      if (grid[i] == grid[j]) same.push_back(j);\n    }\n    for (int c = 0; c < m; c++) {\n      if (grid[i][c] != '#') continue;\n      if (cols[c]) {\n        cout << \"No\\n\";\n        return 0;\n      }\n      cols[c] = true;\n    }\n    for (auto &r : same) rows[r] = true;\n    rows[i] = true;\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nmt19937 rnd(239);\nint solve() {\n  ios::sync_with_stdio(0);\n  int n;\n  if (!(cin >> n)) {\n    return 1;\n  }\n  int m;\n  cin >> m;\n  vector<string> s(n);\n  for (int i = 0; i < n; i++) cin >> s[i];\n  for (int i = 0; i < n; i++)\n    for (int j = i + 1; j < n; j++) {\n      bool ok = 0;\n      for (int k = 0; k < m; k++)\n        if (s[i][k] == '#' && s[j][k] == '#') ok = 1;\n      if (ok && s[i] != s[j]) {\n        cout << \"No\\n\";\n        return 0;\n      }\n    }\n  cout << \"Yes\\n\";\n  return 0;\n}\nint32_t main() {\n  int T = 100;\n  for (int i = 1; i <= T; i++) {\n    if (solve()) break;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar bd[51][51], _;\nbool ok, same, diff;\nint main() {\n  scanf(\"%d%d%c\", &n, &m, &_);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) scanf(\"%c\", &bd[i][j]);\n    scanf(\"%c\", &_);\n  }\n  ok = true;\n  for (int i = 0; i < n - 1 && ok; i++)\n    for (int j = i + 1; j < n && ok; j++) {\n      same = false;\n      diff = false;\n      for (int k = 0; k < m; k++) {\n        if (bd[i][k] == bd[j][k] && bd[i][k] == '#')\n          same = true;\n        else if (bd[i][k] == '#' || bd[j][k] == '#')\n          diff = true;\n      }\n      if (same && diff) ok = false;\n    }\n  printf(ok ? \"Yes\\n\" : \"No\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconstexpr double EPS = 1e-9;\nusing namespace std;\nint sz = 0;\nint n, m;\nvector<vector<pair<int, int>>> ss;\nbool vis[51][51];\nstring grid[51];\nvoid dfs(int r, int c) {\n  vis[r][c] = 1;\n  ss[sz].push_back({r, c});\n  for (int i = 0; i < n; i++) {\n    if (grid[i][c] == '#' && !vis[i][c]) dfs(i, c);\n  }\n  for (int i = 0; i < m; i++) {\n    if (grid[r][i] == '#' && !vis[r][i]) dfs(r, i);\n  }\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> grid[i];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (grid[i][j] == '#' && !vis[i][j]) {\n        ss.push_back(vector<pair<int, int>>());\n        dfs(i, j);\n        sz++;\n      }\n    }\n  }\n  for (auto el : ss) {\n    int rr[51] = {0};\n    int cc[51] = {0};\n    for (auto qq : el) {\n      rr[qq.first] = 1;\n      cc[qq.second] = 1;\n    }\n    int a, b;\n    a = b = 0;\n    for (int i = 0; i < 50; i++) {\n      a += rr[i];\n      b += cc[i];\n    }\n    if (a * b != el.size()) {\n      cout << \"No\";\n      return 0;\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 1,
            "solution": "import sys\nsys_in = sys.stdin\n\n\ndef read_ints():\n    return map(lambda x: int(x), sys_in.readline().split())\n\n\ndef read_int():\n    return int(sys_in.readline())\n\nN, M = read_ints()\n\ngrid = []\nfor i in range(N):\n    line = sys_in.readline().strip()\n    grid.append(list(line))\n\n\nfor i in range(N):\n    selected_cols = set()\n    for j in range(M):\n        if grid[i][j] == \"#\":\n            selected_cols.add(j)\n            grid[i][j] = \".\"\n    for c in selected_cols:\n        for i2 in range(i+1, N):\n            if grid[i2][c] == \"#\":\n                for j2 in range(M):\n                    if j2 in selected_cols:\n                        if grid[i2][j2] == \".\":\n                            sys.stdout.write(\"No\\n\")\n                            exit(0)\n                    else:\n                        if grid[i2][j2] == \"#\":\n                            sys.stdout.write(\"No\\n\")\n                            exit(0)\n                    grid[i2][j2] = \".\"\n                grid[i2][c] = \".\"\nsys.stdout.write(\"Yes\\n\")\n"
        },
        {
            "language": 3,
            "solution": "import sys\n\n\ndef read_two_int():\n\treturn map(int, sys.stdin.readline().strip().split(' '))\n\n\ndef get_colored_rows(A, n, col):\n\treturn {i for i in range(n) if A[i][col] == '#'}\n\n\ndef get_colored_columns(A, m, row):\n\treturn {j for j in range(m) if A[row][j] == '#'}\n\n\ndef validate_step_correct(A, n, m, rows, columns):\n\tfor row in rows:\n\t\tif get_colored_columns(A, m, row) != columns:\n\t\t\t# print(\"Bad columns \", columns)\n\t\t\treturn False\n\n\tfor column in columns:\n\t\tif get_colored_rows(A, n, column) != rows:\n\t\t\t# print(\"Bad rows \", rows)\n\t\t\treturn False\n\treturn True\n\n\ndef clear_step(A, rows, columns):\n\tfor i in rows:\n\t\tfor j in columns:\n\t\t\tA[i][j] = '.'\n\n\ndef validate_map(n, m, A):\n\tused_rows = [False for i in range(n)]\n\tused_columns = [False for j in range(m)]\n\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif A[i][j] != '#':\n\t\t\t\tcontinue\n\n\t\t\trows = get_colored_rows(A, n, j)\n\t\t\tcolumns = get_colored_columns(A, m, i)\n\t\t\t# print(rows)\n\t\t\t# print(columns)\n\n\t\t\tif not validate_step_correct(A, n, m, rows, columns):\n\t\t\t\treturn False\n\n\t\t\tclear_step(A, rows, columns)\n\n\t# map is empty now\n\treturn True\n\n\nn, m = read_two_int()\nA = []\nfor i in range(n):\n\trow = sys.stdin.readline().strip()\n\tA.append([c for c in row])\n\nprint('Yes' if validate_map(n, m, A) else 'No')\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid run(istream &in, ostream &out) {\n  int n, m;\n  in >> n >> m;\n  vector<string> b(n);\n  for (int i = 0; i < n; ++i) in >> b[i];\n  vector<int> cc[m];\n  for (int r = 0; r < n; ++r) {\n    vector<int> nw;\n    for (int c = 0; c < m; ++c)\n      if (b[r][c] == '#') nw.push_back(c);\n    for (int c : nw)\n      if (cc[c].size() && cc[c] != nw) {\n        cout << \"No\\n\";\n        return;\n      }\n    for (int i = 0; i + 1 < nw.size(); ++i)\n      if (cc[nw[i]] != cc[nw[i + 1]]) {\n        cout << \"No\\n\";\n        return;\n      }\n    for (int c : nw) cc[c] = nw;\n  }\n  out << \"Yes\\n\";\n}\nint main(int argc, char *agrv[]) {\n  bool a = 0;\n  if (a) {\n    ifstream in(\"input\");\n    run(in, cout);\n  } else\n    run(cin, cout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst int MAXN = 1005, MAXM = 1005;\ntemplate <typename _T>\nvoid read(_T &x) {\n  x = 0;\n  char s = getchar();\n  int f = 1;\n  while (s > '9' || s < '0') {\n    if (s == '-') f = -1;\n    s = getchar();\n  }\n  while (s >= '0' && s <= '9') {\n    x = (x << 3) + (x << 1) + (s - '0'), s = getchar();\n  }\n  x *= f;\n}\ntemplate <typename _T>\nvoid write(_T x) {\n  if (x < 0) {\n    putchar('-');\n    x = (~x) + 1;\n  }\n  if (9 < x) {\n    write(x / 10);\n  }\n  putchar(x % 10 + '0');\n}\nchar app[MAXN][MAXM];\nint fa[MAXN + MAXM];\nint N, M;\nvoid makeSet(int siz) {\n  for (int i = 1; i <= siz; i++) fa[i] = i;\n}\nint findSet(int u) { return fa[u] = (u == fa[u] ? fa[u] : findSet(fa[u])); }\nvoid unionSet(int u, int v) { fa[findSet(u)] = findSet(v); }\nbool chk(int i, int j) { return findSet(i) == findSet(j); }\nint main() {\n  read(N), read(M);\n  makeSet(N + M);\n  for (int i = 1; i <= N; i++) {\n    scanf(\"%s\", app[i] + 1);\n    for (int j = 1; j <= M; j++)\n      if (app[i][j] == '#') unionSet(i, j + N);\n  }\n  for (int i = 1; i <= N; i++)\n    for (int j = 1; j <= M; j++)\n      if (app[i][j] == '.' && chk(i, j + N)) {\n        puts(\"No\");\n        return 0;\n      }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar a[60][60];\nbool isRowChecked[60];\nbool isColChecked[60];\nbool doCheck(int r, int c) {\n  bool isRowRegard[60];\n  bool isColRegard[60];\n  memset(isRowRegard, false, sizeof(isRowRegard));\n  memset(isColRegard, false, sizeof(isColRegard));\n  std::vector<int> rows;\n  std::vector<int> cols;\n  for (int rr = r; rr < n; rr++) {\n    if (a[rr][c] == '#') {\n      isRowRegard[rr] = true;\n      rows.push_back(rr);\n    }\n  }\n  for (int cc = c; cc < m; cc++) {\n    if (a[r][cc] == '#') {\n      isColRegard[cc] = true;\n      cols.push_back(cc);\n    }\n  }\n  for (int i = 0; i < rows.size(); i++) {\n    for (int cc = 0; cc < m; cc++) {\n      if ((a[rows[i]][cc] == '.') && (isColRegard[cc] == true)) return false;\n      if ((a[rows[i]][cc] == '#') && (isColRegard[cc] == false)) return false;\n    }\n  }\n  for (int j = 0; j < cols.size(); j++) {\n    for (int rr = 0; rr < n; rr++) {\n      if ((a[rr][cols[j]] == '.') && (isRowRegard[rr] == true)) return false;\n      if ((a[rr][cols[j]] == '#') && (isRowRegard[rr] == false)) return false;\n    }\n  }\n  for (int i = 0; i < rows.size(); i++) isRowChecked[rows[i]] = true;\n  for (int j = 0; j < cols.size(); j++) isColChecked[cols[j]] = true;\n  return true;\n}\nint main() {\n  scanf(\"%d%d\\n\", &n, &m);\n  for (int i = 0; i < n; i++) scanf(\"%s\\n\", a[i]);\n  memset(isRowChecked, false, sizeof(isRowChecked));\n  memset(isColChecked, false, sizeof(isColChecked));\n  for (int r = 0; r < n; r++) {\n    if (isRowChecked[r]) continue;\n    for (int c = 0; c < m; c++) {\n      if (isColChecked[c]) continue;\n      if (a[r][c] == '#') {\n        if (doCheck(r, c) == false) {\n          printf(\"No\\n\");\n          return 0;\n        }\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\nl=[0 for i in range(n)]\nans=[set() for i in range(n)]\nfor i in range(n):\n      l[i]=input()\n      for j in range(len(l[i])):\n            if l[i][j]==\"#\":\n                  ans[i].add(j)\nx=False\nfor i in range(n):\n      for j in range(i,n):\n            if ans[j]&ans[i]!=set():\n                  if (ans[i]-ans[j]!=set()) or (ans[j]-ans[i]!=set()):\n                        x=True\n                        break\n      if x:\n            break\nif x==True:\n      print(\"No\")\nelse:\n      print(\"Yes\")\n      \n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  long long int arr[n];\n  fill(arr, arr + n, 0);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      char x;\n      cin >> x;\n      arr[i] *= 2;\n      if (x == '#') arr[i]++;\n    }\n  }\n  for (int i = 0; i < n - 1; i++) {\n    for (int j = i + 1; j < n; j++) {\n      if (((long long int)(arr[i] & arr[j]) != 0) && arr[i] != arr[j]) {\n        cout << \"NO\\n\";\n        return 0;\n      }\n    }\n  }\n  cout << endl;\n  cout << \"YES\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar c[50][50];\nunsigned short int m;\nbool eq(const unsigned short int a, const unsigned short int b) {\n  for (unsigned short int k = 0; k < m; k++) {\n    if (c[a][k] != c[b][k]) {\n      return false;\n    }\n  }\n  return true;\n}\nbool ex(const unsigned short int a, const unsigned short int b) {\n  for (unsigned short int i = 0; i < m; i++) {\n    if (c[a][i] == '#' && c[b][i] == '#') {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n  unsigned short int n;\n  cin >> n >> m;\n  for (unsigned short int i = 0; i < n; i++) {\n    for (unsigned short int j = 0; j < m; j++) {\n      cin >> c[i][j];\n    }\n  }\n  bool inc[n];\n  fill_n(inc, n, false);\n  for (unsigned short int i = 0; i < n - 1; i++) {\n    if (!inc[i]) {\n      for (unsigned short int j = i + 1; j < n; j++) {\n        if (eq(i, j)) {\n          inc[j] = true;\n        }\n      }\n      for (unsigned short int j = i + 1; j < n; j++) {\n        if (!inc[j] && !ex(i, j)) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n}\n"
        },
        {
            "language": 3,
            "solution": "T = input().split(' ')\nn = int(T[0])\nm = int(T[1])\ntab = []\nfor i in range(n):\n    t = input()\n    row = []\n    for j in range(m):\n        if t[j]=='.':\n            row.append(0)\n        else:\n            row.append(1)\n    tab.append(row)\nb = True\nfor i in range(n):\n    for j in range(i+1, n):\n        c1 = False\n        c2 = False\n        for k in range(m):\n            if tab[i][k]==1 and tab[j][k]==1:\n                c1 = True\n            if tab[i][k] + tab[j][k]==1:\n                c2 = True\n        if c1 and c2:\n            b = False\nif b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.OutputStream;\nimport java.util.Set;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileNotFoundException;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport java.util.StringTokenizer;\nimport java.io.Writer;\nimport java.io.BufferedReader;\nimport java.util.LinkedList;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Asgar Javadov\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            char[][] cell = in.readCharMatrix(n, m);\n\n            Graph graph = new Graph(n + m);\n\n            for (int i = 0; i < cell.length; ++i) {\n                for (int j = 0; j < cell[0].length; j++) {\n                    if (cell[i][j] == '#')\n                        graph.addEdge(i, n + j);\n                }\n            }\n\n            Set<Integer> rowSet = new HashSet<>();\n            Set<Integer> columnSet = new HashSet<>();\n\n            boolean[] rows = new boolean[n];\n            boolean[] columns = new boolean[m];\n\n            boolean res = true;\n            for (int i = 0; i < n; ++i) {\n                if (!rows[i]) {\n                    rowSet.add(i);\n                    dfs(i, graph, rows, columns, rowSet, columnSet, true);\n                    res &= assertTrue(rowSet, columnSet, cell);\n                    if (!res) {\n                        out.println(\"No\");\n                        return;\n                    }\n                    rowSet.clear();\n                    columnSet.clear();\n                }\n            }\n\n            if (res) {\n                out.println(\"Yes\");\n            }\n        }\n\n        private boolean assertTrue(Set<Integer> rowSet, Set<Integer> columnSet, char[][] cell) {\n            for (int row : rowSet) {\n                for (int col : columnSet) {\n                    if (cell[row][col - cell.length] != '#')\n                        return false;\n                }\n            }\n            return true;\n        }\n\n        private void dfs(int v, Graph graph, boolean[] rows, boolean[] columns, Set<Integer> rowsSet, Set<Integer> colsSet, boolean isRow) {\n            if (isRow) {\n                rows[v] = true;\n                for (int column : graph.getEdgesFrom(v)) {\n                    if (!columns[column - rows.length]) {\n                        colsSet.add(column);\n                        dfs(column, graph, rows, columns, rowsSet, colsSet, false);\n                    }\n                }\n            } else {\n                columns[v - rows.length] = true;\n                for (int row : graph.getEdgesFrom(v)) {\n                    if (!rows[row]) {\n                        rowsSet.add(row);\n                        dfs(row, graph, rows, columns, rowsSet, colsSet, true);\n                    }\n                }\n            }\n        }\n\n    }\n\n    static class OutputWriter extends PrintWriter {\n        public OutputWriter(OutputStream outputStream) {\n            super(outputStream);\n        }\n\n        public OutputWriter(Writer writer) {\n            super(writer);\n        }\n\n        public OutputWriter(String filename) throws FileNotFoundException {\n            super(filename);\n        }\n\n        public void close() {\n            super.close();\n        }\n\n    }\n\n    static class InputReader extends BufferedReader {\n        StringTokenizer tokenizer;\n\n        public InputReader(InputStream inputStream) {\n            super(new InputStreamReader(inputStream), 32768);\n        }\n\n        public InputReader(String filename) {\n            super(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)));\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException();\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public Integer nextInt() {\n            return Integer.valueOf(next());\n        }\n\n        public char[][] readCharMatrix(int n, int m) {\n            char[][] result = new char[n][];\n            for (int i = 0; i < n; i++) {\n                result[i] = next().toCharArray();\n            }\n            return result;\n        }\n\n    }\n\n    static class Graph {\n        protected int V;\n        protected boolean directed = false;\n        private List<Integer>[] edges;\n\n        public Graph(int v) {\n            this(v, false);\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public Graph(int v, boolean directed) {\n            this.V = v;\n            this.directed = directed;\n            this.edges = Stream.generate(LinkedList<Integer>::new).limit(V).toArray(List[]::new);\n        }\n\n        public void addEdge(int u, int v) {\n            edges[u].add(v);\n            if (!directed)\n                edges[v].add(u);\n        }\n\n        public List<Integer> getEdgesFrom(int i) {\n            if (i < 0 || i >= V)\n                throw new IllegalArgumentException(\"Argument must be in [0, V).\");\n            return this.edges[i];\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nclock_t startt, endt;\nbool isEqual(char a[], char b[], int m) {\n  for (int i = 0; i < m; ++i)\n    if (a[i] != b[i]) return false;\n  return true;\n}\nint main() {\n  int n, m;\n  cin >> n >> m;\n  char grid[n][m];\n  for (int i = 0; i < n; ++i) cin >> grid[i];\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (grid[i][j] == '#') {\n        for (int k = i + 1; k < n; ++k) {\n          if (grid[k][j] == '#' && !isEqual(grid[i], grid[k], m)) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "//package Codeforces;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class MysticalMosaic {\n    public MysticalMosaic() {\n        super();\n    }\n    \n    public static boolean compare(int[] countHash, int[][] posHash, int r1, int r2) {\n        \n        int len = countHash[r1];\n        int  cnt = 0;\n        for(int i=0; i<len; i++) {\n            if( Arrays.binarySearch(posHash[r2],0,countHash[r2],posHash[r1][i] ) >= 0 ) {\n                cnt++;\n            }\n        }\n        \n        if( (cnt == 0) ||  ( cnt == len && (countHash[r1] == countHash[r2]) ) ) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    \n    public static void main(String[] args) {\n        \n        Scanner in = new Scanner(System.in);\n        \n        int row = in.nextInt();\n        int col = in.nextInt();\n        String[] strAr = new String[row];\n        \n        for(int i=0; i<row; i++) {\n            strAr[i] = in.next();\n        }\n        \n        int[] countHash = new int[row];\n        int[][] posHash = new int[row][col];\n        for(int i=0; i<row; i++) {\n            int x = 0;\n            for(int j=0; j<col; j++) {\n                if(strAr[i].charAt(j) == '#') {\n                    countHash[i]++;\n                    posHash[i][x] = j;\n                    x++;\n                }\n            }\n        }\n        \n        boolean ans = true;\n        int[] pos = new int[col];\n        \n        for( int r1 = 0; r1 < row-1; r1++) {\n                  \n            for(int r2 = r1+1; r2 < row; r2++) {\n                if( compare( countHash, posHash,r1,r2 ) == false ) {\n                    ans = false;\n                    break;\n                }\n            }\n            \n            if(ans == false) {\n                break;\n            }\n        }\n        \n        if(ans) {\n            System.out.println(\"Yes\");\n        }\n        else {\n            System.out.println(\"No\");\n        }\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid solve() {}\nint main(void) {\n  cin.tie(0), cout.tie(0)->sync_with_stdio(0);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char>> grid(n, vector<char>(m));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> grid[i][j];\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      bool oneZero = false, oneOne = false;\n      for (int k = 0; k < m; k++) {\n        if (grid[i][k] == '.') continue;\n        if (grid[j][k] != '#') {\n          oneZero = true;\n        } else if (grid[j][k] == '#') {\n          oneOne = true;\n        }\n      }\n      if (oneZero && oneOne) {\n        cout << \"No\\n\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int Z = (int)1e5 + 111;\nconst int INF = (int)1e9 + 111;\nconst int MODF = (int)1e9 + 7;\nint n, m;\nchar a[55][55];\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) cin >> a[i][j];\n  for (int i = 0; i < n; i++)\n    for (int x = i + 1; x < n; x++) {\n      bool flag = true, ans = true;\n      for (int j = 0; j < m; j++) {\n        if (a[i][j] == '#' && a[x][j] == '#') flag = false;\n      }\n      for (int j = 0; j < m; j++)\n        if (a[i][j] != a[x][j] && flag == false) ans = false;\n      if (!ans) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "# python3\nn, m = tuple(map(int, input().split()))\n\nmask = 0\ncollected = set()\n\nwhile n:\n    n -= 1\n\n    row = 0\n    for char in input():\n        row = (row << 1) | (char == '#')\n\n    if row & mask:\n        if row not in collected:\n            print(\"No\")\n            break\n    else:\n        mask ^= row\n        collected.add(row)\nelse:\n    print(\"Yes\")\n"
        },
        {
            "language": 4,
            "solution": "// practice with kaiboy\nimport java.io.*;\nimport java.util.*;\n\npublic class CF957B extends PrintWriter {\n\tCF957B() { super(System.out, true); }\n\tScanner sc = new Scanner(System.in);\n\tpublic static void main(String[] $) {\n\t\tCF957B o = new CF957B(); o.main(); o.flush();\n\t}\n\n\tvoid main() {\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tlong[] aa = new long[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tbyte[] bb = sc.next().getBytes();\n\t\t\tlong a = 0;\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t\tif (bb[j] == '#')\n\t\t\t\t\ta |= 1L << j;\n\t\t\taa[i] = a;\n\t\t}\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = i + 1; j < n; j++)\n\t\t\t\tif (aa[i] != aa[j] && (aa[i] & aa[j]) != 0) {\n\t\t\t\t\tprintln(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\tprintln(\"Yes\");\n\t}\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint visited[100];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string s[n];\n  for (int i = 0; i < n; i++) cin >> s[i];\n  for (int i = 0; i < m; i++) {\n    string str = \"\";\n    for (int j = 0; j < n; j++) {\n      if (s[j][i] == '#') {\n        if (str == \"\") {\n          str = s[j];\n        } else if (str != s[j]) {\n          cout << \"NO\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"YES\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  set<int> st1[51], st2, st3;\n  vector<string> vec(n + 1);\n  for (int i = 0; i < n; i++) {\n    cin >> vec[i + 1];\n  }\n  int a, b, c;\n  for (int i = 1; i <= n; i++) {\n    st2.clear();\n    for (int j = 0; j < m; j++) {\n      if (vec[i][j] == '#') {\n        st2.insert(j + 1);\n      }\n    }\n    for (int k = 1; k <= n; k++) {\n      if (k != i) {\n        if (st2 != st1[k]) {\n          st3 = st2;\n          while (st3.size()) {\n            a = *st3.begin();\n            if (st1[k].find(a) != st1[k].end()) {\n              cout << \"No\";\n              return 0;\n            } else {\n              st3.erase(a);\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    st1[i] = st2;\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nfield = [''] * n\nfor i in range(n):\n    field[i] = input()\n\nfor j in range(0, m):\n    nums = []\n    for i in range(0, n):\n        if field[i][j] == '#':\n            nums.append(i)\n    if len(nums) > 0:\n        for i in nums:\n            if field[i] != field[nums[0]]: \n                print('no')\n                exit(0)\nprint('yes')"
        },
        {
            "language": 4,
            "solution": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc=new Scanner(System.in);\n\t\tDecimalFormat df=new DecimalFormat(\"######0.0000\"); \n\t\tint a=sc.nextInt();\n\t\tint b=sc.nextInt();\n\t\tchar[][] arr=new char[a][b];\n\t\tfor(int i=0;i<a;i++){\n\t\t\tString row=sc.next();\n\t\t\tfor(int j=0;j<b;j++){\n\t\t\t\tarr[i][j]=row.charAt(j);\n\t\t\t}\n\t\t}\n\t\tfor(int e=0;e<a-1;e++){\n\t\t\tfor(int q=1;q<a;q++){\n\t\t\t\tint w1=0;\n\t\t\t\tint q1=0;\n\t\t\t\tfor(int w=0;w<b;w++){\n\t\t\t\t\tif(arr[e][w]!=arr[q][w]){\n\t\t\t\t\t\tq1=1;\n\t\t\t\t\t}\n\t\t\t\t\tif(arr[e][w]=='#'&&arr[q][w]=='#'){\t\t\n\t\t\t\t\t\tw1=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(q1==1&&w1==1){\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t\t\n\t}\n\n}\n"
        },
        {
            "language": 3,
            "solution": "arri = lambda: [int(s) for s in input().split()]\narrf = lambda: [float(s) for s in input().split()]\n\ndef f(s1, s2):\n    have2 = False\n    have1 = False\n    for i in range( len(s1) ):\n        if s1[i] == s2[i] == '#':\n            have2 = True\n        elif s1[i] == '#' and s2[i] != '#' or s2[i] == '#' and s1[i] != '#':\n            have1 = True\n    return not (have2 and have1)\nn, m = arri()\ns = [input() for i in range(n)]\n#print(s)\nflag = True\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if not f(s[i], s[j]):\n            flag = False\nprint('Yes' if flag else 'No')\n"
        },
        {
            "language": 3,
            "solution": "\ndef row_not_empty(array, m, row):\n\tfor col in range(m):\n\t\tif array[row][col] == '#':\n\t\t\treturn True\n\treturn False\n\n\n\ndef main():\n\tn, m = map(int, input().split())\n\tarray = []\n\tfor i in range(n):\n\t\tarray.append(input())\n\t\t\n\n\texplored_rows = []\n\texplored_cols = []\n\n\tfor row in range(n):\n\t\tcurr_rows = []\n\t\tcurr_cols = []\n\t\tif row not in explored_rows and row_not_empty(array, m, row):\n\t\t\tcurr_rows.append(row)\n\t\t\tnew = True \n\t\t\twhile new == True:\n\t\t\t\tnew = False\n\t\t\t\tfor row in curr_rows:\n\t\t\t\t\tfor col in range(m):\n\t\t\t\t\t\tif array[row][col] == '#' and col not in curr_cols:\n\t\t\t\t\t\t\tcurr_cols.append(col)\n\t\t\t\t\t\t\tnew = True\n\t\t\t\tfor col in curr_cols:\n\t\t\t\t\tfor row in range(n):\n\t\t\t\t\t\tif array[row][col] == '#' and row not in curr_rows:\n\t\t\t\t\t\t\tcurr_rows.append(row)\n\t\t\t\t\t\t\tnew = True\n\t\t\tfor col in curr_cols: \n\t\t\t\tfor row in curr_rows:\n\t\t\t\t\tif array[row][col] == '.':\n\t\t\t\t\t\treturn False\n\t\t\tfor col in curr_cols:\n\t\t\t\tif col in explored_cols:\n\t\t\t\t\treturn False\n\t\t\t\texplored_cols.append(col)\n\t\t\tfor row in curr_rows:\n\t\t\t\tif row in explored_rows:\n\t\t\t\t\treturn False\n\t\t\t\texplored_rows.append(row)\n\n\treturn True\n\n\n\t\nif main():\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid run();\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  cout << fixed << setprecision(3);\n  srand(42);\n  run();\n}\ntemplate <typename T1, typename T2>\nbool mini(T1 &a, const T2 &b) {\n  if (a > b) {\n    a = b;\n    return true;\n  }\n  return false;\n}\ntemplate <typename T1, typename T2>\nbool maxi(T1 &a, const T2 &b) {\n  if (a < b) {\n    a = b;\n    return true;\n  }\n  return false;\n}\nconst long long N = 52;\nlong long rcnt[N];\nlong long ccnt[N];\nvoid run() {\n  long long n, m;\n  cin >> n >> m;\n  set<long long> masks;\n  for (long long i = 0; i < n; i++) {\n    long long kek = 0;\n    for (long long j = 0; j < m; j++) {\n      char c;\n      cin >> c;\n      if (c == '#') kek |= (1LL << j);\n    }\n    masks.insert(kek);\n  }\n  for (auto it1 = masks.begin(); it1 != masks.end(); it1++) {\n    auto it2 = it1;\n    it2++;\n    for (; it2 != masks.end(); it2++) {\n      if ((*it1) & (*(it2))) {\n        cout << \"No\";\n        return;\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint usedCols[64];\nint n, m;\nstd::string strs[60];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    std::cin >> strs[i];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (strs[i] != strs[j]) {\n        for (int k = 0; k < m; k++) {\n          if (strs[i][k] == '#' && strs[j][k] == '#') {\n            printf(\"No\\n\");\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Scanner;\n\npublic class TaskB {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\n\t\tchar[][] grid = new char[n][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tgrid[i] = sc.next().toCharArray();\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (violation(grid[i], grid[j])) {\n\t\t\t\t\tSystem.out.println(\"no\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"yes\");\n\t}\n\n\tprivate static boolean violation(char[] a, char[] b) {\n\t\tif (Arrays.equals(a, b)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tboolean shouldBe = false;\n\t\t\tboolean isnt = false;\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i] == '#' && b[i] == '#') {\n\t\t\t\t\tshouldBe = true;\n\t\t\t\t} else if (a[i] == '#') {\n\t\t\t\t\tisnt = true;\n\t\t\t\t} else if (b[i] == '#') {\n\t\t\t\t\tisnt = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (shouldBe && isnt) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long inf = 1e9 + 123;\nlong long eps = 1e-6;\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int> > tocheck(m);\n  vector<bitset<50> > y(m);\n  vector<vector<int> > x(n);\n  int i, j;\n  char ch;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      cin >> ch;\n      if (ch == '#') {\n        x[i].push_back(j);\n        y[j].set(i);\n        tocheck[j].emplace_back(i);\n      }\n    }\n  }\n  vector<bool> used(m, 0);\n  for (i = 0; i < m; i++) {\n    for (int k : tocheck[i]) {\n      for (int j : x[k]) {\n        used[j] = 1;\n        if ((y[i] ^ y[j]) != 0) {\n          cout << \"NO\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"YES\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m, i, j;\n  cin >> n >> m;\n  map<int, set<int> > in;\n  map<int, set<int> >::iterator o;\n  set<int>::iterator t;\n  char v[50][50];\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) cin >> v[i][j];\n  }\n  for (i = 0; i < n;) {\n    set<int> s;\n    for (j = 0; j < m; j++) {\n      if (v[i][j] == '#') s.insert(j);\n    }\n    int f = 1;\n    for (o = in.begin(); o != in.end(); o++) {\n      set<int> k = o->second;\n      if (s == k)\n        break;\n      else {\n        for (t = s.begin(); t != s.end(); t++) {\n          if (k.find(*t) != k.end()) f = 0;\n        }\n      }\n    }\n    if (f == 0)\n      break;\n    else {\n      in.insert({i, s});\n      i++;\n    }\n  }\n  if (i == n)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nlong long int64;\nconst int MAXN = 53;\nint n, m;\nbool a[MAXN][MAXN];\nint b[MAXN];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j <= m; ++j) a[i][j] = (getchar() == '#');\n  for (int i = 0; i < n - 1; ++i)\n    for (int j = i + 1; j < n; ++j) {\n      bool all_same = true, no_intersect = true;\n      for (int k = 0; k < m; ++k) {\n        if (a[i][k] != a[j][k]) all_same = false;\n        if (a[i][k] && a[j][k]) no_intersect = false;\n      }\n      if (!all_same && !no_intersect) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author pandusonu\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            // out.print(\"Case #\" + testNumber + \": \");\n            int n = in.readInt();\n            int m = in.readInt();\n            int[] row = new int[n];\n            int[] col = new int[m];\n            char[][] a = new char[n][m];\n            int count = 1;\n            for (int i = 0; i < n; i++) {\n                String s = in.readString();\n                int curr = -1;\n                for (int j = 0; j < m; j++) {\n                    if (s.charAt(j) == '#' && col[j] != 0) {\n                        if (curr == -1)\n                            curr = col[j];\n                        else if (curr != col[j]) {\n                            out.println(\"No\");\n                            return;\n                        }\n                    }\n                }\n                if (curr == -1) {\n                    curr = count;\n                    count++;\n                }\n                for (int j = 0; j < m; j++) {\n                    if (s.charAt(j) == '#') {\n                        col[j] = row[i] = curr;\n                    }\n                }\n                a[i] = s.toCharArray();\n            }\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (row[i] != 0 && col[j] != 0) {\n                        if (row[i] == col[j] && a[i][j] != '#') {\n                            out.println(\"No\");\n                            return;\n                        }\n                    }\n                }\n            }\n            out.println(\"Yes\");\n        }\n\n    }\n\n    static class InputReader {\n        private final InputStream stream;\n        private final byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        private int read() {\n            try {\n                if (curChar >= numChars) {\n                    curChar = 0;\n                    numChars = stream.read(buf);\n                    if (numChars <= 0)\n                        return -1;\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n            return buf[curChar++];\n        }\n\n        public int readInt() {\n            return (int) readLong();\n        }\n\n        public long readLong() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n                if (c == -1) throw new RuntimeException();\n            }\n            boolean negative = false;\n            if (c == '-') {\n                negative = true;\n                c = read();\n            }\n            long res = 0;\n            do {\n                if (c < '0' || c > '9') throw new InputMismatchException();\n                res *= 10;\n                res += (c - '0');\n                c = read();\n            } while (!isSpaceChar(c));\n            return negative ? (-res) : (res);\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c)) c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.append((char) c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        private boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 4,
            "solution": "//package com.company;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static long TIME_START, TIME_END;\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n//        Scanner sc = new Scanner(new FileInputStream(\"Test.in\"));\n        PrintWriter pw = new PrintWriter(System.out);\n//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"Test.out\"));\n//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"Test.in\"));\n\n        Runtime runtime = Runtime.getRuntime();\n        long usedMemoryBefore = runtime.totalMemory() - runtime.freeMemory();\n        TIME_START = System.currentTimeMillis();\n        Task t = new Task();\n        t.solve(sc, pw);\n        TIME_END = System.currentTimeMillis();\n        long usedMemoryAfter = runtime.totalMemory() - runtime.freeMemory();\n        pw.close();\n//        System.out.println(\"Memory increased:\" + (usedMemoryAfter-usedMemoryBefore) / 1000000 );\n//        System.out.println(\"Time used: \" + (TIME_END - TIME_START) + \".\");\n\n\n    }\n\n    public static class Task {\n\n\n        public void solve(Scanner sc, PrintWriter pw) throws IOException {\n            int n = sc.nextInt();\n            int m = sc.nextInt();\n            int[][] grid = new int[n][m];\n            int black = 0;\n            for (int i = 0; i < n; i++) {\n                String s = sc.next();\n                for (int j = 0; j < m; j++) {\n                    int c = s.charAt(j) == '.' ? 0 : 1;\n                    if (c >= 1) {\n                        black++;\n                    }\n                    grid[i][j] = c;\n                }\n            }\n            int[] rowUse = new int[n];\n            int[] colUse = new int[m];\n            int iter = 0;\n            while (black > 0) {\n                iter++;\n                if (iter >= 100) {\n                    pw.println(\"No\");\n                    return;\n                }\n                for (int i = 0; i < n; i++) {\n                    List<Integer> consider = new ArrayList<>();\n                    for (int j = 0; j < m; j++) {\n                        if (grid[i][j] == 1) {\n                            if (colUse[j] == 1 || rowUse[i] == 1) {\n                                pw.println(\"No\");\n                                return;\n                            }\n                            colUse[j] = 1;\n//                            grid[i][j] = 0;\n//                            black--;\n                            consider.add(j);\n                        }\n                    }\n                    if (consider.size() > 0) {\n                        for (int j = 0; j < n; j++) {\n                            if (grid[j][consider.get(0)] == 1) {\n                                if (rowUse[j] == 1) {\n                                    pw.println(\"No\");\n                                    return;\n                                }\n                                rowUse[j] = 1;\n                                for (int c : consider) {\n                                    if (grid[j][c] == 1) {\n                                        grid[j][c] = 0;\n                                        black--;\n                                    } else {\n                                        pw.println(\"No\");\n                                        return;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pw.println(\"Yes\");\n        }\n\n    }\n\n    static class Scanner {\n        StringTokenizer st;\n        BufferedReader br;\n\n        public Scanner(InputStream s){  br = new BufferedReader(new InputStreamReader(s));}\n\n        public Scanner(FileReader s) throws FileNotFoundException {br = new BufferedReader(s);}\n\n        public String next() throws IOException\n        {\n            while (st == null || !st.hasMoreTokens())\n                st = new StringTokenizer(br.readLine());\n            return st.nextToken();\n        }\n\n        public int nextInt() throws IOException {return Integer.parseInt(next());}\n\n        public long nextLong() throws IOException {return Long.parseLong(next());}\n\n        public String nextLine() throws IOException {return br.readLine();}\n\n        public double nextDouble() throws IOException { return Double.parseDouble(next()); }\n\n        public boolean ready() throws IOException {return br.ready();}\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma comment(linker, \"/stack:200000000\")\n#pragma GCC optimize(\"Ofast,no-stack-protector\")\n#pragma GCC target(\"avx\")\nusing namespace std;\ntemplate <class T>\nint getbit(T s, int i) {\n  return (s >> i) & 1;\n}\ntemplate <class T>\nT onbit(T s, int i) {\n  return s | (T(1) << i);\n}\ntemplate <class T>\nT offbit(T s, int i) {\n  return s & (~(T(1) << i));\n}\ntemplate <class T>\nint cntbit(T s) {\n  return __builtin_popcount(s);\n}\ntemplate <class T>\nT gcd(T a, T b) {\n  T r;\n  while (b != 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return a;\n}\ntemplate <class T>\nT lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\nconst int MAXN = 100;\nconst int MOD = 1e9 + 7;\nconst long long MAXV = 1e6;\nconst double eps = 1e-12;\nconst long long INF = 1e16;\ninline string toStr(long long x) {\n  string tmp = \"\";\n  do tmp = char(x % 10 + '0') + tmp;\n  while (x /= 10);\n  return tmp;\n}\ninline long long toInt(string s) {\n  long long res = 0;\n  for (auto x : s) res = res * 10 + x - '0';\n  return res;\n}\ninline string toBinStr(long long x) {\n  string res = \"\";\n  do res = (x % 2 ? \"1\" : \"0\") + res;\n  while (x >>= 1LL);\n  return res;\n}\nlong long rnd(int k) {\n  if (!k) return rand() % MAXV + 1;\n  long long t = rand() % MAXV + 1;\n  return (rand() % t) + (MAXV - t);\n}\nlong long random_gen(int sign) {\n  long long x = rnd(rand() % 2);\n  long long s = rand() % 2;\n  s = !s ? 1 : -1;\n  return sign == 1 ? x : sign == -1 ? -x : s * x;\n}\ninline void debugArray(int a[], int n) {\n  cerr << \"array = \";\n  for (int i = 0; i < n; ++i) cerr << a[i] << \" \";\n  cerr << \"\\n\";\n}\nint n, m;\nvector<int> row[MAXN];\nbool color[MAXN];\nstring s[MAXN], actual[MAXN];\nint main() {\n  cin >> n >> m;\n  for (int i = 0, _a = (n); i < _a; ++i) {\n    cin >> s[i];\n    for (int j = 0, _a = (m); j < _a; ++j)\n      if (s[i][j] == '#') row[i].push_back(j);\n  }\n  for (int i = 0, _a = (n); i < _a; ++i) {\n    actual[i] = \"\";\n    for (int j = 0, _a = (m); j < _a; ++j) actual[i] += '.';\n  }\n  for (int i = 0, _a = (n); i < _a; ++i)\n    if (!color[i]) {\n      vector<int> need;\n      color[i] = true;\n      need.push_back(i);\n      for (int j = 0, _a = (n); j < _a; ++j)\n        if (!color[j])\n          for (int k = 0, _a = (m); k < _a; ++k)\n            if (s[i][k] == '#' && s[j][k] == '#') {\n              need.push_back(j);\n              color[j] = true;\n              break;\n            }\n      for (auto x : need)\n        for (auto y : row[i]) actual[x][y] = '#';\n    }\n  bool good = true;\n  for (int i = 0, _a = (n); i < _a; ++i)\n    for (int j = 0, _a = (m); j < _a; ++j) good &= actual[i][j] == s[i][j];\n  puts(good ? \"Yes\" : \"No\");\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Liavontsi Brechka\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static\n    @SuppressWarnings(\"Duplicates\")\n    class TaskB {\n        int n;\n        int m;\n        boolean[][] isDark;\n        boolean[] isUsedRow;\n        boolean[] isUsedColumn;\n\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            n = in.nextInt();\n            m = in.nextInt();\n            isDark = new boolean[n][m];\n            isUsedRow = new boolean[n];\n            isUsedColumn = new boolean[m];\n\n            WeightedQuickUnion weightedQuickUnion = new WeightedQuickUnion(n + m);\n\n            String next;\n            for (int i = 0; i < n; i++) {\n                next = in.next();\n                for (int j = 0; j < m; j++) {\n                    isDark[i][j] = next.charAt(j) == '#';\n                    if (isDark[i][j]) {\n                        weightedQuickUnion.uniteSites(i, n + j);\n                    }\n                }\n            }\n\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (weightedQuickUnion.isConnected(i, n + j) && !isDark[i][j]) {\n                        out.print(\"No\");\n                        return;\n                    }\n                }\n            }\n\n            out.print(\"Yes\");\n        }\n\n        public class WeightedQuickUnion {\n            private final int[] parent;\n            private final int[] weight;\n\n            public WeightedQuickUnion(int n) {\n                parent = new int[n];\n                weight = new int[n];\n                for (int i = 0; i < n; i++) {\n                    parent[i] = i;\n                    weight[i] = 1;\n                }\n            }\n\n            public int findRoot(int i) {\n                while (i != parent[i]) {\n                    parent[i] = parent[parent[i]];\n                    i = parent[i];\n                }\n                return i;\n            }\n\n            public boolean isConnected(int i, int j) {\n                return findRoot(i) == findRoot(j);\n            }\n\n            public void uniteSites(int i, int j) {\n                int rootI = findRoot(i);\n                int rootJ = findRoot(j);\n                if (rootI == rootJ) return;\n\n                if (weight[rootI] < weight[rootJ]) {\n                    parent[rootI] = rootJ;\n                    weight[rootJ] += weight[rootI];\n                } else {\n                    parent[rootJ] = rootI;\n                    weight[rootI] += weight[rootJ];\n                }\n            }\n\n        }\n\n    }\n\n    static class InputReader {\n        private final BufferedReader reader;\n        private StringTokenizer tokenizer;\n\n        public InputReader(InputStream in) {\n            reader = new BufferedReader(new InputStreamReader(in));\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                tokenizer = new StringTokenizer(readLine());\n            }\n            return tokenizer.nextToken();\n        }\n\n        public String readLine() {\n            String line;\n            try {\n                line = reader.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n            return line;\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  long long int n, m;\n  cin >> n >> m;\n  string arr[n];\n  for (long long int i = 0; i < n; i++) cin >> arr[i];\n  vector<vector<long long int>> res(m);\n  for (long long int i = 0; i < m; i++) {\n    for (long long int j = 0; j < n; j++) {\n      if (arr[j][i] == '#') res[i].push_back(j);\n    }\n  }\n  for (long long int i = 0; i < m; i++)\n    for (long long int j = i + 1; j < m; j++) {\n      vector<long long int> dum;\n      set_intersection(res[i].begin(), res[i].end(), res[j].begin(),\n                       res[j].end(), back_inserter(dum));\n      if (dum.size() > 0 && (dum != res[i] || dum != res[j])) {\n        cout << \"No\";\n        exit(0);\n      }\n    }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma comment(linker, \"/STACK:16777216\")\nusing namespace std;\nint main() {\n  cin.tie(NULL);\n  ios_base::sync_with_stdio(false);\n  int n, k;\n  cin >> n >> k;\n  vector<bool> b(k);\n  set<string> s;\n  for (int j = 0; j < n; j++) {\n    string str;\n    cin >> str;\n    if (s.find(str) != s.end()) continue;\n    s.insert(str);\n    for (int i = 0; i < str.size(); i++) {\n      if (str[i] == '#') {\n        if (b[i]) {\n          cout << \"No\";\n          exit(0);\n        } else {\n          b[i] = !b[i];\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  exit(0);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int size1 = 4e5;\nconst long long INF = 1e9;\nconst long long mod = 1e9 + 7;\nconst long double eps = 1e-5;\nint n, m;\nvector<string> v(101);\nstatic int used[55][55];\nvoid dfs(int x, int y, int num) {\n  used[x][y] = num;\n  for (int i = 1; i <= n; i++) {\n    if (!used[i][y] && v[i][y] == '#') {\n      dfs(i, y, num);\n    }\n  }\n  for (int j = 1; j <= m; j++) {\n    if (!used[x][j] && v[x][j] == '#') {\n      dfs(x, j, num);\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    string s;\n    cin >> s;\n    s = ' ' + s;\n    v[i] = s;\n  }\n  int cnt = 0;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (v[i][j] == '#' && !used[i][j]) {\n        cnt++;\n        dfs(i, j, cnt);\n      }\n    }\n  }\n  vector<set<int> > used1(55), used2(55);\n  vector<set<int> > col1(55), col2(55);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (used[i][j]) {\n        col1[used[i][j]].insert(i);\n        col2[used[i][j]].insert(j);\n        used1[i].insert(used[i][j]);\n        used2[j].insert(used[i][j]);\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    if (!used1[i].empty() && used1[i].size() > 1) {\n      cout << \"No\";\n      return 0;\n    }\n  }\n  for (int i = 1; i <= m; i++) {\n    if (!used2[i].empty() && used2[i].size() > 1) {\n      cout << \"No\";\n      return 0;\n    }\n  }\n  vector<string> v1(100);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m + 1; j++) {\n      v1[i] += '.';\n    }\n  }\n  for (int i = 1; i <= cnt; i++) {\n    for (auto it = col1[i].begin(); it != col1[i].end(); it++) {\n      for (auto it1 = col2[i].begin(); it1 != col2[i].end(); it1++) {\n        v1[*it][*it1] = '#';\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (v[i][j] != v1[i][j]) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "# cook your dish here\n# from math import * \n#for _ in range(int(input().strip())):\nn,m = map(int,input().split())\nl = []\n\nfor _ in range(n):\n    s = input()\n    se = set()\n    for i in range(m):\n        if s[i]=='#':\n            se.add(i)\n    l.append(se)\nfor i in range(n):\n    for j in range(i+1,n):\n        if not (l[i] == l[j] or l[i]&l[j] == set()  ):\n            print(\"No\")\n            exit(0)\nprint(\"Yes\")    \n            "
        },
        {
            "language": 4,
            "solution": "\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class probB {\n    class FastScanner {\n        private BufferedReader reader;\n        private StringTokenizer tokenizer;\n\n        public FastScanner(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream));\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n\n\n\n    public void run() throws FileNotFoundException {\n        FastScanner in = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        //FastScanner in = new FastScanner(new FileInputStream(\"input.txt\"));\n        //PrintWriter out = new PrintWriter(\"output.txt\");\n\n        int n = in.nextInt();\n        int m = in.nextInt();\n\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            String s = in.next();\n\n            Iterator<String> iter = set.iterator();\n            while (iter.hasNext()) {\n                String oldS = iter.next();\n                if (s.equals(oldS)) {\n                    continue;\n                }\n                for (int j = 0; j < m; j++) {\n                    if (s.charAt(j) == '#' && s.charAt(j) == oldS.charAt(j)) {\n                        out.print(\"No\\n\");\n                        out.close();\n                        return;\n                    }\n                }\n            }\n            set.add(s);\n        }\n\n\n        out.print(\"Yes\\n\");\n        out.close();\n    }\n\n    public static void main(String[] args) throws FileNotFoundException {\n        new probB().run();\n    }\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\npublic class MysticalMosaic {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint r = scan.nextInt();\n\t\tint c = scan.nextInt();\n\t\tchar[][] grid = new char[r][c];\n\t\tchar[][] copy = new char[r][c];\n\t\tfor(int i = 0; i < r; i++){\n\t\t\tgrid[i] = scan.next().toCharArray();\n\t\t\tfor(int j = 0; j < c; j++){\n\t\t\t\tcopy[i][j] = grid[i][j];\n\t\t\t}\n\t\t}\n\t\tboolean[][] v = new boolean[r][c];\n\t\tfor(int i = 0; i < r; i++){\n\t\t\tfor(int j = 0; j < c; j++){\n\t\t\t\tif(!v[i][j] && grid[i][j] == '#'){\n\t\t\t\t\tv[i][j] = true;\n\t\t\t\t\tArrayList<Integer> rows = new ArrayList<Integer>();\n\t\t\t\t\tArrayList<Integer> cols = new ArrayList<Integer>();\n\t\t\t\t\t//Start the funkyness\n\t\t\t\t\tArrayDeque<Cell> bfs = new ArrayDeque<Cell>();\n\t\t\t\t\tbfs.add(new Cell(i, j));\n\t\t\t\t\twhile(!bfs.isEmpty()){\n\t\t\t\t\t\tCell p = bfs.poll();\n\t\t\t\t\t\tif(!rows.contains(p.r)) rows.add(p.r);\n\t\t\t\t\t\tif(!cols.contains(p.c)) cols.add(p.c);\n\t\t\t\t\t\tfor(int k = 0; k < r; k++){\n\t\t\t\t\t\t\tif(!v[k][p.c] && grid[k][p.c] == '#'){\n\t\t\t\t\t\t\t\tv[k][p.c] = true;\n\t\t\t\t\t\t\t\tbfs.add(new Cell(k, p.c));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(int k = 0; k < c; k++){\n\t\t\t\t\t\t\tif(!v[p.r][k] && grid[p.r][k] == '#'){\n\t\t\t\t\t\t\t\tv[p.r][k] = true;\n\t\t\t\t\t\t\t\tbfs.add(new Cell(p.r, k));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor(int k = 0; k < rows.size(); k++){\n\t\t\t\t\t\tfor(int l = 0; l < cols.size(); l++){\n\t\t\t\t\t\t\tint ro = rows.get(k);\n\t\t\t\t\t\t\tint co = cols.get(l);\n\t\t\t\t\t\t\tcopy[ro][co] = '#';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < r; i++){\n\t\t\tfor(int j = 0; j < c; j++){\n\t\t\t\tif(copy[i][j] != grid[i][j]){\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n\t\n\tstatic class Cell{\n\t\t\n\t\tint r;\n\t\tint c;\n\t\t\n\t\tpublic Cell(int r, int c){\n\t\t\tthis.r = r;\n\t\t\tthis.c = c;\n\t\t}\n\t}\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.ArrayList;\nimport java.util.Scanner;\npublic class B {\n\tstatic int R, C;\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tR = sc.nextInt();C = sc.nextInt();\n\t\tsc.nextLine();\n\t\tboolean[] usedR = new boolean[R], usedC = new boolean[C];\n\t\tString[] in = new String[R];\n\t\tArrayList<String> ops = new ArrayList<>();\n\t\tboolean weGood = true;\n\t\tfor(int i = 0; i < R; i++){\n\t\t\tin[i] = sc.nextLine();\n\t\t\tif(!ops.contains(in[i])){\n\t\t\t\tops.add(in[i]);\n\t\t\t\tfor(int j = 0; j < C; j++){\n\t\t\t\t\tif(in[i].charAt(j) == '#'){\n\t\t\t\t\t\tif(usedC[j]) weGood = false;\n\t\t\t\t\t\tusedR[i] = true;\n\t\t\t\t\t\tusedC[j] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(in[i].contains(\"#\")){\n\t\t\t\t\tif(usedR[i]) weGood = false;\n\t\t\t\t\tusedR[i] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(weGood) System.out.println(\"Yes\");\n\t\telse System.out.println(\"No\");\n\t}\n}"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\narr=[0]*n\nmp={}\nfor i in range(n):\n\tarr[i]=input()\n\tt=\"\"\n\tl=[]\n\tfor j in range(m):\n\t\tif arr[i][j]==\"#\":\n\t\t\tl.append(j)\n\t\t\tt+=str(j)\n\tif t not in mp:\n\t\tmp[t]=set()\n\t\tfor y in range(len(l)):\n\t\t\tmp[t].add(l[y])\n\t\tmp[t].add(\"r\"+str(i))\n\telse:\n\t\tmp[t].add(\"r\"+str(i))\nk=mp[t]\nfor i in mp:\n\t# print(mp[i])\n\tif i != t:\n\t\tif len(k.intersection(mp[i]))>0:\n\t\t\tprint(\"No\")\n\t\t\texit()\n\t\telse:\n\t\t\tfor j in mp[i]:\n\t\t\t\tk.add(j)\nprint(\"Yes\")\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nchar c[51][51];\nint p[51][51];\nint main() {\n  std::ios_base::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> c[i][j];\n    }\n  }\n  memset(p, -1, sizeof(p));\n  set<int> uint32_t, uj;\n  for (int i = 0; i < n; ++i) {\n    std::vector<int> js, is;\n    for (int j = 0; j < m; ++j) {\n      if (c[i][j] == '#') {\n        js.push_back(j);\n      }\n    }\n    for (int k = 0; k < n; ++k) {\n      int cntt = 0;\n      for (int j : js) {\n        if (c[k][j] == '#') {\n          if (uint32_t.count(k) || uj.count(j)) {\n            cout << \"NO\" << endl;\n            return 0;\n          }\n          c[k][j] = '.';\n          is.push_back(k);\n          ++cntt;\n        }\n      }\n      if (cntt != 0 && cntt != js.size()) {\n        cout << \"NO\" << endl;\n        return 0;\n      }\n    }\n    for (int i : is) uint32_t.insert(i);\n    for (int j : js) uj.insert(j);\n  }\n  cout << \"YES\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    \n    public static void main(String[] args) throws UnsupportedEncodingException, IOException {\n        Reader.init(System.in);\n        StringBuilder out = new StringBuilder();\n        int r = Reader.nextInt(), c = Reader.nextInt();\n        char[][] b = new char[r][], b2 = new char[c][r];\n        for(int i = 0; i < r; i++)\n            b[i] = Reader.nextLine().toCharArray();\n        for(int i = 0; i < c; i++)\n            for(int j = 0; j < r; j++)\n                b2[i][j] = b[j][i];\n        out.append(check(b) && check(b2) ? \"Yes\\n\" : \"No\\n\");\n        PrintWriter pw = new PrintWriter(System.out);\n        pw.print(out);\n        pw.close();\n    }\n    \n    static boolean check(char[][] c) {\n        boolean[][] C = new boolean[c[0].length][c[0].length];\n        boolean[] v = new boolean[c[0].length];\n        for(int i = 0, j, k; i < c.length; i++)\n            for(j = 0; j < c[i].length; j++)\n                if(c[i][j] == '#') {\n                    if(v[j]) {\n                        for(k = 0; k < c[i].length; k++)\n                            if((c[i][k] == '#' && !C[j][k]) || (c[i][k] == '.' && C[j][k]))\n                                return false;\n                    } else {\n                        v[j] = true;\n                        for(k = 0; k < c[i].length; k++)\n                            if(c[i][k] == '#')\n                                C[j][k] = true;\n                    }\n                }\n        return true;\n    }\n}\n\nclass Reader {\n\n    static BufferedReader reader;\n    static StringTokenizer tokenizer;\n\n    static void init(InputStream input) throws UnsupportedEncodingException {\n        reader = new BufferedReader(\n                new InputStreamReader(input, \"UTF-8\"));\n        tokenizer = new StringTokenizer(\"\");\n    }\n    \n    static void init(String url) throws FileNotFoundException {\n        reader = new BufferedReader(new FileReader(url));\n        tokenizer = new StringTokenizer(\"\");\n    }\n\n    static String next() throws IOException {\n        while (!tokenizer.hasMoreTokens()) {\n            //TODO add check for eof if necessary\n            tokenizer = new StringTokenizer(\n                    reader.readLine());\n        }\n        return tokenizer.nextToken();\n    }\n\n    static String nextLine() throws IOException {\n        return reader.readLine();\n    }\n\n    static int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    static double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    static long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n}"
        },
        {
            "language": 1,
            "solution": "n, m = (int(x) for x in raw_input().split(' '))\nlst = []\n\nfor i in range(n):\n    lst.append(raw_input())\nColUsed, RowUsed = set(), set()\ntColUsed, tRowUsed = set(), set()\n\ndef addCol(ci):\n    tColUsed.add(ci)\n    for i in tRowUsed:\n        for j in tColUsed:\n            if lst[i][j] != '#':\n                return False\n    for i, v in enumerate(lst):\n        if v[ci] == '#':\n            if i in RowUsed:\n                return False\n            if i not in tRowUsed:\n                if addRow(i) is False:\n                    return False\n    return True\n\ndef addRow(ri):\n    tRowUsed.add(ri)\n    for i in tRowUsed:\n        for j in tColUsed:\n            if lst[i][j] != '#':\n                return False\n    for i, v in enumerate(lst[ri]):\n        if v == '#':\n            if i in ColUsed:\n                return False\n            if i not in tColUsed:\n                if addCol(i) is False:\n                    return False\n    return True\n            \nbFlag = True\nfor i, lv in enumerate(lst):\n    if i in RowUsed:\n        continue\n    if addRow(i) is False:\n        bFlag = False\n        break\n    ColUsed = ColUsed | tColUsed\n    RowUsed = RowUsed | tRowUsed\n    tColUsed, tRowUsed = set(), set()    \n\nif bFlag:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nvoid dfs();\nvoid dfs1();\nusing namespace std;\nvector<int> v1, v2, vis1(100, 0), vis2(100, 0);\nstring s[55];\nint n, m;\nvoid dfs() {\n  int sz = v2.size();\n  for (int i = 0; i < v1.size(); i++) {\n    if (vis1[v1[i]] == 0) {\n      vis1[v1[i]] = 1;\n      for (int j = 0; j < n; j++) {\n        if (s[j][v1[i]] == '#' && vis2[j] == 0) {\n          v2.push_back(j);\n        }\n      }\n    }\n  }\n  if (sz != v2.size()) dfs1();\n}\nvoid dfs1() {\n  int sz = v1.size();\n  for (int i = 0; i < v2.size(); i++) {\n    if (vis2[v2[i]] == 0) {\n      vis2[v2[i]] = 1;\n      for (int j = 0; j < m; j++) {\n        if (s[v2[i]][j] == '#' && vis1[j] == 0) {\n          v1.push_back(j);\n        }\n      }\n    }\n  }\n  if (sz != v1.size()) dfs();\n}\nvoid dfs(int s0) {\n  vis1[s0] = 1;\n  int sz = v2.size();\n  int flag = 0;\n  for (int i = 0; i < n; i++)\n    if (s[i][s0] == '#' && vis2[i] == 0) {\n      flag = 1;\n      v2.push_back(i);\n    }\n  if (flag) v1.push_back(s0);\n  if (sz != v2.size()) dfs1();\n}\nbool check() {\n  for (int i = 0; i < v1.size(); i++) {\n    for (int j = 0; j < v2.size(); j++) {\n      if (s[v2[j]][v1[i]] != '#') return true;\n    }\n  }\n  return false;\n}\nint main() {\n  cin >> n >> m;\n  string s1;\n  getline(cin, s1);\n  for (int i = 0; i < n; i++) getline(cin, s[i]);\n  for (int i = 0; i < m; i++) {\n    if (!vis1[i]) {\n      dfs(i);\n      if (check()) {\n        cout << \"No\";\n        return 0;\n      }\n      v1.clear();\n      v2.clear();\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long a[200][200];\nlong long rr[200];\nlong long cc[200];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) {\n      char c;\n      cin >> c;\n      a[i][j] = (c == '#');\n      rr[i] = rr[i] * 2 + a[i][j];\n      cc[j] = cc[j] * 2 + a[i][j];\n    }\n  bool ok = true;\n  for (int row = 0; row < n; row++) {\n    long long s = -1;\n    for (int j = 0; j < m; j++) {\n      if (a[row][j]) {\n        if (s != -1 && s != cc[j]) ok = false;\n        s = cc[j];\n      }\n    }\n  }\n  for (int col = 0; col < m; col++) {\n    long long s = -1;\n    for (int i = 0; i < n; i++) {\n      if (a[i][col]) {\n        if (s != -1 && s != rr[i]) ok = false;\n        s = rr[i];\n      }\n    }\n  }\n  cout << (ok ? \"Yes\" : \"No\") << endl;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static ArrayList<Integer> group=new ArrayList<Integer>();\n    public static ArrayList<ArrayList<Integer>> graph=new ArrayList<ArrayList<Integer>>();\n    public static ArrayList<Integer> list=new ArrayList<Integer>();\n    public static boolean[] arrb;\n    public static void dfs(int v){\n        arrb[v]=true;\n        list.remove((Object) v);\n        group.add(v);\n        for (int i=0; i<graph.get(v).size(); i++){\n            if (!arrb[graph.get(v).get(i)]) dfs(graph.get(v).get(i));\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner=new Scanner(System.in);\n        String s=scanner.nextLine();\n        String[] data=s.split(\" \");\n        int n=Integer.parseInt(data[0]);\n        int m=Integer.parseInt(data[1]);\n        boolean[][] map=new boolean[n][m];\n\n        for (int i=0; i<n; i++){\n            s=scanner.nextLine();\n            char[] c=s.toCharArray();\n            for (int j=0; j<m; j++){\n                if (c[j]=='#') map[i][j]=true;\n            }\n        }\n        int z=n+m;\n        arrb=new boolean[z];\n        for (int i=0; i<z; i++) list.add(i);\n        for (int i=0; i<z; i++) graph.add(new ArrayList<Integer>());\n        for (int i=0; i<n; i++){\n            for (int j=0; j<m; j++){\n                if (map[i][j]){\n                    graph.get(i).add(j+n);\n                    graph.get(j+n).add(i);\n                }\n            }\n        }\n        //System.out.println(graph);\n        ArrayList<Integer> rows=new ArrayList<Integer>();\n        ArrayList<Integer> cols=new ArrayList<Integer>();\n        boolean b=true;\n        while (list.size()>0){\n            group.clear();\n            rows.clear();\n            cols.clear();\n            dfs(list.get(0));\n            for (int i=0; i<group.size(); i++){\n                if (group.get(i)<n) rows.add(group.get(i)); else cols.add(group.get(i)-n);\n            }\n            //System.out.println(group);\n            for (int i=0; i<rows.size(); i++){\n                for (int j=0; j<cols.size(); j++){\n                    if (!map[rows.get(i)][cols.get(j)]) b=false;\n                }\n            }\n            //System.out.println(b);\n        }\n        if (b) System.out.println(\"Yes\"); else System.out.println(\"No\");\n        scanner.close();\n    }\n}\n"
        },
        {
            "language": 3,
            "solution": "row, column = map(int,input().strip().split())\n\nrset = set()\ncset = set()\nflag = True\nfor i in range(row):\n    line = input().strip()\n    if line in rset:\n        continue\n    for j in range(column):\n        if line[j] == '.':\n            continue\n        if j in cset:\n            flag = False\n            break\n        else:\n            cset.add(j)\n    rset.add(line)\n\n\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint const N = 1000020;\nstring a[51];\nchar ans[51][51];\nint n, m;\nset<int> rs, cs;\nint h[51][51];\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n  for (int i = 0; i < n; i++) {\n    for (int i2 = 0; i2 < n; i2++) {\n      for (int j = 0; j < m; j++) {\n        if (a[i][j] == '#' && a[i2][j] == '#') {\n          for (int j2 = 0; j2 < m; j2++) {\n            if (a[i][j2] != a[i2][j2]) {\n              cout << \"No\";\n              return 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAX_N = 123;\nstring s[MAX_N];\nstring s2[MAX_N];\nint n, m;\nvoid hal() {\n  cout << \"No\\n\";\n  exit(0);\n}\nvoid check() {\n  set<string> st;\n  for (int i = 1; i <= n; i++) {\n    st.insert(s[i]);\n  }\n  vector<int> used(m);\n  for (const auto& s : st) {\n    for (int i = 0; i < m; i++) {\n      if (s[i] == '#') {\n        if (used[i]) {\n          hal();\n        }\n        used[i] = true;\n      }\n    }\n  }\n}\nvoid solve() {\n  cin >> n >> m;\n  for (int i = 1; i <= m; i++) {\n    for (int j = 0; j < n; j++) {\n      s2[i] += '.';\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    cin >> s[i];\n    for (int j = 0; j < m; j++) {\n      s2[j + 1][i - 1] = s[i][j];\n    }\n  }\n  check();\n  for (int i = 1; i <= m; i++) {\n    s[i] = s2[i];\n  }\n  swap(n, m);\n  check();\n  cout << \"Yes\\n\";\n}\nint main(int argc, const char* argv[]) {\n  ios_base::sync_with_stdio(false);\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, k;\n  cin >> n >> k;\n  vector<vector<bool> > m(n, vector<bool>(k));\n  for (int x = 0; x < n; x++) {\n    for (int y = 0; y < k; y++) {\n      char c;\n      cin >> c;\n      m[x][y] = c == '#';\n    }\n  }\n  for (int x = 0; x < n; x++) {\n    for (int y = 0; y < k; y++) {\n      if (!m[x][y]) {\n        continue;\n      }\n      for (int z = 0; z < n; z++) {\n        if (!m[z][y]) {\n          continue;\n        }\n        for (int d = 0; d < k; d++) {\n          if (m[x][d] ^ m[z][d]) {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.util.Set;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.util.HashSet;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n            int n = in.nextInt(), m = in.nextInt();\n            String grid[] = new String[n];\n            for (int i = 0; i < n; i++) {\n                grid[i] = in.next();\n            }\n            boolean visited[][] = new boolean[n][m];\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (grid[i].charAt(j) == '#' && !visited[i][j]) {\n                        Set<Integer> rows = new HashSet<>();\n                        Set<Integer> columns = new HashSet<>();\n                        isPos(i, j, grid, rows, columns, visited);\n                        if (!isValid(grid, rows, columns)) {\n                            out.println(\"No\");\n                            return;\n                        }\n                    }\n                }\n            }\n            out.println(\"Yes\");\n\n        }\n\n        private boolean isValid(String grid[], Set<Integer> row, Set<Integer> colums) {\n            for (int r : row) {\n                for (int c : colums) {\n                    if (grid[r].charAt(c) != '#') {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        public void isPos(int r, int c, String grid[], Set<Integer> rows, Set<Integer> columns, boolean visited[][]) {\n            if (visited[r][c]) return;\n            rows.add(r);\n            columns.add(c);\n            visited[r][c] = true;\n            for (int i = 0; i < grid[r].length(); i++) {\n                if (grid[r].charAt(i) == '#') {\n                    isPos(r, i, grid, rows, columns, visited);\n                }\n            }\n            for (int i = 0; i < grid.length; i++) {\n                if (grid[i].charAt(c) == '#') {\n                    isPos(i, c, grid, rows, columns, visited);\n                }\n            }\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public int readInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String readString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                if (Character.isValidCodePoint(c)) {\n                    res.appendCodePoint(c);\n                }\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return isWhitespace(c);\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public String next() {\n            return readString();\n        }\n\n        public int nextInt() {\n            return readInt();\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n\n        }\n\n    }\n\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void print(Object... objects) {\n            for (int i = 0; i < objects.length; i++) {\n                if (i != 0) {\n                    writer.print(' ');\n                }\n                writer.print(objects[i]);\n            }\n        }\n\n        public void println(Object... objects) {\n            print(objects);\n            writer.println();\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n    }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  iostream::sync_with_stdio(false);\n  cin.tie(NULL);\n  cout.tie(NULL);\n  ;\n  long long n, m;\n  cin >> n >> m;\n  set<int> row, col;\n  char mat[n][m];\n  for (int i = 0; i < n; i++) cin >> mat[i];\n  for (long long i = (0); i < (n); ++i) {\n    for (long long j = (0); j < (n); ++j) {\n      long long cnt = 0, cnt1 = 0;\n      for (long long k = (0); k < (m); ++k) {\n        if (mat[i][k] == '#' && mat[j][k] == '#') cnt++;\n        if (mat[i][k] == '#') cnt1++;\n      }\n      if (cnt == 0 || cnt == cnt1)\n        continue;\n      else {\n        cout << \"No\";\n        exit(0);\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint a[55][55];\nint eq[55][55];\nint n, m;\nvector<int> v[55];\nvoid check() {\n  memset(eq, -1, sizeof eq);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      for (int k = 0; k < m; k++) {\n        if (a[i][k] == a[j][k])\n          continue;\n        else {\n          eq[i][j] = 0;\n          break;\n        }\n      }\n      if (eq[i][j] == -1) eq[i][j] = 1;\n    }\n  }\n}\nint main() {\n  int i, j, ans = 1;\n  char x;\n  cin >> n >> m;\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      cin >> x;\n      if (x == '#')\n        a[i][j] = 1;\n      else\n        a[i][j] = 0;\n    }\n  }\n  check();\n  for (i = 0; i < m; i++) {\n    for (j = 0; j < n; j++) {\n      if (a[j][i] == 1) v[i].push_back(j);\n    }\n  }\n  for (i = 0; i < m; i++) {\n    for (j = 1; j < v[i].size(); j++) {\n      if (eq[v[i][j]][v[i][0]])\n        continue;\n      else {\n        ans = 0;\n        break;\n      }\n    }\n    if (ans == 0) break;\n  }\n  if (ans)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.math.BigInteger;\nimport java.util.Random;\nimport java.util.StringTokenizer;\n\npublic class TaskA {\n\n    public static void main(String[] args) throws Exception {\n        Tokenizer in = new Tokenizer();\n        \n        int n = in.nextInt(), m = in.nextInt();\n        char[][] matrix = new char[n][];\n        \n        for(int i = 0; i < n; i++) matrix[i] = in.next().toCharArray();\n        \n        long[] lines = new long[n];\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < m; j++) \n                if(matrix[i][j] == '#') lines[i] |= 1L << j;\n        \n        long[] columns = new long[m];\n        for(int j = 0; j < m; j++)\n            for(int i = 0; i < n; i++)\n                if(matrix[i][j] == '#') columns[j] |= 1L << i;\n        \n        boolean flag = true;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                if((lines[i] & lines[j]) != 0 && lines[i] != lines[j]) flag = false;\n        \n        for(int i = 0; i < m; i++)\n            for(int j = i + 1; j < m; j++)\n                if((columns[i] & columns[j]) != 0 && columns[i] != columns[j]) flag = false;\n        \n        System.out.println(flag ? \"Yes\" : \"No\");\n    }\n\n    private static class Tokenizer {\n\n        private final BufferedReader in;\n        private StringTokenizer tokenizer = null;\n\n        public Tokenizer() throws Exception {\n            this(new InputStreamReader(System.in));\n        }\n\n        public Tokenizer(Reader reader) throws Exception {\n            in = new BufferedReader(reader);\n        }\n\n        public boolean hasMoreTokens() throws Exception {\n            while(tokenizer == null || !tokenizer.hasMoreTokens()) {\n                String line = in.readLine();\n                if(line == null) return false;\n                tokenizer = new StringTokenizer(line);\n            }\n            return true;\n        }\n\n        public String next() throws Exception {\n            return hasMoreTokens() ? tokenizer.nextToken() : null;\n        }\n\n        public int nextInt() throws Exception {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() throws Exception {\n            return Long.parseLong(next());\n        }\n\n    }\n\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvoid read(int &sum) {\n  sum = 0;\n  char c = getchar();\n  bool f = 0;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = 1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    sum = sum * 10 + c - '0';\n    c = getchar();\n  }\n  if (f) sum = -sum;\n}\nvoid read(long long &sum) {\n  sum = 0;\n  char c = getchar();\n  bool f = 0;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = 1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    sum = sum * 10 + c - '0';\n    c = getchar();\n  }\n  if (f) sum = -sum;\n}\nvoid readarr(long long a[], long long n) {\n  for (int i = 0; i < n; i++) read(a[i]);\n}\nvoid readarr(int a[], int n) {\n  for (int i = 0; i < n; i++) read(a[i]);\n}\nvoid readvec(vector<long long> &a, long long n) {\n  for (int i = 0; i < n; i++) read(a[i]);\n}\nvoid readvec(vector<int> &a, int n) {\n  for (int i = 0; i < n; i++) read(a[i]);\n}\nvoid aout(long long a[], long long n) {\n  for (int i = 0; i < n; i++) cout << a[i] << \" \";\n}\nvoid aout(int a[], int n) {\n  for (int i = 0; i < n; i++) cout << a[i] << \" \";\n}\nconst int MOD = 1e9 + 7;\nconst int INF = (int)2e9 + 7;\nconst long long LINF = (int64_t)1e18;\nconst long double PI = 3.1415926535897932384626433832795;\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nconst int N = (int)1e6 + 1;\nvoid solve() {\n  int n, m;\n  read(n), read(m);\n  char a[n][m];\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < m; j++) {\n      a[i][j] = s[j];\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    set<int> rows, cols;\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        cols.insert(j);\n        rows.insert(i);\n      }\n    }\n    for (auto it : cols) {\n      for (int j = 0; j < n; j++) {\n        if (a[j][it] == '#') {\n          rows.insert(j);\n        }\n      }\n    }\n    for (auto it : rows) {\n      for (auto itr : cols) {\n        if (a[it][itr] != '#') {\n          cout << \"No\\n\";\n          return;\n        }\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n}\nint main() {\n  int t = 1;\n  while (t--) {\n    solve();\n  }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char>> grid;\n  grid.resize(n);\n  for (int i = 0; i < n; i++) {\n    vector<char> v;\n    v.resize(m);\n    grid[i] = v;\n    for (int j = 0; j < m; j++) {\n      cin >> grid[i][j];\n    }\n  }\n  vector<bool> visitedRows(n, false);\n  vector<bool> visitedCols(m, false);\n  bool good = true;\n  for (int i = 0; i < n; i++) {\n    if (!visitedRows[i]) {\n      visitedRows[i] = true;\n      for (int j = i; j < n; j++) {\n        if (grid[i] == grid[j]) {\n          visitedRows[j] = true;\n        }\n      }\n      for (int k = 0; k < m; k++) {\n        if (grid[i][k] == '#') {\n          if (visitedCols[k]) {\n            good = false;\n            break;\n          } else {\n            visitedCols[k] = true;\n          }\n        }\n      }\n      if (!good) {\n        break;\n      }\n    }\n  }\n  if (good) {\n    cout << \"YES\" << '\\n';\n  } else {\n    cout << \"NO\" << '\\n';\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  long long d[60][60];\n  long long n, m;\n  cin >> n >> m;\n  for (long long i = 1; i <= n; i++) {\n    for (long long j = 1; j <= m; j++) {\n      char c;\n      cin >> c;\n      if (c == '#')\n        d[i][j] = 1;\n      else\n        d[i][j] = 0;\n    }\n  }\n  vector<long long> str(100, 0), stol(100, 0);\n  long long fl = 0, counter = 0;\n  for (long long i = 1; i <= n; i++) {\n    counter = 0;\n    for (long long j = 1; j <= m; j++)\n      if (d[i][j] == 1) counter++;\n    if (counter > 0) {\n      for (long long j = 1; j <= m; j++) {\n        if (d[i][j] == 1) {\n          if (stol[j] == 0)\n            stol[j] = 1;\n          else {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n      for (long long j = i + 1; j <= n; j++) {\n        fl = 0;\n        for (long long k = 1; k <= m; k++)\n          if (d[j][k] != d[i][k]) fl++;\n        if (fl == 0) {\n          for (long long k = 1; k <= m; k++) d[j][k] = 0;\n        }\n      }\n      for (long long j = 1; j <= m; j++) d[i][j] = 0;\n    }\n  }\n  for (long long i = 1; i <= n; i++)\n    for (long long j = 1; j <= m; j++)\n      if (d[i][j] > 0) {\n        cout << \"No\";\n        return 0;\n      }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.HashMap;\nimport java.util.Scanner;\n\npublic class B {\n    public static void main(String... args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        HashMap<String, Integer> rows = new HashMap<String, Integer>();\n        for (int i = 0; i < n; i++) {\n            String currentRow = scanner.next();\n            if (rows.containsKey(currentRow)) {\n                rows.replace(currentRow, rows.get(currentRow) + 1);\n            } else {\n                rows.put(currentRow, 1);\n            }\n        }\n        boolean[] used = new boolean[m];\n        for (String row: rows.keySet()) {\n            for (int i = 0; i < m; i++) {\n                if (row.charAt(i) == '#') {\n                    if (!used[i]) {\n                        used[i] = true;\n                    } else {\n                        System.out.println(\"No\");\n                        return;\n                    }\n                }\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int i, j, m, n;\n  cin >> m >> n;\n  string str[m];\n  for (i = 0; i < m; i++) cin >> str[i];\n  int flag = 1, k;\n  for (i = 0; i < m; i++) {\n    set<int> row;\n    for (j = 0; j < n; j++) {\n      if (str[i][j] == '#') row.insert(j);\n    }\n    for (j = i + 1; j < m; j++) {\n      int mat = 0, unmat = 0, set_c = 0;\n      for (k = 0; k < n; k++) {\n        if (str[j][k] == '#' && row.find(k) == row.end()) unmat++;\n        if (str[j][k] == '#' && row.find(k) != row.end()) {\n          mat++;\n          set_c++;\n        }\n      }\n      if ((mat > 0) && (unmat > 0 || set_c < row.size())) {\n        flag = 0;\n        break;\n      }\n    }\n    if (flag == 0) break;\n  }\n  if (flag == 0)\n    cout << \"No\";\n  else\n    cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\nstd::ostream &operator<<(std::ostream &out, vector<T> &v) {\n  for (typename vector<T>::size_type i = 0; i < v.size(); ++i)\n    out << v[i] << \" \";\n  out << \"\\n\";\n  return out;\n}\ntemplate <typename T, typename N>\nstd::ostream &operator<<(std::ostream &out, vector<pair<T, N> > &v) {\n  for (size_t i = 0; i < v.size(); ++i)\n    out << \"(\" << v[i].first << \", \" << v[i].second << \") \";\n  out << \"\\n\";\n  return out;\n}\ntemplate <typename T>\nstd::ostream &operator<<(std::ostream &out, vector<vector<T> > &v) {\n  for (size_t i = 0; i < v.size(); ++i) {\n    for (size_t j = 0; j < v[i].size(); ++j) {\n      out << v[i][j] << \" \";\n    }\n    out << \"\\n\";\n  }\n  return out;\n}\nint main() {\n  std::ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  vector<string> grid(n);\n  for (int i = 0; i < n; ++i) {\n    cin >> grid[i];\n  }\n  set<int> rows, cols;\n  int rows_set = 0;\n  while (rows_set < n) {\n    string curr_row = \"\";\n    for (int i = 0; i < n; ++i) {\n      if (!rows.count(i)) {\n        curr_row = grid[i];\n        rows.insert(i);\n        for (int j = i + 1; j < n; ++j) {\n          if (grid[j] == curr_row) {\n            rows.insert(j);\n            ++rows_set;\n          }\n        }\n        for (int j = 0; j < m; ++j) {\n          if (grid[i][j] == '#' && cols.count(j)) {\n            cout << \"No\\n\";\n            return 0;\n          }\n          if (grid[i][j] == '#') {\n            cols.insert(j);\n            cerr << \"> \"\n                 << \"j\"\n                 << \": \" << j << \"\\n\";\n            ;\n          }\n        }\n        ++rows_set;\n      }\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\nusing namespace std;\nvoid getre() {\n  int x = 0;\n  printf(\"%d\\n\", 1 / x);\n}\nvoid gettle() {\n  int res = 1;\n  while (1) res <<= 1;\n  printf(\"%d\\n\", res);\n}\ntemplate <typename T, typename S>\ninline bool upmin(T &a, const S &b) {\n  return a > b ? a = b, 1 : 0;\n}\ntemplate <typename T, typename S>\ninline bool upmax(T &a, const S &b) {\n  return a < b ? a = b, 1 : 0;\n}\ntemplate <typename N, typename PN>\ninline N flo(N a, PN b) {\n  return a >= 0 ? a / b : -((-a - 1) / b) - 1;\n}\ntemplate <typename N, typename PN>\ninline N cei(N a, PN b) {\n  return a > 0 ? (a - 1) / b + 1 : -(-a / b);\n}\ntemplate <typename N>\nN gcd(N a, N b) {\n  return b ? gcd(b, a % b) : a;\n}\ntemplate <typename N>\ninline int sgn(N a) {\n  return a > 0 ? 1 : (a < 0 ? -1 : 0);\n}\ninline void gn(long long &x) {\n  int sg = 1;\n  char c;\n  while (((c = getchar()) < '0' || c > '9') && c != '-')\n    ;\n  c == '-' ? (sg = -1, x = 0) : (x = c - '0');\n  while ((c = getchar()) >= '0' && c <= '9') x = x * 10 + c - '0';\n  x *= sg;\n}\ninline void gn(int &x) {\n  long long t;\n  gn(t);\n  x = t;\n}\ninline void gn(unsigned long long &x) {\n  long long t;\n  gn(t);\n  x = t;\n}\ninline void gn(double &x) {\n  double t;\n  scanf(\"%lf\", &t);\n  x = t;\n}\ninline void gn(long double &x) {\n  double t;\n  scanf(\"%lf\", &t);\n  x = t;\n}\ninline void gs(char *s) { scanf(\"%s\", s); }\ninline void gc(char &c) {\n  while ((c = getchar()) > 126 || c < 33)\n    ;\n}\ninline void pc(char c) { putchar(c); }\ninline long long sqr(long long a) { return a * a; }\ninline double sqrf(double a) { return a * a; }\nconst int inf = 0x3f3f3f3f;\nconst double pi = 3.14159265358979323846264338327950288L;\nconst double eps = 1e-6;\nconst int maxn = 55;\nint n, m;\nchar s[maxn][maxn];\nbool usedRows[maxn];\nbool usedCols[maxn];\nstruct mySet {\n  set<int> rows, columns;\n  void addRow(int i) {\n    usedRows[i] = true;\n    rows.insert(i);\n    for (int j = 1; j <= m; j++) {\n      if (s[i][j] == '#') {\n        if (columns.count(j)) continue;\n        addCol(j);\n      }\n    }\n  }\n  void addCol(int j) {\n    usedCols[j] = true;\n    columns.insert(j);\n    for (int i = 1; i <= n; i++) {\n      if (s[i][j] == '#') {\n        if (rows.count(i)) continue;\n        addRow(i);\n      }\n    }\n  }\n};\nchar t[maxn][maxn];\nint main() {\n  scanf(\"%d%d\\n\", &n, &m);\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%s\", s[i] + 1);\n  }\n  vector<mySet> vec;\n  for (int i = 1; i <= n; i++) {\n    if (usedRows[i]) continue;\n    bool ok = false;\n    for (int j = 1; !ok && j <= m; j++) {\n      if (s[i][j] == '#') {\n        ok = true;\n      }\n    }\n    if (!ok) continue;\n    mySet cur;\n    cur.addRow(i);\n    vec.push_back(move(cur));\n  }\n  memset(t, '.', sizeof(t));\n  for (auto &ss : vec) {\n    for (int i : ss.rows) {\n      for (int j : ss.columns) {\n        t[i][j] = '#';\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (s[i][j] != t[i][j]) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long power(long long a, long long b, long long c) {\n  long long x = 1, y = a;\n  while (b > 0) {\n    if (b & 1) x = (x * y) % c;\n    y = (y * y) % c;\n    b /= 2;\n  }\n  return x % c;\n}\nconst int N = 55;\nint n, m;\nchar s[N][N];\nvector<int> row;\nbool doit(int x, int y) {\n  for (int i = 1; i <= m; ++i) {\n    if (s[x][i] != s[y][i]) return 0;\n  }\n  return 1;\n}\nbool check() {\n  for (int i = 0; i < row.size(); ++i) {\n    for (int j = 1; j < row.size(); ++j) {\n      if (!doit(row[i], row[j])) return 0;\n    }\n  }\n  return 1;\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; ++i) scanf(\"%s\", s[i] + 1);\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) {\n      if (s[i][j] == '#') {\n        row.clear();\n        for (int k = 1; k <= n; ++k) {\n          if (s[k][j] == '#') row.push_back(k);\n        }\n        if (!check()) {\n          printf(\"No\\n\");\n          return 0;\n        }\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T>\nstring to_string(T arr) {\n  stringstream ss;\n  for (auto item : arr) ss << item << ' ';\n  return ss.str();\n}\ntemplate <class T>\nstring to_string(const T *arr, int len) {\n  stringstream ss;\n  for (int i = 0; i < len; i++) ss << arr[i] << ' ';\n  return ss.str();\n}\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  vector<bitset<50>> mat(n);\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) {\n      char x;\n      cin >> x;\n      if (x == '#') mat[i][j] = 1;\n    }\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      if ((mat[i] & mat[j]).any() && (mat[i] != mat[j])) {\n        cout << \"NO\";\n        return;\n      }\n    }\n  }\n  cout << \"YES\" << endl;\n}\nint main() {\n  cout << fixed << setprecision(7);\n  cin.tie(0);\n  ios_base::sync_with_stdio(false);\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nt = [0]*n\n\nfor j in range(n):\n    s = input()\n    for i in range(len(s)):\n        t[j] += int(s[i] == \"#\")\n        t[j] *= 2\n        \nans = True\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (t[i] & t[j]) != 0:\n            if t[i] != t[j]:\n                ans = False\n\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint m, n;\nchar grid[100][100];\nbool Check(int row1, int row2) {\n  bool same = false, diff = false;\n  for (int i = (0); i < (m); i++)\n    if (grid[row1][i] != grid[row2][i]) {\n      diff = true;\n      break;\n    }\n  if (diff == false) same = true;\n  if (same == true)\n    for (int i = (0); i < (m); i++)\n      if (grid[row1][i] != grid[row2][i]) return false;\n  if (diff == true)\n    for (int i = (0); i < (m); i++)\n      if (grid[row1][i] == '#' && grid[row2][i] == '#') return false;\n  return true;\n}\nint main() {\n  cin >> n >> m;\n  for (int i = (0); i < (n); i++)\n    for (int j = (0); j < (m); j++) cin >> grid[i][j];\n  for (int i = (0); i < (n); i++)\n    for (int j = (i + 1); j < (n); j++)\n      if (Check(i, j) == false) {\n        cout << \"No\";\n        return 0;\n      }\n  cout << \"Yes\";\n  return 0;\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n=int(input().split()[0])\nt=set(input()for _ in [0]*n)\nprint(['No','Yes'][all(sum(c=='#'for c in s)<2for s in zip(*t))])"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class B {\n\n\tpublic static void main(String[] args) {\n\t\ttry (Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)))) {\n\t\t\tfinal int n = in.nextInt();\n\t\t\tin.nextInt();\n\t\t\tfinal char[][] a = new char[n][];\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\ta[i] = in.next().toCharArray();\n\t\t\t}\n\t\t\tout.println(solve(a));\n\t\t}\n\t}\n\n\tprivate static String solve(char[][] a) {\n\t\tfinal int n = a.length, m = a[0].length;\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tfor (int j = 0; j < m - 1; j++) {\n\t\t\t\tfor (int i2 = i + 1; i2 < n; i2++) {\n\t\t\t\t\tfor (int j2 = j + 1; j2 < m; j2++) {\n\t\t\t\t\t\tint c = 0;\n\t\t\t\t\t\tif (a[i][j] == '#') {\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a[i][j2] == '#') {\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a[i2][j] == '#') {\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a[i2][j2] == '#') {\n\t\t\t\t\t\t\tc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (c == 3) {\n\t\t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn \"Yes\";\n\t}\n\n}\n"
        },
        {
            "language": 4,
            "solution": "// package cf957;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.InputMismatchException;\nimport java.util.Set;\nimport java.util.TreeSet;\n\npublic class CFB {\n    private static final String INPUT = \"5 9\\n\" +\n            \"........#\\n\" +\n            \"#........\\n\" +\n            \"..##.#...\\n\" +\n            \".......#.\\n\" +\n            \"....#.#.#\";\n\n    FastScanner sc;\n\n    public static void main(String[] args) {\n        new CFB().run();\n    }\n\n    public void run() {\n        sc = new FastScanner(oj ? System.in : new ByteArrayInputStream(INPUT.getBytes()));\n\n        long s = System.currentTimeMillis();\n        solve();\n        System.out.flush();\n        tr(System.currentTimeMillis() - s + \"ms\");\n    }\n\n    public void solve() {\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        String[] lines = new String[n];\n        for (int i = 0; i < n; i++) {\n            lines[i] = sc.nextLine();\n        }\n\n        boolean[][] table = new boolean[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (lines[i].charAt(j) == '#') {\n                    table[i][j] = true; //filled\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (lines[i].contains(\"#\")) {\n                for (int j = i+1; j < n; j++) {\n                    if (lines[j].contains(\"#\")) {\n                        if (lines[i].equals(lines[j])) {\n                            //OK\n                        } else {\n//                            boolean cross = false;\n                            for (int k = 0; k < m; k++) {\n                                if (table[i][k] && table[j][k]) { //both painted;\n                                    System.out.println(\"No\");\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        System.out.println(\"Yes\");\n    }\n\n    //********************************************************************************************\n    //********************************************************************************************\n    //********************************************************************************************\n\n    private static int ceil(double d) {\n        int ret = (int) d;\n        return ret == d ? ret : ret + 1;\n    }\n\n    private static int round(double d) {\n        return (int) (d + 0.5);\n    }\n\n    private static int gcd(int a, int b) {\n        BigInteger b1 = BigInteger.valueOf(a);\n        BigInteger b2 = BigInteger.valueOf(b);\n        BigInteger gcd = b1.gcd(b2);\n        return gcd.intValue();\n    }\n\n    private static long gcd(long a, long b) {\n        BigInteger b1 = BigInteger.valueOf(a);\n        BigInteger b2 = BigInteger.valueOf(b);\n        BigInteger gcd = b1.gcd(b2);\n        return gcd.longValue();\n    }\n\n    private int[] readIntArray(int n) {\n        int[] res = new int[n];\n        for (int i = 0; i < n; i++) {\n            res[i] = sc.nextInt();\n        }\n        return res;\n    }\n\n    private long[] readLongArray(int n) {\n        long[] res = new long[n];\n        for (int i = 0; i < n; i++) {\n            res[i] = sc.nextLong();\n        }\n        return res;\n    }\n\n    @SuppressWarnings(\"unused\")\n    static class FastScanner {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n\n        FastScanner(InputStream stream) {\n            this.stream = stream;\n        }\n\n        int read() {\n            if (numChars == -1)\n                throw new InputMismatchException();\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) return -1;\n            }\n            return buf[curChar++];\n        }\n\n        boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        boolean isEndline(int c) {\n            return c == '\\n' || c == '\\r' || c == -1;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        public String next() {\n            int c = read();\n            while (isSpaceChar(c)) c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public String nextLine() {\n            int c = read();\n            while (isEndline(c))\n                c = read();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isEndline(c));\n            return res.toString();\n        }\n\n    }\n\n    private boolean oj = System.getProperty(\"ONLINE_JUDGE\") != null;\n\n    private void tr(Object... o) {\n        if (!oj) System.out.println(Arrays.deepToString(o));\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint n, m;\nchar map[60][60] = {};\nbool q[60] = {};\nbool w[60] = {};\nint main() {\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%s\", map[i] + 1);\n  }\n  for (int i = 1; i <= n; i++) {\n    bool chk[60] = {};\n    bool temp[60] = {};\n    for (int j = 1; j <= m; j++) {\n      if (map[i][j] == '#') {\n        for (int k = 1; k <= n; k++) {\n          if (map[k][j] == '#') {\n            if (q[k]) {\n              printf(\"No\\n\");\n              return 0;\n            }\n            chk[k] = true;\n            q[k] = 1;\n          }\n        }\n        for (int k = 1; k <= m; k++) {\n          if (map[i][k] == '#') {\n            if (w[k]) {\n              printf(\"No\\n\");\n              return 0;\n            }\n            w[k] = 1;\n            temp[k] = true;\n          }\n        }\n        for (int k = 1; k <= n; k++) {\n          if (!chk[k]) continue;\n          for (int l = 1; l <= m; l++) {\n            if (!temp[l]) continue;\n            if (map[k][l] != '#') {\n              printf(\"No\\n\");\n              return 0;\n            } else\n              map[k][l] = '.';\n          }\n        }\n        map[i][j] = '.';\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "r,c = map(int, input().split())\ngrid = [input() for x in range(r)]\n\nrows_checked = []\nblack_set = []\nfor i,row in enumerate(grid):\n    index_black = [x for x,c in enumerate(row) if c == '#']\n    black_set.append(index_black)\n\ndone = False\nfor b1 in black_set:\n    for b2 in black_set:\n        if b1 == b2: continue\n        if any(x in b2 for x in b1):\n            print ('No')\n            done = True\n            break\n    if done:break\nelse:\n    print ('Yes')"
        },
        {
            "language": 1,
            "solution": "R=raw_input\nn,m=map(int,R().split())\nt={}\nfor _ in range(n):\n    s=R()\n    t[tuple(i for i in range(m) if s[i]=='#')]=1\nfor x in t:\n    for y in t:\n        if x!=y and set(x)&set(y):\n            print 'No'\n            exit(0)\nprint 'Yes'"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\npublic class codeforce{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        String[] s = new String[n];\n        int[] t = new int[m];\n        Arrays.fill(t,-1);\n        boolean ok = true;\n        for(int i=0;i<n;i++){\n            s[i] = sc.next();\n            if(s[i].indexOf('#')==-1) continue;\n            if(t[s[i].indexOf('#')]==-1){\n                for(int j=0;j<m;j++){\n                    if(s[i].charAt(j)=='#'){\n                        if(t[j]!=-1) {\n                            ok = false;\n                            break;\n                        }\n                        t[j] = i;\n                    }\n                }\n                if(!ok) break;\n            }else{\n                int p = t[s[i].indexOf('#')];\n                for(int j=0;j<m;j++){\n                    if(t[j]==p){\n                        if(s[i].charAt(j)!='#'){\n                            ok = false;\n                            break;\n                        }\n                    }else{\n                        if(s[i].charAt(j)=='#'){\n                            ok = false;\n                            break;\n                        }\n                    }\n                }\n                if(!ok) break;\n            }\n        }\n        if(ok) System.out.println(\"Yes\");\n        else System.out.println(\"No\");\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char> > t(n, vector<char>(m));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> t[i][j];\n    }\n  }\n  set<int> gr, gc;\n  bool good = true;\n  for (int i = 0; i < n; i++) {\n    set<int> r, c;\n    for (int j = 0; j < m; j++) {\n      if (t[i][j] == '#') {\n        c.insert(j);\n        for (int k = 0; k < n; k++) {\n          if (t[k][j] == '#') {\n            r.insert(k);\n            t[k][j] = '$';\n          }\n        }\n      }\n    }\n    for (int it : r) {\n      for (int jt : c) {\n        if (t[it][jt] != '$' and t[it][jt] != '#') {\n          good = false;\n        }\n      }\n    }\n    for (int e : r) {\n      if (gr.find(e) != gr.end()) {\n        good = false;\n      }\n      gr.insert(e);\n    }\n    for (int e : c) {\n      if (gc.find(e) != gc.end()) {\n        good = false;\n      }\n      gc.insert(e);\n    }\n  }\n  cout << (good ? \"Yes\" : \"No\") << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 200;\nchar f[N][N];\nchar mb[N][N];\nvector<int> gr[N];\nint comp[N];\nvector<int> strs[N];\nvector<int> rows[N];\nbool act[N];\nvoid dfs(int v, int curcomp) {\n  comp[v] = curcomp;\n  for (int to : gr[v])\n    if (!comp[to])\n      dfs(to, curcomp);\n    else if (comp[to] < curcomp) {\n      printf(\"No\");\n      exit(0);\n    }\n}\nint main() {\n  int n, m;\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; ++i) scanf(\"%s\", f[i]);\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j)\n      if (f[i][j] == '#') {\n        gr[i].push_back(n + j);\n        gr[n + j].push_back(i);\n        act[i] = act[n + j] = true;\n      }\n  int curcomp = 0;\n  for (int i = 0; i < n + m; ++i)\n    if (!comp[i] && act[i]) dfs(i, ++curcomp);\n  for (int i = 0; i < n; ++i) rows[comp[i]].push_back(i);\n  for (int i = 0; i < m; ++i) strs[comp[n + i]].push_back(i);\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j) mb[i][j] = '.';\n  for (int i = 1; i <= curcomp; ++i)\n    for (int row : rows[i])\n      for (int str : strs[i]) mb[row][str] = '#';\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j)\n      if (mb[i][j] != f[i][j]) {\n        printf(\"No\");\n        return 0;\n      }\n  printf(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "/*\n * \n * @Author  Ajudiya_13(Bhargav Girdharbhai Ajudiya)\n * Dhirubhai Ambani Institute of Information And Communication Technology \n * \n */\n\n\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\npublic class Code2\n{\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tchar[][] s = new char[n][m];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ts[i] = in.nextLine().toCharArray();\n\t\t\n\t\tArrayList<String> [] arr = new ArrayList[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\tarr[i] = new ArrayList<>();\n\t\tint idx = 0;\n\t\tboolean[] con = new boolean[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(!con[i])\n\t\t\t{\n\t\t\t\tString temp1 = \"\";\n\t\t\t\tfor(int j=0;j<m;j++)\n\t\t\t\t\ttemp1 += s[i][j];\n\t\t\t\tarr[idx].add(temp1);\n\t\t\t\tfor(int j=i+1;j<n;j++)\n\t\t\t\t{\n\t\t\t\t\tif(!con[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tString temp2 = \"\";\n\t\t\t\t\t\tfor(int k=0;k<m;k++)\n\t\t\t\t\t\t\ttemp2+=s[j][k];\n\t\t\t\t\t\tif(temp1.equals(temp2))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tarr[idx].add(temp2);\n\t\t\t\t\t\t\tcon[j] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tidx++;\n\t\t\t}\n\t\t}\n\t\tboolean flag = true;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(!arr[i].isEmpty())\n\t\t\t{\n\t\t\t\tfor(int j=i+1;j<n;j++)\n\t\t\t\t{\n\t\t\t\t\tif(!arr[j].isEmpty())\n\t\t\t\t\t{\n\t\t\t\t\t\tchar[] s1 = arr[i].get(0).toCharArray();\n\t\t\t\t\t\tchar[] s2 = arr[j].get(0).toCharArray();\n\t\t\t\t\t\t//System.out.println(Arrays.toString(s1) + \"  \" + Arrays.toString(s2));\n\t\t\t\t\t\tfor(int k=0;k<m;k++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(s1[k]=='#' && s2[k]=='#' && s1[k]==s2[k])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!flag)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!flag)\n\t\t\t\tbreak;\n\t\t}\n\t\tif(flag)\n\t\t\tpw.println(\"Yes\");\n\t\telse\n\t\t\tpw.println(\"No\");\n\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n\t\n\tstatic class InputReader \n\t{\n\t\t \n\t\tprivate final InputStream stream;\n\t\tprivate final byte[] buf = new byte[8192];\n\t\tprivate int curChar, snumChars;\n\t\tprivate SpaceCharFilter filter;\n \n\t\tpublic InputReader(InputStream stream) \n\t\t{\n\t\t\tthis.stream = stream;\n\t\t}\n \n\t\tpublic int snext() \n\t\t{\n\t\t\tif (snumChars == -1)\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tif (curChar >= snumChars) \n\t\t\t{\n\t\t\t\tcurChar = 0;\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tsnumChars = stream.read(buf);\n\t\t\t\t} \n\t\t\t\tcatch (IOException e) \n\t\t\t\t{\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (snumChars <= 0)\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn buf[curChar++];\n\t\t}\n \n\t\tpublic int nextInt() \n\t    {\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c)) \n\t\t\t{\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-')\n\t\t    {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tdo \n\t\t\t{\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = snext();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n \n\t\tpublic long nextLong()\n\t    {\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c)) \n\t\t\t{\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-') \n\t\t\t{\n\t\t\t\tsgn = -1;\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tdo \n\t\t\t{\n\t\t\t\tif (c < '0' || c > '9')\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = snext();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n \n\t\tpublic int[] nextIntArray(int n) \n\t\t{\n\t\t\tint a[] = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) \n\t\t\t{\n\t\t\t\ta[i] = nextInt();\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n \n\t\tpublic String readString()\n\t    {\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c)) \n\t\t\t{\n\t\t\t\tc = snext();\n\t\t\t}\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo \n\t\t\t{\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = snext();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res.toString();\n\t\t}\n \n\t\tpublic String nextLine() \n\t\t{\n\t\t\tint c = snext();\n\t\t\twhile (isSpaceChar(c))\n\t\t\t\tc = snext();\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo \n\t\t\t{\n\t\t\t\tres.appendCodePoint(c);\n\t\t\t\tc = snext();\n\t\t\t} while (!isEndOfLine(c));\n\t\t\treturn res.toString();\n\t\t}\n \n\t\tpublic boolean isSpaceChar(int c) \n\t\t{\n\t\t\tif (filter != null)\n\t\t\t\treturn filter.isSpaceChar(c);\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n \n\t\tprivate boolean isEndOfLine(int c) \n\t\t{\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\n\t\t}\n \n\t\tpublic interface SpaceCharFilter\n\t    {\n\t\t\tpublic boolean isSpaceChar(int ch);\n\t\t}\n\t}\n\t\n\tpublic static long mod = 1000000007;\n\tpublic static int d;\n\tpublic static int p;\n\tpublic static int q;\n\t\n\tpublic static int[] suffle(int[] a,Random gen)\n\t{\n\t\tint n = a.length;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tint ind = gen.nextInt(n-i)+i;\n\t\t\tint temp = a[ind];\n\t\t\ta[ind] = a[i];\n\t\t\ta[i] = temp;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tpublic static void swap(int a, int b){\n\t\tint temp = a;\n\t\ta = b;\n\t\tb = temp;\n\t}\n\t\n\tpublic static HashSet<Integer> primeFactorization(int n)\n\t{\n\t\tHashSet<Integer> a =new HashSet<Integer>();\n\t\tfor(int i=2;i*i<=n;i++)\n\t\t{\n\t\t\twhile(n%i==0)\n\t\t\t{\n\t\t\t\ta.add(i);\n\t\t\t\tn/=i;\n\t\t\t}\n\t\t}\n\t\tif(n!=1)\n\t\t\ta.add(n);\n\t\treturn a;\n\t}\n\t\n\tpublic static void sieve(boolean[] isPrime,int n)\n\t{\n\t\tfor(int i=1;i<n;i++)\n\t\t\tisPrime[i] = true;\n\t\t\n\t\tisPrime[0] = false;\n\t\tisPrime[1] = false;\n\t\t\n\t\tfor(int i=2;i*i<n;i++)\n\t\t{\n\t\t\tif(isPrime[i] == true)\n\t\t\t{\n\t\t\t\tfor(int j=(2*i);j<n;j+=i)\n\t\t\t\t\tisPrime[j] = false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static int GCD(int a,int b)\n\t{\n\t\tif(b==0)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn GCD(b,a%b);\n\t}\n\t\n\tpublic static long GCD(long a,long b)\n\t{\n\t\tif(b==0)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn GCD(b,a%b);\n\t}\n\t\n\tpublic static void extendedEuclid(int A,int B)\n\t{\n\t\tif(B==0)\n\t\t{\n\t\t\td = A;\n\t\t\tp = 1 ;\n\t\t\tq = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\textendedEuclid(B, A%B);\n\t\t\tint temp = p;\n\t\t\tp = q;\n\t\t\tq = temp - (A/B)*q;\n\t\t}\n\t}\n\t\n\tpublic static long LCM(long a,long b)\n\t{\n\t\treturn (a*b)/GCD(a,b);\n\t}\n\t\n\tpublic static int LCM(int a,int b)\n\t{\n\t\treturn (a*b)/GCD(a,b);\n\t}\n\t\n\tpublic static int binaryExponentiation(int x,int n)\n\t{\n\t    int result=1;\n\t    while(n>0)\n\t    {\n\t        if(n % 2 ==1)\n\t            result=result * x;\n\t        x=x*x;\n\t        n=n/2;\n\t    }\n\t    return result;\n\t}\n\t\n\tpublic static long binaryExponentiation(long x,long n)\n\t{\n\t    long result=1;\n\t    while(n>0)\n\t    {\n\t        if(n % 2 ==1)\n\t            result=result * x;\n\t        x=x*x;\n\t        n=n/2;\n\t    }\n\t    return result;\n\t}\n\t\n\tpublic static int modularExponentiation(int x,int n,int M)\n\t{\n\t    int result=1;\n\t    while(n>0)\n\t    {\n\t        if(n % 2 ==1)\n\t            result=(result * x)%M;\n\t        x=(x*x)%M;\n\t        n=n/2;\n\t    }\n\t    return result;\n\t}\n\t\n\tpublic static long modularExponentiation(long x,long n,long M)\n\t{\n\t    long result=1;\n\t    while(n>0)\n\t    {\n\t        if(n % 2 ==1)\n\t            result=(result * x)%M;\n\t        x=(x*x)%M;\n\t        n=n/2;\n\t    }\n\t    return result;\n\t}\n\t\n\tpublic static int modInverse(int A,int M)\n\t{\n\t    return modularExponentiation(A,M-2,M);\n\t}\n\t\n\tpublic static long modInverse(long A,long M)\n\t{\n\t    return modularExponentiation(A,M-2,M);\n\t}\n\t\n\tpublic static boolean isPrime(int n)\n\t{\n\t    \n\t    if (n <= 1)  return false;\n\t    if (n <= 3)  return true;\n\t    \n\t    if (n%2 == 0 || n%3 == 0) \n\t    \treturn false;\n\t \n\t    for (int i=5; i*i<=n; i=i+6)\n\t    {\n\t        if (n%i == 0 || n%(i+2) == 0)\n\t           return false;\n\t    }\n\t    \n\t    return true;\n\t}\n\t\n\tstatic class pair implements Comparable<pair>\n\t{\n\t\tInteger x, y;\n\t\tpair(int x,int y)\n\t\t{\n\t\t\tthis.x=x;\n\t\t\tthis.y=y;\n\t\t}\n\t\t\n\t\tpublic int compareTo(pair o) {\n\t\t\tint result = x.compareTo(o.x);\n\t\t\tif(result==0)\n\t\t\t\tresult = y.compareTo(o.y);\n\t\t\t\n\t\t\treturn result;\n\t\t}  \n\t\t\n\t\tpublic String toString()\n\t\t{\n\t\t\treturn x+\" \"+y;\n\t\t}\n\t\t\n\t\tpublic boolean equals(Object o)\n\t\t{\n\t\t\tif (o instanceof pair)\n\t\t    {\n\t\t\t\tpair p = (pair)o;\n\t\t\t\treturn p.x == x && p.y == y ;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tpublic int hashCode()\n\t\t{\n\t\t\treturn new Long(x).hashCode()*31 + new Long(y).hashCode();\n\t\t}\n\t}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 60;\nchar maz[maxn][maxn];\nint r[maxn], cntr, c[maxn], cntc;\nbool R[maxn], C[maxn], vis[maxn][maxn];\nint cnt[maxn][maxn];\nint n, m;\nvoid work(int x, int y) {\n  cntc = 0;\n  for (int j = 0; j < m; j++)\n    if (!C[j] && !vis[x][j] && maz[x][j] == '#') c[cntc++] = j, C[j] = true;\n  cntr = 0;\n  for (int i = 0; i < n; i++)\n    if (!R[i] && !vis[i][y] && maz[i][y] == '#') r[cntr++] = i, R[i] = true;\n  for (int i = 0; i < cntr; i++)\n    for (int j = 0; j < cntc; j++) {\n      cnt[r[i]][c[j]]++;\n      vis[r[i]][c[j]] = true;\n    }\n}\nint main() {\n  while (~scanf(\"%d%d\", &n, &m)) {\n    for (int i = 0; i < n; i++) scanf(\"%s\", maz[i]);\n    for (int i = 0; i < n; i++)\n      for (int j = 0; j < m; j++) vis[i][j] = false, cnt[i][j] = 0;\n    for (int i = 0; i < n; i++) R[i] = false;\n    for (int j = 0; j < m; j++) C[j] = false;\n    for (int i = 0; i < n; i++)\n      if (!R[i]) {\n        for (int j = 0; j < m; j++)\n          if (!C[j] && !vis[i][j] && maz[i][j] == '#') work(i, j);\n      }\n    bool flag = true;\n    for (int i = 0; i < n; i++)\n      for (int j = 0; j < m; j++) {\n        if (maz[i][j] == '#' && cnt[i][j] != 1) flag = false;\n        if (maz[i][j] == '.' && cnt[i][j]) flag = false;\n      }\n    if (flag)\n      puts(\"Yes\");\n    else\n      puts(\"No\");\n  }\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.awt.List;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Locale;\nimport java.util.TimeZone;\n\npublic class B {\n\n\tpublic static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tInputStream inputstream = System.in;\n\t\tOutputStream outputstream = System.out;\n\t\tFastReader in = new FastReader(inputstream);\n\t\tPrintWriter out = new PrintWriter(outputstream);\n\t\tTaskA solver = new TaskA();\n\t\t// int testcase = in.ni();\n\t\tfor (int i = 0; i < 1; i++)\n\t\t\tsolver.solve(i, in, out);\n\t\tout.close();\n\n\t}\n\n}\n\nclass TaskA {\n\n\tpublic void solve(int testnumber, FastReader in, PrintWriter out) {\n\t\tint n = in.ni();\n\t\tint m = in.ni();\n\t\tString arr[] = new String[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = in.ns();\n\t\t}\n\t\tfor (int i = 0 ; i < n ; ++i)\n\t\t{\n\t\t\tfor (int j = 0 ; j < m ; ++j)\n\t\t\t{\n\t\t\t\tif (arr[i].charAt(j) == '#')\n\t\t\t\t{\n\t\t\t\t\tfor (int k = i ; k < n ; ++k)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (arr[k].charAt(j) == '#')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!arr[k].equals(arr[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\n\t}\n}\n\nclass FastReader {\n\tpublic InputStream stream;\n\tprivate byte[] buf = new byte[1024];\n\tprivate int curChar;\n\tprivate int numChars;\n\tprivate SpaceCharFilter filter;\n\n\tpublic FastReader(InputStream stream) {\n\t\tthis.stream = stream;\n\t}\n\n\tpublic FastReader() {\n\n\t}\n\n\tpublic int read() {\n\t\tif (numChars == -1) {\n\t\t\tthrow new InputMismatchException();\n\t\t}\n\t\tif (curChar >= numChars) {\n\t\t\tcurChar = 0;\n\t\t\ttry {\n\t\t\t\tnumChars = stream.read(buf);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tif (numChars <= 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn buf[curChar++];\n\t}\n\n\tpublic int ni() {\n\t\tint c = read();\n\t\twhile (isSpaceChar(c))\n\t\t\tc = read();\n\t\tint sgn = 1;\n\t\tif (c == '-') {\n\t\t\tsgn = -1;\n\t\t\tc = read();\n\t\t}\n\t\tint res = 0;\n\t\tdo {\n\t\t\tif (c < '0' || c > '9') {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tres *= 10;\n\t\t\tres += c - '0';\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(c));\n\t\treturn res * sgn;\n\t}\n\n\tpublic String ns() {\n\t\tint c = read();\n\t\twhile (isSpaceChar(c))\n\t\t\tc = read();\n\t\tStringBuilder res = new StringBuilder();\n\t\tdo {\n\t\t\tres.appendCodePoint(c);\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(c));\n\t\treturn res.toString();\n\t}\n\n\tpublic boolean isSpaceChar(int c) {\n\t\tif (filter != null) {\n\t\t\treturn filter.isSpaceChar(c);\n\t\t}\n\t\treturn isWhitespace(c);\n\t}\n\n\tpublic static boolean isWhitespace(int c) {\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t}\n\n\tpublic int[] iArr(int n) {\n\t\tint a[] = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = ni();\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic String next() {\n\t\treturn ns();\n\t}\n\n\tpublic interface SpaceCharFilter {\n\t\tpublic boolean isSpaceChar(int ch);\n\t}\n\n}"
        },
        {
            "language": 3,
            "solution": "st = input().split()\nn,m = int(st[0]),int(st[1])\nmap = [input() for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if map[i][j] == '#':\n            for p in range(n):\n                if p !=  i and map[p][j] == '#' and map[p] != map[i]:\n                    print('No')\n                    exit()\n\nprint('Yes')\n\n"
        },
        {
            "language": 3,
            "solution": "\"\"\"\ndef read2():\n  ent = input().split()\n  line = input().split()\n  return int(ent[0]), list(map(int, line))\n\nA = [1,2,3,4,5]\n\ndef a(A):\n  for i in range(len(A)):\n    A[i] -= 1\n  for i in range(len(A)):\n    if A[A[A[i]]]== i:\n      return 'YES'\n  return 'NO'\n\ndef b(n, A):\n  m = 0\n  ind = 1\n  c = 10e7\n  for k in range(len(A)):\n    if (n % A[k]) < c:\n      c = n % A[k]\n      m = int(n/A[k])\n      ind = k + 1\n  return ind, m\n\n\nA = [2, 4, 5, 1, 3]\n#print(*b(*read2()))\n\"\"\"\ndef read3():\n    ent0 = input().split()\n    line = input().split()\n    ent = input().split()\n    return int(ent[0]), int(ent[1]), list(map(int, line))\n\ndef time(s, f, A):\n    d = f - s\n    msum = sum(A[:d])\n    csum = msum\n    mind = 0\n    n = len(A)\n    A.extend(A[:d])\n    # print (csum)\n    for i in range(1, n):\n        csum += A[i + d - 1] - A[i - 1]\n        print(mind, msum, csum)\n        if csum > msum:\n\n            msum = csum\n            mind = i\n    print(mind)\n    if s - mind > 0:\n        return s - mind\n    print(mind, msum, csum)\n    return n + (s - mind)\n\n#print(time(*read3()))\n\ndef read3():\n    ent = input()\n    line = input()\n    #ent = input().split()\n    return int(ent), line\n\ndef Ax(n,line):\n    for i, l in enumerate(line):\n        if l != '?' and i + 1 < n and line[i+1] == l:\n            return 'No'\n        #if l == '?' and i-1 >= 0 and i + 1 < n and '?' != line[i-1] != line[i+1] != '?':\n        #    return 'No', '?' != line[i-1] != line[i+1] != '?', line[i-1] != line[i+1]\n        #if l == '?' and i-1 >= 0 and i + 2 < n and line[i+1] == '?'and '?' != line[i-1] != line[i+2] != '?':\n        #    return 'No'\n        if l == '?' and i in [0,n-1]:\n            return 'Yes'\n        if l == '?' and i-1 >= 0 and i + 1 < n and '?' != line[i-1] == line[i+1] != '?':\n            return 'Yes'\n        if l == '?' and i - 1 >= 0 and i + 2 < n and line[i + 1] == '?' and '?' != line[i - 1] == line[i + 2] != '?':\n            return 'Yes'\n    return 'No'\n\n\n\n#print(Ax(*read3()))\n\ndef rea():\n    rn, cn = list(map(int, input().split()))\n    T = []\n    for r in range(rn):\n        T.append(input())\n    return rn, cn, T\n\n\ndef table(rn, cn, T):\n    he = {}\n    for r in range(rn):\n        if T[r] in he:\n            he[T[r]].add(r)\n        else:\n            he[T[r]] = set()\n    hcol = set()\n    for r in range(rn):\n        for c in range(cn):\n            if T[r][c] == '#' and r not in he[T[r]]:\n                if c in hcol:\n                    return 'No'\n                else:\n                    hcol.add(c)\n    return 'Yes'\n\nprint(table(*rea()))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nl = [input() for i in range(n)]\nflag = True\nfor i in range(n):\n    for j in range(i + 1, n): \n        if l[i] != l[j]:\n            for q in range(m):\n                if l[j][q] == l[i][q] == '#':\n                    print('NO')\n                    flag = False\n                    break\n        if not flag:\n            break \n    if not flag:\n        break    \nelse:\n    print('YES')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 222;\nchar will[N][N], c[N][N];\nvector<int> a[N], colum[N], row[N];\nint p[N];\nint dad(int x) {\n  if (p[x] == x) return x;\n  return p[x] = dad(p[x]);\n}\nvoid init(int x, int y) {\n  x = dad(x);\n  y = dad(y);\n  if (x == y) return;\n  p[x] = y;\n}\nint main() {\n  srand(time(NULL));\n  int n, m;\n  cin >> n >> m;\n  for (int i = 1; i <= n + m; i++) {\n    p[i] = i;\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> c[i][j];\n      will[i][j] = '.';\n      if (c[i][j] == '#') {\n        init(i, j + n);\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    row[dad(i)].push_back(i);\n  }\n  for (int i = n + 1; i <= n + m; i++) {\n    colum[dad(i)].push_back(i - n);\n  }\n  for (int i = 1; i <= n + m; i++) {\n    for (auto x : row[i]) {\n      for (auto y : colum[i]) {\n        will[x][y] = '#';\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (will[i][j] != c[i][j]) {\n        cout << \"No\", exit(0);\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "r, c = input().split(' ')\nr = int(r)\nc = int(c)\n\nst = [['0' for x in range(c)] for y in range(r)]\n\nfor i in range(r):\n    st[i] = list(input())\n\nst2 = []\n\nfor i in range(c):\n    st2 = []\n    for j in range(r):\n        if st[j][i] == '#':\n            st2.append(j)\n    if len(st2) > 1:\n        # check if all rows at the index are equal\n        for k in range(len(st2) - 1):\n            val = st2[k:k+2]\n            if st[val[0]] != st[val[1]]:\n                print(\"No\")\n                exit()\n        \nprint(\"Yes\")\n\n\n"
        },
        {
            "language": 4,
            "solution": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author noob_coder\n */\npublic class Main {\n        public static void main(String[] args) {\n                InputStream inputStream = System.in;\n                OutputStream outputStream = System.out;\n                InputReader in = new InputReader(inputStream);\n                PrintWriter out = new PrintWriter(outputStream);\n                TaskB solver = new TaskB();\n                solver.solve(1, in, out);\n                out.close();\n        }\n\n        static class TaskB {\n                public void solve(int testNumber, InputReader in, PrintWriter out) {\n                        int n = in.i();\n                        int m = in.i();\n                        char[][] a = in.nm(n, m);\n                        boolean[] vis = new boolean[n];\n\n                        for (int i = 0; i < n; i++) {\n                                vis[i] = true;\n                                int count = 0;\n                                for (int j = 0; j < m; j++) {\n                                        if (a[i][j] == '#') count++;\n                                }\n                                for (int j = 0; j < n; j++) {\n                                        if (j != i) {\n                                                if (!vis[j]) {\n                                                        boolean flag = false;\n                                                        int count_e = 0;\n                                                        int count_j = 0;\n                                                        for (int k = 0; k < m; k++) {\n                                                                if (a[j][k] == '#') count_j++;\n                                                                if (a[i][k] == '#' && a[j][k] == '#') {\n                                                                        flag = true;\n                                                                        count_e++;\n                                                                }\n                                                        }\n                                                        if (flag && count == count_e && count_e == count_j) {\n                                                                vis[j] = true;\n                                                        } else if (flag) {\n                                                                out.println(\"No\");\n                                                                return;\n                                                        }\n                                                }\n                                        }\n                                }\n                        }\n                        out.println(\"Yes\");\n                }\n\n        }\n\n        static class InputReader {\n                InputStream is;\n                private byte[] inbuf = new byte[1024];\n                public int lenbuf = 0;\n                public int ptrbuf = 0;\n\n                public InputReader(InputStream is) {\n                        this.is = is;\n                }\n\n                private int readByte() {\n                        if (lenbuf == -1) throw new InputMismatchException();\n                        if (ptrbuf >= lenbuf) {\n                                ptrbuf = 0;\n                                try {\n                                        lenbuf = is.read(inbuf);\n                                } catch (IOException e) {\n                                        throw new InputMismatchException();\n                                }\n                                if (lenbuf <= 0) return -1;\n                        }\n                        return inbuf[ptrbuf++];\n                }\n\n                private boolean isSpaceChar(int c) {\n                        return !(c >= 33 && c <= 126);\n                }\n\n                private int skip() {\n                        int b;\n                        while ((b = readByte()) != -1 && isSpaceChar(b)) ;\n                        return b;\n                }\n\n                public char[] sa(int n) {\n                        char[] buf = new char[n];\n                        int b = skip(), p = 0;\n                        while (p < n && !(isSpaceChar(b))) {\n                                buf[p++] = (char) b;\n                                b = readByte();\n                        }\n                        return n == p ? buf : Arrays.copyOf(buf, p);\n                }\n\n                public char[][] nm(int n, int m) {\n                        char[][] map = new char[n][];\n                        for (int i = 0; i < n; i++) map[i] = sa(m);\n                        return map;\n                }\n\n                public int i() {\n                        int num = 0, b;\n                        boolean minus = false;\n                        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;\n                        if (b == '-') {\n                                minus = true;\n                                b = readByte();\n                        }\n\n                        while (true) {\n                                if (b >= '0' && b <= '9') {\n                                        num = num * 10 + (b - '0');\n                                } else {\n                                        return minus ? -num : num;\n                                }\n                                b = readByte();\n                        }\n                }\n\n        }\n}\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ninline long long read() {\n  long long x = 0, c, f = 1;\n  while (!isdigit(c = getchar()))\n    if (c == '-') f = -1;\n  while (x = x * 10 + c - '0', isdigit(c = getchar()))\n    ;\n  return x * f;\n}\nlong long n, m, vis[55], mi[55], f[55];\nchar s[55][55];\nint main() {\n  n = read();\n  m = read();\n  for (long long i = 1; i <= n; i++) scanf(\"%s\", s[i] + 1);\n  mi[0] = 1;\n  for (long long i = 1; i <= m; i++) mi[i] = 2ll * mi[i - 1];\n  for (long long i = 1; i <= n; i++)\n    for (long long j = 1; j <= m; j++)\n      if (s[i][j] == '#') f[i] += mi[j - 1];\n  for (long long j = 1; j <= m; j++) {\n    for (long long i = 1; i <= n; i++)\n      for (long long k = i + 1; k <= n; k++)\n        if (s[i][j] == '#' && s[k][j] == '#' && f[i] != f[k]) {\n          printf(\"No\\n\");\n          return 0;\n        }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "aa = (input()).split()\nxx = int(aa[0])\nyy = int(aa[1])\ndd = [0] * yy\nprime=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659]\nfflag = 0\nfor i in range (0,xx):\n    ss= input()\n\n    ll= []\n    flag = 0\n    for j in range(0, len(ss)):\n        if ss[j]=='#':\n            ll.append(j)\n\n            if dd[j]>0:\n                flag=1\n    if flag == 0:\n        mul = 0\n        for j in range(0,len(ll)):\n            dd[ll[j]]=i+1\n    else:\n        max = dd[ll[0]]\n        for j in range(0, len(ll)):\n            temp = dd[ll[j]]\n            if temp!=max:\n                print(\"No\")\n                fflag = 1\n                break\n            else:\n                for k in range(0,yy):\n                    if dd[k]==temp:\n                        if k not in ll:\n                            print(\"No\")\n                            fflag =1\n                            break\n            if fflag==1:\n                break\n    if fflag==1:\n        break\nif fflag==0:\n    print(\"Yes\")\n\n\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool cols[100];\nint main() {\n  int n, m;\n  cin >> n >> m;\n  set<string> rows;\n  string ans = \"Yes\";\n  for (int _i = 0; _i < n; _i++) {\n    string t;\n    cin >> t;\n    rows.insert(t);\n  }\n  for_each(rows.begin(), rows.end(), [&](string r) {\n    for (int _i = 0; _i < r.size(); _i++) {\n      if (r[_i] == '#') {\n        if (!cols[_i]) {\n          cols[_i] = true;\n        } else {\n          ans = \"No\";\n        }\n      }\n    }\n  });\n  cout << ans << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m, nr, fl[55], fc[55];\nchar a[55][55];\nint dl[4] = {0, 0, 1, -1};\nint dc[4] = {1, -1, 0, 0};\nvoid ve(int l, int c) {\n  fl[l] = nr;\n  fc[c] = nr;\n  a[l][c] = 'x';\n  for (int i = 1; i < l; i++)\n    if (a[i][c] == '#') ve(i, c);\n  for (int i = l + 1; i <= n; i++)\n    if (a[i][c] == '#') ve(i, c);\n  for (int j = 1; j < c; j++)\n    if (a[l][j] == '#') ve(l, j);\n  for (int j = c + 1; j <= m; j++)\n    if (a[l][j] == '#') ve(l, j);\n}\nint main() {\n  cin.sync_with_stdio(false);\n  cin >> n >> m;\n  for (int i = 0; i <= n; i++) cin.getline(a[i] + 1, 55);\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      if (a[i][j] == '#') {\n        nr++;\n        ve(i, j);\n      }\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      if (a[i][j] == '.' && fl[i] == fc[j] && fl[i]) {\n        cout << \"No\";\n        return 0;\n      }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  string ar[n];\n  for (int i = 0; i < n; i++) cin >> ar[i];\n  int row[n], col[m];\n  memset(row, 0, sizeof row);\n  memset(col, 0, sizeof col);\n  bool ans = true;\n  for (int i = 0; i < n; i++) {\n    if (row[i] or !ans) continue;\n    int left = -1;\n    row[i] = true;\n    for (int j = 0; j < m; j++) {\n      if (ar[i][j] == '#' and col[j]) ans = false;\n      if (ar[i][j] == '#') {\n        col[j] = true;\n        if (left == -1)\n          left = j;\n        else {\n          for (int k = i; k < n; k++) {\n            if (ar[k][j] != ar[k][left]) ans = false;\n          }\n        }\n      }\n    }\n    if (!ans) break;\n    if (left == -1) continue;\n    for (int k = i + 1; k < n; k++) {\n      if (ar[k][left] == '#') {\n        row[k] = true;\n        for (int j = 0; j < m; j++) {\n          if (ar[i][j] != ar[k][j]) ans = false;\n        }\n      }\n    }\n  }\n  if (ans)\n    printf(\"Yes\\n\");\n  else\n    printf(\"No\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int m, n;\n  cin >> n;\n  cin >> m;\n  vector<string> grid(n);\n  vector<bool> cols(m, false);\n  for (int i = 0; i < n; i++) cin >> grid[i];\n  sort(grid.begin(), grid.end());\n  grid.resize(unique(grid.begin(), grid.end()) - grid.begin());\n  for (int i = 0; i < grid.size(); i++) {\n    for (int j = 0; j < m; j++) {\n      if (grid[i][j] == '#') {\n        if (cols[j]) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n        cols[j] = true;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long int expo(long long int a, long long int b) {\n  if (b == 0) return 1;\n  long long int p = expo(a, b / 2);\n  p = p;\n  p = (p * p);\n  return b & 1 ? (p * a) % 1000000007 : p;\n}\nlong long int bC(long long int n, long long int k) {\n  long long int res = 1;\n  if (k > n - k) k = n - k;\n  for (long long int i = 0; i < k; ++i) {\n    res *= (n - i);\n    res /= (i + 1);\n  }\n  return res;\n}\nint main(int argc, char const *argv[]) {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int> > v(n);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      char c;\n      cin >> c;\n      if (c == '.')\n        ;\n      else\n        v[i].push_back(j);\n    }\n  }\n  bool ans = true;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      for (int k = 0; k < v[i].size(); k++)\n        for (int l = 0; l < v[j].size(); l++) {\n          if (v[i][k] == v[j][l] && v[i] != v[j]) ans = false;\n        }\n    }\n  }\n  if (ans)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 55;\nbool paint[MAXN][MAXN];\nbool taken[MAXN];\nbool done[MAXN];\nint main() {\n  ios::sync_with_stdio(0);\n  int N, M;\n  cin >> N >> M;\n  vector<vector<int> > cols(N);\n  for (int i = 0; i < N; ++i) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < M; ++j) {\n      if (s[j] == '#') {\n        paint[i][j] = 1;\n        cols[i].push_back(j);\n      }\n    }\n  }\n  for (int i = 0; i < N; ++i) {\n    if (done[i]) continue;\n    for (int j = i + 1; j < N; ++j) {\n      if (cols[j].size() == cols[i].size()) {\n        bool can = 1;\n        for (int k = 0; k < cols[j].size(); ++k) {\n          if (cols[i][k] != cols[j][k]) {\n            can = 0;\n          }\n        }\n        if (can) {\n          done[j] = 1;\n        }\n      }\n    }\n    for (int k : cols[i]) {\n      if (taken[k]) return 0 * puts(\"No\");\n      taken[k] = 1;\n    }\n  }\n  puts(\"Yes\");\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class C2403201801 {\n\n  private static void solve(final Input input, final PrintWriter output) throws IOException {\n    int rows = input.nextInt();\n    int cols = input.nextInt();\n    char[][] array = new char[rows][cols];\n    for (int i = 0; i < rows; i++)\n      array[i] = input.next().toCharArray();\n    Map<Integer, Set<Integer>> map = new HashMap<>();\n    for (int row = 0; row < rows; row++) {\n      for (int col = 0; col < cols; col++) {\n        if (array[row][col] == '#') {\n          map.compute(row, (k, v) -> v == null ? new HashSet<>() : v).add(col);\n        }\n      }\n    }\n\n    for (Map.Entry<Integer, Set<Integer>> entry : map.entrySet()) {\n      for (Map.Entry<Integer, Set<Integer>> sentry : map.entrySet()) {\n        if (sentry.getKey() == entry.getKey())\n          continue;\n        Set<Integer> aset = new HashSet<>(sentry.getValue());\n        aset.addAll(entry.getValue());\n        if (sentry.getValue().size() + entry.getValue().size() != aset.size()) {\n          if (entry.getValue().size() != aset.size() || sentry.getValue().size() != aset.size()) {\n            System.out.println(\"No\");\n            return;\n          }\n        }\n      }\n    }\n    System.out.println(\"Yes\");\n    return;\n  }\n\n  public static void main(String[] args) throws IOException {\n    try (final PrintWriter output = new PrintWriter(System.out);\n        final Input input = new Input(new BufferedReader(new InputStreamReader(System.in)))) {\n      solve(input, output);\n    }\n  }\n\n  private static class Input implements Closeable {\n\n    private final BufferedReader bufferedReader;\n    private final StringBuilder stringBuilder = new StringBuilder();\n    private final static char[] SEPERATOR = { '\\t', '\\n', '\\r', ' ' };\n\n    public Input(final BufferedReader in) {\n      this.bufferedReader = in;\n    }\n\n    private boolean isAnySeperator(final char ch) {\n      return ch == SEPERATOR[3] || ch == SEPERATOR[1] || ch == SEPERATOR[0] || ch == SEPERATOR[2];\n    }\n\n    private boolean isLineSeperator(final char ch) {\n      return ch == SEPERATOR[1] || ch == SEPERATOR[2];\n    }\n\n    public String next() throws IOException {\n      stringBuilder.setLength(0);\n      while (true) {\n        int c = bufferedReader.read();\n        if (c == -1) {\n          return null;\n        }\n        char ch = (char) c;\n        if (!isAnySeperator(ch)) {\n          stringBuilder.append(ch);\n          break;\n        }\n      }\n      while (true) {\n        int c = bufferedReader.read();\n        char ch = (char) c;\n        if (c == -1 || isAnySeperator(ch)) {\n          break;\n        }\n        stringBuilder.append(ch);\n      }\n      return stringBuilder.toString();\n    }\n\n    public String nextLine() throws IOException {\n      stringBuilder.setLength(0);\n      while (true) {\n        final int c = bufferedReader.read();\n        if (c == -1) {\n          return null;\n        }\n        final char ch = (char) c;\n        if (!isLineSeperator(ch)) {\n          stringBuilder.append(ch);\n          break;\n        }\n      }\n      while (true) {\n        int c = bufferedReader.read();\n        char ch = (char) c;\n        if (c == -1 || isLineSeperator(ch)) {\n          break;\n        }\n        stringBuilder.append(ch);\n      }\n      return stringBuilder.toString();\n    }\n\n    public int nextInt() throws IOException {\n      return Integer.parseInt(next(), 10);\n    }\n\n    public long nextLong() throws IOException {\n      return Long.parseLong(next(), 10);\n    }\n\n    @Override\n    public void close() throws IOException {\n      bufferedReader.close();\n    }\n  }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstatic const int MAXN = 53;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  long long int n, m;\n  cin >> n >> m;\n  set<string> s;\n  for (int i = 0; i < n; i++) {\n    string t;\n    cin >> t;\n    s.insert(t);\n  }\n  for (int j = 0; j < m; j++) {\n    long long int cnt = 0;\n    for (auto& g : s) {\n      if (g[j] == '#') cnt++;\n    }\n    if (cnt > 1) {\n      cout << \"No\" << endl;\n      return 0;\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m, i, j, fl = 0;\n  char A[51][51];\n  int R[100] = {0}, C[100] = {0};\n  cin >> n >> m;\n  i = 0;\n  while (i < n) {\n    scanf(\"%s\", A[i]);\n    i++;\n  }\n  i = 0;\n  while (i < n) {\n    if (R[i] == 0) {\n      R[i] = 1;\n      j = i + 1;\n      while (j < n) {\n        if (strcmp(A[i], A[j]) == 0) R[j] = 1;\n        j++;\n      }\n      j = 0;\n      while (j < m) {\n        if (A[i][j] == '#' && C[j] == 0)\n          C[j] = 1;\n        else if (A[i][j] == '#') {\n          fl = 1;\n          break;\n        }\n        j++;\n      }\n    }\n    if (fl == 1) break;\n    i++;\n  }\n  if (fl == 0)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar mat[55][55];\nbool vis[55][55];\nbitset<55> r, c;\nbool band = true;\nvoid visitar(int y, int x) {\n  if (vis[y][x]) return;\n  vis[y][x] = true;\n  r[y] = c[x] = true;\n  for (int i = x + 1; i < n; ++i) {\n    if (c[i] && mat[y][i] != '#') band = false;\n    if (mat[y][i] == '#') {\n      visitar(y, i);\n      break;\n    }\n  }\n  for (int i = y + 1; i < n; ++i) {\n    if (r[i] && mat[i][x] != '#') band = false;\n    if (mat[i][x] == '#') {\n      visitar(i, x);\n      break;\n    }\n  }\n  for (int i = x - 1; i >= 0; --i) {\n    if (c[i] && mat[y][i] != '#') band = false;\n    if (mat[y][i] == '#') {\n      visitar(y, i);\n      break;\n    }\n  }\n  for (int i = y - 1; i >= 0; --i) {\n    if (r[i] && mat[i][x] != '#') band = false;\n    if (mat[i][x] == '#') {\n      visitar(i, x);\n      break;\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n  cin >> n >> m;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      cin >> mat[i][j];\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (mat[i][j] == '#') {\n        visitar(i, j);\n        r.reset();\n        c.reset();\n      }\n    }\n  }\n  if (!band)\n    cout << \"NO\\n\";\n  else\n    cout << \"YES\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstring str[150];\nbool check(int i, int j) {\n  for (int x = 0; x < n; x++) {\n    if (str[x][j] == '#') {\n      if (str[x] != str[i]) return false;\n    }\n  }\n  return true;\n}\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> str[i];\n  for (int i = 0; i < n; i++)\n    for (int j = 0; j < m; j++) {\n      if (str[i][j] == '#')\n        if (!check(i, j)) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n    }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  char ch[105][105];\n  int n, m, i, j, k, s;\n  cin >> n >> m;\n  for (i = 0; i < n; i++) {\n    scanf(\"%s\", ch[i]);\n  }\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < m; j++) {\n      if (ch[i][j] == '#') {\n        int flag = 1;\n        for (s = 0; s < n; s++) {\n          if (ch[s][j] == '#') {\n            for (k = 0; k < m; k++) {\n              if (ch[i][k] != ch[s][k]) {\n                flag = 0;\n              }\n            }\n          }\n        }\n        if (flag == 0) {\n          cout << \"No\";\n          return 0;\n        }\n      }\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\nimport java.io.*;\n\n\npublic class Main {\n\n    void solve(){\n        int n=ni(),m=ni();\n        char s[][]=new char[n][m];\n        for(int i=0;i<n;i++) s[i]=ns().toCharArray();\n        char ans[][]=new char[n][m];\n        ArrayList<Integer> vr[]=new ArrayList[n];\n        ArrayList<Integer> vc[]=new ArrayList[m];\n        for(int i=0;i<n;i++) vr[i]=new ArrayList<>();\n\n        for(int i=0;i<m;i++){\n            vc[i]=new ArrayList<>();\n        }\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(s[i][j]=='#') vr[i].add(j);\n            }\n        }\n        for(int j=0;j<m;j++){\n            for(int i=0;i<n;i++){\n                if(s[i][j]=='#'){\n                    vc[j].add(i);\n                }\n            }\n        }\n        for(int j=0;j<m;j++){\n                for(int id=1;id<vc[j].size();id++){\n                    int r1=vc[j].get(id),r2=vc[j].get(id-1);\n                    if(vr[r1].size()!=vr[r2].size()){\n                        pw.println(\"No\");\n                        return;\n                    }\n                    for(int i=0;i<vr[r1].size();i++){\n                        if(vr[r1].get(i)!=vr[r2].get(i)){\n                            pw.println(\"No\");\n                            return;\n                        }\n                    }\n                }\n        }\n        pw.println(\"Yes\");\n\n    }\n\n\n\n\n    long M=(long)1e9+7;\n    InputStream is;\n    PrintWriter pw;\n    String INPUT = \"\";\n    void run() throws Exception {\n        is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\n        pw = new PrintWriter(System.out);\n        long s = System.currentTimeMillis();\n        solve();\n        pw.flush();\n        if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+\"ms\");\n    }\n\n    public static void main(String[] args) throws Exception { new Main().run(); }\n\n    private byte[] inbuf = new byte[1024];\n    public int lenbuf = 0, ptrbuf = 0;\n\n    private int readByte() {\n        if(lenbuf == -1)throw new InputMismatchException();\n        if(ptrbuf >= lenbuf){\n            ptrbuf = 0;\n            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }\n            if(lenbuf <= 0)return -1;\n        }\n        return inbuf[ptrbuf++];\n    }\n\n    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }\n    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }\n\n    private double nd() { return Double.parseDouble(ns()); }\n    private char nc() { return (char)skip(); }\n\n    private String ns() {\n        int b = skip();\n        StringBuilder sb = new StringBuilder();\n        while(!(isSpaceChar(b))){ // when nextLine, (isSpaceChar(b) && b != ' ')\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n\n    private char[] ns(int n) {\n        char[] buf = new char[n];\n        int b = skip(), p = 0;\n        while(p < n && !(isSpaceChar(b))){\n            buf[p++] = (char)b;\n            b = readByte();\n        }\n        return n == p ? buf : Arrays.copyOf(buf, p);\n    }\n\n    private char[][] nm(int n, int m) {\n        char[][] map = new char[n][];\n        for(int i = 0;i < n;i++)map[i] = ns(m);\n        return map;\n    }\n\n    private int[] na(int n) {\n        int[] a = new int[n];\n        for(int i = 0;i < n;i++)a[i] = ni();\n        return a;\n    }\n\n    private int ni() {\n        int num = 0, b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n\n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n\n    private long nl() {\n        long num = 0;\n        int b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n\n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n\n    private void tr(Object... o) { if(INPUT.length() > 0)System.out.println(Arrays.deepToString(o)); }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nbool debug = 0;\nint n, m, k;\nint dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\nstring direc = \"RDLU\";\nlong long ln, lk, lm;\nvoid etp(bool f = 0) {\n  puts(f ? \"YES\" : \"NO\");\n  exit(0);\n}\nvoid addmod(int &x, int y, int mod = 1000000007) {\n  assert(y >= 0);\n  x += y;\n  if (x >= mod) x -= mod;\n  assert(x >= 0 && x < mod);\n}\nvoid et() {\n  puts(\"-1\");\n  exit(0);\n}\nlong long fastPow(long long x, long long y, int mod = 1000000007) {\n  long long ans = 1;\n  while (y > 0) {\n    if (y & 1) ans = (x * ans) % mod;\n    x = x * x % mod;\n    y >>= 1;\n  }\n  return ans;\n}\nlong long gcd1(long long x, long long y) {\n  long long z = y;\n  while (x % y != 0) {\n    z = x % y;\n    x = y;\n    y = z;\n  }\n  return z;\n}\nchar s[105];\nset<long long> sp;\nvoid fmain(int ID) {\n  scanf(\"%d%d\", &n, &m);\n  for (int(i) = 1; (i) <= (int)(n); (i)++) {\n    scanf(\"%s\", s);\n    long long z = 0;\n    for (int(j) = 0; (j) < (int)(m); (j)++)\n      if (s[j] == '#') {\n        z += 1LL << j;\n      }\n    sp.insert(z);\n  }\n  for (long long x : sp)\n    for (long long y : sp)\n      if (x != y) {\n        if ((x & y) != 0) etp();\n      }\n  etp(1);\n}\nint main() {\n  int t = 1;\n  for (int(i) = 1; (i) <= (int)(t); (i)++) {\n    fmain(i);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "def main():\n    n, m = map(int, input().split())\n    aa, bb = [{i for i, c in enumerate(input()) if c == '#'} for _ in range(n)], []\n    for a in aa:\n        if a:\n            for b in bb:\n                c = a & b\n                if c and a != b:\n                    print('No')\n                    return\n            bb.append(a)\n    print('Yes')\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "language": 3,
            "solution": "n,m=map(int,input().split())\na=[]\nb=[]\nfor i in range(n):\n    a.append(input())\n    s=''\n    for j in a[i]:\n        if j=='#':\n            s+='1'\n        else:\n            s+='0'\n    b.append(s)\nfor i in range(n):\n    for j in range(i,n):\n        if a[i]!=a[j]:\n            if '2' in str(int(b[i]) + int(b[j])):\n                print('No')\n                exit()\nprint('Yes')\n            "
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nT = [[] for i in range(n)]\nfor i in range(n):\n    a = list(input())\n    T[i] = a\n\nR = [[] for i in range(n) ]\nfor i in range(n):\n    for j in range(m):\n        if T[i][j] == \"#\":\n            R[i].append(j)\n\nflag = True\nfor i in range(n):\n    for j in range(n):\n        if len(set(R[i]) & set(R[j])) == len(set(R[i])) or len(set(R[i]) & set(R[j])) == 0:\n            continue\n        else:\n            flag = False\n            break\n\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")"
        },
        {
            "language": 3,
            "solution": "n, m = map(int, input().split())\nx = []\nfor i in range(n):\n\tq = []\n\ty = input()\n\tfor j in y:\n\t\tq.append(j)\n\tx.append(q)\nind = True\t\nfor i in range(n):\n\tfor j in range(m):\n\t\tif x[i][j] == \"#\":\n\t\t\tfor k in range(i + 1, n):\n\t\t\t\tif x[k][j] == \"#\" and x[k] != x[i]:\n\t\t\t\t\tind = False\n\t\t\t\t\tbreak\nif ind:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\t\t\t\t\n\n\n"
        },
        {
            "language": 3,
            "solution": "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return map(int, stdin.readline().split())\n#lines = stdin.readlines()\n\n\nr, c = rint()\n\nmat = []\nfor i in range(r):\n    tmp = input()\n    tmp = \"\".join([\"0\" if s is \".\" else \"1\" for s in tmp])\n    mat.append(tmp)\nfor i in range(r):\n    l = mat[i]\n    li = int(l,2)\n    if li == 0:\n        continue\n    for j in range(i, r):\n        l = mat[j]\n        lj = int(l,2)\n        if li & lj != 0 and li != lj:\n            print(\"No\")\n            exit()\n\nprint(\"Yes\")"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstring s[55];\nint main() {\n  cin.tie(0);\n  ios_base::sync_with_stdio(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> s[i];\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      bool same = 1, flag = 1;\n      for (int k = 0; k < m; k++) {\n        if (s[i][k] != s[j][k]) same = 0;\n        if (s[i][k] == '#' && s[j][k] == '#') flag = 0;\n      }\n      if (!same && !flag) return cout << \"No\\n\", 0;\n    }\n  }\n  cout << \"Yes\\n\";\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long maxi = LLONG_MIN;\nlong long mini = LLONG_MAX;\nvoid fast() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n}\nlong long t, i, j, k, n, temp, flag, ans, m;\nint main() {\n  cin >> n >> m;\n  vector<string> s(n);\n  for (i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n  vector<long long> r(n, -1);\n  vector<long long> c(m, -1);\n  for (i = 0; i < n; i++) {\n    if (r[i] == -1) {\n      for (j = i; j < n; j++) {\n        if (s[i] == s[j] && r[j] == -1) {\n          r[j] = i;\n        }\n      }\n      for (j = 0; j < m; j++) {\n        if (s[i][j] == '#') {\n          if (c[j] != -1) {\n            flag = -1;\n          } else {\n            c[j] = i;\n          }\n        }\n      }\n    }\n  }\n  if (flag == -1) {\n    cout << \"No\";\n  } else {\n    cout << \"Yes\";\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nint n, m;\nchar s[55][55];\nbool chk_col(int c1, int c2) {\n  for (int i = 0; i < n; i++)\n    if (s[i][c1] != s[i][c2]) return false;\n  return true;\n}\nbool chk_row(int r1, int r2) {\n  for (int j = 0; j < m; j++)\n    if (s[r1][j] != s[r2][j]) return false;\n  return true;\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) scanf(\"%s\", s[i]);\n  for (int i = 0; i < n; i++) {\n    int last = -1;\n    for (int j = 0; j < m; j++)\n      if (s[i][j] == '#') {\n        if (last >= 0 && !chk_col(last, j)) {\n          puts(\"No\");\n          return 0;\n        }\n        last = j;\n      }\n  }\n  for (int j = 0; j < m; j++) {\n    int last = -1;\n    for (int i = 0; i < n; i++)\n      if (s[i][j] == '#') {\n        if (last >= 0 && !chk_row(last, i)) {\n          puts(\"No\");\n          return 0;\n        }\n        last = i;\n      }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nvector<string> v;\nbool used[55];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    v.push_back(s);\n  }\n  sort(v.begin(), v.end());\n  v.erase(unique(v.begin(), v.end()), v.end());\n  int yes = 1;\n  for (int i = 0; i < v.size(); i++) {\n    for (int j = 0; j < m; j++) {\n      if (v[i][j] == '#') {\n        if (used[j]) {\n          yes = 0;\n          break;\n        }\n        used[j] = 1;\n      }\n    }\n  }\n  if (yes)\n    printf(\"Yes\");\n  else\n    printf(\"No\");\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "def main():\n    n,m=map(long,raw_input().split())\n    k=[]\n    p=[]\n    for i in xrange(n):\n        p.append(raw_input())\n    \n    m=set(p)\n    for i in m:\n        for c,v in enumerate(i):\n            if v==\"#\":\n                k.append(c)\n    g=set(k)\n    for i in g:\n        if k.count(i)>1:\n            print \"No\"\n            exit()\n    print \"Yes\"\n                \n    \n    \n    \n        \nmain()"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\n#pragma comment(linker, \"/stack:200000000\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#pragma GCC optimize(\"unroll-loops\")\nusing namespace std;\ntemplate <typename T>\nconstexpr int infValue =\n    std::is_same<T, int>::value ? 2000000007 : 8600000000000000007ll;\ntemplate <typename T>\nconstexpr int maxValue =\n    std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;\nconst int INF = infValue<int>;\nconst int MOD = 1000000007ll;\nconst double EPS = 1e-6;\nconst int MAX = maxValue<int>;\nint n, m;\nstring s[101];\nbool ok = true;\nint main(void) {\n  scanf(\"%d %d\", &n, &m);\n  for (register int i = 0; i < n; ++i) cin >> s[i];\n  sort(s, s + n);\n  n = unique(s, s + n) - s;\n  for (register int i = 0; i < n; ++i) {\n    for (register int j = i + 1; j < n; ++j) {\n      for (register int k = 0; k < m; ++k) {\n        if (s[i][k] == s[j][k] && s[i][k] == '#') ok = false;\n      }\n    }\n  }\n  puts(ok ? \"Yes\" : \"No\");\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "t=set(input()for _ in [0]*int(input().split()[0]))\nprint(['No','Yes'][all(sum(c<'.'for c in s)<2for s in zip(*t))])"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 55;\nint n, m;\nchar a[N][N];\nvector<int> row[N];\nvector<int> col[N];\nbool possible;\nbool checked[N];\nbool same(int idx1, int idx2) {\n  if (row[idx1].size() != row[idx2].size()) return false;\n  for (int i = 0; i < row[idx1].size(); i++)\n    if (row[idx1][i] != row[idx2][i]) return false;\n  return true;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  fopen(\"input.txt\", \"r\");\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> a[i][j];\n      if (a[i][j] == '#') {\n        row[i].push_back(j);\n        col[j].push_back(i);\n      }\n    }\n  }\n  possible = true;\n  for (int i = 1; i <= n && possible; i++) {\n    if (!checked[i]) {\n      for (int j = 0; j < row[i].size() && possible; j++) {\n        for (int k = 0; k < col[row[i][j]].size() && possible; k++) {\n          int u = col[row[i][j]][k];\n          if (!same(i, u)) {\n            possible = false;\n          } else\n            checked[u] = true;\n        }\n      }\n    }\n    checked[i] = true;\n  }\n  if (possible)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long INF = 9223372036854775807LL;\nconst long long SMALL_INF = 2147483647;\nconst long long NSIZE = 1e+5 + 1;\nconst long long MOD = 1000000007;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<vector<char> > a(n, vector<char>(m));\n  vector<int> r(n);\n  vector<int> c(m);\n  bool pos = true;\n  int mve = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> a[i][j];\n      if (a[i][j] == '.') continue;\n      if (r[i] == 0 && c[j] == 0) {\n        mve++;\n        r[i] = c[j] = mve;\n      } else if (r[i] > c[j]) {\n        c[j] = r[i];\n      } else {\n        r[i] = c[j];\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '.' && r[i] > 0 && c[j] > 0 && r[i] == c[j]) {\n        pos = false;\n      } else if (a[i][j] == '#' && r[i] == 0 && c[j] == 0) {\n        pos = false;\n      } else if (a[i][j] == '#' && r[i] != c[j]) {\n        pos = false;\n      }\n    }\n  }\n  if (pos)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n};\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 60;\nint n, m, ans;\nstring s;\nvector<int> row[maxn], col[maxn];\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    cin >> s;\n    for (int j = 1; j <= m; j++) {\n      if (s[j - 1] == '#') {\n        row[i].push_back(j);\n        col[j].push_back(i);\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (auto x : row[i]) {\n      for (auto y : row[i]) {\n        if (col[y] != col[x]) {\n          ans = 1;\n        }\n      }\n    }\n  }\n  if (ans == 1) {\n    cout << \"No\" << endl;\n    return 0;\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n  int n, m;\n  cin >> n >> m;\n  vector<string> grid(n);\n  for (int i = 0; i < n; i++) cin >> grid[i];\n  bool valid = true;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (grid[i][j] == '.') continue;\n      for (int k = 0; k < n; k++) {\n        if (grid[k][j] == '#' && grid[k] != grid[i]) valid = false;\n      }\n    }\n  }\n  if (valid)\n    cout << \"Yes\" << endl;\n  else\n    cout << \"No\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nstatic const int MAXN = 50 + 5;\nstring r[MAXN], c[MAXN];\nint n, m;\nint main() {\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) cin >> r[i];\n  for (int i = 0; i < m; i++)\n    for (int j = 0; j < n; j++) c[i] = c[i] + r[j][i];\n  for (int i = 0; i < n; i++) {\n    set<int> S;\n    for (int j = 0; j < m; j++) {\n      if (r[i][j] == '#') S.insert(j);\n    }\n    for (auto it : S) {\n      if (c[it] == c[*S.begin()])\n        continue;\n      else {\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\nimport java.nio.charset.StandardCharsets;\n// import java.math.BigInteger;\n\n// remember to check if n=0, n=1 are special cases \n\npublic class B {\n    static Writer wr;\n\n    public static void main(String[] args) throws Exception {\n        // long startTime = System.nanoTime();\n\n        // String testString = \"\";\n        // InputStream stream = new ByteArrayInputStream(testString.getBytes(StandardCharsets.UTF_8));\n        // Reader in = new Reader(stream);\n\n        Reader in = new Reader();\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n        \n        wr = new Writer();\n\n        /* Precomputation */\n\n\n        // long elapsedTime = System.nanoTime() - startTime;\n        // double seconds = (double)elapsedTime / 1000000000.0;\n        // wr.writeRedLn(seconds);\n\n        /* Input */\n        int N = in.nextInt();\n        int M = in.nextInt();\n\n        boolean[][] grid = new boolean[N][M];\n\n        for(int i=0;i<N;i++) {\n            for(int j=0;j<M;j++) {\n                char ch = in.nextChar();\n                grid[i][j] = (ch=='#' ? true : false);\n            }\n        }\n\n        int[] count_col_wise = new int[M];\n\n        for(int i=0;i<M;i++) {\n            int count=0;\n            for(int j=0;j<N;j++) {\n                if(grid[j][i]) count++;\n            }\n            count_col_wise[i] = count;\n        }\n\n        boolean ans = true;\n        outer:\n        for(int i=0;i<N;i++) {\n            int cc=0;\n            int prev_count=0;\n            int prev_j=0;\n            for(int j=0;j<M;j++) {\n                if(grid[i][j]) {\n                    cc++;\n                    if(cc>1) {\n                        if(count_col_wise[j] != prev_count) {\n                            ans = false;\n                            break outer;\n                        }\n                        for(int p=0;p<N;p++) {\n                            if(grid[p][prev_j]!=grid[p][j]) {\n                                ans = false;\n                                break outer;\n                            }\n                        }\n                        \n                    }\n                    prev_j = j;\n                    prev_count = count_col_wise[j];\n                    // wr.writeRedLn(i + \", \" + j + \", \" + prev_count);\n                }\n            }\n        }\n\n        \n\n        if(ans)\n            out.write(\"Yes\\n\");\n        else\n            out.write(\"No\\n\");\n        out.flush();\n    }\n}\n\n\n\nclass Writer {\n    public void writeRedLn(Object x) { writeRedLn(x+\"\"); }\n    public void writeBlueLn(Object x) { writeBlueLn(x+\"\"); }\n    public void writeGreenLn(Object x) { writeGreenLn(x+\"\"); }\n    public void writePinkLn(Object x) { writePinkLn(x+\"\"); }\n    public void writeRedLn(String x) { System.out.println((char)27 + \"[31m\" + (char)27 + \"[40m\" + x + (char)27 + \"[0m\"); }\n    public void writeBlueLn(String x) { System.out.println((char)27 + \"[34m\" + (char)27 + \"[3m\" + x + (char)27 + \"[0m\"); }\n    public void writeGreenLn(String x) { System.out.println((char)27 + \"[32m\" + (char)27 + \"[3m\" + x + (char)27 + \"[0m\"); }\n    public void writePinkLn(String x) { System.out.println((char)27 + \"[30m\" + (char)27 + \"[45m\" + x + (char)27 + \"[0m\"); }\n    public void writeRed(String x) { System.out.print((char)27 + \"[31m\" + (char)27 + \"[40m\" + x + (char)27 + \"[0m\"); }\n    public void writeBlue(String x) { System.out.print((char)27 + \"[34m\" + (char)27 + \"[3m\" + x + (char)27 + \"[0m\"); }\n    public void writeGreen(String x) { System.out.print((char)27 + \"[32m\" + (char)27 + \"[3m\" + x + (char)27 + \"[0m\"); }\n    public void writePink(String x) { System.out.print((char)27 + \"[30m\" + (char)27 + \"[45m\" + x + (char)27 + \"[0m\"); }\n}\n\n\nclass Reader {\n    final private int BUFFER_SIZE = 1 << 16;private DataInputStream din;private byte[] buffer;private int bufferPointer, bytesRead;\n    public Reader(){din=new DataInputStream(System.in);buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;}\n    public Reader(InputStream stream){din=new DataInputStream(stream);buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;}\n    public String readLine()throws IOException{byte[] buf=new byte[1024];int cnt=0,c;\n        while((c=read())!=-1){if(c=='\\n')break;buf[cnt++]=(byte)c;}return new String(buf,0,cnt);}\n    public char nextChar()throws IOException{byte c=read();while(c<=' ')c=read();return (char)c;}\n    public int nextInt()throws IOException{int ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');\n        if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;} \n    public long nextLong()throws IOException{long ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');\n        if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;}\n    public double nextDouble()throws IOException{double ret=0,div=1;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c = read();do {ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');\n        if(c=='.')while((c=read())>='0'&&c<='9')ret+=(c-'0')/(div*=10);if(neg)return -ret;return ret;}\n    private void fillBuffer()throws IOException{bytesRead=din.read(buffer,bufferPointer=0,BUFFER_SIZE);if(bytesRead==-1)buffer[0]=-1;}\n    private byte read()throws IOException{if(bufferPointer==bytesRead)fillBuffer();return buffer[bufferPointer++];}\n    public void close()throws IOException{if(din==null) return;din.close();}\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class c2 {\n\tpublic static void main(String args[]) {\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=scan.nextInt();\n\t\tint m=scan.nextInt();\n\t\tscan.nextLine();\n\t\t\n\t\tHashMap<ArrayList<Integer>,ArrayList<Integer>> map=new HashMap<ArrayList<Integer>,ArrayList<Integer>>();\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tString s=scan.nextLine();\n\t\t\tArrayList<Integer> list=new ArrayList<Integer>();\n\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\tif(s.charAt(j)=='#') {\n\t\t\t\t\tlist.add(j);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(map.containsKey(list)) {\n\t\t\t\tArrayList<Integer> l=map.get(list);\n\t\t\t\tl.add(i);\n\t\t\t\tmap.put(list, l);\n\t\t\t}else {\n\t\t\t\tmap.put(list, new ArrayList<Integer>());\n\t\t\t}\n\t\t}\n\t\tHashSet<Integer> setkey=new HashSet<Integer>();\n\t\tint flag=0;\n\t\tHashSet<Integer> setValue=new HashSet<Integer>();\n\t\tfor(ArrayList l: map.keySet()) {\n\t\t\tfor(int i=0;i<l.size();i++) {\n\t\t\t\tif(setkey.contains(l.get(i))) {\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}else {\n\t\t\t\t\tsetkey.add((Integer) l.get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrayList t=map.get(l);\n\t\t\tfor(int i=0;i<t.size();i++) {\n\t\t\t\tif(setValue.contains(t.get(i))) {\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}else {\n\t\t\t\t\tsetValue.add((Integer)t.get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tSystem.out.println(\"Yes\");\n\t\treturn;\n\t}\n\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nstatic const int MAXN = 53;\nstatic int n, m;\nstatic bool a[MAXN][MAXN];\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  getchar();\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j <= m; ++j) {\n      a[i][j] = (getchar() == '#');\n    }\n  }\n  for (int i = 0; i < n - 1; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n      bool all_same = true, no_intersect = true;\n      for (int k = 0; k < m; ++k) {\n        if (a[i][k] != a[j][k]) {\n          all_same = false;\n        }\n        if (a[i][k] && a[j][k]) {\n          no_intersect = false;\n        }\n      }\n      if (!all_same && !no_intersect) {\n        puts(\"No\");\n        return 0;\n      }\n    }\n  }\n  puts(\"Yes\");\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nbool h[50], v[50];\nchar g[50][50];\nset<int> r, c;\nvoid DFS(int idx, bool row) {\n  if (row) {\n    h[idx] = true;\n    r.insert(idx);\n    for (int i = 0; i < m; i++) {\n      if (g[idx][i] == '#' && !v[i]) {\n        DFS(i, 0);\n        c.insert(i);\n      }\n    }\n  } else {\n    v[idx] = true;\n    c.insert(idx);\n    for (int i = 0; i < n; i++) {\n      if (g[i][idx] == '#' && !h[i]) {\n        DFS(i, 1);\n        r.insert(i);\n      }\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> g[i][j];\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (!h[i]) {\n      DFS(i, 1);\n      for (auto row = r.begin(); row != r.end(); row++) {\n        for (auto col = c.begin(); col != c.end(); col++) {\n          if (g[*row][*col] != '#') {\n            cout << \"No\";\n            return 0;\n          }\n        }\n      }\n      r.clear();\n      c.clear();\n    }\n  }\n  cout << \"Yes\";\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "\nimport java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class MysticalMosaic implements Closeable {\n\n    private InputReader in = new InputReader(System.in);\n    private PrintWriter out = new PrintWriter(System.out);\n    \n    private class DisjointSet {\n        private int[] root;\n        private int[] size;\n        \n        public DisjointSet(int n) {\n            root = new int[n];\n            size = new int[n];\n            for (int i = 0; i < n; i++) {\n                root[i] = i;\n                size[i] = 1;\n            }\n        }\n        \n        public int root(int x) {\n            return x == root[x] ? x : (root[x] = root(root[x]));\n        }\n        \n        public void join(int a, int b) {\n            int x = root(a), y = root(b);\n            if (x != y) {\n                if (size[x] < size[y]) y = x ^ y ^ (x = y);\n                size[x] += size[y];\n                root[y] = x;\n            }\n        }\n    }\n\n    public void solve() {\n        int n = in.ni();\n        m = in.ni();\n        grid = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            grid[i] = in.next().toCharArray();\n        }\n        DisjointSet dsu = new DisjointSet(n);\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (areSame(i, j)) {\n                    dsu.join(i, j);\n                }\n            }\n        }\n        boolean ok = true;\n        for (int i = 0; i < n; i++) {\n            if (dsu.root(i) == i) {\n                for (int j = 0; j < n; j++) {\n                    boolean different = true;\n                    if (dsu.root(j) != i) {\n                        for (int k = 0; k < m; k++) {\n                            different &= (grid[i][k] == '.' && grid[j][k] == '.') || (grid[i][k] != grid[j][k]);\n                        }\n                    }\n                    ok &= different;\n                }\n            }\n        }\n        out.println(ok ? \"Yes\" : \"No\");\n    }\n\n    private int m;\n    private char[][] grid;\n    \n    private boolean areSame(int x, int y) {\n        boolean same = true;\n        for (int i = 0; i < m; i++) {\n            same &= grid[x][i] == grid[y][i];   \n        }\n        return same;\n    }\n\n    @Override\n    public void close() throws IOException {\n        in.close();\n        out.close();\n    }\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int ni() {\n            return Integer.parseInt(next());\n        }\n\n        public long nl() {\n            return Long.parseLong(next());\n        }\n\n        public void close() throws IOException {\n            reader.close();\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        try (MysticalMosaic instance = new MysticalMosaic()) {\n            instance.solve();\n        }\n    }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long INF = 1e9;\nconst long long N = 5e1 + 1;\nconst long long mod = 1e9 + 7;\nconst long double eps = 1E-7;\nint n, m;\nqueue<pair<int, int> > q;\nvector<int> u[N], l[N];\nchar a[N][N], used[N][N];\nvoid solve(int x, int y) {\n  char d[N], r[N];\n  for (int i = 1; i <= max(n, m); i++) d[i] = r[i] = 0;\n  used[x][y] = d[x] = r[y] = 1;\n  q.push({x, y});\n  while (!q.empty()) {\n    pair<int, int> z = q.front();\n    q.pop();\n    x = z.first, y = z.second;\n    while (!u[x].empty()) {\n      int k = u[x].back();\n      u[x].pop_back();\n      if (!used[x][k]) {\n        q.push({x, k});\n        used[x][k] = r[k] = 1;\n      }\n    }\n    while (!l[y].empty()) {\n      int k = l[y].back();\n      l[y].pop_back();\n      if (!used[k][y]) {\n        q.push({k, y});\n        used[k][y] = d[k] = 1;\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    if (!d[i]) continue;\n    for (int j = 1; j <= m; j++) {\n      if (!r[j]) continue;\n      if (a[i][j] != '#') {\n        cout << \"No\";\n        exit(0);\n      }\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      cin >> a[i][j];\n      if (a[i][j] == '#') u[i].push_back(j), l[j].push_back(i);\n    }\n  }\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++)\n      if (!used[i][j] && a[i][j] == '#') solve(i, j);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (a[i][j] == '#' && !used[i][j]) {\n        cout << \"No\";\n        return 0;\n      }\n    }\n  }\n  cout << \"Yes\";\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.util.Scanner;\n\npublic class A924 {\n    static int R;\n    static int C;\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        R = in.nextInt();\n        C = in.nextInt();\n        boolean[][] black = new boolean[R][C];\n        for (int r=0; r<R; r++) {\n            String row = in.next();\n            for (int c=0; c<C; c++) {\n                if (row.charAt(c) == '#') {\n                    black[r][c] = true;\n                }\n            }\n        }\n        boolean ok = true;\n        main: for (int r=0; r<R; r++) {\n            for (int c=0; c<C; c++) {\n                if (black[r][c]) {\n                    boolean[] rows = new boolean[R];\n                    boolean[] columns = new boolean[C];\n                    select(r, c, black, rows, columns);\n                    for (int rr=0; rr<R; rr++) {\n                        if (rows[rr]) {\n                            for (int cc=0; cc<C; cc++) {\n                                if (columns[cc] && !black[rr][cc]) {\n                                    ok = false;\n                                    break main;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        System.out.println(ok ? \"Yes\" : \"No\");\n    }\n\n    static void select(int rSel, int cSel, boolean[][] black, boolean[] rows, boolean[] columns) {\n        if (!rows[rSel]) {\n            rows[rSel] = true;\n            for (int c=0; c<C; c++) {\n                if (black[rSel][c]) {\n                    select(rSel, c, black, rows, columns);\n                }\n            }\n        }\n        if (!columns[cSel]) {\n            columns[cSel] = true;\n            for (int r=0; r<R; r++) {\n                if (black[r][cSel]) {\n                    select(r, cSel, black, rows, columns);\n                }\n            }\n        }\n    }\n\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\n\npublic class B {\n\n    void solve() {\n        int n = in.nextInt();\n        int m = in.nextInt();\n        char[][] map = in.nextCharMap(n, m);\n        for (int i = 0; i <n; i++) {\n            boolean[] black = new boolean[m];\n            int total = 0;\n            for (int j = 0; j < m; j++) {\n                if (map[i][j] != '.') {\n                    black[j] = true;\n                    total++;\n                }\n            }\n\n            for (int j = i + 1; j < n; j++) {\n                int match = 0;\n                int newTotal = 0;\n                for (int k = 0; k < m; k++) {\n                    if (map[j][k] != '.') {\n                        newTotal++;\n                        if (black[k]) {\n                            match++;\n                        }\n                    }\n                }\n                if (match != 0 && (match != total || newTotal != total)) {\n                    out.println(\"No\");\n                    return;\n                }\n            }\n        }\n        out.println(\"Yes\");\n        \n    }\n\n    Scanner in;\n    PrintWriter out;\n\n    void run() {\n        try {\n            in = new Scanner(new File(\"A.in\"));\n            out = new PrintWriter(new File(\"A.out\"));\n\n            solve();\n\n            out.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    void runIO() {\n\n        in = new Scanner(System.in);\n        out = new PrintWriter(System.out);\n\n        solve();\n\n        out.close();\n    }\n\n    class Scanner {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public Scanner(File f) {\n            try {\n                br = new BufferedReader(new FileReader(f));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public Scanner(InputStream f) {\n            br = new BufferedReader(new InputStreamReader(f));\n        }\n\n        String next() {\n            while (st == null || !st.hasMoreTokens()) {\n                String s = null;\n                try {\n                    s = br.readLine();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (s == null)\n                    return null;\n                st = new StringTokenizer(s);\n            }\n            return st.nextToken();\n        }\n\n        private boolean isSpaceChar(int c) {\n            return !(c >= 33 && c <= 126);\n        }\n\n        private int skip() {\n            int b;\n            while ((b = read()) != -1 && isSpaceChar(b)) ;\n            return b;\n        }\n\n        private int read() {\n            int res = -1;\n            try {\n                res = br.read();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return res;\n        }\n\n        char[] nextCharArray(int size) {\n            return in.next().toCharArray();\n        }\n\n        char[][] nextCharMap(int n, int m) {\n            char[][] map = new char[n][];\n            for (int i = 0; i < n; i++) {\n                map[i] = nextCharArray(m);\n            }\n            return map;\n        }\n\n        int[] na(int n) {\n            int[] arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = in.nextInt();\n            }\n            return arr;\n        }\n\n        boolean hasMoreTokens() {\n            while (st == null || !st.hasMoreTokens()) {\n                String s = null;\n                try {\n                    s = br.readLine();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                if (s == null)\n                    return false;\n                st = new StringTokenizer(s);\n            }\n            return true;\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n\n    public static void main(String[] args) {\n        new B().runIO();\n    }\n}"
        },
        {
            "language": 4,
            "solution": "import java.util.*;\n\npublic class B {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint r = sc.nextInt(), c = sc.nextInt();\n\t\tchar g[][] = new char[r][];\n\t\tfor(int i=0;i<r;i++)\tg[i] = sc.next().toCharArray();\n\t\t\n\t\tboolean f = true;\n\t\tfor(int i=0;i<r;i++){\n\t\t\tfor(int j = i+1;j<r;j++){\n\t\t\t\tint cntsame = 0;\n\t\t\t\tint cnt1=0;\n\t\t\t\tint cnt2=0;\n\t\t\t\t\n\t\t\t\tfor(int k = 0;k<c;k++){\n\t\t\t\t\tif(g[i][k]=='#' && g[j][k]=='#')\n\t\t\t\t\t\tcntsame++;\n\t\t\t\t\tif(g[i][k]=='#')\n\t\t\t\t\t\tcnt1++;\n\t\t\t\t\tif(g[j][k]=='#')\n\t\t\t\t\t\tcnt2++;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(cntsame != 0 && (cnt1!=cntsame || cnt2!=cntsame))\n\t\t\t\t\tf = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(f?\"Yes\":\"No\");\n\t}\n}\n"
        },
        {
            "language": 4,
            "solution": "//package CFMAR24;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Q2 {\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader() {\n            reader = new BufferedReader(new InputStreamReader(System.in), 32768);\n            tokenizer = null;\n        }\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(System.in), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public char nextChar() {\n            return next().charAt(0);\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n\n    public static void main(String[] args) {\n\n\n        InputReader in = new InputReader();\n        int N = in.nextInt();\n        int M = in.nextInt();\n\n        String input1[] = new String[N];\n\n        for (int i = 0; i < N; i++) {\n            input1[i] = in.next();\n        }\n\n\n        char input[][] = new char[N][M];\n\n        for (int l = 0; l < N; l++) {\n            for (int j = 0; j < M; j++)\n                input[l][j] = input1[l].charAt(j);\n        }\n\n\n        if (N == 1 || M==1) {\n            System.out.println(\"Yes\");\n            return;\n        }\n\n        int flag = 0,target;\n        int ans[][] = new int[N][M];\n\n        for (int i = 0; i < N; i++) {\n\n            flag = 0;\n            target=-1;\n\n            for (int j = 0; j < M; j++) {\n\n                if (input[i][j] == '#') {\n\n                    if (ans[i][j] != 0 && flag == 0) {\n\n                     //   System.out.println(ans[i][j]);\n                        if(target==-1)\n                            target=ans[i][j];\n                        else if(target!=ans[i][j]){\n\n                         //   System.out.println(ans[i][j]);\n                            System.out.println(\"No\");\n                            return;\n                        }\n\n                        continue;\n                    } else {\n                        flag = 1;\n                    }\n\n\n\n\n                    for (int k = i; k < N; k++) {\n\n                        if (input[k][j] == '#') {\n\n                            if (ans[k][j] != 0) {\n                                System.out.println(\"No\");\n                                return;\n                            }\n                            ans[k][j] = i + 1;\n                            //      ans1[i]++;\n                        }\n\n                    }\n\n\n                }\n\n\n            }\n        }\n\n\n        for(int i=0;i<N;i++){\n            int target1=-1;\n            for(int j=0;j<M;j++){\n\n\n                if(ans[i][j]!=0){\n\n                    if(target1==-1){\n                        target1=ans[i][j];\n                        continue;\n                    }\n\n                    if(target1!=ans[i][j]){\n                        System.out.println(\"No\");\n                        return;\n                    }\n\n\n                }\n\n\n\n            }\n        }\n\n\n\n\n        int sol[] = new int[N+1];\n\n        for (int l = 0; l < N;l++) {\n            int count = 0,val=0;\n            for (int j = 0; j < M; j++) {\n                if (ans[l][j] != 0) {\n                    val=ans[l][j];\n//                    val=ans[l][j];\n\n                    count++;\n                }\n            }\n\n            if(sol[val]==0) {\n                sol[val] =count;\n            }else{\n                if(sol[val]!=count){\n  ///                  System.out.println(val+ \" \"+count);\n                    System.out.println(\"No\");\n                    return;\n                }\n            }\n        }\n\n\n        System.out.println(\"Yes\");\n\n    }\n}"
        },
        {
            "language": 3,
            "solution": "a,b=map(int,input().split())\nz=[0]*a\nk=[input() for _ in \" \"*a]\nok=1\nfor i in range(a):\n    if z[i]:continue\n    t=[0]*b\n    for j in range(b):\n        t[j]+=0+(k[i][j]=='#')\n    for j in range(i+1,a):\n        o=[0]*b\n        for x in range(b):\n            o[x]+=0+(k[j][x]=='#')\n        p=0\n        for x in range(b):\n            p+=0+(o[x]==t[x]==1)\n        if p!=0 :\n            if p!=t.count(1) or p!=o.count(1):ok=0\n            else:z[j]=1\nif ok:print(\"yes\")\nelse:print(\"no\")"
        },
        {
            "language": 3,
            "solution": "from collections import defaultdict\nr,c=map(int,input().split())\nh=defaultdict(list)\nflg=[]\nfor i in range(r):\n    st=input()\n    st=str(st)\n    y=[]\n    for j in range(c):\n        if st[j]=='#':\n            y.append(j)\n    if y in list(h.values()):\n        flg.append(1)\n#         print(1)\n    else:\n        for k in y:\n            for item in list(h.values()):\n                if k in item:\n                    flg.append(0)\n#                     print(2)\n                    break\n    h[i]=y\n#     print(list(h.values()),y)\nif 0 in flg:\n    print('No')\nelse:\n    print('Yes')"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 51;\nchar a[MAXN][MAXN];\nint id[MAXN];\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m;\n  cin >> n >> m;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cin >> a[i][j];\n    }\n  }\n  int cur = 1;\n  for (int i = 0; i < n; i++) {\n    vector<int> t;\n    for (int j = 0; j < m; j++) {\n      if (a[i][j] == '#') {\n        t.push_back(id[j]);\n      }\n    }\n    if (t.size() > 0) {\n      int elem = t[0];\n      for (int u : t) {\n        if (u != elem) {\n          cout << \"No\" << endl;\n          return 0;\n        }\n      }\n      if (elem == 0) {\n        for (int j = 0; j < m; j++) {\n          if (a[i][j] == '#') {\n            id[j] = cur;\n          }\n        }\n        cur += 1;\n      } else {\n        for (int j = 0; j < m; j++) {\n          if ((id[j] == elem) and (a[i][j] != '#')) {\n            cout << \"No\" << endl;\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n"
        },
        {
            "language": 4,
            "solution": "import java.io.*;\nimport java.util.*;\nimport java.math.BigInteger;\nimport java.util.Map.Entry;\n\nimport static java.lang.Math.*;\n\npublic class A extends PrintWriter {\n\n    void run() {\n        int n = nextInt(), m = nextInt();\n\n        boolean[][] b = new boolean[n][m];\n\n        for (int i = 0; i < n; i++) {\n            char[] str = next().toCharArray();\n            for (int j = 0; j < m; j++) {\n                b[i][j] = str[j] == '#';\n            }\n        }\n\n        int[] sizeR = new int[n];\n        int[][] listR = new int[n][m];\n\n        int[] sizeC = new int[m];\n        int[][] listC = new int[m][n];\n\n        for (int r = 0; r < n; r++) {\n            for (int c = 0; c < m; c++) {\n                if (b[r][c]) {\n                    listR[r][sizeR[r]++] = c;\n                    listC[c][sizeC[c]++] = r;\n                }\n            }\n        }\n\n        boolean[][] a = new boolean[n][m];\n\n        boolean[] useR = new boolean[n];\n        boolean[] useC = new boolean[m];\n        int[] qR = new int[n];\n        int[] qC = new int[m];\n\n        for (int r = 0; r < n; r++) {\n            if (useR[r]) {\n                continue;\n            }\n\n            for (int c = 0; c < m; c++) {\n                if (useC[c]) {\n                    continue;\n                }\n\n                if (b[r][c]) {\n                    int hr = 0, tr = 0;\n                    int hc = 0, tc = 0;\n\n                    qR[hr++] = r;\n                    qC[hc++] = c;\n\n                    useC[c] = true;\n                    useR[r] = true;\n\n                    while (hr != tr || hc != tc) {\n                        if (hr != tr) {\n                            int pr = qR[tr++];\n\n                            for (int id = sizeR[pr] - 1; id >= 0; id--) {\n                                int pc = listR[pr][id];\n\n                                if (useC[pc]) {\n                                    continue;\n                                }\n\n                                useC[pc] = true;\n                                qC[hc++] = pc;\n                            }\n                        }\n\n                        if (hc != tc) {\n                            int pc = qC[tc++];\n                            for (int id = sizeC[pc] - 1; id >= 0; id--) {\n                                int pr = listC[pc][id];\n\n                                if (useR[pr]) {\n                                    continue;\n                                }\n\n                                useR[pr] = true;\n                                qR[hr++] = pr;\n                            }\n                        }\n                    }\n\n                    for (int rid = 0; rid < hr; rid++) {\n                        for (int cid = 0; cid < hc; cid++) {\n                            a[qR[rid]][qC[cid]] = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        boolean ans = true;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n\n                ans &= a[i][j] == b[i][j];\n            }\n        }\n\n        if (ans) {\n            println(\"Yes\");\n        } else {\n            println(\"No\");\n\n        }\n\n    }\n\n    boolean skip() {\n        while (hasNext()) {\n            next();\n        }\n        return true;\n    }\n\n    int[][] nextMatrix(int n, int m) {\n        int[][] matrix = new int[n][m];\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++)\n                matrix[i][j] = nextInt();\n        return matrix;\n    }\n\n    String next() {\n        while (!tokenizer.hasMoreTokens())\n            tokenizer = new StringTokenizer(nextLine());\n        return tokenizer.nextToken();\n    }\n\n    boolean hasNext() {\n        while (!tokenizer.hasMoreTokens()) {\n            String line = nextLine();\n            if (line == null) {\n                return false;\n            }\n            tokenizer = new StringTokenizer(line);\n        }\n        return true;\n    }\n\n    int[] nextArray(int n) {\n        int[] array = new int[n];\n        for (int i = 0; i < n; i++) {\n            array[i] = nextInt();\n        }\n        return array;\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String nextLine() {\n        try {\n            return reader.readLine();\n        } catch (IOException err) {\n            return null;\n        }\n    }\n\n    public A(OutputStream outputStream) {\n        super(outputStream);\n    }\n\n    static BufferedReader reader;\n    static StringTokenizer tokenizer = new StringTokenizer(\"\");\n    static Random rnd = new Random();\n    static boolean OJ;\n\n    public static void main(String[] args) throws IOException {\n        OJ = System.getProperty(\"ONLINE_JUDGE\") != null;\n        A solution = new A(System.out);\n        if (OJ) {\n            reader = new BufferedReader(new InputStreamReader(System.in));\n            solution.run();\n        } else {\n            reader = new BufferedReader(new FileReader(new File(A.class.getName() + \".txt\")));\n            long timeout = System.currentTimeMillis();\n            while (solution.hasNext()) {\n                solution.run();\n                solution.println();\n                solution.println(\"----------------------------------\");\n            }\n            solution.println(\"time: \" + (System.currentTimeMillis() - timeout));\n        }\n        solution.close();\n        reader.close();\n    }\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing pii = pair<int, int>;\nconst int MAXN = 55;\nint n, m;\nstring s[MAXN];\nbool read() {\n  if (!(cin >> n >> m)) {\n    return 0;\n  }\n  for (int i = 0; i < int(n); ++i) {\n    cin >> s[i];\n  }\n  return 1;\n}\nbool solve() {\n  sort(s, s + n);\n  n = unique(s, s + n) - s;\n  vi used(m, 0);\n  for (int i = 0; i < int(n); ++i) {\n    for (int j = 0; j < int(m); ++j) {\n      if (s[i][j] == '#') {\n        if (used[j]) {\n          return 0;\n        }\n        used[j] = 1;\n      }\n    }\n  }\n  return 1;\n}\nint main() {\n  while (read()) {\n    cout << (solve() ? \"Yes\" : \"No\") << '\\n';\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint const maxN = 60;\nchar ar[maxN][maxN];\nint c_op[maxN], r_op[maxN];\nint main() {\n  memset(c_op, -1, sizeof(c_op));\n  memset(r_op, -1, sizeof(r_op));\n  int n, m;\n  scanf(\"%d%d\\n\", &n, &m);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%s\", ar[i]);\n  }\n  int op = 0;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (ar[i][j] == '#') {\n        if (r_op[i] == -1 && c_op[j] == -1) {\n          r_op[i] = c_op[j] = op++;\n        } else if (r_op[i] == -1 || c_op[j] == -1) {\n          int op = r_op[i] == -1 ? c_op[j] : r_op[i];\n          r_op[i] = c_op[j] = op;\n        } else if (r_op[i] != c_op[j]) {\n          printf(\"No\\n\");\n          return 0;\n        }\n      }\n    }\n  }\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      if (ar[i][j] == '.' && r_op[i] >= 0 && r_op[i] == c_op[j]) {\n        printf(\"No\\n\");\n        return 0;\n      }\n    }\n  }\n  printf(\"Yes\\n\");\n  return 0;\n}\n"
        },
        {
            "language": 1,
            "solution": "n, m = map(int, raw_input().split())\nl = []\nfor i in range(n):\n\tl.append(raw_input())\nfor i in range(n):\n\tfor j in range(m):\n\t\tif l[i][j] == '#':\n\t\t\tfor p in range(n):\n\t\t\t\tif l[p][j] == '#' and l[i] != l[p]:\n\t\t\t\t\tprint \"No\"\n\t\t\t\t\tquit()\nprint \"Yes\""
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nchar c[100][100];\nbool col[100];\nint main() {\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= m; ++j) cin >> c[i][j];\n  bool good = true;\n  for (int j = 1; j <= m && good; ++j)\n    for (int i = 1; i <= n && good; ++i)\n      if (c[i][j] == '#') {\n        for (int k = j + 1; k <= m; ++k)\n          if (c[i][k] == '#' && !col[k]) {\n            for (int t = 1; t <= n; ++t)\n              if (c[t][j] != c[t][k]) {\n                good = false;\n                break;\n              }\n          }\n        if (!good) break;\n      }\n  if (good)\n    cout << \"Yes\";\n  else\n    cout << \"No\";\n  return 0;\n}\n"
        },
        {
            "language": 3,
            "solution": "n, m = [int(i) for i in input().split()]\na, b, flag = [-1] * m, list(), True\nfor i in range(n):\n    s = input()\n    q = set()\n    for j in range(len(s)):\n        if s[j] == \"#\":\n            q.add(j)\n    for j in range(len(s)):\n        if s[j] == \"#\":\n            if a[j] == -1:\n                a[j] = i\n            else:\n                if b[a[j]] != q:\n                    flag = False\n    b.append(q)\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
        }
    ]
}