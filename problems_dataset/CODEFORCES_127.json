{
    "name": "127_C. Hot Bath",
    "source": "CODEFORCES",
    "description": "Bob is about to take a hot bath. \n\nThere are two taps to fill the bath: a hot water tap and a cold water tap. The cold water's temperature is t1, and the hot water's temperature is t2. The cold water tap can transmit any integer number of water units per second from 0 to x1, inclusive. Similarly, the hot water tap can transmit from 0 to x2 water units per second.\n\nIf y1 water units per second flow through the first tap and y2 water units per second flow through the second tap, then the resulting bath water temperature will be:\n\n<image>\n\nBob wants to open both taps so that the bath water temperature was not less than t0. However, the temperature should be as close as possible to this value. If there are several optimal variants, Bob chooses the one that lets fill the bath in the quickest way possible.\n\nDetermine how much each tap should be opened so that Bob was pleased with the result in the end.\n\nInput\n\nYou are given five integers t1, t2, x1, x2 and t0 (1 \u2264 t1 \u2264 t0 \u2264 t2 \u2264 106, 1 \u2264 x1, x2 \u2264 106).\n\nOutput\n\nPrint two space-separated integers y1 and y2 (0 \u2264 y1 \u2264 x1, 0 \u2264 y2 \u2264 x2).\n\nExamples\n\nInput\n\n10 70 100 100 25\n\n\nOutput\n\n99 33\n\nInput\n\n300 500 1000 1000 300\n\n\nOutput\n\n1000 0\n\nInput\n\n143 456 110 117 273\n\n\nOutput\n\n76 54\n\nNote\n\nIn the second sample the hot water tap shouldn't be opened, but the cold water tap should be opened at full capacity in order to fill the bath in the quickest way possible.",
    "difficulty": "C",
    "tags": [
        "binary search",
        "brute force",
        "math"
    ],
    "rating": 1900,
    "public_test": [
        {
            "input": "300 500 1000 1000 300\n",
            "output": "1000 0\n"
        },
        {
            "input": "10 70 100 100 25\n",
            "output": "99 33\n"
        },
        {
            "input": "143 456 110 117 273\n",
            "output": "76 54\n"
        }
    ],
    "generated_test": [
        {
            "input": "176902 1481077 847541 412251 587604\n",
            "output": "616526 283398\n"
        },
        {
            "input": "522321 902347 9246 842811 630561\n",
            "output": "9052 3605\n"
        },
        {
            "input": "99 99 171 99 99\n",
            "output": "171 99\n"
        },
        {
            "input": "0 1000000 1000000 1000000 500000\n",
            "output": "1000000 1000000\n"
        },
        {
            "input": "18515 251377 937 952 115397\n",
            "output": "473 337\n"
        },
        {
            "input": "5 5 103 1234 5\n",
            "output": "103 1234\n"
        },
        {
            "input": "61097 1323462 384947 188893 662044\n",
            "output": "196158 178224\n"
        },
        {
            "input": "353408 572330 121743 165573 557017\n",
            "output": "11080 147325\n"
        },
        {
            "input": "50 100 100 101 100\n",
            "output": "0 101\n"
        },
        {
            "input": "264234 975502 703094 487920 637713\n",
            "output": "337789 373479\n"
        },
        {
            "input": "10 10 101 100 10\n",
            "output": "101 100\n"
        },
        {
            "input": "632076 716031 1146 915 662639\n",
            "output": "1001 573\n"
        },
        {
            "input": "285510 831681 371051 849678 821409\n",
            "output": "13696 714532\n"
        },
        {
            "input": "2 5 3 5 5\n",
            "output": "0 5\n"
        },
        {
            "input": "1000 1000000 101000 1000000 1000000\n",
            "output": "0 1000000\n"
        },
        {
            "input": "1 10 0 10 10\n",
            "output": "0 10\n"
        },
        {
            "input": "10 14 1 2 13\n",
            "output": "0 2\n"
        },
        {
            "input": "127873 889327 5550 623544 385621\n",
            "output": "2777 1421\n"
        },
        {
            "input": "10 14 2 1 12\n",
            "output": "1 1\n"
        },
        {
            "input": "1 3 100 110 2\n",
            "output": "100 100\n"
        },
        {
            "input": "1000000 1001000 1000000 1000000 1000000\n",
            "output": "1000000 0\n"
        },
        {
            "input": "77248 918901 393457 621754 907250\n",
            "output": "8379 596909\n"
        },
        {
            "input": "2 3 1999 3444 2\n",
            "output": "1999 0\n"
        },
        {
            "input": "7 9 481 1475 9\n",
            "output": "0 1475\n"
        },
        {
            "input": "345903 808776 240052 245730 427389\n",
            "output": "127129 27162\n"
        },
        {
            "input": "1 100000 1001 1 2\n",
            "output": "1001 1\n"
        },
        {
            "input": "10 14 2 1 10\n",
            "output": "2 0\n"
        },
        {
            "input": "0 1 100 100 1\n",
            "output": "0 100\n"
        },
        {
            "input": "99065 826220 7 3 659285\n",
            "output": "0 3\n"
        },
        {
            "input": "1 1000001 1000000 1000000 999999\n",
            "output": "2 999998\n"
        },
        {
            "input": "129630 805489 341767 761110 577559\n",
            "output": "227930 447929\n"
        },
        {
            "input": "13612 793764 96 75 398584\n",
            "output": "39 38\n"
        },
        {
            "input": "1 1 1 2 1\n",
            "output": "1 2\n"
        },
        {
            "input": "463050 509065 994 1914 489428\n",
            "output": "938 1260\n"
        },
        {
            "input": "5 16 6361 6643 9\n",
            "output": "6356 3632\n"
        },
        {
            "input": "1000000 1000000 32 50 1000000\n",
            "output": "32 50\n"
        },
        {
            "input": "4 7 1614467 993245 7\n",
            "output": "0 993245\n"
        },
        {
            "input": "59039 133038 8 5 68239\n",
            "output": "7 1\n"
        },
        {
            "input": "471711 716156 949694 543785 663905\n",
            "output": "104502 384388\n"
        },
        {
            "input": "167 11134 3 2 4879\n",
            "output": "2 2\n"
        },
        {
            "input": "3 10 12087 204124 7\n",
            "output": "12087 16116\n"
        },
        {
            "input": "483180 855922 218842 233776 855647\n",
            "output": "141 190974\n"
        },
        {
            "input": "326999 979777 797049 494787 951112\n",
            "output": "22230 484006\n"
        },
        {
            "input": "10 20 5 2 13\n",
            "output": "4 2\n"
        },
        {
            "input": "300 300 1010 1000 300\n",
            "output": "1010 1000\n"
        },
        {
            "input": "300 500 1000 1100 300\n",
            "output": "1000 0\n"
        },
        {
            "input": "10 70 110 100 25\n",
            "output": "108 36\n"
        },
        {
            "input": "522321 902347 13708 842811 630561\n",
            "output": "13406 5339\n"
        },
        {
            "input": "29862 251377 937 952 115397\n",
            "output": "930 585\n"
        },
        {
            "input": "101600 1323462 384947 188893 662044\n",
            "output": "196007 166084\n"
        },
        {
            "input": "100 100 101 100 100\n",
            "output": "101 100\n"
        },
        {
            "input": "1 2 100 101 2\n",
            "output": "0 101\n"
        },
        {
            "input": "14 14 1 1 14\n",
            "output": "1 1\n"
        },
        {
            "input": "1000 1000 1010 1000 1000\n",
            "output": "1010 1000\n"
        },
        {
            "input": "176902 1481077 847541 593600 587604\n",
            "output": "616526 283398\n"
        },
        {
            "input": "353408 572330 62191 165573 557017\n",
            "output": "11080 147325\n"
        }
    ]
}