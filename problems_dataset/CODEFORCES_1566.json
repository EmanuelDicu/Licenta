{
    "name": "1566_H. Xor-quiz",
    "source": "CODEFORCES",
    "description": "This is an interactive problem.\n\nYou are given two integers c and n. The jury has a randomly generated set A of distinct positive integers not greater than c (it is generated from all such possible sets with equal probability). The size of A is equal to n.\n\nYour task is to guess the set A. In order to guess it, you can ask at most \u2308 0.65 \u22c5 c \u2309 queries.\n\nIn each query, you choose a single integer 1 \u2264 x \u2264 c. As the answer to this query you will be given the [bitwise xor sum](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of all y, such that y \u2208 A and gcd(x, y) = 1 (i.e. x and y are coprime). If there is no such y this xor sum is equal to 0.\n\nYou can ask all queries at the beginning and you will receive the answers to all your queries. After that, you won't have the possibility to ask queries.\n\nYou should find any set A', such that |A'| = n and A' and A have the same answers for all c possible queries.\n\nInput\n\nFirstly you are given two integers c and n (100 \u2264 c \u2264 10^6, 0 \u2264 n \u2264 c).\n\nInteraction\n\nIn the first line you should print an integer q (0 \u2264 q \u2264 \u2308 0.65 \u22c5 c \u2309) \u2014 the number of queries you want to ask. After that in the same line print q integers x_1, x_2, \u2026, x_q (1 \u2264 x_i \u2264 c) \u2014 the queries.\n\nFor these queries you should read q integers, i-th of them is the answer to the described query for x = x_i.\n\nAfter that you should print n distinct integers A'_1, A'_2, \u2026, A'_n \u2014 the set A' you found.\n\nIf there are different sets A' that have the same answers for all possible queries, print any of them.\n\nIf you will ask more than \u2308 0.65 \u22c5 c \u2309 queries or if the queries will be invalid, the interactor will terminate immediately and your program will receive verdict Wrong Answer.\n\nAfter printing the queries and answers do not forget to output end of line and flush the output buffer. Otherwise, you will get the Idleness limit exceeded verdict. To do flush use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * Read documentation for other languages. \n\n\n\nHacks\n\nYou cannot make hacks in this problem.\n\nExample\n\nInput\n\n\n10 6\n\n1 4 2 11 4 4 4\n\n\n\nOutput\n\n\n7 10 2 3 5 7 1 6\n\n1 4 5 6 8 10\n\nNote\n\nThe sample is made only for you to understand the interaction protocol. Your solution will not be tested on the sample.\n\nIn the sample A = \\{1, 4, 5, 6, 8, 10\\}. 7 queries are made, 7 \u2264 \u2308 0.65 \u22c5 10 \u2309 = 7, so the query limit is not exceeded.\n\nAnswers for the queries: \n\n  * For 10: 1 is the only number in the set A coprime with 10, so the answer is 1 \n  * For 2: 1_{10} \u2295 5_{10} = 001_2 \u2295 101_2 = 4_{10}, where \u2295 is the bitwise xor \n  * For 3: 1_{10} \u2295 4_{10} \u2295 5_{10} \u2295 8_{10} \u2295 10_{10} = 0001_2 \u2295 0100_2 \u2295 0101_2 \u2295 1000_2 \u2295 1010_2 = 2_{10} \n  * For 5: 1_{10} \u2295 4_{10} \u2295 6_{10} \u2295 8_{10} = 0001_2 \u2295 0100_2 \u2295 0110_2 \u2295 1000_2 = 11_{10} \n  * For 7: 1_{10} \u2295 4_{10} \u2295 5_{10} \u2295 6_{10} \u2295 8_{10} \u2295 10_{10} = 0001_2 \u2295 0100_2 \u2295 0101_2 \u2295 0110_2 \u2295 1000_2 \u2295 1010_2 = 4_{10} \n  * For 1: 1_{10} \u2295 4_{10} \u2295 5_{10} \u2295 6_{10} \u2295 8_{10} \u2295 10_{10} = 0001_2 \u2295 0100_2 \u2295 0101_2 \u2295 0110_2 \u2295 1000_2 \u2295 1010_2 = 4_{10} \n  * For 6: 1_{10} \u2295 5_{10} = 0001_2 \u2295 0101_2 = 4_{10} ",
    "difficulty": "H",
    "tags": [
        "constructive algorithms",
        "dp",
        "interactive",
        "math",
        "number theory"
    ],
    "rating": 3200,
    "public_test": [
        {
            "input": "10 6\n\n1 4 2 11 4 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        }
    ],
    "generated_test": [
        {
            "input": "104 48\n1 3 9 10 13 14 17 19 20 22 24 25 26 29 30 32 34 37 39 42 47 51 52 53 54 56 59 63 68 71 72 74 75 76 78 80 83 85 78 90 91 95 96 97 98 101 102 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 17 18 19 20 21 23 24 25 26 29 31 32 33 41 42 44 46 48 52 54 56 58 59 60 61 107 63 64 65 66 71 74 75 80 81 82 83 84 85 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 119 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 47 49 52 53 54 57 58 59 64 65 67 69 70 72 75 77 79 81 86 87 92 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 10 12 16 18 21 22 23 26 27 30 31 32 33 34 36 37 41 43 44 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 84 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 24 27 30 34 36 37 38 41 43 45 48 51 75 55 61 62 66 67 68 69 72 73 75 76 78 79 80 81 88 89 92 93 94 95 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 20 23 24 25 27 29 32 34 36 40 44 45 46 52 54 59 63 66 68 71 73 74 78 80 81 84 85 88 91 92 93 95 165 101 102 103 105 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 6 7 9 12 18 20 21 22 23 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 63 65 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 102 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 20 22 24 25 27 28 29 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 121 123 124 125 127 128 130 131 132 133 134 135 137 138 143 144 147 148 152 148 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        },
        {
            "input": "115 52\n3 5 6 8 11 13 14 15 17 21 22 23 25 26 28 29 32 36 39 46 47 49 51 53 56 59 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 89 92 94 95 98 33 103 104 105 106 112\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "110 59\n3 5 6 8 9 11 13 14 16 17 18 23 22 31 32 33 37 39 40 42 43 46 47 49 52 53 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\n",
            "output": "69 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 \n"
        },
        {
            "input": "102 55\n1 4 4 5 10 11 12 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 45 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 92 95 96 97 98 100 101 102\n",
            "output": "63 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 \n"
        },
        {
            "input": "109 56\n4 7 9 10 12 13 14 16 17 18 20 21 22 24 26 28 30 31 32 36 37 38 39 40 42 43 51 53 56 58 60 63 64 66 67 69 71 72 77 78 79 81 83 84 87 88 76 91 92 94 95 100 101 102 104 106\n",
            "output": "68 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 \n"
        },
        {
            "input": "114 63\n4 5 7 8 9 10 11 12 16 17 20 22 24 26 27 29 31 33 34 36 38 39 40 41 42 43 32 46 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 82 83 85 89 90 92 93 96 97 98 101 103 105 106 107 108 109 113 114\n",
            "output": "72 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 \n"
        },
        {
            "input": "100 46\n1 2 3 7 9 16 17 15 19 23 25 28 29 31 32 34 35 38 39 40 41 42 45 47 50 54 55 56 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\n",
            "output": "61 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 \n"
        },
        {
            "input": "113 57\n2 4 8 9 10 11 12 14 15 18 20 22 23 24 25 26 28 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 70 72 73 74 75 76 82 88 94 95 96 97 104 106 109 110 111 112 113\n",
            "output": "71 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 \n"
        },
        {
            "input": "101 53\n1 2 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 31 32 33 37 38 42 32 44 51 55 58 60 62 63 64 69 71 73 75 77 79 80 81 82 85 87 90 91 92 94 95 96 99 100\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "105 55\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 34 35 38 39 40 41 42 43 44 45 50 52 53 54 56 57 58 61 62 65 67 68 69 73 74 75 76 79 80 22 90 91 92 93 94 97 98 102 104\n",
            "output": "65 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 \n"
        },
        {
            "input": "10 7\n\n1 4 2 11 4 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        },
        {
            "input": "202 68\n4 10 7 8 10 18 5 15 16 17 18 19 20 21 24 25 24 27 29 30 53 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\n",
            "output": "124 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 201 202 \n"
        },
        {
            "input": "11 6\n\n1 4 0 34 7 4 4\n\n",
            "output": "8 1 2 3 5 6 7 10 11 \n"
        },
        {
            "input": "58 60\n2 3 7 8 13 14 16 19 34 21 28 28 27 32 33 35 36 0 39 36 41 43 44 45 65 8 51 52 53 54 57 58 61 103 64 65 67 68 70 75 78 79 118 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "36 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 \n"
        },
        {
            "input": "161 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 19 27 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 128 123 124 125 127 128 130 131 132 133 134 226 102 56 143 144 150 148 152 148 156 163 165 169 170 167 172 174 177 178 183 184 188 189 190 192 193 379 195 196 198 200\n",
            "output": "99 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 \n"
        },
        {
            "input": "25 52\n3 5 6 8 11 18 22 2 17 21 31 23 25 26 28 10 32 36 61 46 47 49 0 53 56 10 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 15 92 94 95 98 33 103 104 105 106 112\n",
            "output": "16 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 \n"
        },
        {
            "input": "48 56\n4 7 2 11 10 13 14 16 17 18 20 21 22 5 26 28 30 31 32 52 7 6 39 40 42 43 51 53 56 58 60 63 64 85 29 69 71 72 33 78 79 81 83 84 87 88 23 91 92 94 95 100 100 87 104 106\n",
            "output": "31 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 \n"
        },
        {
            "input": "145 57\n2 4 8 9 1 11 12 20 15 18 20 35 23 24 25 26 10 29 48 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 16 72 73 74 75 76 60 88 94 183 96 97 104 106 232 111 111 112 113\n",
            "output": "90 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 \n"
        },
        {
            "input": "19 6\n\n2 4 1 5 11 4 0\n\n",
            "output": "13 1 2 3 5 6 7 10 11 13 14 15 17 19 \n"
        },
        {
            "input": "5 6\n\n2 6 7 5 11 4 0\n\n",
            "output": "4 1 2 3 5 \n"
        },
        {
            "input": "139 50\n2 1 6 7 6 9 13 18 19 19 22 11 40 41 42 44 45 1 50 52 54 61 84 64 66 68 69 30 71 95 15 81 54 86 109 88 90 93 94 98 100 001 62 30 104 106 107 32 111 114\n",
            "output": "86 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 \n"
        },
        {
            "input": "44 60\n2 3 7 0 13 8 1 19 34 21 28 28 12 32 33 13 54 -1 39 36 31 43 44 45 65 8 56 52 53 54 57 47 61 103 64 109 67 129 70 75 116 79 118 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "29 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 \n"
        },
        {
            "input": "28 67\n1 2 9 10 12 13 15 25 18 19 9 21 12 24 25 15 5 11 32 33 51 42 44 46 48 52 54 56 58 59 110 61 123 44 64 65 66 30 74 5 91 81 82 83 84 268 86 30 88 164 32 92 108 001 103 11 106 107 109 110 112 113 115 117 32 152 122\n",
            "output": "17 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 \n"
        },
        {
            "input": "172 39\n2 4 5 19 12 25 16 27 18 26 24 28 44 43 74 51 30 43 27 56 18 97 40 58 77 131 31 75 79 145 141 90 91 51 98 102 12 105 106\n",
            "output": "104 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 \n"
        },
        {
            "input": "79 45\n1 3 9 10 13 14 19 19 20 22 24 25 12 29 30 32 66 73 39 42 47 51 29 44 54 31 33 63 69 16 72 118 75 18 78 122 83 152 4 90 158 95 154 2 223 111 181 0\n",
            "output": "50 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 \n"
        },
        {
            "input": "191 25\n5 8 8 3 25 16 17 21 22 23 26 27 40 19 32 73 45 60 66 72 43 26 150 19 30 60 98 63 66 24 46 91 73 98 76 78 79 3 51 165 7 150 97 98 111 103 90 107 58 111\n",
            "output": "117 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 \n"
        },
        {
            "input": "73 44\n2 1 4 7 6 20 2 23 24 25 15 29 101 25 36 40 44 45 46 28 24 62 84 66 68 80 73 101 29 80 21 10 29 1 91 92 21 38 165 111 102 183 245 201\n",
            "output": "46 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 \n"
        },
        {
            "input": "111 59\n2 3 5 7 8 10 15 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 44 45 25 47 49 50 53 54 55 57 59 60 61 65 66 67 69 70 72 76 81 82 83 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 33 34 36 37 39 40 44 47 48 51 52 54 57 58 59 63 65 71 72 75 76 80 83 84 85 86 87 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "103 58\n0 4 5 6 7 10 12 13 15 19 20 22 23 26 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 55 57 58 60 62 64 65 66 67 69 72 73 74 76 79 80 82 83 85 87 88 89 91 93 94 96 97 102\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "119 68\n4 5 7 8 10 11 12 15 16 17 18 19 20 21 24 25 26 27 29 30 53 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "117 50\n2 3 6 7 8 9 13 18 19 25 28 30 40 41 42 44 45 49 50 52 54 61 63 64 66 68 69 70 71 72 73 81 85 86 87 88 90 93 94 98 100 101 102 103 104 106 107 109 111 114\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "107 39\n2 4 5 11 12 14 15 16 18 19 24 28 33 35 36 38 41 43 44 46 47 53 57 58 65 67 69 75 79 80 84 90 91 51 98 102 104 105 106\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "116 60\n2 3 7 8 13 14 16 19 20 21 23 24 27 32 33 35 36 38 39 40 41 43 44 45 49 8 51 52 53 54 57 58 61 62 64 65 67 68 70 75 78 79 83 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "104 48\n1 3 9 10 13 14 17 19 20 22 24 25 26 29 30 32 34 37 39 42 47 51 52 53 54 56 59 63 69 71 72 74 75 76 78 80 83 85 78 90 91 95 96 97 98 101 102 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 25 18 19 20 21 23 24 25 26 29 31 32 33 41 42 44 46 48 52 54 56 58 59 60 61 107 63 64 65 66 71 74 75 80 81 82 83 84 85 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 119 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 47 49 52 53 54 57 58 59 64 65 67 69 70 72 75 77 79 81 86 87 173 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 10 12 16 18 21 22 23 26 27 30 31 32 33 34 36 37 41 43 26 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 84 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 24 27 30 34 36 37 38 41 43 45 48 51 75 55 61 62 66 67 68 69 72 73 75 76 78 79 80 81 88 89 92 93 94 172 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 20 23 24 25 27 29 32 58 36 40 44 45 46 52 54 59 63 66 68 71 73 74 78 80 81 84 85 88 91 92 93 95 165 101 102 103 105 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 6 7 9 12 18 20 21 22 23 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 63 65 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 172 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "111 59\n2 3 5 7 8 10 15 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 44 45 25 47 49 50 53 54 55 57 59 60 61 65 66 67 69 70 72 76 81 82 165 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 33 34 36 37 39 40 44 47 48 51 52 54 57 58 59 63 65 71 72 75 76 80 83 84 85 86 59 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 28 29 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 121 123 124 125 127 128 130 131 132 133 134 135 137 138 143 144 147 148 152 148 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        },
        {
            "input": "115 52\n3 5 6 8 11 13 14 15 17 21 22 23 25 26 28 29 32 36 39 46 47 49 51 53 56 59 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 15 92 94 95 98 33 103 104 105 106 112\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "103 58\n0 4 5 6 7 10 12 13 15 19 20 22 23 30 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 55 57 58 60 62 64 65 66 67 69 72 73 74 76 79 80 82 83 85 87 88 89 91 93 94 96 97 102\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "110 59\n3 5 6 8 9 11 13 14 16 17 18 36 22 31 32 33 37 39 40 42 43 46 47 49 52 53 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\n",
            "output": "69 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 \n"
        },
        {
            "input": "102 55\n1 4 4 5 10 11 16 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 45 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 92 95 96 97 98 100 101 102\n",
            "output": "63 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 \n"
        },
        {
            "input": "109 56\n4 7 2 10 12 13 14 16 17 18 20 21 22 24 26 28 30 31 32 36 37 38 39 40 42 43 51 53 56 58 60 63 64 66 67 69 71 72 77 78 79 81 83 84 87 88 76 91 92 94 95 100 101 102 104 106\n",
            "output": "68 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 \n"
        },
        {
            "input": "114 63\n4 5 7 8 9 10 11 12 16 17 20 22 29 26 27 29 31 33 34 36 38 39 40 41 42 43 32 46 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 82 83 85 89 90 92 93 96 97 98 101 103 105 106 107 108 109 113 114\n",
            "output": "72 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 \n"
        },
        {
            "input": "100 46\n1 2 3 7 9 16 17 15 19 23 25 28 29 31 32 34 35 38 39 40 41 42 45 47 50 54 55 63 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\n",
            "output": "61 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 \n"
        },
        {
            "input": "119 68\n4 5 7 8 10 11 5 15 16 17 18 19 20 21 24 25 26 27 29 30 53 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "113 57\n2 4 8 9 10 11 12 14 15 18 20 22 23 24 25 26 10 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 70 72 73 74 75 76 82 88 94 95 96 97 104 106 109 110 111 112 113\n",
            "output": "71 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 \n"
        },
        {
            "input": "117 50\n2 3 6 7 8 9 13 18 19 25 28 30 40 41 42 44 45 9 50 52 54 61 63 64 66 68 69 70 71 72 73 81 85 86 87 88 90 93 94 98 100 101 102 103 104 106 107 109 111 114\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "107 39\n2 4 5 11 12 14 15 16 18 19 24 28 33 35 36 38 41 43 44 56 47 53 57 58 65 67 69 75 79 80 84 90 91 51 98 102 104 105 106\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 53\n1 4 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 31 32 33 37 38 42 32 44 51 55 58 60 62 63 64 69 71 73 75 77 79 80 81 82 85 87 90 91 92 94 95 96 99 100\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "105 55\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 34 35 38 16 40 41 42 43 44 45 50 52 53 54 56 57 58 61 62 65 67 68 69 73 74 75 76 79 80 22 90 91 92 93 94 97 98 102 104\n",
            "output": "65 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 \n"
        },
        {
            "input": "116 60\n2 3 7 8 13 14 16 19 20 21 23 24 27 32 33 35 36 0 39 40 41 43 44 45 49 8 51 52 53 54 57 58 61 62 64 65 67 68 70 75 78 79 83 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "10 7\n\n1 4 2 21 4 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        },
        {
            "input": "104 48\n1 3 9 10 13 14 17 19 20 22 24 25 26 29 30 32 34 73 39 42 47 51 52 53 54 56 59 63 69 71 72 74 75 76 78 80 83 85 78 90 91 95 96 97 98 101 102 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 25 18 19 20 21 12 24 25 26 29 31 32 33 41 42 44 46 48 52 54 56 58 59 60 61 107 63 64 65 66 71 74 75 80 81 82 83 84 85 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 119 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 47 49 52 53 54 57 58 59 64 65 132 69 70 72 75 77 79 81 86 87 173 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 10 12 16 18 21 22 23 26 27 40 31 32 33 34 36 37 41 43 26 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 84 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 24 27 30 34 36 37 38 41 43 45 48 51 75 55 61 62 66 67 68 83 72 73 75 76 78 79 80 81 88 89 92 93 94 172 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 20 23 24 25 27 29 32 58 36 40 44 45 46 52 54 59 63 66 68 71 73 74 78 80 81 84 85 88 91 92 93 95 165 101 102 103 145 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 6 7 9 12 18 20 21 22 23 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 63 103 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 172 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "111 59\n2 3 5 7 8 10 14 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 44 45 25 47 49 50 53 54 55 57 59 60 61 65 66 67 69 70 72 76 81 82 165 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 62 34 36 37 39 40 44 47 48 51 52 54 57 58 59 63 65 71 72 75 76 80 83 84 85 86 59 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 28 27 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 121 123 124 125 127 128 130 131 132 133 134 135 137 138 143 144 147 148 152 148 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        },
        {
            "input": "115 52\n3 5 6 8 11 13 14 15 17 21 22 23 25 26 28 29 32 36 39 46 47 49 0 53 56 59 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 15 92 94 95 98 33 103 104 105 106 112\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "103 58\n0 4 5 6 7 10 12 13 15 19 20 22 23 30 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 57 57 58 60 62 64 65 66 67 69 72 73 74 76 79 80 82 83 85 87 88 89 91 93 94 96 97 102\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "110 59\n3 5 6 8 9 11 13 14 16 17 18 36 22 31 32 33 37 39 40 42 43 46 47 34 52 53 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\n",
            "output": "69 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 \n"
        },
        {
            "input": "102 55\n1 4 4 5 10 11 16 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 45 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 92 95 96 97 98 000 101 102\n",
            "output": "63 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 \n"
        },
        {
            "input": "109 56\n4 7 2 10 12 13 14 16 17 18 20 21 22 24 26 28 30 31 32 36 37 38 39 40 42 43 51 53 56 58 60 63 64 66 67 69 71 72 77 78 79 81 83 84 87 88 76 91 92 94 95 100 101 87 104 106\n",
            "output": "68 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 \n"
        },
        {
            "input": "114 63\n4 5 7 8 9 10 11 12 16 17 20 22 29 26 27 29 31 33 34 36 38 39 40 41 42 59 32 46 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 82 83 85 89 90 92 93 96 97 98 101 103 105 106 107 108 109 113 114\n",
            "output": "72 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 \n"
        },
        {
            "input": "100 46\n1 2 3 7 9 16 17 15 19 23 25 28 29 31 32 34 39 38 39 40 41 42 45 47 50 54 55 63 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\n",
            "output": "61 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 \n"
        },
        {
            "input": "119 68\n4 5 7 8 10 11 5 15 16 17 18 19 20 21 24 25 24 27 29 30 53 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "113 57\n2 4 8 9 10 11 12 14 15 18 20 35 23 24 25 26 10 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 70 72 73 74 75 76 82 88 94 95 96 97 104 106 109 110 111 112 113\n",
            "output": "71 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 \n"
        },
        {
            "input": "117 50\n2 3 6 7 8 9 13 18 19 25 28 34 40 41 42 44 45 9 50 52 54 61 63 64 66 68 69 70 71 72 73 81 85 86 87 88 90 93 94 98 100 101 102 103 104 106 107 109 111 114\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "107 39\n2 4 5 11 12 14 15 16 18 19 24 28 33 35 36 38 41 43 44 56 47 53 57 58 65 67 69 75 79 145 84 90 91 51 98 102 104 105 106\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 53\n1 4 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 33 32 33 37 38 42 32 44 51 55 58 60 62 63 64 69 71 73 75 77 79 80 81 82 85 87 90 91 92 94 95 96 99 100\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "105 55\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 34 35 38 16 40 41 42 43 44 45 50 52 53 9 56 57 58 61 62 65 67 68 69 73 74 75 76 79 80 22 90 91 92 93 94 97 98 102 104\n",
            "output": "65 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 \n"
        },
        {
            "input": "116 60\n2 3 7 8 13 14 16 19 20 21 23 24 27 32 33 35 36 0 39 40 41 43 44 45 49 8 51 52 53 54 57 58 61 62 64 65 67 68 70 75 78 79 118 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "10 7\n\n1 4 2 34 4 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        },
        {
            "input": "104 48\n1 3 9 10 13 14 17 19 20 22 24 25 26 29 30 32 34 73 39 42 47 51 52 53 54 56 59 63 69 71 72 74 75 76 78 80 83 85 21 90 91 95 96 97 98 101 102 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 25 18 19 20 21 12 24 25 26 29 31 32 33 51 42 44 46 48 52 54 56 58 59 60 61 107 63 64 65 66 71 74 75 80 81 82 83 84 85 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 119 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 47 49 52 53 54 57 58 59 64 65 132 69 70 72 75 77 79 81 27 87 173 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 10 12 16 18 21 22 23 26 27 40 31 32 34 34 36 37 41 43 26 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 84 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 24 27 30 34 36 37 38 41 43 45 48 51 75 55 61 62 66 67 68 83 72 73 75 76 78 137 80 81 88 89 92 93 94 172 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 20 23 24 25 27 29 32 58 36 40 44 45 46 52 54 59 63 66 68 71 73 74 29 80 81 84 85 88 91 92 93 95 165 101 102 103 145 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 6 7 9 12 18 20 21 22 23 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 113 103 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 172 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "111 59\n2 3 5 7 8 10 14 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 44 45 25 47 49 50 53 58 55 57 59 60 61 65 66 67 69 70 72 76 81 82 165 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 62 34 36 37 39 40 44 47 48 51 52 54 57 58 59 63 65 71 72 75 76 80 83 84 67 86 59 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 28 27 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 128 123 124 125 127 128 130 131 132 133 134 135 137 138 143 144 147 148 152 148 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        },
        {
            "input": "115 52\n3 5 6 8 11 13 14 15 17 21 22 23 25 26 28 10 32 36 39 46 47 49 0 53 56 59 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 15 92 94 95 98 33 103 104 105 106 112\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "103 58\n0 4 5 6 7 10 12 13 15 19 20 22 23 30 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 57 57 58 60 62 96 65 66 67 69 72 73 74 76 79 80 82 83 85 87 88 89 91 93 94 96 97 102\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "110 59\n3 5 6 8 9 11 13 14 16 25 18 36 22 31 32 33 37 39 40 42 43 46 47 34 52 53 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\n",
            "output": "69 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 \n"
        },
        {
            "input": "102 55\n1 4 4 5 10 11 16 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 45 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 92 95 69 97 98 000 101 102\n",
            "output": "63 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 \n"
        },
        {
            "input": "109 56\n4 7 2 10 12 13 14 16 17 18 20 21 22 24 26 28 30 31 32 36 37 38 39 40 42 43 51 53 56 58 60 63 64 85 67 69 71 72 77 78 79 81 83 84 87 88 76 91 92 94 95 100 101 87 104 106\n",
            "output": "68 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 \n"
        },
        {
            "input": "114 63\n4 5 7 8 9 10 11 12 16 17 20 22 29 26 27 29 31 33 34 36 38 39 40 41 42 59 32 46 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 82 83 85 89 90 92 93 159 97 98 101 103 105 106 107 108 109 113 114\n",
            "output": "72 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 \n"
        },
        {
            "input": "100 46\n1 2 3 2 9 16 17 15 19 23 25 28 29 31 32 34 39 38 39 40 41 42 45 47 50 54 55 63 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\n",
            "output": "61 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 \n"
        },
        {
            "input": "119 68\n4 5 7 8 10 18 5 15 16 17 18 19 20 21 24 25 24 27 29 30 53 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "113 57\n2 4 8 9 10 11 12 14 15 18 20 35 23 24 25 26 10 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 70 72 73 74 75 76 82 88 94 95 96 97 104 106 117 110 111 112 113\n",
            "output": "71 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 \n"
        },
        {
            "input": "117 50\n2 3 6 7 8 9 13 18 19 25 28 11 40 41 42 44 45 9 50 52 54 61 63 64 66 68 69 70 71 72 73 81 85 86 87 88 90 93 94 98 100 101 102 103 104 106 107 109 111 114\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "107 39\n2 4 5 11 12 14 16 16 18 19 24 28 33 35 36 38 41 43 44 56 47 53 57 58 65 67 69 75 79 145 84 90 91 51 98 102 104 105 106\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 53\n1 4 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 33 32 33 37 38 42 32 44 51 60 58 60 62 63 64 69 71 73 75 77 79 80 81 82 85 87 90 91 92 94 95 96 99 100\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "105 55\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 29 35 38 16 40 41 42 43 44 45 50 52 53 9 56 57 58 61 62 65 67 68 69 73 74 75 76 79 80 22 90 91 92 93 94 97 98 102 104\n",
            "output": "65 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 \n"
        },
        {
            "input": "116 60\n2 3 7 8 13 14 16 19 20 21 23 28 27 32 33 35 36 0 39 40 41 43 44 45 49 8 51 52 53 54 57 58 61 62 64 65 67 68 70 75 78 79 118 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "10 7\n\n1 4 0 34 4 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        },
        {
            "input": "104 48\n1 3 9 10 13 14 17 19 20 22 24 25 12 29 30 32 34 73 39 42 47 51 52 53 54 56 59 63 69 71 72 74 75 76 78 80 83 85 21 90 91 95 96 97 98 101 102 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 25 18 19 20 21 12 24 25 26 29 31 32 33 51 42 44 46 48 52 54 56 58 59 60 61 123 63 64 65 66 71 74 75 80 81 82 83 84 85 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 119 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 47 49 52 53 54 57 58 59 64 65 145 69 70 72 75 77 79 81 27 87 173 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 5 12 16 18 21 22 23 26 27 40 31 32 34 34 36 37 41 43 26 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 84 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 24 27 30 34 36 37 70 41 43 45 48 51 75 55 61 62 66 67 68 83 72 73 75 76 78 137 80 81 88 89 92 93 94 172 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 2 23 24 25 27 29 32 58 36 40 44 45 46 52 54 59 63 66 68 71 73 74 29 80 81 84 85 88 91 92 93 95 165 101 102 103 145 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 3 7 9 12 18 20 21 22 23 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 113 103 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 172 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "111 59\n2 3 5 7 8 10 14 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 84 45 25 47 49 50 53 58 55 57 59 60 61 65 66 67 69 70 72 76 81 82 165 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 62 34 36 37 39 40 44 47 48 51 52 54 57 58 59 63 68 71 72 75 76 80 83 84 67 86 59 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 28 27 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 128 123 124 125 127 128 130 131 132 133 134 135 137 56 143 144 147 148 152 148 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        },
        {
            "input": "115 52\n3 5 6 8 11 18 14 15 17 21 22 23 25 26 28 10 32 36 39 46 47 49 0 53 56 59 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 15 92 94 95 98 33 103 104 105 106 112\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "103 58\n0 4 5 6 7 10 12 13 15 19 20 19 23 30 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 57 57 58 60 62 96 65 66 67 69 72 73 74 76 79 80 82 83 85 87 88 89 91 93 94 96 97 102\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "110 59\n3 5 6 8 9 11 13 14 16 25 18 36 22 31 32 33 37 39 40 42 43 46 47 67 52 53 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\n",
            "output": "69 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 \n"
        },
        {
            "input": "102 55\n2 4 4 5 10 11 16 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 45 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 92 95 69 97 98 000 101 102\n",
            "output": "63 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 \n"
        },
        {
            "input": "109 56\n4 7 2 10 10 13 14 16 17 18 20 21 22 24 26 28 30 31 32 36 37 38 39 40 42 43 51 53 56 58 60 63 64 85 67 69 71 72 77 78 79 81 83 84 87 88 76 91 92 94 95 100 101 87 104 106\n",
            "output": "68 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 \n"
        },
        {
            "input": "114 63\n4 5 7 8 9 10 11 12 16 17 20 22 29 0 27 29 31 33 34 36 38 39 40 41 42 59 32 46 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 82 83 85 89 90 92 93 159 97 98 101 103 105 106 107 108 109 113 114\n",
            "output": "72 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 \n"
        },
        {
            "input": "100 46\n1 2 3 2 9 27 17 15 19 23 25 28 29 31 32 34 39 38 39 40 41 42 45 47 50 54 55 63 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\n",
            "output": "61 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 \n"
        },
        {
            "input": "119 68\n4 10 7 8 10 18 5 15 16 17 18 19 20 21 24 25 24 27 29 30 53 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "113 57\n2 4 8 9 0 11 12 14 15 18 20 35 23 24 25 26 10 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 70 72 73 74 75 76 82 88 94 95 96 97 104 106 117 110 111 112 113\n",
            "output": "71 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 \n"
        },
        {
            "input": "117 50\n2 3 6 7 8 9 13 18 19 25 28 11 40 41 42 44 45 9 50 52 54 61 63 64 66 68 69 70 71 72 73 81 85 86 87 88 90 93 94 98 100 001 102 103 104 106 107 109 111 114\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "107 39\n2 4 5 11 12 14 16 16 18 19 24 28 33 35 36 38 41 43 44 56 47 53 40 58 65 67 69 75 79 145 84 90 91 51 98 102 104 105 106\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 53\n1 4 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 33 32 33 37 38 42 32 44 51 60 58 60 62 63 12 69 71 73 75 77 79 80 81 82 85 87 90 91 92 94 95 96 99 100\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "105 55\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 29 35 38 16 40 41 42 43 44 45 50 52 53 9 56 57 58 61 62 65 67 68 69 73 74 75 76 52 80 22 90 91 92 93 94 97 98 102 104\n",
            "output": "65 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 \n"
        },
        {
            "input": "116 60\n2 3 7 8 13 14 16 19 20 21 23 28 27 32 33 35 36 0 39 40 41 43 44 45 49 8 51 52 53 54 57 58 61 103 64 65 67 68 70 75 78 79 118 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "10 3\n\n1 4 0 34 4 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        },
        {
            "input": "104 35\n1 3 9 10 13 14 17 19 20 22 24 25 12 29 30 32 34 73 39 42 47 51 52 53 54 56 59 63 69 71 72 74 75 76 78 80 83 85 21 90 91 95 96 97 98 101 102 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 25 18 19 20 21 12 24 25 26 29 31 32 33 51 42 44 46 48 52 54 56 58 59 60 61 123 63 64 65 66 71 74 75 80 81 82 83 84 150 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 119 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 93 49 52 53 54 57 58 59 64 65 145 69 70 72 75 77 79 81 27 87 173 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 3 12 16 18 21 22 23 26 27 40 31 32 34 34 36 37 41 43 26 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 84 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 1 27 30 34 36 37 70 41 43 45 48 51 75 55 61 62 66 67 68 83 72 73 75 76 78 137 80 81 88 89 92 93 94 172 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 2 23 24 25 27 29 51 58 36 40 44 45 46 52 54 59 63 66 68 71 73 74 29 80 81 84 85 88 91 92 93 95 165 101 102 103 145 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 3 7 9 12 18 26 21 22 23 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 113 103 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 172 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 59\n2 3 5 7 8 10 14 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 84 45 25 47 49 50 53 58 55 57 59 60 61 65 66 67 69 70 72 76 81 82 165 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 62 34 36 37 39 40 44 47 48 51 18 54 57 58 59 63 68 71 72 75 76 80 83 84 67 86 59 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 19 27 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 128 123 124 125 127 128 130 131 132 133 134 135 137 56 143 144 147 148 152 148 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        },
        {
            "input": "115 52\n3 5 6 8 11 18 14 15 17 21 22 23 25 26 28 10 32 36 61 46 47 49 0 53 56 59 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 15 92 94 95 98 33 103 104 105 106 112\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "103 58\n0 4 5 6 7 10 12 13 15 19 20 19 23 30 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 57 57 58 60 62 96 65 66 67 69 72 73 74 76 79 80 122 83 85 87 88 89 91 93 94 96 97 102\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "110 59\n3 5 6 8 9 11 13 14 16 25 18 36 22 22 32 33 37 39 40 42 43 46 47 67 52 53 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\n",
            "output": "69 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 \n"
        },
        {
            "input": "102 55\n2 4 4 5 10 11 16 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 45 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 58 95 69 97 98 000 101 102\n",
            "output": "63 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 \n"
        },
        {
            "input": "109 56\n4 7 2 11 10 13 14 16 17 18 20 21 22 24 26 28 30 31 32 36 37 38 39 40 42 43 51 53 56 58 60 63 64 85 67 69 71 72 77 78 79 81 83 84 87 88 76 91 92 94 95 100 101 87 104 106\n",
            "output": "68 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 \n"
        },
        {
            "input": "114 63\n4 5 7 8 9 10 11 12 16 17 20 22 29 0 27 29 31 33 34 36 38 39 40 41 42 59 32 46 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 52 83 85 89 90 92 93 159 97 98 101 103 105 106 107 108 109 113 114\n",
            "output": "72 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 \n"
        },
        {
            "input": "100 46\n1 2 3 2 9 27 17 15 19 23 25 28 29 23 32 34 39 38 39 40 41 42 45 47 50 54 55 63 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\n",
            "output": "61 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 \n"
        },
        {
            "input": "113 57\n2 4 8 9 1 11 12 14 15 18 20 35 23 24 25 26 10 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 70 72 73 74 75 76 82 88 94 95 96 97 104 106 117 110 111 112 113\n",
            "output": "71 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 \n"
        },
        {
            "input": "117 50\n2 3 6 7 8 9 13 18 19 25 28 11 40 41 42 44 45 9 50 52 54 61 63 64 66 68 69 70 71 72 73 81 85 86 109 88 90 93 94 98 100 001 102 103 104 106 107 109 111 114\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "107 39\n2 4 5 11 12 14 16 16 18 19 24 28 33 35 36 38 41 43 44 56 47 53 40 58 65 67 31 75 79 145 84 90 91 51 98 102 104 105 106\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 53\n1 4 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 33 32 33 37 38 42 32 44 51 60 58 60 62 63 12 63 71 73 75 77 79 80 81 82 85 87 90 91 92 94 95 96 99 100\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "105 55\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 29 35 38 16 40 41 42 43 44 45 50 52 53 9 56 57 58 35 62 65 67 68 69 73 74 75 76 52 80 22 90 91 92 93 94 97 98 102 104\n",
            "output": "65 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 \n"
        },
        {
            "input": "116 60\n2 3 7 8 13 14 16 19 20 21 28 28 27 32 33 35 36 0 39 40 41 43 44 45 49 8 51 52 53 54 57 58 61 103 64 65 67 68 70 75 78 79 118 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "10 3\n\n1 4 0 34 7 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        },
        {
            "input": "104 35\n1 3 9 10 13 14 17 19 20 22 24 25 12 29 30 32 34 73 39 42 47 51 52 53 54 56 59 63 69 71 72 74 75 76 78 80 83 85 21 90 91 95 96 97 98 101 181 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 25 18 19 20 21 12 24 25 26 29 31 32 33 51 42 44 46 48 52 54 56 58 59 60 61 123 63 64 65 66 71 74 75 80 81 82 83 84 150 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 78 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 93 49 52 94 54 57 58 59 64 65 145 69 70 72 75 77 79 81 27 87 173 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 3 12 16 18 21 22 23 26 27 40 31 32 34 34 36 37 41 43 26 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 51 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 1 27 30 34 36 37 70 41 43 45 48 51 75 55 61 62 66 67 68 83 72 73 75 76 78 137 80 37 88 89 92 93 94 172 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 2 23 24 25 27 29 51 58 36 40 44 45 46 52 54 59 63 66 68 71 73 74 29 80 81 84 82 88 91 92 93 95 165 101 102 103 145 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 3 7 9 12 18 26 21 22 0 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 113 103 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 172 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 59\n2 3 5 7 8 10 14 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 84 45 25 47 49 50 53 58 55 57 59 60 61 65 66 67 69 70 72 76 81 82 41 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 62 34 36 37 39 40 44 47 48 51 18 54 57 32 59 63 68 71 72 75 76 80 83 84 67 86 59 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 19 27 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 128 123 124 125 127 128 130 131 132 133 134 135 137 56 143 144 150 148 152 148 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        },
        {
            "input": "115 52\n3 5 6 8 11 18 14 15 17 21 22 23 25 26 28 10 32 36 61 46 47 49 0 53 56 10 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 15 92 94 95 98 33 103 104 105 106 112\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "103 58\n0 4 5 6 7 10 12 13 15 19 20 19 23 30 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 57 57 58 60 62 96 65 66 67 69 72 99 74 76 79 80 122 83 85 87 88 89 91 93 94 96 97 102\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "110 59\n3 5 6 8 9 11 13 14 16 25 18 36 22 22 32 33 37 39 40 42 43 46 47 67 52 67 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\n",
            "output": "69 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 \n"
        },
        {
            "input": "102 55\n2 4 4 5 10 11 16 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 49 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 58 95 69 97 98 000 101 102\n",
            "output": "63 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 \n"
        },
        {
            "input": "109 56\n4 7 2 11 10 13 14 16 17 18 20 21 22 24 26 28 30 31 32 52 37 38 39 40 42 43 51 53 56 58 60 63 64 85 67 69 71 72 77 78 79 81 83 84 87 88 76 91 92 94 95 100 101 87 104 106\n",
            "output": "68 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 \n"
        },
        {
            "input": "114 63\n4 5 7 8 9 10 11 12 16 17 20 22 29 0 27 29 31 33 34 36 38 39 40 41 42 59 32 7 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 52 83 85 89 90 92 93 159 97 98 101 103 105 106 107 108 109 113 114\n",
            "output": "72 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 \n"
        },
        {
            "input": "100 46\n1 2 3 2 9 27 17 25 19 23 25 28 29 23 32 34 39 38 39 40 41 42 45 47 50 54 55 63 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\n",
            "output": "61 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 \n"
        },
        {
            "input": "202 68\n4 10 7 8 10 18 5 15 16 17 18 19 20 21 24 25 24 27 29 30 70 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\n",
            "output": "124 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 201 202 \n"
        },
        {
            "input": "113 57\n2 4 8 9 1 11 12 14 15 18 20 35 23 24 25 26 10 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 27 65 67 69 33 72 73 74 75 76 82 88 94 95 96 97 104 106 117 110 111 112 113\n",
            "output": "71 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 \n"
        },
        {
            "input": "117 50\n2 3 6 7 8 9 13 18 19 25 28 11 40 41 42 44 45 9 50 52 54 61 63 64 66 68 69 70 71 72 11 81 85 86 109 88 90 93 94 98 100 001 102 103 104 106 107 109 111 114\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "107 39\n2 4 5 11 12 14 16 16 18 19 24 28 33 35 36 38 41 43 15 56 47 53 40 58 65 67 31 75 79 145 84 90 91 51 98 102 104 105 106\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 53\n1 4 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 33 32 33 37 38 42 32 44 51 60 58 60 62 63 12 63 71 73 75 77 133 80 81 82 85 87 90 91 92 94 95 96 99 100\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "105 55\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 29 35 38 16 66 41 42 43 44 45 50 52 53 9 56 57 58 35 62 65 67 68 69 73 74 75 76 52 80 22 90 91 92 93 94 97 98 102 104\n",
            "output": "65 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 \n"
        },
        {
            "input": "116 60\n2 3 7 8 13 14 16 19 20 21 28 28 27 32 33 35 36 0 39 40 41 43 44 45 65 8 51 52 53 54 57 58 61 103 64 65 67 68 70 75 78 79 118 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\n",
            "output": "73 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 \n"
        },
        {
            "input": "10 6\n\n1 4 0 34 7 4 4\n\n",
            "output": "7 1 2 3 5 6 7 10 \n"
        },
        {
            "input": "104 35\n1 3 9 10 13 14 17 19 20 22 24 25 12 29 30 32 34 73 39 42 47 51 52 44 54 56 59 63 69 71 72 74 75 76 78 80 83 85 21 90 91 95 96 97 98 101 181 103\n",
            "output": "64 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 \n"
        },
        {
            "input": "123 67\n1 2 9 10 12 13 15 25 18 19 20 21 12 24 25 26 29 31 32 33 51 42 44 46 48 52 54 56 58 59 60 61 123 63 64 65 66 71 74 93 80 81 82 83 84 150 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 78 120 122\n",
            "output": "77 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 \n"
        },
        {
            "input": "118 54\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 52 43 93 49 52 94 54 57 58 59 64 65 145 69 70 72 75 77 79 81 27 87 173 95 100 102 106 185 110 111 112 116 118\n",
            "output": "74 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 \n"
        },
        {
            "input": "112 50\n2 6 8 3 23 16 18 21 22 23 26 27 40 31 32 34 34 36 37 41 43 26 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 51 85 94 150 97 98 101 103 106 107 108 111\n",
            "output": "70 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 \n"
        },
        {
            "input": "120 53\n1 3 4 10 17 19 23 1 27 30 34 36 37 70 41 43 45 48 51 82 55 61 62 66 67 68 83 72 73 75 76 78 137 80 37 88 89 92 93 94 172 97 101 104 106 107 108 109 110 112 115 116 119\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "106 44\n2 3 6 7 11 19 2 23 24 25 27 29 51 58 36 40 44 45 46 52 54 59 84 66 68 71 73 74 29 80 81 84 82 88 91 92 93 95 165 101 102 103 145 106\n",
            "output": "66 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 \n"
        },
        {
            "input": "108 51\n4 5 3 7 9 12 18 26 21 22 0 25 27 35 36 39 40 41 45 46 47 50 57 58 60 61 62 113 103 71 72 73 75 2 80 81 83 84 85 89 90 91 93 98 100 172 103 105 106 107 108\n",
            "output": "67 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 \n"
        },
        {
            "input": "101 59\n2 3 5 7 8 10 14 18 20 24 25 27 28 30 31 32 35 36 37 38 39 52 41 84 45 25 47 49 50 53 58 55 57 59 60 61 65 66 67 69 70 72 76 81 82 41 84 90 92 93 95 96 97 98 104 105 106 107 109\n",
            "output": "62 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 \n"
        },
        {
            "input": "121 57\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 21 62 34 36 37 39 40 44 47 48 51 18 54 57 32 59 63 68 71 72 75 76 80 83 84 67 86 59 89 90 96 97 98 157 106 111 113 114 115 117 118 120 121\n",
            "output": "75 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 \n"
        },
        {
            "input": "200 89\n5 7 8 11 14 15 17 18 13 22 24 25 27 19 27 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 128 123 124 125 127 128 130 131 132 133 134 135 137 56 143 144 150 148 152 148 156 163 165 169 170 117 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\n",
            "output": "122 1 2 3 5 6 7 10 11 13 14 15 17 19 21 22 23 26 29 30 31 33 34 35 37 38 39 41 42 43 46 47 51 53 55 57 58 59 61 62 65 66 67 69 70 71 73 74 77 78 79 82 83 85 86 87 89 91 93 94 95 97 101 102 103 105 106 107 109 110 111 113 114 115 118 119 122 123 127 129 130 131 133 134 137 138 139 141 142 143 145 146 149 151 154 155 157 158 159 161 163 165 166 167 170 173 174 177 178 179 181 182 183 185 186 187 190 191 193 194 195 197 199 \n"
        }
    ],
    "solution": [
        {
            "language": 4,
            "solution": "import static java.lang.Integer.parseInt;\nimport static java.lang.Long.parseLong;\nimport static java.lang.System.arraycopy;\nimport static java.lang.System.exit;\nimport static java.util.Arrays.copyOf;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.BitSet;\nimport java.util.NoSuchElementException;\nimport java.util.Random;\nimport java.util.StringTokenizer;\n\npublic class H {\n\n\tstatic class IntList {\n\n\t\tint data[] = new int[3];\n\t\tint size = 0;\n\n\t\tboolean isEmpty() {\n\t\t\treturn size == 0;\n\t\t}\n\n\t\tint size() {\n\t\t\treturn size;\n\t\t}\n\n\t\tint get(int index) {\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\treturn data[index];\n\t\t}\n\n\t\tvoid clear() {\n\t\t\tsize = 0;\n\t\t}\n\n\t\tvoid set(int index, int value) {\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\tdata[index] = value;\n\t\t}\n\n\t\tvoid expand() {\n\t\t\tif (size >= data.length) {\n\t\t\t\tdata = copyOf(data, (data.length << 1) + 1);\n\t\t\t}\n\t\t}\n\n\t\tvoid insert(int index, int value) {\n\t\t\tif (index < 0 || index > size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\texpand();\n\t\t\tarraycopy(data, index, data, index + 1, size++ - index);\n\t\t\tdata[index] = value;\n\t\t}\n\n\t\tint delete(int index) {\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\tint value = data[index];\n\t\t\tarraycopy(data, index + 1, data, index, --size - index);\n\t\t\treturn value;\n\t\t}\n\n\t\tvoid push(int value) {\n\t\t\texpand();\n\t\t\tdata[size++] = value;\n\t\t}\n\n\t\tint pop() {\n\t\t\tif (size == 0) {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t\treturn data[--size];\n\t\t}\n\n\t\tvoid unshift(int value) {\n\t\t\texpand();\n\t\t\tarraycopy(data, 0, data, 1, size++);\n\t\t\tdata[0] = value;\n\t\t}\n\n\t\tint shift() {\n\t\t\tif (size == 0) {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t\tint value = data[0];\n\t\t\tarraycopy(data, 1, data, 0, --size);\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tstatic class LongList {\n\n\t\tlong data[] = new long[3];\n\t\tint size = 0;\n\n\t\tboolean isEmpty() {\n\t\t\treturn size == 0;\n\t\t}\n\n\t\tint size() {\n\t\t\treturn size;\n\t\t}\n\n\t\tlong get(int index) {\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\treturn data[index];\n\t\t}\n\n\t\tvoid clear() {\n\t\t\tsize = 0;\n\t\t}\n\n\t\tvoid set(int index, long value) {\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\tdata[index] = value;\n\t\t}\n\n\t\tvoid expand() {\n\t\t\tif (size >= data.length) {\n\t\t\t\tdata = copyOf(data, (data.length << 1) + 1);\n\t\t\t}\n\t\t}\n\n\t\tvoid insert(int index, long value) {\n\t\t\tif (index < 0 || index > size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\texpand();\n\t\t\tarraycopy(data, index, data, index + 1, size++ - index);\n\t\t\tdata[index] = value;\n\t\t}\n\n\t\tlong delete(int index) {\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\tlong value = data[index];\n\t\t\tarraycopy(data, index + 1, data, index, --size - index);\n\t\t\treturn value;\n\t\t}\n\n\t\tvoid push(long value) {\n\t\t\texpand();\n\t\t\tdata[size++] = value;\n\t\t}\n\n\t\tlong pop() {\n\t\t\tif (size == 0) {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t\treturn data[--size];\n\t\t}\n\n\t\tvoid unshift(long value) {\n\t\t\texpand();\n\t\t\tarraycopy(data, 0, data, 1, size++);\n\t\t\tdata[0] = value;\n\t\t}\n\n\t\tlong shift() {\n\t\t\tif (size == 0) {\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\t}\n\t\t\tlong value = data[0];\n\t\t\tarraycopy(data, 1, data, 0, --size);\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tstatic void sortBy(int a[], int n, int v[]) {\n\t\tif (n == 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint j = i;\n\t\t\tint ca = a[i];\n\t\t\tint cv = v[ca];\n\t\t\tdo {\n\t\t\t\tint nj = (j - 1) >> 1;\n\t\t\t\tint na = a[nj];\n\t\t\t\tif (cv <= v[na]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta[j] = na;\n\t\t\t\tj = nj;\n\t\t\t} while (j != 0);\n\t\t\ta[j] = ca;\n\t\t}\n\t\tint ca = a[0];\n\t\tfor (int i = n - 1; i > 0; i--) {\n\t\t\tint j = 0;\n\t\t\twhile ((j << 1) + 2 + Integer.MIN_VALUE < i + Integer.MIN_VALUE) {\n\t\t\t\tj <<= 1;\n\t\t\t\tj += (v[a[j + 2]] > v[a[j + 1]]) ? 2 : 1;\n\t\t\t}\n\t\t\tif ((j << 1) + 2 == i) {\n\t\t\t\tj = (j << 1) + 1;\n\t\t\t}\n\t\t\tint na = a[i];\n\t\t\ta[i] = ca;\n\t\t\tca = na;\n\t\t\tint cv = v[ca];\n\t\t\twhile (j != 0 && v[a[j]] < cv) {\n\t\t\t\tj = (j - 1) >> 1;\n\t\t\t}\n\t\t\twhile (j != 0) {\n\t\t\t\tna = a[j];\n\t\t\t\ta[j] = ca;\n\t\t\t\tca = na;\n\t\t\t\tj = (j - 1) >> 1;\n\t\t\t}\n\t\t}\n\t\ta[0] = ca;\n\t}\n\n\tstatic void solve() throws Exception {\n\t\tint c = scanInt(), n = scanInt();\n\t\tint lc[] = new int[c + 1];\n\t\tfor (int i = 1; i * i <= c; i++) {\n\t\t\tfor (int j = i; j * i <= c; j += i) {\n\t\t\t\tlc[j * i] = j;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 4; i <= c; i++) {\n\t\t\tlc[i] = lc[lc[i]];\n\t\t}\n\t\tint q = 0, x[] = new int[c];\n\t\tfor (int i = 1; i <= c; i++) {\n\t\t\tif (lc[i] == i) {\n\t\t\t\tx[q++] = i;\n\t\t\t}\n\t\t}\n\t\tIntList cls[] = new IntList[q];\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tcls[i] = new IntList();\n\t\t}\n\t\tint lcr[] = new int[c + 1];\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tlcr[x[i]] = i;\n\t\t}\n\t\tfor (int i = 1; i <= c; i++) {\n\t\t\tcls[lcr[lc[i]]].push(i);\n\t\t}\n\t\tout.print(q);\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tout.print(' ');\n\t\t\tout.print(x[i]);\n\t\t}\n\t\tout.println();\n\t\tout.flush();\n\t\tint y[] = new int[c + 1];\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\ty[x[i]] = scanInt();\n\t\t}\n\t\tfor (int i = c; i >= 1; i--) {\n\t\t\tif (lc[i] != i) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (int j = i + i; j <= c; j += i) {\n\t\t\t\tif (lc[j] != j) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ty[j] ^= y[i];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= c; i++) {\n\t\t\tif (lc[i] != i) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (int j = i + i; j <= c; j += i) {\n\t\t\t\tif (lc[j] != j) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ty[i] ^= y[j];\n\t\t\t}\n\t\t}\n\t\tIntList ca = new IntList();\n\t\tLongList cb = new LongList();\n\t\tboolean ans[] = new boolean[c + 1];\n\t\tint ansN = 0;\n\t\tlong lzeros[][] = new long[q][];\n\t\tBitSet bitZeros[][] = new BitSet[q][];\n\t\tint nZeros[] = new int[q];\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tint cv = y[x[i]];\n\t\t\tIntList ccl = cls[i];\n\t\t\tint cn = ccl.size;\n\t\t\tif (cn < 64) {\n\t\t\t\tlong cans = 0;\n\t\t\t\tca.size = cb.size = cn;\n\t\t\t\twhile (ca.data.length < cn) {\n\t\t\t\t\tca.expand();\n\t\t\t\t}\n\t\t\t\twhile (cb.data.length < cn) {\n\t\t\t\t\tcb.expand();\n\t\t\t\t}\n\t\t\t\tarraycopy(ccl.data, 0, ca.data, 0, cn);\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tcb.data[j] = 1L << j;\n\t\t\t\t}\n\t\t\t\tfor (int bit = 19; bit >= 0; bit--) {\n\t\t\t\t\tint j;\n\t\t\t\t\tfor (j = 0; j < cn; j++) {\n\t\t\t\t\t\tif ((ca.data[j] & (-1 << bit)) == 1 << bit) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j == cn) {\n\t\t\t\t\t\tif ((cv & (1 << bit)) != 0) {\n\t\t\t\t\t\t\tthrow new AssertionError();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ((cv & (1 << bit)) != 0) {\n\t\t\t\t\t\tcv ^= ca.data[j];\n\t\t\t\t\t\tcans ^= cb.data[j];\n\t\t\t\t\t}\n\t\t\t\t\tfor (int jj = 0; jj < cn; jj++) {\n\t\t\t\t\t\tif (jj != j && (ca.data[jj] & (1 << bit)) != 0) {\n\t\t\t\t\t\t\tca.data[jj] ^= ca.data[j];\n\t\t\t\t\t\t\tcb.data[jj] ^= cb.data[j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tif ((cans & (1L << j)) != 0) {\n\t\t\t\t\t\tans[ccl.data[j]] = true;\n\t\t\t\t\t\t++ansN;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint nz = 0;\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tif (ca.data[j] == 0) {\n\t\t\t\t\t\t++nz;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnZeros[i] = nz;\n\t\t\t\tlzeros[i] = new long[nz];\n\t\t\t\tnz = 0;\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tif (ca.data[j] == 0) {\n\t\t\t\t\t\tlzeros[i][nz++] = cb.data[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tBitSet cans = new BitSet();\n\t\t\t\tca.size = cn;\n\t\t\t\twhile (ca.data.length < cn) {\n\t\t\t\t\tca.expand();\n\t\t\t\t}\n\t\t\t\tarraycopy(ccl.data, 0, ca.data, 0, cn);\n\t\t\t\tBitSet ccb[] = new BitSet[cn];\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tccb[j] = new BitSet();\n\t\t\t\t\tccb[j].set(j);\n\t\t\t\t}\n\t\t\t\tfor (int bit = 19; bit >= 0; bit--) {\n\t\t\t\t\tint j;\n\t\t\t\t\tfor (j = 0; j < cn; j++) {\n\t\t\t\t\t\tif ((ca.data[j] & (-1 << bit)) == 1 << bit) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j == cn) {\n\t\t\t\t\t\tif ((cv & (1 << bit)) != 0) {\n\t\t\t\t\t\t\tthrow new AssertionError();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ((cv & (1 << bit)) != 0) {\n\t\t\t\t\t\tcv ^= ca.data[j];\n\t\t\t\t\t\tcans.xor(ccb[j]);\n\t\t\t\t\t}\n\t\t\t\t\tfor (int jj = 0; jj < cn; jj++) {\n\t\t\t\t\t\tif (jj != j && (ca.data[jj] & (1 << bit)) != 0) {\n\t\t\t\t\t\t\tca.data[jj] ^= ca.data[j];\n\t\t\t\t\t\t\tccb[jj].xor(ccb[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tif (cans.get(j)) {\n\t\t\t\t\t\tans[ccl.data[j]] = true;\n\t\t\t\t\t\t++ansN;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint nz = 0;\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tif (ca.data[j] == 0) {\n\t\t\t\t\t\t++nz;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnZeros[i] = nz;\n\t\t\t\tbitZeros[i] = new BitSet[nz];\n\t\t\t\tnz = 0;\n\t\t\t\tfor (int j = 0; j < cn; j++) {\n\t\t\t\t\tif (ca.data[j] == 0) {\n\t\t\t\t\t\tbitZeros[i][nz++] = ccb[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint idx[] = new int[q];\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tidx[i] = i;\n\t\t}\n\t\tsortBy(idx, q, nZeros);\n\t\tRandom rng = new Random(42);\n\t\twhile (ansN != n) {\n\t\t\tfor (int i = q - 1; i >= 0; i--) {\n\t\t\t\tint ii = idx[i];\n\t\t\t\tif (nZeros[ii] == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tIntList ccl = cls[ii];\n\t\t\t\tint cn = ccl.size;\n\t\t\t\tint j = rng.nextInt(nZeros[ii]);\n\t\t\t\tif (lzeros[ii] != null) {\n\t\t\t\t\tlong z = lzeros[ii][j];\n\t\t\t\t\tfor (int k = 0; k < cn; k++) {\n\t\t\t\t\t\tif ((z & (1L << k)) != 0) {\n\t\t\t\t\t\t\tansN += (ans[ccl.data[k]] ^= true) ? 1 : -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tBitSet z = bitZeros[ii][j];\n\t\t\t\t\tfor (int k = 0; k < cn; k++) {\n\t\t\t\t\t\tif (z.get(k)) {\n\t\t\t\t\t\t\tansN += (ans[ccl.data[k]] ^= true) ? 1 : -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ansN == n) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= c; i++) {\n\t\t\tif (ans[i]) {\n\t\t\t\tout.print(i + \" \");\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic int scanInt() throws IOException {\n\t\treturn parseInt(scanString());\n\t}\n\n\tstatic long scanLong() throws IOException {\n\t\treturn parseLong(scanString());\n\t}\n\n\tstatic String scanString() throws IOException {\n\t\twhile (tok == null || !tok.hasMoreTokens()) {\n\t\t\ttok = new StringTokenizer(in.readLine());\n\t\t}\n\t\treturn tok.nextToken();\n\t}\n\n\tstatic BufferedReader in;\n\tstatic PrintWriter out;\n\tstatic StringTokenizer tok;\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tout = new PrintWriter(System.out);\n\t\t\tsolve();\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t\texit(1);\n\t\t}\n\t}\n}"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 1e9, MOD = 1e9 + 7;\ntemplate <class A, class B>\npair<A, B> operator+(pair<A, B>& a, pair<A, B>& b) {\n  return {a.first + b.first, a.second + b.second};\n}\ntemplate <class A, class B>\npair<A, B> operator-(pair<A, B>& a, pair<A, B>& b) {\n  return {a.first - b.first, a.second - b.second};\n}\ntemplate <class A, class B>\nistream& operator>>(istream& is, pair<A, B>& a) {\n  return is >> a.first >> a.second;\n}\ntemplate <class A, class B>\nostream& operator<<(ostream& os, const pair<A, B>& a) {\n  return os << \"< \" << a.first << \" , \" << a.second << \" >\";\n}\ntemplate <class T>\nostream& operator<<(ostream& os, vector<T> v) {\n  os << '[';\n  if (!v.empty()) {\n    os << v[0];\n    for (int i = (1); i < (v.size()); i++) os << ',' << v[i];\n  }\n  return os << ']';\n}\ntemplate <class T>\nostream& operator<<(ostream& os, set<T> v) {\n  os << '{';\n  if (!v.empty()) {\n    os << *v.begin();\n    for (auto it = ++v.begin(); it != v.end(); ++it) os << ',' << *it;\n  }\n  return os << '}';\n}\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nauto DIST = uniform_int_distribution<int>(0, INF);\nconst int MAX = 1e6 + 10;\nint c, n;\nint divs[MAX];\nvoid precalc() {\n  fill(divs, divs + MAX, -1);\n  for (int i = (2); i < (MAX); i++) {\n    if (divs[i] != -1) continue;\n    for (int j = i; j < MAX; j += i) divs[j] = i;\n  }\n}\nint f(int first) {\n  int xx = first;\n  vector<int> d;\n  while (first > 1) {\n    d.emplace_back(divs[first]), first /= divs[first];\n  }\n  sort(d.begin(), d.end()), d.resize(unique(d.begin(), d.end()) - d.begin());\n  for (int dd : d) first *= dd;\n  return first;\n}\nvector<vector<int>> solve(vector<int>& a, int need) {\n  const int M = 260;\n  int n = a.size();\n  assert(n <= M);\n  vector<bitset<20>> mat(n);\n  vector<bitset<M>> who(n);\n  for (int i = (0); i < (n); i++) mat[i] = a[i], who[i][i] = 1;\n  int row = 0;\n  vector<int> col(20, -1);\n  for (int j = (0); j < (20); j++) {\n    int good = -1;\n    for (int i = (row); i < (n); i++)\n      if (mat[i][j]) {\n        good = i;\n        break;\n      }\n    if (good == -1) continue;\n    col[j] = row;\n    swap(mat[row], mat[good]);\n    swap(who[row], who[good]);\n    for (int i = (row + 1); i < (n); i++)\n      if (mat[i][j]) mat[i] ^= mat[row], who[i] ^= who[row];\n    row++;\n  }\n  vector<bool> can(M + 1);\n  vector<vector<int>> res;\n  for (int it = (0); it < (400); it++) {\n    bitset<M> w;\n    bitset<20> b = need;\n    for (int i = (row); i < (n); i++)\n      if (rng() % 2) {\n        if (mat[i] != 0) exit(4);\n        w ^= who[i], b ^= mat[i];\n      }\n    for (int j = (0); j < (20); j++) {\n      if (b[j]) {\n        int i = col[j];\n        assert(i != -1);\n        w ^= who[i], b ^= mat[i];\n      }\n    }\n    assert(b == 0);\n    int sz = w.count();\n    if (!can[sz]) {\n      can[sz] = 1;\n      res.emplace_back(vector<int>(0));\n      for (int i = (0); i < (n); i++)\n        if (w[i]) res.back().emplace_back(a[i]);\n    }\n    if (row == n) break;\n  }\n  return res;\n}\nvoid gauss(int need, vector<int>& lst, vector<int>& ans,\n           vector<vector<int>>& sz, vector<vector<vector<int>>>& v) {\n  int n = lst.size();\n  vector<bitset<20>> a(n);\n  for (int i = 0; i < n; i++) a[i] = lst[i];\n  bitset<20> b = need;\n  vector<bitset<260>> l(n);\n  for (int i = 0; i < n; i++) l[i][i] = 1;\n  int i = 0;\n  vector<int> col(20, -1);\n  int bas_sz = 0;\n  for (int j = 0; j < 20 && i < n; j++) {\n    int i1 = i;\n    while (i1 < n && a[i1][j] == 0) i1++;\n    if (i1 == n) continue;\n    swap(a[i], a[i1]);\n    swap(l[i], l[i1]);\n    bas_sz++;\n    col[j] = i;\n    for (int i2 = i + 1; i2 < n; i2++) {\n      if (a[i2][j]) {\n        a[i2] ^= a[i];\n        l[i2] ^= l[i];\n      }\n    }\n    i++;\n  }\n  bitset<20> res;\n  bitset<260> path;\n  for (int j = 0; j < 20; j++) {\n    if (res[j] != b[j] && col[j] == -1) {\n      exit(0);\n    }\n    if (res[j] == b[j]) continue;\n    res ^= a[col[j]];\n    path ^= l[col[j]];\n  }\n  if (a.back().count() != 0) {\n    for (int i = 0; i < n; i++) {\n      if (path[i]) ans.emplace_back(lst[i]);\n    }\n    return;\n  }\n  vector<int> diff_sz(300);\n  sz.emplace_back();\n  v.emplace_back();\n  for (int it = 0; it < 100; it++) {\n    bitset<260> now = path;\n    for (int i = 0; i < n - bas_sz; i++) {\n      if (rng() % 2) now ^= l[bas_sz + i];\n    }\n    int now_sz = now.count();\n    if (diff_sz[now_sz]) continue;\n    v.back().emplace_back();\n    for (int i = 0; i < n; i++) {\n      if (now[i]) v.back().back().emplace_back(lst[i]);\n    }\n    diff_sz[now_sz] = 1;\n    sz.back().emplace_back(now_sz);\n  }\n}\nint32_t main() {\n  ios_base::sync_with_stdio(false);\n  cin >> c >> n;\n  precalc();\n  vector<vector<int>> gs(c + 1);\n  for (int i = (1); i < (c + 1); i++) {\n    gs[f(i)].emplace_back(i);\n  }\n  vector<int> ask;\n  for (int i = (1); i < (c + 1); i++)\n    if (gs[i].size()) ask.emplace_back(i);\n  vector<int> ans(c + 1);\n  cout << ask.size() << \" \";\n  for (auto i : ask) cout << i << \" \";\n  cout << endl;\n  for (int i : ask) {\n    int first;\n    cin >> first;\n    ans[i] = first;\n  }\n  int all = ans[1];\n  vector<int> lrg(c + 1);\n  for (int i = (1); i < (c + 1); i++) {\n    if (!gs[i].size()) continue;\n    for (int j = i; j <= c; j += i) lrg[j] ^= (ans[i] ^ all);\n  }\n  lrg[1] = all;\n  vector<int> exc = lrg;\n  for (int i = (c + 1) - 1; i >= (1); i--) {\n    if (!gs[i].size()) continue;\n    for (int j = 2 * i; j <= c; j += i)\n      if (gs[j].size()) exc[i] ^= exc[j];\n  }\n  vector<int> res;\n  vector<vector<int>> sz;\n  vector<vector<vector<int>>> opt;\n  for (int i = (1); i < (c + 1); i++) {\n    if (!gs[i].size()) continue;\n    gauss(exc[i], gs[i], res, sz, opt);\n  }\n  int m = opt.size();\n  const int SZ = 40000;\n  vector<bitset<SZ>> knapsack(m + 1);\n  knapsack[0][0] = 1;\n  for (int i = (0); i < (m); i++) {\n    for (auto& g : opt[i]) knapsack[i + 1] |= knapsack[i] << (g.size());\n  }\n  int cur = n - res.size();\n  if (cur < 0) return 3;\n  if (cur >= SZ) return 1;\n  if (!knapsack[m][cur]) return 2;\n  for (int i = (m)-1; i >= (0); i--) {\n    for (auto& g : opt[i])\n      if (cur >= g.size() && knapsack[i][cur - g.size()]) {\n        cur -= g.size();\n        for (int first : g) res.emplace_back(first);\n        break;\n      }\n  }\n  sort(res.begin(), res.end());\n  for (int i = (0); i < (n); i++) cout << res[i] << \" \";\n  cout << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long INFLL = 1e18;\nconst int INF = 1e9 + 1;\nconst int MAXC = 1e6;\nmt19937 gen(time(0));\nvector<int> e(MAXC + 5);\nvoid precalc() {\n  vector<int> p;\n  for (int i = 2; i <= MAXC; i++) {\n    if (e[i] == 0) {\n      e[i] = i;\n      p.emplace_back(i);\n    }\n    for (int j = 0; j < (int)p.size() && p[j] * i <= MAXC && p[j] <= e[i];\n         j++) {\n      e[p[j] * i] = p[j];\n    }\n  }\n}\nint f(int x) {\n  int ans = 1;\n  vector<int> p;\n  while (x > 1) {\n    p.emplace_back(e[x]);\n    x /= e[x];\n  }\n  for (int i = 0; i < (int)p.size(); i++) {\n    if (i + 1 == (int)p.size() || p[i + 1] != p[i]) ans *= p[i];\n  }\n  return ans;\n}\nvoid gauss(int need, vector<int> &lst, vector<int> &ans,\n           vector<vector<int>> &sz, vector<vector<vector<int>>> &v) {\n  int n = lst.size();\n  vector<bitset<20>> a(n);\n  for (int i = 0; i < n; i++) a[i] = lst[i];\n  bitset<20> b = need;\n  vector<bitset<260>> l(n);\n  for (int i = 0; i < n; i++) l[i][i] = 1;\n  int i = 0;\n  vector<int> col(20, -1);\n  int bas_sz = 0;\n  for (int j = 0; j < 20 && i < n; j++) {\n    int i1 = i;\n    while (i1 < n && a[i1][j] == 0) i1++;\n    if (i1 == n) continue;\n    swap(a[i], a[i1]);\n    swap(l[i], l[i1]);\n    bas_sz++;\n    col[j] = i;\n    for (int i2 = i + 1; i2 < n; i2++) {\n      if (a[i2][j]) {\n        a[i2] ^= a[i];\n        l[i2] ^= l[i];\n      }\n    }\n    i++;\n  }\n  bitset<20> res;\n  bitset<260> path;\n  for (int j = 0; j < 20; j++) {\n    if (res[j] != b[j] && col[j] == -1) {\n      exit(0);\n    }\n    if (res[j] == b[j]) continue;\n    res ^= a[col[j]];\n    path ^= l[col[j]];\n  }\n  if (a.back().count() != 0) {\n    for (int i = 0; i < n; i++) {\n      if (path[i]) ans.emplace_back(lst[i]);\n    }\n    return;\n  }\n  vector<int> diff_sz(300);\n  sz.emplace_back();\n  v.emplace_back();\n  for (int it = 0; it < 100; it++) {\n    bitset<260> now = path;\n    for (int i = 0; i < n - bas_sz; i++) {\n      if (gen() % 2) now ^= l[bas_sz + i];\n    }\n    int now_sz = now.count();\n    if (diff_sz[now_sz]) continue;\n    v.back().emplace_back();\n    for (int i = 0; i < n; i++) {\n      if (now[i]) v.back().back().emplace_back(lst[i]);\n    }\n    diff_sz[now_sz] = 1;\n    sz.back().emplace_back(now_sz);\n  }\n}\nvector<int> mem(2 * MAXC + 5, -1);\nint query(int x) { return mem[f(x)]; }\nvoid solve(int n, int c) {\n  vector<int> calc(c + 1);\n  vector<vector<int>> total(c + 1);\n  for (int x = 1; x <= c; x++) total[f(x)].emplace_back(x);\n  vector<int> need;\n  for (int x = 1; x <= c; x++) {\n    if (total[x].size()) need.emplace_back(x);\n  }\n  cout << need.size() << \" \";\n  for (auto &c : need) cout << c << \" \";\n  cout << endl;\n  for (auto &c : need) {\n    int x;\n    cin >> x;\n    mem[c] = x;\n  }\n  int total_xor = query(1);\n  for (int x = 1; x <= c; x++) {\n    if (total[x].empty()) continue;\n    for (int y = x; y <= c; y += x) calc[y] ^= (query(x) ^ total_xor);\n  }\n  calc[1] = total_xor;\n  for (int x = c; x >= 1; x--) {\n    if (total[x].empty()) continue;\n    for (int y = 2 * x; y <= c; y += x) {\n      if (total[y].size()) calc[x] ^= calc[y];\n    }\n  }\n  vector<int> ans;\n  vector<vector<int>> sz;\n  vector<vector<vector<int>>> v;\n  for (int x = 1; x <= c; x++) {\n    if (total[x].empty()) continue;\n    gauss(calc[x], total[x], ans, sz, v);\n  }\n  vector<bitset<40000>> bag(sz.size() + 1);\n  bag[0][0] = 1;\n  for (int i = 1; i <= (int)sz.size(); i++) {\n    for (auto &x : sz[i - 1]) {\n      bag[i] |= (bag[i - 1] << x);\n    }\n  }\n  int now = n - ans.size();\n  for (int i = (int)sz.size(); i >= 1; i--) {\n    for (int j = 0; j < (int)sz[i - 1].size(); j++) {\n      int x = sz[i - 1][j];\n      if (now - x >= 0 && bag[i - 1][now - x]) {\n        now -= x;\n        for (auto &y : v[i - 1][j]) ans.emplace_back(y);\n        break;\n      }\n    }\n  }\n  sort((ans).begin(), (ans).end());\n  for (auto &c : ans) cout << c << \" \";\n  cout << endl;\n}\nint main() {\n  precalc();\n  int c, n;\n  cin >> c >> n;\n  solve(n, c);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 1e9, MOD = 1e9 + 7;\ntemplate <class A, class B>\npair<A, B> operator+(pair<A, B>& a, pair<A, B>& b) {\n  return {a.first + b.first, a.second + b.second};\n}\ntemplate <class A, class B>\npair<A, B> operator-(pair<A, B>& a, pair<A, B>& b) {\n  return {a.first - b.first, a.second - b.second};\n}\ntemplate <class A, class B>\nistream& operator>>(istream& is, pair<A, B>& a) {\n  return is >> a.first >> a.second;\n}\ntemplate <class A, class B>\nostream& operator<<(ostream& os, const pair<A, B>& a) {\n  return os << \"< \" << a.first << \" , \" << a.second << \" >\";\n}\ntemplate <class T>\nostream& operator<<(ostream& os, vector<T> v) {\n  os << '[';\n  if (!v.empty()) {\n    os << v[0];\n    for (int i = (1); i < (v.size()); i++) os << ',' << v[i];\n  }\n  return os << ']';\n}\ntemplate <class T>\nostream& operator<<(ostream& os, set<T> v) {\n  os << '{';\n  if (!v.empty()) {\n    os << *v.begin();\n    for (auto it = ++v.begin(); it != v.end(); ++it) os << ',' << *it;\n  }\n  return os << '}';\n}\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nauto DIST = uniform_int_distribution<int>(0, INF);\nconst int MAX = 1e6 + 10;\nint c, n;\nint divs[MAX];\nvoid precalc() {\n  fill(divs, divs + MAX, -1);\n  for (int i = (2); i < (MAX); i++) {\n    if (divs[i] != -1) continue;\n    for (int j = i; j < MAX; j += i) divs[j] = i;\n  }\n}\nint f(int first) {\n  int xx = first;\n  vector<int> d;\n  while (first > 1) {\n    d.emplace_back(divs[first]), first /= divs[first];\n  }\n  sort(d.begin(), d.end()), d.resize(unique(d.begin(), d.end()) - d.begin());\n  for (int dd : d) first *= dd;\n  return first;\n}\nvector<vector<int>> solve(vector<int>& a, int need) {\n  const int M = 260;\n  int n = a.size();\n  assert(n <= M);\n  vector<bitset<20>> mat(n);\n  vector<bitset<M>> who(n);\n  for (int i = (0); i < (n); i++) mat[i] = a[i], who[i][i] = 1;\n  int row = 0;\n  vector<int> col(20, -1);\n  for (int j = (0); j < (20); j++) {\n    int good = -1;\n    for (int i = (row); i < (n); i++)\n      if (mat[i][j]) {\n        good = i;\n        break;\n      }\n    if (good == -1) continue;\n    col[j] = row;\n    swap(mat[row], mat[good]);\n    swap(who[row], who[good]);\n    for (int i = (row + 1); i < (n); i++)\n      if (mat[i][j]) mat[i] ^= mat[row], who[i] ^= who[row];\n    row++;\n  }\n  vector<bool> can(M + 1);\n  vector<vector<int>> res;\n  for (int it = (0); it < (400); it++) {\n    bitset<M> w;\n    bitset<20> b = need;\n    for (int i = (row); i < (n); i++)\n      if (rng() % 2) {\n        if (mat[i] != 0) exit(4);\n        w ^= who[i], b ^= mat[i];\n      }\n    for (int j = (0); j < (20); j++) {\n      if (b[j]) {\n        int i = col[j];\n        assert(i != -1);\n        w ^= who[i], b ^= mat[i];\n      }\n    }\n    assert(b == 0);\n    int sz = w.count();\n    if (!can[sz]) {\n      can[sz] = 1;\n      res.emplace_back(vector<int>(0));\n      for (int i = (0); i < (n); i++)\n        if (w[i]) res.back().emplace_back(a[i]);\n    }\n    if (row == n) break;\n  }\n  return res;\n}\nvoid gauss(int need, vector<int>& lst, vector<int>& ans,\n           vector<vector<int>>& sz, vector<vector<vector<int>>>& v) {\n  int n = lst.size();\n  vector<bitset<20>> a(n);\n  for (int i = 0; i < n; i++) a[i] = lst[i];\n  bitset<20> b = need;\n  vector<bitset<260>> l(n);\n  for (int i = 0; i < n; i++) l[i][i] = 1;\n  int i = 0;\n  vector<int> col(20, -1);\n  int bas_sz = 0;\n  for (int j = 0; j < 20 && i < n; j++) {\n    int i1 = i;\n    while (i1 < n && a[i1][j] == 0) i1++;\n    if (i1 == n) continue;\n    swap(a[i], a[i1]);\n    swap(l[i], l[i1]);\n    bas_sz++;\n    col[j] = i;\n    for (int i2 = i + 1; i2 < n; i2++) {\n      if (a[i2][j]) {\n        a[i2] ^= a[i];\n        l[i2] ^= l[i];\n      }\n    }\n    i++;\n  }\n  bitset<20> res;\n  bitset<260> path;\n  for (int j = 0; j < 20; j++) {\n    if (res[j] != b[j] && col[j] == -1) {\n      exit(0);\n    }\n    if (res[j] == b[j]) continue;\n    res ^= a[col[j]];\n    path ^= l[col[j]];\n  }\n  if (a.back().count() != 0) {\n    for (int i = 0; i < n; i++) {\n      if (path[i]) ans.emplace_back(lst[i]);\n    }\n    return;\n  }\n  vector<int> diff_sz(300);\n  sz.emplace_back();\n  v.emplace_back();\n  for (int it = 0; it < 100; it++) {\n    bitset<260> now = path;\n    for (int i = 0; i < n - bas_sz; i++) {\n      if (rng() % 2) now ^= l[bas_sz + i];\n    }\n    int now_sz = now.count();\n    if (diff_sz[now_sz]) continue;\n    v.back().emplace_back();\n    for (int i = 0; i < n; i++) {\n      if (now[i]) v.back().back().emplace_back(lst[i]);\n    }\n    diff_sz[now_sz] = 1;\n    sz.back().emplace_back(now_sz);\n  }\n}\nint32_t main() {\n  ios_base::sync_with_stdio(false);\n  cin >> c >> n;\n  precalc();\n  vector<vector<int>> gs(c + 1);\n  for (int i = (1); i < (c + 1); i++) {\n    gs[f(i)].emplace_back(i);\n  }\n  vector<int> ask;\n  for (int i = (1); i < (c + 1); i++)\n    if (gs[i].size()) ask.emplace_back(i);\n  vector<int> ans(c + 1);\n  cout << ask.size() << \" \";\n  for (auto i : ask) cout << i << \" \";\n  cout << endl;\n  for (int i : ask) {\n    int first;\n    cin >> first;\n    ans[i] = first;\n  }\n  int all = ans[1];\n  vector<int> lrg(c + 1);\n  for (int i = (1); i < (c + 1); i++) {\n    if (!gs[i].size()) continue;\n    for (int j = i; j <= c; j += i) lrg[j] ^= (ans[i] ^ all);\n  }\n  lrg[1] = all;\n  vector<int> exc = lrg;\n  for (int i = (c + 1) - 1; i >= (1); i--) {\n    if (!gs[i].size()) continue;\n    for (int j = 2 * i; j <= c; j += i)\n      if (gs[j].size()) exc[i] ^= exc[j];\n  }\n  vector<int> res;\n  vector<vector<int>> sz;\n  vector<vector<vector<int>>> opt;\n  for (int i = (1); i < (c + 1); i++) {\n    if (!gs[i].size()) continue;\n    gauss(exc[i], gs[i], res, sz, opt);\n  }\n  vector<bitset<40000>> bag(sz.size() + 1);\n  bag[0][0] = 1;\n  for (int i = 1; i <= (int)sz.size(); i++) {\n    for (auto& first : sz[i - 1]) {\n      bag[i] |= (bag[i - 1] << first);\n    }\n  }\n  int now = n - res.size();\n  for (int i = (int)sz.size(); i >= 1; i--) {\n    for (int j = 0; j < (int)sz[i - 1].size(); j++) {\n      int first = sz[i - 1][j];\n      if (now - first >= 0 && bag[i - 1][now - first]) {\n        now -= first;\n        for (auto& second : opt[i - 1][j]) res.emplace_back(second);\n        break;\n      }\n    }\n  }\n  sort(res.begin(), res.end());\n  for (auto& c : res) cout << c << \" \";\n  cout << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nstd::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());\nint c, n;\nstd::vector<int> f, mul;\nstd::vector<std::vector<int>> G;\nvoid init() {\n  std::cin >> c >> n;\n  f.resize(c + 1);\n  G.resize(c + 1);\n  mul.assign(c + 1, 1);\n  std::vector<int> vis(c + 1), q(c + 1), g(c + 1);\n  for (int i = 2; i <= c; ++i)\n    if (mul[i] == 1)\n      for (int j = i; j <= c; j += i) mul[j] *= i;\n  for (int i = 1; i <= c; ++i) G[mul[i]].push_back(i);\n  std::vector<int> V;\n  for (int i = 1; i <= c; ++i)\n    if (mul[i] == i) V.push_back(i);\n  std::cout << V.size() << \" \";\n  for (int i : V) std::cout << i << \" \\n\"[i == V.back()];\n  std::cout.flush();\n  for (int i : V) {\n    int x;\n    std::cin >> x;\n    q[i] = x;\n  }\n  for (int i = 1; i <= c; ++i)\n    if (mul[i] == i)\n      for (int j = i; j <= c; j += i)\n        if (mul[j] == j) g[j] ^= q[i];\n  for (int i = 1; i <= c; ++i)\n    if (mul[i] == i)\n      for (int j = i; j <= c; j += i)\n        if (mul[j] == j) f[i] ^= g[j];\n}\nstd::vector<int> ans;\nstd::vector<std::vector<std::vector<int>>> S;\nvoid calc(int xsum, std::vector<int> &V) {\n  using B = std::bitset<300>;\n  std::vector<int> a(20);\n  std::vector<B> b(20);\n  auto insert = [&](int k) {\n    int x = V[k];\n    B l;\n    l[k] = 1;\n    for (int i = 19; i >= 0; --i)\n      if ((x >> i) & 1) {\n        if (!a[i]) {\n          a[i] = x;\n          b[i] = l;\n          return std::make_pair(1, l);\n        }\n        x ^= a[i];\n        l ^= b[i];\n      }\n    return std::make_pair(0, l);\n  };\n  std::vector<B> L;\n  int n = V.size();\n  for (int i = 0; i < n; ++i) {\n    int s;\n    B t;\n    std::tie(s, t) = insert(i);\n    if (!s) L.push_back(t);\n  }\n  B path;\n  for (int i = 19; i >= 0; --i)\n    if ((xsum >> i) & 1) xsum ^= a[i], path ^= b[i];\n  if (!L.size()) {\n    for (int i = 0; i < n; ++i)\n      if (path[i]) ans.push_back(V[i]);\n    return;\n  }\n  std::vector<std::vector<int>> T;\n  std::vector<int> vis(n + 1);\n  for (int _ = 0; _ < 100; ++_) {\n    B cur = path;\n    for (auto t : L)\n      if (rng() & 1) cur ^= t;\n    if (vis[cur.count()])\n      continue;\n    else\n      vis[cur.count()] = 1;\n    std::vector<int> o;\n    for (int i = 0; i < n; ++i)\n      if (cur[i]) o.push_back(V[i]);\n    T.emplace_back(std::move(o));\n  }\n  S.emplace_back(std::move(T));\n}\nvoid solve() {\n  for (int i = 1; i <= c; ++i)\n    if (mul[i] == i) calc(f[i], G[i]);\n  int t = S.size();\n  std::vector<std::bitset<80000>> dp(t + 1);\n  dp[0][0] = 1;\n  for (int i = 0; i < t; ++i)\n    for (auto &T : S[i]) dp[i + 1] |= (dp[i] << T.size());\n  int cur = n - ans.size();\n  for (int i = t - 1; i >= 0; --i)\n    for (auto &T : S[i]) {\n      if (cur >= static_cast<int>(T.size()) && dp[i][cur - T.size()]) {\n        cur -= T.size();\n        for (int x : T) ans.push_back(x);\n        break;\n      }\n    }\n  std::sort(ans.begin(), ans.end());\n  for (int x : ans) std::cout << x << \" \";\n  std::cout.flush();\n}\nint main() {\n  init();\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long INFLL = 1e18;\nconst int INF = 1e9 + 1;\nconst int MAXC = 1e6;\nmt19937 gen(time(0));\nvector<int> e(MAXC + 5);\nvoid precalc() {\n  vector<int> p;\n  for (int i = 2; i <= MAXC; i++) {\n    if (e[i] == 0) {\n      e[i] = i;\n      p.emplace_back(i);\n    }\n    for (int j = 0; j < (int)p.size() && p[j] * i <= MAXC && p[j] <= e[i];\n         j++) {\n      e[p[j] * i] = p[j];\n    }\n  }\n}\nint f(int x) {\n  int ans = 1;\n  vector<int> p;\n  while (x > 1) {\n    p.emplace_back(e[x]);\n    x /= e[x];\n  }\n  for (int i = 0; i < (int)p.size(); i++) {\n    if (i + 1 == (int)p.size() || p[i + 1] != p[i]) ans *= p[i];\n  }\n  return ans;\n}\nvoid gauss(int need, vector<int> &lst, vector<int> &ans,\n           vector<vector<int>> &sz, vector<vector<vector<int>>> &v) {\n  int n = lst.size();\n  vector<bitset<20>> a(n);\n  for (int i = 0; i < n; i++) a[i] = lst[i];\n  bitset<20> b = need;\n  vector<bitset<260>> l(n);\n  for (int i = 0; i < n; i++) l[i][i] = 1;\n  int i = 0;\n  vector<int> col(20, -1);\n  int bas_sz = 0;\n  for (int j = 0; j < 20 && i < n; j++) {\n    int i1 = i;\n    while (i1 < n && a[i1][j] == 0) i1++;\n    if (i1 == n) continue;\n    swap(a[i], a[i1]);\n    swap(l[i], l[i1]);\n    bas_sz++;\n    col[j] = i;\n    for (int i2 = i + 1; i2 < n; i2++) {\n      if (a[i2][j]) {\n        a[i2] ^= a[i];\n        l[i2] ^= l[i];\n      }\n    }\n    i++;\n  }\n  bitset<20> res;\n  bitset<260> path;\n  for (int j = 0; j < 20; j++) {\n    if (res[j] != b[j] && col[j] == -1) {\n      exit(0);\n    }\n    if (res[j] == b[j]) continue;\n    res ^= a[col[j]];\n    path ^= l[col[j]];\n  }\n  if (a.back().count() != 0) {\n    for (int i = 0; i < n; i++) {\n      if (path[i]) ans.emplace_back(lst[i]);\n    }\n    return;\n  }\n  vector<int> diff_sz(300);\n  sz.emplace_back();\n  v.emplace_back();\n  for (int it = 0; it < 100; it++) {\n    bitset<260> now = path;\n    for (int i = 0; i < n - bas_sz; i++) {\n      if (gen() % 2) now ^= l[bas_sz + i];\n    }\n    int now_sz = now.count();\n    if (diff_sz[now_sz]) continue;\n    v.back().emplace_back();\n    for (int i = 0; i < n; i++) {\n      if (now[i]) v.back().back().emplace_back(lst[i]);\n    }\n    diff_sz[now_sz] = 1;\n    sz.back().emplace_back(now_sz);\n  }\n}\nvector<int> mem(2 * MAXC + 5, -1);\nint query(int x) { return mem[x]; }\nvoid solve(int n, int c) {\n  vector<int> calc(c + 1);\n  vector<vector<int>> total(c + 1);\n  for (int x = 1; x <= c; x++) total[f(x)].emplace_back(x);\n  vector<int> need;\n  for (int x = 1; x <= c; x++) {\n    if (total[x].size()) need.emplace_back(x);\n  }\n  cout << need.size() << \" \";\n  for (auto &c : need) cout << c << \" \";\n  cout << endl;\n  for (auto &c : need) {\n    int x;\n    cin >> x;\n    mem[c] = x;\n  }\n  int total_xor = query(1);\n  for (int x = 1; x <= c; x++) {\n    if (total[x].empty()) continue;\n    for (int y = x; y <= c; y += x) calc[y] ^= (query(x) ^ total_xor);\n  }\n  calc[1] = total_xor;\n  for (int x = c; x >= 1; x--) {\n    if (total[x].empty()) continue;\n    for (int y = 2 * x; y <= c; y += x) {\n      if (total[y].size()) calc[x] ^= calc[y];\n    }\n  }\n  vector<int> ans;\n  vector<vector<int>> sz;\n  vector<vector<vector<int>>> v;\n  for (int x = 1; x <= c; x++) {\n    if (total[x].empty()) continue;\n    gauss(calc[x], total[x], ans, sz, v);\n  }\n  vector<bitset<40000>> bag(sz.size() + 1);\n  bag[0][0] = 1;\n  for (int i = 1; i <= (int)sz.size(); i++) {\n    for (auto &x : sz[i - 1]) {\n      bag[i] |= (bag[i - 1] << x);\n    }\n  }\n  int now = n - ans.size();\n  for (int i = (int)sz.size(); i >= 1; i--) {\n    for (int j = 0; j < (int)sz[i - 1].size(); j++) {\n      int x = sz[i - 1][j];\n      if (now - x >= 0 && bag[i - 1][now - x]) {\n        now -= x;\n        for (auto &y : v[i - 1][j]) ans.emplace_back(y);\n        break;\n      }\n    }\n  }\n  sort((ans).begin(), (ans).end());\n  for (auto &c : ans) cout << c << \" \";\n  cout << endl;\n}\nint main() {\n  precalc();\n  int c, n;\n  cin >> c >> n;\n  solve(n, c);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXC = 1e6;\nmt19937 gen(time(0));\nvector<int> e(MAXC + 5);\nvoid precalc() {\n  vector<int> p;\n  for (int i = 2; i <= MAXC; i++) {\n    if (e[i] == 0) {\n      e[i] = i;\n      p.emplace_back(i);\n    }\n    for (int j = 0; j < (int)p.size() && p[j] * i <= MAXC && p[j] <= e[i];\n         j++) {\n      e[p[j] * i] = p[j];\n    }\n  }\n}\nint f(int x) {\n  int ans = 1;\n  vector<int> p;\n  while (x > 1) {\n    p.emplace_back(e[x]);\n    x /= e[x];\n  }\n  for (int i = 0; i < (int)p.size(); i++) {\n    if (i + 1 == (int)p.size() || p[i + 1] != p[i]) ans *= p[i];\n  }\n  return ans;\n}\nvoid gauss(int need, vector<int> &lst, vector<int> &ans,\n           vector<vector<int>> &sz, vector<vector<vector<int>>> &v) {\n  int n = lst.size();\n  vector<bitset<20>> a(n);\n  for (int i = 0; i < n; i++) a[i] = lst[i];\n  bitset<20> b = need;\n  vector<bitset<260>> l(n);\n  for (int i = 0; i < n; i++) l[i][i] = 1;\n  int i = 0;\n  vector<int> col(20, -1);\n  int bas_sz = 0;\n  for (int j = 0; j < 20 && i < n; j++) {\n    int i1 = i;\n    while (i1 < n && a[i1][j] == 0) i1++;\n    if (i1 == n) continue;\n    swap(a[i], a[i1]);\n    swap(l[i], l[i1]);\n    bas_sz++;\n    col[j] = i;\n    for (int i2 = i + 1; i2 < n; i2++) {\n      if (a[i2][j]) {\n        a[i2] ^= a[i];\n        l[i2] ^= l[i];\n      }\n    }\n    i++;\n  }\n  bitset<20> res;\n  bitset<260> path;\n  for (int j = 0; j < 20; j++) {\n    if (res[j] != b[j] && col[j] == -1) {\n      exit(0);\n    }\n    if (res[j] == b[j]) continue;\n    res ^= a[col[j]];\n    path ^= l[col[j]];\n  }\n  if (a.back().count() != 0) {\n    for (int i = 0; i < n; i++) {\n      if (path[i]) ans.emplace_back(lst[i]);\n    }\n    return;\n  }\n  vector<int> diff_sz(300);\n  sz.emplace_back();\n  v.emplace_back();\n  for (int it = 0; it < 100; it++) {\n    bitset<260> now = path;\n    for (int i = 0; i < n - bas_sz; i++) {\n      if (gen() % 2) now ^= l[bas_sz + i];\n    }\n    int now_sz = now.count();\n    if (diff_sz[now_sz]) continue;\n    v.back().emplace_back();\n    for (int i = 0; i < n; i++) {\n      if (now[i]) v.back().back().emplace_back(lst[i]);\n    }\n    diff_sz[now_sz] = 1;\n    sz.back().emplace_back(now_sz);\n  }\n}\nvector<int> mem(2 * MAXC + 5, -1);\nint query(int x) { return mem[x]; }\nvoid solve(int n, int c) {\n  vector<int> calc(c + 1);\n  vector<vector<int>> total(c + 1);\n  for (int x = 1; x <= c; x++) total[f(x)].emplace_back(x);\n  vector<int> need;\n  for (int x = 1; x <= c; x++) {\n    if (total[x].size()) need.emplace_back(x);\n  }\n  cout << need.size() << \" \";\n  for (auto &c : need) cout << c << \" \";\n  cout << endl;\n  for (auto &c : need) {\n    int x;\n    cin >> x;\n    mem[c] = x;\n  }\n  int total_xor = query(1);\n  for (int x = 1; x <= c; x++) {\n    if (total[x].empty()) continue;\n    for (int y = x; y <= c; y += x) calc[y] ^= (query(x) ^ total_xor);\n  }\n  calc[1] = total_xor;\n  for (int x = c; x >= 1; x--) {\n    if (total[x].empty()) continue;\n    for (int y = 2 * x; y <= c; y += x) {\n      if (total[y].size()) calc[x] ^= calc[y];\n    }\n  }\n  vector<int> ans;\n  vector<vector<int>> sz;\n  vector<vector<vector<int>>> v;\n  for (int x = 1; x <= c; x++) {\n    if (total[x].empty()) continue;\n    gauss(calc[x], total[x], ans, sz, v);\n  }\n  vector<bitset<40000>> bag(sz.size() + 1);\n  bag[0][0] = 1;\n  for (int i = 1; i <= (int)sz.size(); i++) {\n    for (auto &x : sz[i - 1]) {\n      bag[i] |= (bag[i - 1] << x);\n    }\n  }\n  int now = n - ans.size();\n  for (int i = (int)sz.size(); i >= 1; i--) {\n    for (int j = 0; j < (int)sz[i - 1].size(); j++) {\n      int x = sz[i - 1][j];\n      if (now - x >= 0 && bag[i - 1][now - x]) {\n        now -= x;\n        for (auto &y : v[i - 1][j]) ans.emplace_back(y);\n        break;\n      }\n    }\n  }\n  sort((ans).begin(), (ans).end());\n  for (auto &c : ans) cout << c << \" \";\n  cout << endl;\n}\nint main() {\n  precalc();\n  int c, n;\n  cin >> c >> n;\n  solve(n, c);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing pi = pair<int, int>;\nlong long get_rand(long long lim, mt19937_64 &eg) {\n  return (long long)(eg() % lim);\n}\nint main() {\n  uint_fast64_t seed = 160912202105230523;\n  mt19937_64 engine(seed);\n  int c, n;\n  cin >> c >> n;\n  vector<vector<int>> pfact(c + 1);\n  vector<int> simp(c + 1, 1);\n  vector<int> qask;\n  vector<int> qres;\n  vector<bool> fl(c + 1, true);\n  for (int i = 2; i <= c; i++) {\n    if (!pfact[i].empty()) {\n      continue;\n    }\n    for (int j = i; j <= c; j += i) {\n      simp[j] *= i;\n      if ((j / i) % i == 0) {\n        fl[j] = false;\n      }\n      int v = j;\n      while (v % i == 0) {\n        pfact[j].push_back(i);\n        v /= i;\n      }\n    }\n  }\n  for (int i = 1; i <= c; i++) {\n    if (fl[i]) {\n      qask.push_back(i);\n    }\n  }\n  cout << qask.size();\n  for (auto &nx : qask) {\n    cout << ' ' << nx;\n  }\n  cout << '\\n';\n  fflush(stdout);\n  qres.resize(qask.size());\n  for (auto &nx : qres) {\n    cin >> nx;\n  }\n  vector<int> f(c + 1);\n  f[1] = qres[0];\n  for (int i = 1; i < qask.size(); i++) {\n    f[qask[i]] = qres[i] ^ qres[0];\n  }\n  for (int i = c; i >= 2; i--) {\n    if (!fl[i]) {\n      continue;\n    }\n    for (int j = 1; j < (1 << pfact[i].size()) - 1; j++) {\n      int v = 1;\n      for (int k = 0; k < pfact[i].size(); k++) {\n        if (j & (1 << k)) {\n          v *= pfact[i][k];\n        }\n      }\n      f[i] ^= f[v];\n    }\n  }\n  for (int i = c; i >= 2; i--) {\n    if (!fl[i]) {\n      continue;\n    }\n    for (int j = 0; j < (1 << pfact[i].size()) - 1; j++) {\n      int v = 1;\n      for (int k = 0; k < pfact[i].size(); k++) {\n        if (j & (1 << k)) {\n          v *= pfact[i][k];\n        }\n      }\n      f[v] ^= f[i];\n    }\n  }\n  vector<int> res;\n  vector<pi> pv;\n  vector<vector<int>> g(c + 1);\n  for (int i = 1; i <= c; i++) {\n    int v = 1;\n    g[simp[i]].push_back(i);\n  }\n  for (int i = 1; i <= c; i++) {\n    if (!g[i].empty()) {\n      pv.push_back({g[i].size(), i});\n    }\n  }\n  sort(pv.begin(), pv.end());\n  int curcd = 0, cursz = 0;\n  int remcd = c, remsz = n;\n  for (int pvpt = 0; pvpt < pv.size(); pvpt++) {\n    int tg = pv[pvpt].second;\n    int aim = f[tg];\n    int csz = pv[pvpt].first;\n    double pacemaker = ((double)(curcd + csz)) * (((double)n) / ((double)c));\n    pacemaker += 0.5;\n    pacemaker -= cursz;\n    int pref = pacemaker;\n    pref = min(pref, csz);\n    pref = max(pref, 0);\n    assert(0 <= remsz && remsz <= remcd);\n    bool islast = false;\n    if (pvpt == pv.size() - 1) {\n      islast = true;\n      pref = remsz;\n    }\n    vector<int> ccd = g[tg];\n    shuffle(ccd.begin(), ccd.end(), engine);\n    vector<int> sweep = ccd;\n    vector<int> ind, sub;\n    for (int i = 0; i < csz; i++) {\n      int tg = -1;\n      for (int j = 0; j < 20; j++) {\n        if (sweep[i] & (1 << j)) {\n          tg = j;\n          break;\n        }\n      }\n      if (tg == -1) {\n        sub.push_back(ccd[i]);\n        continue;\n      }\n      for (int j = i + 1; j < csz; j++) {\n        if (sweep[j] & (1 << tg)) {\n          sweep[j] ^= sweep[i];\n        }\n      }\n      ind.push_back(ccd[i]);\n    }\n    vector<int> curres;\n    do {\n      curres.clear();\n      int faim = aim;\n      shuffle(sub.begin(), sub.end(), engine);\n      int cpref;\n      if (islast) {\n        cpref = max(0, pref - (int)get_rand(1 + ind.size(), engine));\n      } else {\n        cpref = ind.size() / 2;\n        if (ind.size() % 2 && get_rand(2, engine) == 0) {\n          cpref++;\n        }\n        cpref = max(0, pref - cpref);\n      }\n      for (int i = 0; i < min(cpref, (int)sub.size()); i++) {\n        curres.push_back(sub[i]);\n        faim ^= sub[i];\n      }\n      sweep = ind;\n      vector<int> sol(ind.size(), 0);\n      vector<int> flag;\n      for (int i = 0; i < ind.size(); i++) {\n        sol[i] = (1 << i);\n      }\n      for (int i = 0; i < ind.size(); i++) {\n        int tg = -1;\n        for (int j = 0; j < 20; j++) {\n          if (sweep[i] & (1 << j)) {\n            tg = j;\n            break;\n          }\n        }\n        flag.push_back(tg);\n        for (int j = i + 1; j < ind.size(); j++) {\n          if (sweep[j] & (1 << tg)) {\n            sweep[j] ^= sweep[i];\n            sol[j] ^= sol[i];\n          }\n        }\n      }\n      for (int i = ind.size() - 1; i >= 0; i--) {\n        for (int j = i - 1; j >= 0; j--) {\n          if (sweep[j] & (1 << flag[i])) {\n            sweep[j] ^= sweep[i];\n            sol[j] ^= sol[i];\n          }\n        }\n      }\n      int fsol = 0;\n      for (int i = 0; i < ind.size(); i++) {\n        if (faim & (1 << flag[i])) {\n          fsol ^= sol[i];\n        }\n      }\n      for (int i = 0; i < ind.size(); i++) {\n        if (fsol & (1 << i)) {\n          curres.push_back(ind[i]);\n        }\n      }\n      if (islast) {\n        if (remsz == curres.size()) {\n          break;\n        }\n      }\n    } while (islast);\n    for (auto &nx : curres) {\n      res.push_back(nx);\n    }\n    cursz += curres.size();\n    remsz -= curres.size();\n    curcd += csz;\n    remcd -= csz;\n  }\n  assert(res.size() == n);\n  sort(res.begin(), res.end());\n  for (int i = 0; i < res.size(); i++) {\n    if (i) {\n      cout << ' ';\n    }\n    cout << res[i];\n  }\n  cout << '\\n';\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000010;\nint n, m, cur, bel[maxn], f[maxn], ans[maxn];\nint a[20], id[20];\nvector<int> cand, nums[maxn], mask[maxn];\nmt19937 rnd(time(0));\nbool ins(int x) {\n  int o = x;\n  for (int i = 0; i < 20; i++)\n    if (x >> i & 1) {\n      if (!a[i]) {\n        a[i] = x, id[i] = o;\n        return 1;\n      }\n      x ^= a[i];\n      for (int j : mask[id[i]]) mask[o].push_back(j);\n    }\n  return 0;\n}\nint main() {\n  ios::sync_with_stdio(0);\n  cin >> n >> m;\n  iota(bel + 1, bel + n + 1, 1);\n  for (int i = 2; i * i <= n; i++) {\n    for (int j = i * i; j <= n; j += i * i) {\n      while (!(bel[j] % (i * i))) bel[j] /= i;\n    }\n  }\n  vector<int> V;\n  for (int i = 1; i <= n; i++) {\n    if (i == bel[i]) V.push_back(i);\n    nums[bel[i]].push_back(i);\n  }\n  cout << V.size();\n  for (int x : V) cout << \" \" << x;\n  cout << endl;\n  for (int x : V) {\n    cin >> f[x];\n  }\n  for (int x : V) {\n    for (int y = x + x; y <= n; y += x) {\n      if (y == bel[y]) f[y] ^= f[x];\n    }\n  }\n  reverse(V.begin(), V.end());\n  for (int x : V) {\n    for (int y = x + x; y <= n; y += x) f[x] ^= f[y];\n  }\n  for (int x : V) {\n    memset(a, 0, sizeof(a));\n    memset(id, 0, sizeof(id));\n    for (int y : nums[x]) {\n      if (!ins(y)) cand.push_back(y);\n      mask[y].push_back(y);\n      sort(mask[y].begin(), mask[y].end());\n      vector<int> V;\n      for (int z : mask[y]) {\n        if (V.empty() || z ^ V.back())\n          V.push_back(z);\n        else\n          V.pop_back();\n      }\n      mask[y] = V;\n    }\n    for (int i = 0; i < 20; i++)\n      if (f[x] >> i & 1) {\n        f[x] ^= a[i];\n        for (int j : mask[id[i]]) {\n          cur -= ans[j], cur += (ans[j] ^= 1);\n        }\n      }\n  }\n  while (cur ^ m) {\n    int x = cand[rnd() % cand.size()], o = cur;\n    for (int z : mask[x]) {\n      cur -= ans[z], cur += (ans[z] ^= 1);\n    }\n    if (abs(cur - m) > abs(o - m)) {\n      cur = o;\n      for (int z : mask[x]) ans[z] ^= 1;\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    if (ans[i]) cout << i << \" \";\n  }\n  cout << endl;\n  return 0;\n}\n"
        }
    ]
}