{
    "name": "388_C. Fox and Card Game",
    "source": "CODEFORCES",
    "description": "Fox Ciel is playing a card game with her friend Fox Jiro. There are n piles of cards on the table. And there is a positive integer on each card.\n\nThe players take turns and Ciel takes the first turn. In Ciel's turn she takes a card from the top of any non-empty pile, and in Jiro's turn he takes a card from the bottom of any non-empty pile. Each player wants to maximize the total sum of the cards he took. The game ends when all piles become empty.\n\nSuppose Ciel and Jiro play optimally, what is the score of the game?\n\nInput\n\nThe first line contain an integer n (1 \u2264 n \u2264 100). Each of the next n lines contains a description of the pile: the first integer in the line is si (1 \u2264 si \u2264 100) \u2014 the number of cards in the i-th pile; then follow si positive integers c1, c2, ..., ck, ..., csi (1 \u2264 ck \u2264 1000) \u2014 the sequence of the numbers on the cards listed from top of the current pile to bottom of the pile.\n\nOutput\n\nPrint two integers: the sum of Ciel's cards and the sum of Jiro's cards if they play optimally.\n\nExamples\n\nInput\n\n2\n1 100\n2 1 10\n\n\nOutput\n\n101 10\n\n\nInput\n\n1\n9 2 8 6 5 9 4 7 1 3\n\n\nOutput\n\n30 15\n\n\nInput\n\n3\n3 1 3 2\n3 5 4 6\n2 8 7\n\n\nOutput\n\n18 18\n\n\nInput\n\n3\n3 1000 1000 1000\n6 1000 1000 1000 1000 1000 1000\n5 1000 1000 1000 1000 1000\n\n\nOutput\n\n7000 7000\n\nNote\n\nIn the first example, Ciel will take the cards with number 100 and 1, Jiro will take the card with number 10.\n\nIn the second example, Ciel will take cards with numbers 2, 8, 6, 5, 9 and Jiro will take cards with numbers 4, 7, 1, 3.",
    "difficulty": "C",
    "tags": [
        "games",
        "greedy",
        "sortings"
    ],
    "rating": 2000,
    "public_test": [
        {
            "input": "3\n3 1 3 2\n3 5 4 6\n2 8 7\n",
            "output": "18 18\n"
        },
        {
            "input": "2\n1 100\n2 1 10\n",
            "output": "101 10\n"
        },
        {
            "input": "3\n3 1000 1000 1000\n6 1000 1000 1000 1000 1000 1000\n5 1000 1000 1000 1000 1000\n",
            "output": "7000 7000\n"
        },
        {
            "input": "1\n9 2 8 6 5 9 4 7 1 3\n",
            "output": "30 15\n"
        }
    ],
    "generated_test": [
        {
            "input": "5\n5 1 1 1 1 1\n4 1 1 1 1\n3 1 2 1\n2 1 1\n1 1\n",
            "output": "9 7\n"
        },
        {
            "input": "4\n3 1 5 100\n3 1 5 110\n3 100 1 1\n3 100 1 1\n",
            "output": "208 218\n"
        },
        {
            "input": "3\n5 2 2 3 4 5\n4 1 2 3 4\n8 1 2 3 4 5 6 7 8\n",
            "output": "20 42\n"
        },
        {
            "input": "3\n3 1 3 2\n3 5 5 6\n2 8 7\n",
            "output": "19 18\n"
        },
        {
            "input": "2\n1 100\n2 1 20\n",
            "output": "101 20\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 1000 1000 1000 1000 1000\n5 1000 1000 1000 1000 1000\n",
            "output": "7000 7001\n"
        },
        {
            "input": "1\n9 2 8 6 5 9 4 4 1 3\n",
            "output": "30 12\n"
        },
        {
            "input": "4\n3 1 5 100\n3 1 5 110\n3 100 1 1\n3 100 1 0\n",
            "output": "208 217\n"
        },
        {
            "input": "3\n5 2 2 3 0 5\n4 1 2 3 4\n8 1 2 3 4 5 6 7 8\n",
            "output": "20 38\n"
        },
        {
            "input": "3\n3 0 3 2\n3 5 5 6\n2 8 7\n",
            "output": "18 18\n"
        },
        {
            "input": "2\n1 000\n2 1 20\n",
            "output": "1 20\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 1000 1000 1000 1000 1001\n5 1000 1000 1000 1000 1000\n",
            "output": "7000 7002\n"
        },
        {
            "input": "1\n9 2 8 6 3 9 4 4 1 3\n",
            "output": "28 12\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 1000 1000 1000 1000 1001\n5 1000 1010 1000 1000 1000\n",
            "output": "7010 7002\n"
        },
        {
            "input": "1\n9 2 8 6 1 9 4 4 1 3\n",
            "output": "26 12\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 1000 1000 1000 1000 1001\n5 1000 1010 1000 1001 1000\n",
            "output": "7010 7003\n"
        },
        {
            "input": "1\n9 2 8 9 1 9 4 4 1 3\n",
            "output": "29 12\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 0000 1000 1000 1000 1001\n5 1000 1010 1000 1001 1000\n",
            "output": "6010 7003\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 0000 1000 1000 1000 1001\n5 1000 1010 1000 1011 1000\n",
            "output": "6010 7013\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 0000 0000 1000 1000 1000 1001\n5 1000 1010 1000 1011 1000\n",
            "output": "5010 7013\n"
        },
        {
            "input": "6\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 5 5\n2 10 6\n",
            "output": "25 21\n"
        },
        {
            "input": "2\n2 200 1\n3 1 101 2\n",
            "output": "302 3\n"
        },
        {
            "input": "2\n3 1 1000 1\n3 2 1 1\n",
            "output": "1003 3\n"
        },
        {
            "input": "5\n5 1 1 1 1 1\n4 1 1 1 0\n3 1 1 1\n2 1 1\n1 1\n",
            "output": "8 6\n"
        },
        {
            "input": "4\n3 1 5 100\n3 1 5 100\n3 100 1 2\n3 100 1 1\n",
            "output": "208 209\n"
        },
        {
            "input": "3\n5 1 2 3 4 5\n4 1 2 3 4\n8 1 2 3 4 5 2 7 8\n",
            "output": "19 38\n"
        },
        {
            "input": "5\n1 3\n1 3\n1 8\n1 1\n1 4\n",
            "output": "12 7\n"
        },
        {
            "input": "2\n1 110\n2 1 10\n",
            "output": "111 10\n"
        },
        {
            "input": "3\n3 1000 1000 1000\n6 1000 1000 1000 1000 1000 1000\n5 1000 1000 1000 1000 1100\n",
            "output": "7000 7100\n"
        },
        {
            "input": "3\n5 2 2 3 4 5\n4 1 2 1 4\n8 1 2 3 4 5 6 7 8\n",
            "output": "20 40\n"
        },
        {
            "input": "3\n3 2 3 2\n3 5 5 6\n2 8 7\n",
            "output": "20 18\n"
        },
        {
            "input": "2\n1 101\n2 1 20\n",
            "output": "102 20\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 1000 1000 1000 1000 1010\n5 1000 1000 1000 1000 1000\n",
            "output": "7000 7011\n"
        },
        {
            "input": "3\n5 2 2 3 0 5\n4 1 2 3 4\n8 1 2 3 4 5 6 10 8\n",
            "output": "20 41\n"
        },
        {
            "input": "3\n3 0 3 2\n3 9 5 6\n2 8 7\n",
            "output": "22 18\n"
        },
        {
            "input": "2\n1 000\n2 1 4\n",
            "output": "1 4\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 1000 1000 1000 1000 1001\n5 1000 1010 1000 1011 1000\n",
            "output": "7010 7013\n"
        },
        {
            "input": "1\n9 1 8 6 1 9 4 4 1 3\n",
            "output": "25 12\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 0000 1000 1000 1000 1001\n5 1001 1010 1000 1001 1000\n",
            "output": "6011 7003\n"
        },
        {
            "input": "1\n9 2 8 18 1 9 4 4 1 3\n",
            "output": "38 12\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 0000 1000 1000 1000 1001\n5 1100 1010 1000 1011 1000\n",
            "output": "6110 7013\n"
        },
        {
            "input": "6\n2 1 1\n2 2 2\n2 3 1\n2 4 4\n2 5 5\n2 10 6\n",
            "output": "25 19\n"
        },
        {
            "input": "2\n2 200 1\n3 2 101 2\n",
            "output": "303 3\n"
        },
        {
            "input": "5\n5 1 1 1 1 1\n4 1 1 1 1\n3 1 1 1\n2 1 1\n1 0\n",
            "output": "7 7\n"
        },
        {
            "input": "5\n1 0\n1 3\n1 8\n1 1\n1 4\n",
            "output": "11 5\n"
        },
        {
            "input": "3\n3 1000 1001 1000\n6 1000 1000 1000 1000 1000 1000\n5 1000 1000 1000 1000 1100\n",
            "output": "7001 7100\n"
        },
        {
            "input": "4\n3 1 5 100\n3 2 5 110\n3 100 1 0\n3 100 1 1\n",
            "output": "209 217\n"
        },
        {
            "input": "3\n5 2 2 3 4 5\n4 1 4 1 4\n8 1 2 3 4 5 6 7 8\n",
            "output": "22 40\n"
        },
        {
            "input": "3\n3 2 3 2\n3 5 9 6\n2 8 7\n",
            "output": "24 18\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 1100 1000 1000 1000 1010\n5 1000 1000 1000 1000 1000\n",
            "output": "7100 7011\n"
        },
        {
            "input": "4\n3 1 7 100\n3 1 5 110\n3 100 1 2\n3 100 1 0\n",
            "output": "210 218\n"
        },
        {
            "input": "3\n5 2 2 3 0 5\n4 1 2 3 4\n8 1 1 3 4 5 6 10 8\n",
            "output": "19 41\n"
        },
        {
            "input": "3\n3 0 3 2\n3 13 5 6\n2 8 7\n",
            "output": "26 18\n"
        },
        {
            "input": "2\n1 100\n2 1 4\n",
            "output": "101 4\n"
        },
        {
            "input": "3\n3 1000 1000 1000\n6 1000 1000 1000 1000 1000 1001\n5 1000 1010 1000 1011 1000\n",
            "output": "7010 7012\n"
        },
        {
            "input": "3\n3 1000 1000 1001\n6 1000 0000 1000 1000 1000 1001\n5 1001 1010 1010 1001 1000\n",
            "output": "6021 7003\n"
        },
        {
            "input": "1\n9 2 2 18 1 9 4 4 1 3\n",
            "output": "32 12\n"
        },
        {
            "input": "5\n5 1 1 1 1 1\n4 1 2 1 1\n3 1 1 1\n2 1 1\n1 0\n",
            "output": "8 7\n"
        },
        {
            "input": "4\n3 1 5 100\n3 1 5 110\n3 100 1 0\n3 100 1 1\n",
            "output": "208 217\n"
        },
        {
            "input": "1\n9 2 8 6 4 9 4 4 1 3\n",
            "output": "29 12\n"
        },
        {
            "input": "4\n3 1 5 100\n3 1 5 110\n3 100 1 2\n3 100 1 0\n",
            "output": "208 218\n"
        },
        {
            "input": "1\n9 1 8 6 2 9 4 4 1 3\n",
            "output": "26 12\n"
        }
    ]
}