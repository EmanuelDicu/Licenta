{
    "name": "1179_E. Alesya and Discrete Math",
    "source": "CODEFORCES",
    "description": "We call a function good if its domain of definition is some set of integers and if in case it's defined in x and x-1, f(x) = f(x-1) + 1 or f(x) = f(x-1).\n\nTanya has found n good functions f_{1}, \u2026, f_{n}, which are defined on all integers from 0 to 10^{18} and f_i(0) = 0 and f_i(10^{18}) = L for all i from 1 to n. It's an notorious coincidence that n is a divisor of L. \n\nShe suggests Alesya a game. Using one question Alesya can ask Tanya a value of any single function in any single point. To win Alesya must choose integers l_{i} and r_{i} (0 \u2264 l_{i} \u2264 r_{i} \u2264 10^{18}), such that f_{i}(r_{i}) - f_{i}(l_{i}) \u2265 L/n (here f_i(x) means the value of i-th function at point x) for all i such that 1 \u2264 i \u2264 n so that for any pair of two functions their segments [l_i, r_i] don't intersect (but may have one common point).\n\nUnfortunately, Tanya doesn't allow to make more than 2 \u22c5 10^{5} questions. Help Alesya to win!\n\nIt can be proved that it's always possible to choose [l_i, r_i] which satisfy the conditions described above.\n\nIt's guaranteed, that Tanya doesn't change functions during the game, i.e. interactor is not adaptive\n\nInput\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 1000, 1 \u2264 L \u2264 10^{18}, n is a divisor of L) \u2014 number of functions and their value in 10^{18}.\n\nOutput\n\nWhen you've found needed l_i, r_i, print \"!\" without quotes on a separate line and then n lines, i-th from them should contain two integers l_i, r_i divided by space.\n\nInteraction\n\nTo ask f_i(x), print symbol \"?\" without quotes and then two integers i and x (1 \u2264 i \u2264 n, 0 \u2264 x \u2264 10^{18}). Note, you must flush your output to get a response.\n\nAfter that, you should read an integer which is a value of i-th function in point x.\n\nYou're allowed not more than 2 \u22c5 10^5 questions.\n\nTo flush you can use (just after printing an integer and end-of-line):\n\n  * fflush(stdout) in C++; \n  * System.out.flush() in Java; \n  * stdout.flush() in Python; \n  * flush(output) in Pascal; \n  * See the documentation for other languages. \n\n\n\nHacks:\n\nOnly tests where 1 \u2264 L \u2264 2000 are allowed for hacks, for a hack set a test using following format:\n\nThe first line should contain two integers n and L (1 \u2264 n \u2264 1000, 1 \u2264 L \u2264 2000, n is a divisor of L) \u2014 number of functions and their value in 10^{18}.\n\nEach of n following lines should contain L numbers l_1, l_2, ... , l_L (0 \u2264 l_j < 10^{18} for all 1 \u2264 j \u2264 L and l_j < l_{j+1} for all 1 < j \u2264 L), in i-th of them l_j means that f_i(l_j) < f_i(l_j + 1).\n\nExample\n\nInput\n\n\n5 5\n? 1 0\n? 1 1\n? 2 1\n? 2 2\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 5\n!\n0 1\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n0\n1\n1\n2\n2\n3\n3\n4\n4\n4\n5\n\nNote\n\nIn the example Tanya has 5 same functions where f(0) = 0, f(1) = 1, f(2) = 2, f(3) = 3, f(4) = 4 and all remaining points have value 5.\n\nAlesya must choose two integers for all functions so that difference of values of a function in its points is not less than L/n (what is 1 here) and length of intersection of segments is zero.\n\nOne possible way is to choose pairs [0, 1], [1, 2], [2, 3], [3, 4] and [4, 5] for functions 1, 2, 3, 4 and 5 respectively.",
    "difficulty": "E",
    "tags": [
        "divide and conquer",
        "interactive"
    ],
    "rating": 3200,
    "public_test": [
        {
            "input": "5 5\n? 1 0\n? 1 1\n? 2 1\n? 2 2\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 5\n!\n0 1\n1 2\n2 3\n3 4\n4 5\n",
            "output": "\n0\n1\n1\n2\n2\n3\n3\n4\n4\n4\n5\n"
        }
    ],
    "generated_test": [
        {
            "input": "0 1\n1\n1 144596170576560149 -144596170576560149 1\n",
            "output": "!\n"
        },
        {
            "input": "1 1\n1\n0 999999999999999999 -999999999999999999 2\n",
            "output": "!\n0 1000000000000000000\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 1 -1 5\n1\n1 1 -1 5\n1\n1 1 -1 5\n1\n1 1 -1 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 4 967741727828979491\n? 4 967741847038269042\n? 4 967741906642913817\n? 4 967741936445236205\n? 4 967741921544075011\n? 4 967741914093494414\n? 4 967741910368204115\n? 4 967741908505558966\n? 4 967741907574236391\n? 4 967741907108575104\n? 4 967741906875744460\n? 4 967741906759329138\n? 4 967741906701121477\n? 4 967741906672017647\n? 4 967741906657465732\n? 4 967741906650189774\n? 4 967741906646551795\n? 4 967741906644732806\n? 4 967741906643823311\n? 4 967741906643368564\n? 4 967741906643141190\n? 4 967741906643027503\n? 4 967741906642970660\n? 4 967741906642942238\n? 4 967741906642928027\n? 4 967741906642920922\n? 4 967741906642917369\n? 4 967741906642915593\n? 4 967741906642914705\n? 4 967741906642914261\n? 4 967741906642914039\n? 4 967741906642913928\n? 4 967741906642913872\n? 4 967741906642913844\n? 4 967741906642913830\n? 4 967741906642913823\n? 4 967741906642913820\n? 4 967741906642913818\n? 1 967741906642913818\n? 2 967741906642913818\n? 3 967741906642913818\n? 5 967741906642913818\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 5\n? 1 0\n? 1 1\n? 2 1\n? 2 2\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 1\n1 2\n2 3\n3 4\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 1 -1 6\n1\n1 1 -1 5\n1\n1 1 -1 5\n2\n1 1 -1 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 5 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 4 967741489410400390\n? 5 967741489410400390\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 3 483870744705200195\n? 3 241935372352600097\n? 3 120967686176300048\n? 3 60483843088150023\n? 3 30241921544075011\n? 3 15120960772037505\n? 3 7560480386018752\n? 3 3780240193009375\n? 3 1890120096504687\n? 3 945060048252343\n? 3 472530024126171\n? 3 236265012063085\n? 3 118132506031542\n? 3 59066253015770\n? 3 29533126507884\n? 3 14766563253941\n? 3 7383281626970\n? 3 3691640813484\n? 3 1845820406741\n? 3 922910203370\n? 3 461455101684\n? 3 230727550841\n? 3 115363775420\n? 3 57681887709\n? 3 28840943854\n? 3 14420471926\n? 3 7210235962\n? 3 3605117980\n? 3 1802558989\n? 3 901279494\n? 3 450639746\n? 3 225319872\n? 3 112659935\n? 3 56329967\n? 3 28164983\n? 3 14082491\n? 3 7041245\n? 3 3520622\n? 3 1760310\n? 3 880154\n? 3 440076\n? 3 220037\n? 3 110018\n? 3 55008\n? 3 27503\n? 3 13751\n? 3 6875\n? 3 3437\n? 3 1718\n? 3 858\n? 3 428\n? 3 213\n? 3 106\n? 3 52\n? 3 25\n? 3 12\n? 3 5\n? 3 2\n? 2 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "2 0\n1\n0 999999999999999999 -193697529159490749 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 1 249999999999999999\n? 1 249999999999999999\n? 2 249999999999999999\n!\n249999999999999999 1000000000000000000\n0 249999999999999999\n"
        },
        {
            "input": "3 0\n1\n0 999999999999999999 -193697529159490749 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 1 249999999999999999\n? 3 249999999999999999\n? 1 249999999999999999\n? 2 249999999999999999\n? 3 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n!\n0 0\n0 249999999999999999\n0 0\n"
        },
        {
            "input": "3 0\n1\n1 999999999999999999 -193697529159490749 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 93749999999999999\n? 2 78124999999999999\n? 2 70312499999999999\n? 2 66406249999999999\n? 2 64453124999999999\n? 2 63476562499999999\n? 2 62988281249999999\n? 2 62744140624999999\n? 2 62622070312499999\n? 2 62561035156249999\n? 2 62530517578124999\n? 2 62515258789062499\n? 2 62507629394531249\n? 2 62503814697265624\n? 2 62501907348632811\n? 2 62500953674316405\n? 2 62500476837158202\n? 2 62500238418579100\n? 2 62500119209289549\n? 2 62500059604644774\n? 2 62500029802322386\n? 2 62500014901161192\n? 2 62500007450580595\n? 2 62500003725290297\n? 2 62500001862645148\n? 2 62500000931322573\n? 2 62500000465661286\n? 2 62500000232830642\n? 2 62500000116415320\n? 2 62500000058207659\n? 2 62500000029103829\n? 2 62500000014551914\n? 2 62500000007275956\n? 2 62500000003637977\n? 2 62500000001818988\n? 2 62500000000909493\n? 2 62500000000454746\n? 2 62500000000227372\n? 2 62500000000113685\n? 2 62500000000056842\n? 2 62500000000028420\n? 2 62500000000014209\n? 2 62500000000007104\n? 2 62500000000003551\n? 2 62500000000001775\n? 2 62500000000000887\n? 2 62500000000000443\n? 2 62500000000000221\n? 2 62500000000000110\n? 2 62500000000000054\n? 2 62500000000000026\n? 2 62500000000000012\n? 2 62500000000000005\n? 2 62500000000000002\n? 2 62500000000000000\n? 1 62500000000000000\n? 3 62500000000000000\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n!\n0 0\n0 1000000000000000000\n0 0\n"
        },
        {
            "input": "5 -1\n1\n1 412405512805038608 -141705712870597684 2\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 93749999999999999\n? 4 78124999999999999\n? 4 70312499999999999\n? 4 66406249999999999\n? 4 64453124999999999\n? 4 63476562499999999\n? 4 62988281249999999\n? 4 62744140624999999\n? 4 62622070312499999\n? 4 62561035156249999\n? 4 62530517578124999\n? 4 62515258789062499\n? 4 62507629394531249\n? 4 62503814697265624\n? 4 62501907348632811\n? 4 62500953674316405\n? 4 62500476837158202\n? 4 62500238418579100\n? 4 62500119209289549\n? 4 62500059604644774\n? 4 62500029802322386\n? 4 62500014901161192\n? 4 62500007450580595\n? 4 62500003725290297\n? 4 62500001862645148\n? 4 62500000931322573\n? 4 62500000465661286\n? 4 62500000232830642\n? 4 62500000116415320\n? 4 62500000058207659\n? 4 62500000029103829\n? 4 62500000014551914\n? 4 62500000007275956\n? 4 62500000003637977\n? 4 62500000001818988\n? 4 62500000000909493\n? 4 62500000000454746\n? 4 62500000000227372\n? 4 62500000000113685\n? 4 62500000000056842\n? 4 62500000000028420\n? 4 62500000000014209\n? 4 62500000000007104\n? 4 62500000000003551\n? 4 62500000000001775\n? 4 62500000000000887\n? 4 62500000000000443\n? 4 62500000000000221\n? 4 62500000000000110\n? 4 62500000000000054\n? 4 62500000000000026\n? 4 62500000000000012\n? 4 62500000000000005\n? 4 62500000000000002\n? 4 62500000000000000\n? 1 62500000000000000\n? 2 62500000000000000\n? 3 62500000000000000\n? 5 62500000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 1000000000000000000\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "10 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 6 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n2 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 4 1\n? 3 1\n? 1 1\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 1\n? 1 1\n? 5 1\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 4 1\n? 4 1\n? 3 1\n!\n0 0\n0 0\n0 0\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 -1\n2\n0 182335588407075927 -141705712870597684 2\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 1 249999999999999999\n? 2 249999999999999999\n? 3 249999999999999999\n? 5 249999999999999999\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 1000000000000000000\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "7 -1\n2\n0 182335588407075927 -271654132773494504 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 1 249999999999999999\n? 3 249999999999999999\n? 4 249999999999999999\n? 5 249999999999999999\n? 6 249999999999999999\n? 7 249999999999999999\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 0\n0 1000000000000000000\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "7 -2\n2\n0 182335588407075927 -271654132773494504 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 1 249999999999999999\n? 3 249999999999999999\n? 4 249999999999999999\n? 5 249999999999999999\n? 6 249999999999999999\n? 7 249999999999999999\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "3 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 0\n? 5 8\n!\n0 2\n2 2\n2 3\n2 9\n4 5\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 1 1\n? 3 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 3 1\n? 1 1\n? 2 1\n? 3 1\n? 2 1\n? 2 1\n? 1 1\n!\n0 0\n0 1\n0 0\n"
        },
        {
            "input": "7 -2\n0\n0 275334194614304238 -363556119614822669 2\n",
            "output": "? 2 500000000000000000\n? 1 500000000000000000\n? 3 500000000000000000\n? 4 500000000000000000\n? 5 500000000000000000\n? 6 500000000000000000\n? 7 500000000000000000\n? 6 500000000000000000\n? 6 249999999999999999\n? 6 124999999999999999\n? 6 62499999999999999\n? 6 31249999999999999\n? 6 15624999999999999\n? 6 7812499999999999\n? 6 3906249999999999\n? 6 1953124999999999\n? 6 976562499999999\n? 6 488281249999999\n? 6 244140624999999\n? 6 122070312499999\n? 6 61035156249999\n? 6 30517578124999\n? 6 15258789062499\n? 6 7629394531249\n? 6 3814697265624\n? 6 1907348632811\n? 6 953674316405\n? 6 476837158202\n? 6 238418579100\n? 6 119209289549\n? 6 59604644774\n? 6 29802322386\n? 6 14901161192\n? 6 7450580595\n? 6 3725290297\n? 6 1862645148\n? 6 931322573\n? 6 465661286\n? 6 232830642\n? 6 116415320\n? 6 58207659\n? 6 29103829\n? 6 14551914\n? 6 7275956\n? 6 3637977\n? 6 1818988\n? 6 909493\n? 6 454746\n? 6 227372\n? 6 113685\n? 6 56842\n? 6 28420\n? 6 14209\n? 6 7104\n? 6 3551\n? 6 1775\n? 6 887\n? 6 443\n? 6 221\n? 6 110\n? 6 54\n? 6 26\n? 6 12\n? 6 5\n? 6 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "3 2\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 0 3\n? 4 3\n? 4 4\n? 5 0\n? 5 8\n!\n0 2\n2 4\n2 0\n2 9\n4 5\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 1 1\n? 2 1\n? 1 1\n!\n0 0\n0 1\n0 0\n"
        },
        {
            "input": "7 -3\n-1\n0 275334194614304238 -363556119614822669 2\n",
            "output": "? 2 500000000000000000\n? 2 750000000000000000\n? 1 750000000000000000\n? 3 750000000000000000\n? 4 750000000000000000\n? 5 750000000000000000\n? 6 750000000000000000\n? 7 750000000000000000\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "12 -3\n-1\n0 5532811451852933 -210544917364241881 2\n",
            "output": "? 8 500000000000000000\n? 8 750000000000000000\n? 1 750000000000000000\n? 2 750000000000000000\n? 3 750000000000000000\n? 4 750000000000000000\n? 5 750000000000000000\n? 6 750000000000000000\n? 7 750000000000000000\n? 9 750000000000000000\n? 10 750000000000000000\n? 11 750000000000000000\n? 12 750000000000000000\n? 9 500000000000000000\n? 9 249999999999999999\n? 9 124999999999999999\n? 9 62499999999999999\n? 9 31249999999999999\n? 9 15624999999999999\n? 9 7812499999999999\n? 9 3906249999999999\n? 9 1953124999999999\n? 9 976562499999999\n? 9 488281249999999\n? 9 244140624999999\n? 9 122070312499999\n? 9 61035156249999\n? 9 30517578124999\n? 9 15258789062499\n? 9 7629394531249\n? 9 3814697265624\n? 9 1907348632811\n? 9 953674316405\n? 9 476837158202\n? 9 238418579100\n? 9 119209289549\n? 9 59604644774\n? 9 29802322386\n? 9 14901161192\n? 9 7450580595\n? 9 3725290297\n? 9 1862645148\n? 9 931322573\n? 9 465661286\n? 9 232830642\n? 9 116415320\n? 9 58207659\n? 9 29103829\n? 9 14551914\n? 9 7275956\n? 9 3637977\n? 9 1818988\n? 9 909493\n? 9 454746\n? 9 227372\n? 9 113685\n? 9 56842\n? 9 28420\n? 9 14209\n? 9 7104\n? 9 3551\n? 9 1775\n? 9 887\n? 9 443\n? 9 221\n? 9 110\n? 9 54\n? 9 26\n? 9 12\n? 9 5\n? 9 2\n? 6 500000000000000000\n? 6 249999999999999999\n? 6 124999999999999999\n? 6 62499999999999999\n? 6 31249999999999999\n? 6 15624999999999999\n? 6 7812499999999999\n? 6 3906249999999999\n? 6 1953124999999999\n? 6 976562499999999\n? 6 488281249999999\n? 6 244140624999999\n? 6 122070312499999\n? 6 61035156249999\n? 6 30517578124999\n? 6 15258789062499\n? 6 7629394531249\n? 6 3814697265624\n? 6 1907348632811\n? 6 953674316405\n? 6 476837158202\n? 6 238418579100\n? 6 119209289549\n? 6 59604644774\n? 6 29802322386\n? 6 14901161192\n? 6 7450580595\n? 6 3725290297\n? 6 1862645148\n? 6 931322573\n? 6 465661286\n? 6 232830642\n? 6 116415320\n? 6 58207659\n? 6 29103829\n? 6 14551914\n? 6 7275956\n? 6 3637977\n? 6 1818988\n? 6 909493\n? 6 454746\n? 6 227372\n? 6 113685\n? 6 56842\n? 6 28420\n? 6 14209\n? 6 7104\n? 6 3551\n? 6 1775\n? 6 887\n? 6 443\n? 6 221\n? 6 110\n? 6 54\n? 6 26\n? 6 12\n? 6 5\n? 6 2\n? 6 500000000000000000\n? 6 249999999999999999\n? 6 124999999999999999\n? 6 62499999999999999\n? 6 31249999999999999\n? 6 15624999999999999\n? 6 7812499999999999\n? 6 3906249999999999\n? 6 1953124999999999\n? 6 976562499999999\n? 6 488281249999999\n? 6 244140624999999\n? 6 122070312499999\n? 6 61035156249999\n? 6 30517578124999\n? 6 15258789062499\n? 6 7629394531249\n? 6 3814697265624\n? 6 1907348632811\n? 6 953674316405\n? 6 476837158202\n? 6 238418579100\n? 6 119209289549\n? 6 59604644774\n? 6 29802322386\n? 6 14901161192\n? 6 7450580595\n? 6 3725290297\n? 6 1862645148\n? 6 931322573\n? 6 465661286\n? 6 232830642\n? 6 116415320\n? 6 58207659\n? 6 29103829\n? 6 14551914\n? 6 7275956\n? 6 3637977\n? 6 1818988\n? 6 909493\n? 6 454746\n? 6 227372\n? 6 113685\n? 6 56842\n? 6 28420\n? 6 14209\n? 6 7104\n? 6 3551\n? 6 1775\n? 6 887\n? 6 443\n? 6 221\n? 6 110\n? 6 54\n? 6 26\n? 6 12\n? 6 5\n? 6 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n!\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "1 1\n1\n-1 0 999999999999999999 1\n",
            "output": "!\n0 1000000000000000000\n"
        },
        {
            "input": "0 0\n1\n1 144596170576560149 -144596170576560149 1\n",
            "output": "!\n"
        },
        {
            "input": "1 0\n1\n0 999999999999999999 -999999999999999999 2\n",
            "output": "!\n0 1000000000000000000\n"
        },
        {
            "input": "1 1\n1\n0 0 999999999999999999 2\n",
            "output": "!\n0 1000000000000000000\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 1 -1 6\n1\n1 1 -1 5\n1\n1 1 -1 5\n1\n1 1 -1 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 4 967741727828979491\n? 4 967741847038269042\n? 4 967741906642913817\n? 4 967741936445236205\n? 4 967741921544075011\n? 4 967741914093494414\n? 4 967741910368204115\n? 4 967741908505558966\n? 4 967741907574236391\n? 4 967741907108575104\n? 4 967741906875744460\n? 4 967741906759329138\n? 4 967741906701121477\n? 4 967741906672017647\n? 4 967741906657465732\n? 4 967741906650189774\n? 4 967741906646551795\n? 4 967741906644732806\n? 4 967741906643823311\n? 4 967741906643368564\n? 4 967741906643141190\n? 4 967741906643027503\n? 4 967741906642970660\n? 4 967741906642942238\n? 4 967741906642928027\n? 4 967741906642920922\n? 4 967741906642917369\n? 4 967741906642915593\n? 4 967741906642914705\n? 4 967741906642914261\n? 4 967741906642914039\n? 4 967741906642913928\n? 4 967741906642913872\n? 4 967741906642913844\n? 4 967741906642913830\n? 4 967741906642913823\n? 4 967741906642913820\n? 4 967741906642913818\n? 1 967741906642913818\n? 2 967741906642913818\n? 3 967741906642913818\n? 5 967741906642913818\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 5\n? 1 0\n? 1 1\n? 2 1\n? 2 2\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 1\n1 2\n2 3\n3 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n1\n2 144596170576560149 -144596170576560149 1\n",
            "output": "!\n"
        },
        {
            "input": "1 0\n1\n0 999999999999999999 -193697529159490749 2\n",
            "output": "!\n0 1000000000000000000\n"
        },
        {
            "input": "1 1\n1\n-1 0 999999999999999999 2\n",
            "output": "!\n0 1000000000000000000\n"
        },
        {
            "input": "5 5\n? 1 0\n? 1 1\n? 2 1\n? 2 2\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 1\n1 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n1\n2 17770914185016483 -144596170576560149 1\n",
            "output": "!\n"
        },
        {
            "input": "0 1\n1\n-1 0 999999999999999999 2\n",
            "output": "!\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 1 -1 6\n1\n1 1 -1 5\n1\n1 1 -1 5\n2\n1 1 -1 4\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 5 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 4 967741489410400390\n? 5 967741489410400390\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 3 483870744705200195\n? 3 241935372352600097\n? 3 120967686176300048\n? 3 60483843088150023\n? 3 30241921544075011\n? 3 15120960772037505\n? 3 7560480386018752\n? 3 3780240193009375\n? 3 1890120096504687\n? 3 945060048252343\n? 3 472530024126171\n? 3 236265012063085\n? 3 118132506031542\n? 3 59066253015770\n? 3 29533126507884\n? 3 14766563253941\n? 3 7383281626970\n? 3 3691640813484\n? 3 1845820406741\n? 3 922910203370\n? 3 461455101684\n? 3 230727550841\n? 3 115363775420\n? 3 57681887709\n? 3 28840943854\n? 3 14420471926\n? 3 7210235962\n? 3 3605117980\n? 3 1802558989\n? 3 901279494\n? 3 450639746\n? 3 225319872\n? 3 112659935\n? 3 56329967\n? 3 28164983\n? 3 14082491\n? 3 7041245\n? 3 3520622\n? 3 1760310\n? 3 880154\n? 3 440076\n? 3 220037\n? 3 110018\n? 3 55008\n? 3 27503\n? 3 13751\n? 3 6875\n? 3 3437\n? 3 1718\n? 3 858\n? 3 428\n? 3 213\n? 3 106\n? 3 52\n? 3 25\n? 3 12\n? 3 5\n? 3 2\n? 2 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 5\n? 1 0\n? 1 0\n? 2 1\n? 2 2\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 1\n1 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n1\n2 17770914185016483 -128570634499058734 1\n",
            "output": "!\n"
        },
        {
            "input": "0 1\n0\n-1 0 999999999999999999 2\n",
            "output": "!\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 1 -2 6\n1\n1 1 -1 5\n1\n1 1 -1 5\n2\n1 1 -1 4\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 5 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 4 967741489410400390\n? 5 967741489410400390\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 3 483870744705200195\n? 3 241935372352600097\n? 3 120967686176300048\n? 3 60483843088150023\n? 3 30241921544075011\n? 3 15120960772037505\n? 3 7560480386018752\n? 3 3780240193009375\n? 3 1890120096504687\n? 3 945060048252343\n? 3 472530024126171\n? 3 236265012063085\n? 3 118132506031542\n? 3 59066253015770\n? 3 29533126507884\n? 3 14766563253941\n? 3 7383281626970\n? 3 3691640813484\n? 3 1845820406741\n? 3 922910203370\n? 3 461455101684\n? 3 230727550841\n? 3 115363775420\n? 3 57681887709\n? 3 28840943854\n? 3 14420471926\n? 3 7210235962\n? 3 3605117980\n? 3 1802558989\n? 3 901279494\n? 3 450639746\n? 3 225319872\n? 3 112659935\n? 3 56329967\n? 3 28164983\n? 3 14082491\n? 3 7041245\n? 3 3520622\n? 3 1760310\n? 3 880154\n? 3 440076\n? 3 220037\n? 3 110018\n? 3 55008\n? 3 27503\n? 3 13751\n? 3 6875\n? 3 3437\n? 3 1718\n? 3 858\n? 3 428\n? 3 213\n? 3 106\n? 3 52\n? 3 25\n? 3 12\n? 3 5\n? 3 2\n? 2 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 5\n? 1 0\n? 1 0\n? 2 1\n? 2 1\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 1\n1 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n1\n2 21470975166070560 -128570634499058734 1\n",
            "output": "!\n"
        },
        {
            "input": "0 0\n0\n-1 0 999999999999999999 2\n",
            "output": "!\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 1 -2 6\n1\n1 1 -1 5\n1\n1 1 -1 4\n2\n1 1 -1 4\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 5 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 4 967741489410400390\n? 5 967741489410400390\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 3 483870744705200195\n? 3 241935372352600097\n? 3 120967686176300048\n? 3 60483843088150023\n? 3 30241921544075011\n? 3 15120960772037505\n? 3 7560480386018752\n? 3 3780240193009375\n? 3 1890120096504687\n? 3 945060048252343\n? 3 472530024126171\n? 3 236265012063085\n? 3 118132506031542\n? 3 59066253015770\n? 3 29533126507884\n? 3 14766563253941\n? 3 7383281626970\n? 3 3691640813484\n? 3 1845820406741\n? 3 922910203370\n? 3 461455101684\n? 3 230727550841\n? 3 115363775420\n? 3 57681887709\n? 3 28840943854\n? 3 14420471926\n? 3 7210235962\n? 3 3605117980\n? 3 1802558989\n? 3 901279494\n? 3 450639746\n? 3 225319872\n? 3 112659935\n? 3 56329967\n? 3 28164983\n? 3 14082491\n? 3 7041245\n? 3 3520622\n? 3 1760310\n? 3 880154\n? 3 440076\n? 3 220037\n? 3 110018\n? 3 55008\n? 3 27503\n? 3 13751\n? 3 6875\n? 3 3437\n? 3 1718\n? 3 858\n? 3 428\n? 3 213\n? 3 106\n? 3 52\n? 3 25\n? 3 12\n? 3 5\n? 3 2\n? 2 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 5\n? 1 0\n? 1 0\n? 2 1\n? 2 1\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n1 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-1 0\n1\n2 21470975166070560 -128570634499058734 1\n",
            "output": "!\n"
        },
        {
            "input": "3 0\n1\n1 236686773201079124 -193697529159490749 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 93749999999999999\n? 2 78124999999999999\n? 2 70312499999999999\n? 2 66406249999999999\n? 2 64453124999999999\n? 2 63476562499999999\n? 2 62988281249999999\n? 2 62744140624999999\n? 2 62622070312499999\n? 2 62561035156249999\n? 2 62530517578124999\n? 2 62515258789062499\n? 2 62507629394531249\n? 2 62503814697265624\n? 2 62501907348632811\n? 2 62500953674316405\n? 2 62500476837158202\n? 2 62500238418579100\n? 2 62500119209289549\n? 2 62500059604644774\n? 2 62500029802322386\n? 2 62500014901161192\n? 2 62500007450580595\n? 2 62500003725290297\n? 2 62500001862645148\n? 2 62500000931322573\n? 2 62500000465661286\n? 2 62500000232830642\n? 2 62500000116415320\n? 2 62500000058207659\n? 2 62500000029103829\n? 2 62500000014551914\n? 2 62500000007275956\n? 2 62500000003637977\n? 2 62500000001818988\n? 2 62500000000909493\n? 2 62500000000454746\n? 2 62500000000227372\n? 2 62500000000113685\n? 2 62500000000056842\n? 2 62500000000028420\n? 2 62500000000014209\n? 2 62500000000007104\n? 2 62500000000003551\n? 2 62500000000001775\n? 2 62500000000000887\n? 2 62500000000000443\n? 2 62500000000000221\n? 2 62500000000000110\n? 2 62500000000000054\n? 2 62500000000000026\n? 2 62500000000000012\n? 2 62500000000000005\n? 2 62500000000000002\n? 2 62500000000000000\n? 1 62500000000000000\n? 3 62500000000000000\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n!\n0 0\n0 1000000000000000000\n0 0\n"
        },
        {
            "input": "0 -1\n0\n-1 0 999999999999999999 2\n",
            "output": "!\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 0 -2 6\n1\n1 1 -1 5\n1\n1 1 -1 4\n2\n1 1 -1 4\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 5 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 4 967741489410400390\n? 5 967741489410400390\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 3 483870744705200195\n? 3 241935372352600097\n? 3 120967686176300048\n? 3 60483843088150023\n? 3 30241921544075011\n? 3 15120960772037505\n? 3 7560480386018752\n? 3 3780240193009375\n? 3 1890120096504687\n? 3 945060048252343\n? 3 472530024126171\n? 3 236265012063085\n? 3 118132506031542\n? 3 59066253015770\n? 3 29533126507884\n? 3 14766563253941\n? 3 7383281626970\n? 3 3691640813484\n? 3 1845820406741\n? 3 922910203370\n? 3 461455101684\n? 3 230727550841\n? 3 115363775420\n? 3 57681887709\n? 3 28840943854\n? 3 14420471926\n? 3 7210235962\n? 3 3605117980\n? 3 1802558989\n? 3 901279494\n? 3 450639746\n? 3 225319872\n? 3 112659935\n? 3 56329967\n? 3 28164983\n? 3 14082491\n? 3 7041245\n? 3 3520622\n? 3 1760310\n? 3 880154\n? 3 440076\n? 3 220037\n? 3 110018\n? 3 55008\n? 3 27503\n? 3 13751\n? 3 6875\n? 3 3437\n? 3 1718\n? 3 858\n? 3 428\n? 3 213\n? 3 106\n? 3 52\n? 3 25\n? 3 12\n? 3 5\n? 3 2\n? 2 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 6\n? 1 0\n? 1 0\n? 2 1\n? 2 1\n? 3 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n1 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-2 0\n1\n2 21470975166070560 -128570634499058734 1\n",
            "output": "!\n"
        },
        {
            "input": "3 -1\n1\n1 236686773201079124 -193697529159490749 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 93749999999999999\n? 2 78124999999999999\n? 2 70312499999999999\n? 2 66406249999999999\n? 2 64453124999999999\n? 2 63476562499999999\n? 2 62988281249999999\n? 2 62744140624999999\n? 2 62622070312499999\n? 2 62561035156249999\n? 2 62530517578124999\n? 2 62515258789062499\n? 2 62507629394531249\n? 2 62503814697265624\n? 2 62501907348632811\n? 2 62500953674316405\n? 2 62500476837158202\n? 2 62500238418579100\n? 2 62500119209289549\n? 2 62500059604644774\n? 2 62500029802322386\n? 2 62500014901161192\n? 2 62500007450580595\n? 2 62500003725290297\n? 2 62500001862645148\n? 2 62500000931322573\n? 2 62500000465661286\n? 2 62500000232830642\n? 2 62500000116415320\n? 2 62500000058207659\n? 2 62500000029103829\n? 2 62500000014551914\n? 2 62500000007275956\n? 2 62500000003637977\n? 2 62500000001818988\n? 2 62500000000909493\n? 2 62500000000454746\n? 2 62500000000227372\n? 2 62500000000113685\n? 2 62500000000056842\n? 2 62500000000028420\n? 2 62500000000014209\n? 2 62500000000007104\n? 2 62500000000003551\n? 2 62500000000001775\n? 2 62500000000000887\n? 2 62500000000000443\n? 2 62500000000000221\n? 2 62500000000000110\n? 2 62500000000000054\n? 2 62500000000000026\n? 2 62500000000000012\n? 2 62500000000000005\n? 2 62500000000000002\n? 2 62500000000000000\n? 1 62500000000000000\n? 3 62500000000000000\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n!\n0 0\n0 1000000000000000000\n0 0\n"
        },
        {
            "input": "0 -1\n0\n0 0 999999999999999999 2\n",
            "output": "!\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 0 -2 6\n1\n1 0 -1 5\n1\n1 1 -1 4\n2\n1 1 -1 4\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 5 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 4 967741489410400390\n? 5 967741489410400390\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 3 483870744705200195\n? 3 241935372352600097\n? 3 120967686176300048\n? 3 60483843088150023\n? 3 30241921544075011\n? 3 15120960772037505\n? 3 7560480386018752\n? 3 3780240193009375\n? 3 1890120096504687\n? 3 945060048252343\n? 3 472530024126171\n? 3 236265012063085\n? 3 118132506031542\n? 3 59066253015770\n? 3 29533126507884\n? 3 14766563253941\n? 3 7383281626970\n? 3 3691640813484\n? 3 1845820406741\n? 3 922910203370\n? 3 461455101684\n? 3 230727550841\n? 3 115363775420\n? 3 57681887709\n? 3 28840943854\n? 3 14420471926\n? 3 7210235962\n? 3 3605117980\n? 3 1802558989\n? 3 901279494\n? 3 450639746\n? 3 225319872\n? 3 112659935\n? 3 56329967\n? 3 28164983\n? 3 14082491\n? 3 7041245\n? 3 3520622\n? 3 1760310\n? 3 880154\n? 3 440076\n? 3 220037\n? 3 110018\n? 3 55008\n? 3 27503\n? 3 13751\n? 3 6875\n? 3 3437\n? 3 1718\n? 3 858\n? 3 428\n? 3 213\n? 3 106\n? 3 52\n? 3 25\n? 3 12\n? 3 5\n? 3 2\n? 2 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 6\n? 1 0\n? 1 0\n? 2 1\n? 2 1\n? 6 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n1 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-2 0\n1\n2 21470975166070560 -128570634499058734 0\n",
            "output": "!\n"
        },
        {
            "input": "3 -1\n1\n1 412405512805038608 -193697529159490749 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 93749999999999999\n? 2 78124999999999999\n? 2 70312499999999999\n? 2 66406249999999999\n? 2 64453124999999999\n? 2 63476562499999999\n? 2 62988281249999999\n? 2 62744140624999999\n? 2 62622070312499999\n? 2 62561035156249999\n? 2 62530517578124999\n? 2 62515258789062499\n? 2 62507629394531249\n? 2 62503814697265624\n? 2 62501907348632811\n? 2 62500953674316405\n? 2 62500476837158202\n? 2 62500238418579100\n? 2 62500119209289549\n? 2 62500059604644774\n? 2 62500029802322386\n? 2 62500014901161192\n? 2 62500007450580595\n? 2 62500003725290297\n? 2 62500001862645148\n? 2 62500000931322573\n? 2 62500000465661286\n? 2 62500000232830642\n? 2 62500000116415320\n? 2 62500000058207659\n? 2 62500000029103829\n? 2 62500000014551914\n? 2 62500000007275956\n? 2 62500000003637977\n? 2 62500000001818988\n? 2 62500000000909493\n? 2 62500000000454746\n? 2 62500000000227372\n? 2 62500000000113685\n? 2 62500000000056842\n? 2 62500000000028420\n? 2 62500000000014209\n? 2 62500000000007104\n? 2 62500000000003551\n? 2 62500000000001775\n? 2 62500000000000887\n? 2 62500000000000443\n? 2 62500000000000221\n? 2 62500000000000110\n? 2 62500000000000054\n? 2 62500000000000026\n? 2 62500000000000012\n? 2 62500000000000005\n? 2 62500000000000002\n? 2 62500000000000000\n? 1 62500000000000000\n? 3 62500000000000000\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n!\n0 0\n0 1000000000000000000\n0 0\n"
        },
        {
            "input": "0 -1\n0\n0 0 999999999999999999 1\n",
            "output": "!\n"
        },
        {
            "input": "5 5\n0\n1 1 -1 5\n1\n1 0 -2 6\n1\n1 0 -1 5\n1\n1 0 -1 4\n2\n1 1 -1 4\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 953125000000000000\n? 4 960937500000000000\n? 4 964843750000000000\n? 4 966796875000000000\n? 4 967773437500000000\n? 4 967285156250000000\n? 4 967529296875000000\n? 4 967651367187500000\n? 4 967712402343750000\n? 4 967742919921875000\n? 4 967727661132812500\n? 4 967735290527343750\n? 4 967739105224609375\n? 4 967741012573242187\n? 4 967741966247558593\n? 4 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 5 967741489410400390\n? 1 967741489410400390\n? 2 967741489410400390\n? 3 967741489410400390\n? 4 967741489410400390\n? 5 967741489410400390\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 2 483870744705200195\n? 2 241935372352600097\n? 2 120967686176300048\n? 2 60483843088150023\n? 2 30241921544075011\n? 2 15120960772037505\n? 2 7560480386018752\n? 2 3780240193009375\n? 2 1890120096504687\n? 2 945060048252343\n? 2 472530024126171\n? 2 236265012063085\n? 2 118132506031542\n? 2 59066253015770\n? 2 29533126507884\n? 2 14766563253941\n? 2 7383281626970\n? 2 3691640813484\n? 2 1845820406741\n? 2 922910203370\n? 2 461455101684\n? 2 230727550841\n? 2 115363775420\n? 2 57681887709\n? 2 28840943854\n? 2 14420471926\n? 2 7210235962\n? 2 3605117980\n? 2 1802558989\n? 2 901279494\n? 2 450639746\n? 2 225319872\n? 2 112659935\n? 2 56329967\n? 2 28164983\n? 2 14082491\n? 2 7041245\n? 2 3520622\n? 2 1760310\n? 2 880154\n? 2 440076\n? 2 220037\n? 2 110018\n? 2 55008\n? 2 27503\n? 2 13751\n? 2 6875\n? 2 3437\n? 2 1718\n? 2 858\n? 2 428\n? 2 213\n? 2 106\n? 2 52\n? 2 25\n? 2 12\n? 2 5\n? 2 2\n? 3 483870744705200195\n? 3 241935372352600097\n? 3 120967686176300048\n? 3 60483843088150023\n? 3 30241921544075011\n? 3 15120960772037505\n? 3 7560480386018752\n? 3 3780240193009375\n? 3 1890120096504687\n? 3 945060048252343\n? 3 472530024126171\n? 3 236265012063085\n? 3 118132506031542\n? 3 59066253015770\n? 3 29533126507884\n? 3 14766563253941\n? 3 7383281626970\n? 3 3691640813484\n? 3 1845820406741\n? 3 922910203370\n? 3 461455101684\n? 3 230727550841\n? 3 115363775420\n? 3 57681887709\n? 3 28840943854\n? 3 14420471926\n? 3 7210235962\n? 3 3605117980\n? 3 1802558989\n? 3 901279494\n? 3 450639746\n? 3 225319872\n? 3 112659935\n? 3 56329967\n? 3 28164983\n? 3 14082491\n? 3 7041245\n? 3 3520622\n? 3 1760310\n? 3 880154\n? 3 440076\n? 3 220037\n? 3 110018\n? 3 55008\n? 3 27503\n? 3 13751\n? 3 6875\n? 3 3437\n? 3 1718\n? 3 858\n? 3 428\n? 3 213\n? 3 106\n? 3 52\n? 3 25\n? 3 12\n? 3 5\n? 3 2\n? 2 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "5 6\n? 1 0\n? 1 0\n? 2 1\n? 2 1\n? 6 2\n? 3 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n2 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-2 -1\n1\n2 21470975166070560 -128570634499058734 0\n",
            "output": "!\n"
        },
        {
            "input": "3 -1\n1\n1 412405512805038608 -141705712870597684 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 93749999999999999\n? 2 78124999999999999\n? 2 70312499999999999\n? 2 66406249999999999\n? 2 64453124999999999\n? 2 63476562499999999\n? 2 62988281249999999\n? 2 62744140624999999\n? 2 62622070312499999\n? 2 62561035156249999\n? 2 62530517578124999\n? 2 62515258789062499\n? 2 62507629394531249\n? 2 62503814697265624\n? 2 62501907348632811\n? 2 62500953674316405\n? 2 62500476837158202\n? 2 62500238418579100\n? 2 62500119209289549\n? 2 62500059604644774\n? 2 62500029802322386\n? 2 62500014901161192\n? 2 62500007450580595\n? 2 62500003725290297\n? 2 62500001862645148\n? 2 62500000931322573\n? 2 62500000465661286\n? 2 62500000232830642\n? 2 62500000116415320\n? 2 62500000058207659\n? 2 62500000029103829\n? 2 62500000014551914\n? 2 62500000007275956\n? 2 62500000003637977\n? 2 62500000001818988\n? 2 62500000000909493\n? 2 62500000000454746\n? 2 62500000000227372\n? 2 62500000000113685\n? 2 62500000000056842\n? 2 62500000000028420\n? 2 62500000000014209\n? 2 62500000000007104\n? 2 62500000000003551\n? 2 62500000000001775\n? 2 62500000000000887\n? 2 62500000000000443\n? 2 62500000000000221\n? 2 62500000000000110\n? 2 62500000000000054\n? 2 62500000000000026\n? 2 62500000000000012\n? 2 62500000000000005\n? 2 62500000000000002\n? 2 62500000000000000\n? 1 62500000000000000\n? 3 62500000000000000\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n!\n0 0\n0 1000000000000000000\n0 0\n"
        },
        {
            "input": "0 -1\n0\n-2 0 999999999999999999 2\n",
            "output": "!\n"
        },
        {
            "input": "5 6\n? 1 0\n? 1 0\n? 2 1\n? 2 1\n? 6 2\n? 6 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n2 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-2 -2\n1\n2 21470975166070560 -128570634499058734 0\n",
            "output": "!\n"
        },
        {
            "input": "0 -1\n0\n-2 0 1246743425699961934 2\n",
            "output": "!\n"
        },
        {
            "input": "5 6\n? 1 0\n? 1 0\n? 2 1\n? 2 1\n? 6 4\n? 6 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n2 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 -2\n1\n2 21470975166070560 -128570634499058734 0\n",
            "output": "!\n"
        },
        {
            "input": "5 -1\n2\n1 412405512805038608 -141705712870597684 2\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 93749999999999999\n? 4 78124999999999999\n? 4 70312499999999999\n? 4 66406249999999999\n? 4 64453124999999999\n? 4 63476562499999999\n? 4 62988281249999999\n? 4 62744140624999999\n? 4 62622070312499999\n? 4 62561035156249999\n? 4 62530517578124999\n? 4 62515258789062499\n? 4 62507629394531249\n? 4 62503814697265624\n? 4 62501907348632811\n? 4 62500953674316405\n? 4 62500476837158202\n? 4 62500238418579100\n? 4 62500119209289549\n? 4 62500059604644774\n? 4 62500029802322386\n? 4 62500014901161192\n? 4 62500007450580595\n? 4 62500003725290297\n? 4 62500001862645148\n? 4 62500000931322573\n? 4 62500000465661286\n? 4 62500000232830642\n? 4 62500000116415320\n? 4 62500000058207659\n? 4 62500000029103829\n? 4 62500000014551914\n? 4 62500000007275956\n? 4 62500000003637977\n? 4 62500000001818988\n? 4 62500000000909493\n? 4 62500000000454746\n? 4 62500000000227372\n? 4 62500000000113685\n? 4 62500000000056842\n? 4 62500000000028420\n? 4 62500000000014209\n? 4 62500000000007104\n? 4 62500000000003551\n? 4 62500000000001775\n? 4 62500000000000887\n? 4 62500000000000443\n? 4 62500000000000221\n? 4 62500000000000110\n? 4 62500000000000054\n? 4 62500000000000026\n? 4 62500000000000012\n? 4 62500000000000005\n? 4 62500000000000002\n? 4 62500000000000000\n? 1 62500000000000000\n? 2 62500000000000000\n? 3 62500000000000000\n? 5 62500000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 1000000000000000000\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 -1\n0\n-2 0 1246743425699961934 3\n",
            "output": "!\n"
        },
        {
            "input": "5 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 6 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n2 2\n2 3\n2 7\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 750000000000000000\n? 4 875000000000000000\n? 4 937500000000000000\n? 4 968750000000000000\n? 4 984375000000000000\n? 4 992187500000000000\n? 4 996093750000000000\n? 4 998046875000000000\n? 4 999023437500000000\n? 4 999511718750000000\n? 4 999755859375000000\n? 4 999877929687500000\n? 4 999938964843750000\n? 4 999969482421875000\n? 4 999984741210937500\n? 4 999992370605468750\n? 4 999996185302734375\n? 4 999998092651367188\n? 4 999999046325683594\n? 4 999999523162841797\n? 4 999999761581420899\n? 4 999999880790710450\n? 4 999999940395355225\n? 4 999999970197677613\n? 4 999999985098838807\n? 4 999999992549419404\n? 4 999999996274709702\n? 4 999999998137354851\n? 4 999999999068677426\n? 4 999999999534338713\n? 4 999999999767169357\n? 4 999999999883584679\n? 4 999999999941792340\n? 4 999999999970896170\n? 4 999999999985448085\n? 4 999999999992724043\n? 4 999999999996362022\n? 4 999999999998181011\n? 4 999999999999090506\n? 4 999999999999545253\n? 4 999999999999772627\n? 4 999999999999886314\n? 4 999999999999943157\n? 4 999999999999971579\n? 4 999999999999985790\n? 4 999999999999992895\n? 4 999999999999996448\n? 4 999999999999998224\n? 4 999999999999999112\n? 4 999999999999999556\n? 4 999999999999999778\n? 4 999999999999999889\n? 4 999999999999999945\n? 4 999999999999999973\n? 4 999999999999999987\n? 4 999999999999999994\n? 4 999999999999999997\n? 4 999999999999999999\n? 1 1000000000000000000\n? 2 1000000000000000000\n? 3 1000000000000000000\n? 5 1000000000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 1 1\n? 2 1\n? 5 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 2 1\n? 5 1\n? 1 1\n? 2 1\n? 3 1\n? 4 1\n? 5 1\n? 3 1\n? 2 1\n? 3 1\n!\n0 0\n0 1\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 -2\n1\n2 21470975166070560 -128570634499058734 -1\n",
            "output": "!\n"
        },
        {
            "input": "5 -1\n2\n1 164153967421735340 -141705712870597684 2\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 93749999999999999\n? 4 78124999999999999\n? 4 70312499999999999\n? 4 66406249999999999\n? 4 64453124999999999\n? 4 63476562499999999\n? 4 62988281249999999\n? 4 62744140624999999\n? 4 62622070312499999\n? 4 62561035156249999\n? 4 62530517578124999\n? 4 62515258789062499\n? 4 62507629394531249\n? 4 62503814697265624\n? 4 62501907348632811\n? 4 62500953674316405\n? 4 62500476837158202\n? 4 62500238418579100\n? 4 62500119209289549\n? 4 62500059604644774\n? 4 62500029802322386\n? 4 62500014901161192\n? 4 62500007450580595\n? 4 62500003725290297\n? 4 62500001862645148\n? 4 62500000931322573\n? 4 62500000465661286\n? 4 62500000232830642\n? 4 62500000116415320\n? 4 62500000058207659\n? 4 62500000029103829\n? 4 62500000014551914\n? 4 62500000007275956\n? 4 62500000003637977\n? 4 62500000001818988\n? 4 62500000000909493\n? 4 62500000000454746\n? 4 62500000000227372\n? 4 62500000000113685\n? 4 62500000000056842\n? 4 62500000000028420\n? 4 62500000000014209\n? 4 62500000000007104\n? 4 62500000000003551\n? 4 62500000000001775\n? 4 62500000000000887\n? 4 62500000000000443\n? 4 62500000000000221\n? 4 62500000000000110\n? 4 62500000000000054\n? 4 62500000000000026\n? 4 62500000000000012\n? 4 62500000000000005\n? 4 62500000000000002\n? 4 62500000000000000\n? 1 62500000000000000\n? 2 62500000000000000\n? 3 62500000000000000\n? 5 62500000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 1000000000000000000\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 -1\n0\n-2 0 1246743425699961934 0\n",
            "output": "!\n"
        },
        {
            "input": "0 -2\n1\n2 21470975166070560 -199356101292317442 -1\n",
            "output": "!\n"
        },
        {
            "input": "5 -1\n2\n1 182335588407075927 -141705712870597684 2\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 93749999999999999\n? 4 78124999999999999\n? 4 70312499999999999\n? 4 66406249999999999\n? 4 64453124999999999\n? 4 63476562499999999\n? 4 62988281249999999\n? 4 62744140624999999\n? 4 62622070312499999\n? 4 62561035156249999\n? 4 62530517578124999\n? 4 62515258789062499\n? 4 62507629394531249\n? 4 62503814697265624\n? 4 62501907348632811\n? 4 62500953674316405\n? 4 62500476837158202\n? 4 62500238418579100\n? 4 62500119209289549\n? 4 62500059604644774\n? 4 62500029802322386\n? 4 62500014901161192\n? 4 62500007450580595\n? 4 62500003725290297\n? 4 62500001862645148\n? 4 62500000931322573\n? 4 62500000465661286\n? 4 62500000232830642\n? 4 62500000116415320\n? 4 62500000058207659\n? 4 62500000029103829\n? 4 62500000014551914\n? 4 62500000007275956\n? 4 62500000003637977\n? 4 62500000001818988\n? 4 62500000000909493\n? 4 62500000000454746\n? 4 62500000000227372\n? 4 62500000000113685\n? 4 62500000000056842\n? 4 62500000000028420\n? 4 62500000000014209\n? 4 62500000000007104\n? 4 62500000000003551\n? 4 62500000000001775\n? 4 62500000000000887\n? 4 62500000000000443\n? 4 62500000000000221\n? 4 62500000000000110\n? 4 62500000000000054\n? 4 62500000000000026\n? 4 62500000000000012\n? 4 62500000000000005\n? 4 62500000000000002\n? 4 62500000000000000\n? 1 62500000000000000\n? 2 62500000000000000\n? 3 62500000000000000\n? 5 62500000000000000\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 1000000000000000000\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n0\n-2 0 1246743425699961934 0\n",
            "output": "!\n"
        },
        {
            "input": "10 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 6 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n2 2\n2 3\n2 9\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 4 1\n? 3 1\n? 1 1\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 1\n? 1 1\n? 5 1\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 4 1\n? 4 1\n? 3 1\n!\n0 0\n0 0\n0 0\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 -2\n1\n4 21470975166070560 -199356101292317442 -1\n",
            "output": "!\n"
        },
        {
            "input": "0 0\n-1\n-2 0 1246743425699961934 0\n",
            "output": "!\n"
        },
        {
            "input": "10 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 4\n? 5 4\n!\n0 2\n2 2\n2 3\n2 9\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 4 1\n? 3 1\n? 1 1\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 1\n? 1 1\n? 5 1\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 4 1\n? 4 1\n? 3 1\n!\n0 0\n0 0\n0 0\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 -2\n1\n4 21470975166070560 -199356101292317442 -2\n",
            "output": "!\n"
        },
        {
            "input": "5 -1\n2\n0 182335588407075927 -271654132773494504 2\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 1 249999999999999999\n? 2 249999999999999999\n? 3 249999999999999999\n? 5 249999999999999999\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 1000000000000000000\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n-1\n-2 0 1406339222537496866 0\n",
            "output": "!\n"
        },
        {
            "input": "10 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 6\n? 5 4\n!\n0 2\n2 2\n2 3\n2 9\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 4 1\n? 3 1\n? 1 1\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 1\n? 1 1\n? 5 1\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 4 1\n? 4 1\n? 3 1\n!\n0 0\n0 0\n0 0\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-1 -2\n1\n4 21470975166070560 -199356101292317442 -2\n",
            "output": "!\n"
        },
        {
            "input": "0 0\n-1\n-2 0 1002666129216912920 0\n",
            "output": "!\n"
        },
        {
            "input": "10 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 1\n? 5 4\n!\n0 2\n2 2\n2 3\n2 9\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 4 1\n? 3 1\n? 1 1\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 1\n? 1 1\n? 5 1\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 4 1\n? 4 1\n? 3 1\n!\n0 0\n0 0\n0 0\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-1 -2\n1\n1 21470975166070560 -199356101292317442 -2\n",
            "output": "!\n"
        },
        {
            "input": "0 0\n-1\n-2 0 1857997509168219925 0\n",
            "output": "!\n"
        },
        {
            "input": "10 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 0\n? 5 4\n!\n0 2\n2 2\n2 3\n2 9\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 4 1\n? 3 1\n? 1 1\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 1\n? 1 1\n? 5 1\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 4 1\n? 4 1\n? 3 1\n!\n0 0\n0 0\n0 0\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-1 -2\n2\n1 21470975166070560 -199356101292317442 -2\n",
            "output": "!\n"
        },
        {
            "input": "7 -2\n2\n0 275334194614304238 -271654132773494504 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 1 249999999999999999\n? 3 249999999999999999\n? 4 249999999999999999\n? 5 249999999999999999\n? 6 249999999999999999\n? 7 249999999999999999\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n-1\n0 0 1857997509168219925 0\n",
            "output": "!\n"
        },
        {
            "input": "10 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 0\n? 5 8\n!\n0 2\n2 2\n2 3\n2 9\n4 5\n",
            "output": "? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 5 500000000000000000\n? 5 249999999999999999\n? 5 124999999999999999\n? 5 62499999999999999\n? 5 31249999999999999\n? 5 15624999999999999\n? 5 7812499999999999\n? 5 3906249999999999\n? 5 1953124999999999\n? 5 976562499999999\n? 5 488281249999999\n? 5 244140624999999\n? 5 122070312499999\n? 5 61035156249999\n? 5 30517578124999\n? 5 15258789062499\n? 5 7629394531249\n? 5 3814697265624\n? 5 1907348632811\n? 5 953674316405\n? 5 476837158202\n? 5 238418579100\n? 5 119209289549\n? 5 59604644774\n? 5 29802322386\n? 5 14901161192\n? 5 7450580595\n? 5 3725290297\n? 5 1862645148\n? 5 931322573\n? 5 465661286\n? 5 232830642\n? 5 116415320\n? 5 58207659\n? 5 29103829\n? 5 14551914\n? 5 7275956\n? 5 3637977\n? 5 1818988\n? 5 909493\n? 5 454746\n? 5 227372\n? 5 113685\n? 5 56842\n? 5 28420\n? 5 14209\n? 5 7104\n? 5 3551\n? 5 1775\n? 5 887\n? 5 443\n? 5 221\n? 5 110\n? 5 54\n? 5 26\n? 5 12\n? 5 5\n? 5 2\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 4 1\n? 3 1\n? 1 1\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 1\n? 1 1\n? 5 1\n? 4 1\n? 3 1\n? 2 1\n? 1 1\n? 4 1\n? 4 1\n? 3 1\n!\n0 0\n0 0\n0 0\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "-1 -2\n2\n1 19199727659647206 -199356101292317442 -2\n",
            "output": "!\n"
        },
        {
            "input": "7 -2\n2\n0 275334194614304238 -363556119614822669 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 1 249999999999999999\n? 3 249999999999999999\n? 4 249999999999999999\n? 5 249999999999999999\n? 6 249999999999999999\n? 7 249999999999999999\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "0 0\n-1\n0 0 2154260451818740774 0\n",
            "output": "!\n"
        },
        {
            "input": "-1 -2\n1\n1 19199727659647206 -199356101292317442 -2\n",
            "output": "!\n"
        },
        {
            "input": "0 0\n-1\n0 -1 2154260451818740774 0\n",
            "output": "!\n"
        },
        {
            "input": "3 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 0\n? 5 8\n!\n0 2\n2 4\n2 3\n2 9\n4 5\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 1 1\n? 3 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 3 1\n? 1 1\n? 2 1\n? 3 1\n? 2 1\n? 2 1\n? 1 1\n!\n0 0\n0 1\n0 0\n"
        },
        {
            "input": "0 -2\n1\n1 19199727659647206 -199356101292317442 -2\n",
            "output": "!\n"
        },
        {
            "input": "7 -2\n1\n0 275334194614304238 -363556119614822669 2\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 1 249999999999999999\n? 3 249999999999999999\n? 4 249999999999999999\n? 5 249999999999999999\n? 6 249999999999999999\n? 7 249999999999999999\n? 4 500000000000000000\n? 4 249999999999999999\n? 4 124999999999999999\n? 4 62499999999999999\n? 4 31249999999999999\n? 4 15624999999999999\n? 4 7812499999999999\n? 4 3906249999999999\n? 4 1953124999999999\n? 4 976562499999999\n? 4 488281249999999\n? 4 244140624999999\n? 4 122070312499999\n? 4 61035156249999\n? 4 30517578124999\n? 4 15258789062499\n? 4 7629394531249\n? 4 3814697265624\n? 4 1907348632811\n? 4 953674316405\n? 4 476837158202\n? 4 238418579100\n? 4 119209289549\n? 4 59604644774\n? 4 29802322386\n? 4 14901161192\n? 4 7450580595\n? 4 3725290297\n? 4 1862645148\n? 4 931322573\n? 4 465661286\n? 4 232830642\n? 4 116415320\n? 4 58207659\n? 4 29103829\n? 4 14551914\n? 4 7275956\n? 4 3637977\n? 4 1818988\n? 4 909493\n? 4 454746\n? 4 227372\n? 4 113685\n? 4 56842\n? 4 28420\n? 4 14209\n? 4 7104\n? 4 3551\n? 4 1775\n? 4 887\n? 4 443\n? 4 221\n? 4 110\n? 4 54\n? 4 26\n? 4 12\n? 4 5\n? 4 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n? 3 500000000000000000\n? 3 249999999999999999\n? 3 124999999999999999\n? 3 62499999999999999\n? 3 31249999999999999\n? 3 15624999999999999\n? 3 7812499999999999\n? 3 3906249999999999\n? 3 1953124999999999\n? 3 976562499999999\n? 3 488281249999999\n? 3 244140624999999\n? 3 122070312499999\n? 3 61035156249999\n? 3 30517578124999\n? 3 15258789062499\n? 3 7629394531249\n? 3 3814697265624\n? 3 1907348632811\n? 3 953674316405\n? 3 476837158202\n? 3 238418579100\n? 3 119209289549\n? 3 59604644774\n? 3 29802322386\n? 3 14901161192\n? 3 7450580595\n? 3 3725290297\n? 3 1862645148\n? 3 931322573\n? 3 465661286\n? 3 232830642\n? 3 116415320\n? 3 58207659\n? 3 29103829\n? 3 14551914\n? 3 7275956\n? 3 3637977\n? 3 1818988\n? 3 909493\n? 3 454746\n? 3 227372\n? 3 113685\n? 3 56842\n? 3 28420\n? 3 14209\n? 3 7104\n? 3 3551\n? 3 1775\n? 3 887\n? 3 443\n? 3 221\n? 3 110\n? 3 54\n? 3 26\n? 3 12\n? 3 5\n? 3 2\n!\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n"
        },
        {
            "input": "1 0\n-1\n0 -1 2154260451818740774 0\n",
            "output": "!\n0 1000000000000000000\n"
        },
        {
            "input": "3 6\n? 1 0\n? 1 0\n? 2 1\n> 2 1\n? 6 4\n? 11 3\n? 4 3\n? 4 4\n? 5 0\n? 5 8\n!\n0 2\n2 4\n2 0\n2 9\n4 5\n",
            "output": "? 2 500000000000000000\n? 2 249999999999999999\n? 2 124999999999999999\n? 2 62499999999999999\n? 2 31249999999999999\n? 2 15624999999999999\n? 2 7812499999999999\n? 2 3906249999999999\n? 2 1953124999999999\n? 2 976562499999999\n? 2 488281249999999\n? 2 244140624999999\n? 2 122070312499999\n? 2 61035156249999\n? 2 30517578124999\n? 2 15258789062499\n? 2 7629394531249\n? 2 3814697265624\n? 2 1907348632811\n? 2 953674316405\n? 2 476837158202\n? 2 238418579100\n? 2 119209289549\n? 2 59604644774\n? 2 29802322386\n? 2 14901161192\n? 2 7450580595\n? 2 3725290297\n? 2 1862645148\n? 2 931322573\n? 2 465661286\n? 2 232830642\n? 2 116415320\n? 2 58207659\n? 2 29103829\n? 2 14551914\n? 2 7275956\n? 2 3637977\n? 2 1818988\n? 2 909493\n? 2 454746\n? 2 227372\n? 2 113685\n? 2 56842\n? 2 28420\n? 2 14209\n? 2 7104\n? 2 3551\n? 2 1775\n? 2 887\n? 2 443\n? 2 221\n? 2 110\n? 2 54\n? 2 26\n? 2 12\n? 2 5\n? 2 2\n? 1 1\n? 3 1\n? 1 500000000000000000\n? 1 249999999999999999\n? 1 124999999999999999\n? 1 62499999999999999\n? 1 31249999999999999\n? 1 15624999999999999\n? 1 7812499999999999\n? 1 3906249999999999\n? 1 1953124999999999\n? 1 976562499999999\n? 1 488281249999999\n? 1 244140624999999\n? 1 122070312499999\n? 1 61035156249999\n? 1 30517578124999\n? 1 15258789062499\n? 1 7629394531249\n? 1 3814697265624\n? 1 1907348632811\n? 1 953674316405\n? 1 476837158202\n? 1 238418579100\n? 1 119209289549\n? 1 59604644774\n? 1 29802322386\n? 1 14901161192\n? 1 7450580595\n? 1 3725290297\n? 1 1862645148\n? 1 931322573\n? 1 465661286\n? 1 232830642\n? 1 116415320\n? 1 58207659\n? 1 29103829\n? 1 14551914\n? 1 7275956\n? 1 3637977\n? 1 1818988\n? 1 909493\n? 1 454746\n? 1 227372\n? 1 113685\n? 1 56842\n? 1 28420\n? 1 14209\n? 1 7104\n? 1 3551\n? 1 1775\n? 1 887\n? 1 443\n? 1 221\n? 1 110\n? 1 54\n? 1 26\n? 1 12\n? 1 5\n? 1 2\n? 3 1\n? 1 1\n? 2 1\n? 3 1\n? 2 1\n? 2 1\n? 1 1\n!\n0 0\n0 1\n0 0\n"
        }
    ],
    "solution": [
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long query(int i, long long x) {\n  cout << \"? \" << i + 1 << ' ' << x << endl;\n  long long r;\n  cin >> r;\n  return r;\n}\npair<long long, long long> ans[1000];\nmt19937_64 mrand(chrono::steady_clock::now().time_since_epoch().count());\ndouble log_fac[2000];\ndouble log_ncr(int n, int k) {\n  if (n < 0 || k < 0 || k > n) return -1e9;\n  return log_fac[n] - log_fac[k] - log_fac[n - k];\n}\ndouble prob(int a, int b, int m, int n) {\n  assert(a >= 0 && b >= 0 && m >= 0 && m <= n && n >= 0);\n  if (a > m) return 1;\n  if (n - b <= m) return 0;\n  int k = a + b, x = m;\n  double r = 0;\n  for (int i = 0; i < a; i++) {\n    r += exp(log_ncr(x, i) + log_ncr(n - x, k - i) - log_ncr(n, k));\n  }\n  return r;\n}\nlong long recSplit(long long xl, long long xr, long long ym, int sl,\n                   vector<int>& v) {\n  if (xr <= xl) return xl;\n  assert(sl >= 0 && sl <= v.size());\n  if (sl == 0) return xl;\n  if (sl == v.size()) return xr;\n  shuffle(v.begin(), v.end(), mrand);\n  vector<int> vl, vr, vm;\n  long long xm = xl + xr >> 1;\n  long long assume = -9;\n  for (int i : v) {\n    long long y;\n    if (assume == -9)\n      y = query(i, xm);\n    else\n      y = assume;\n    if (y > ym)\n      vl.push_back(i);\n    else if (y < ym)\n      vr.push_back(i);\n    else\n      vm.push_back(i);\n    if (assume == -9 &&\n        prob(vl.size(), vm.size() + vr.size(), sl, v.size()) > 1 - 1e-2) {\n      assume = ym + 1;\n    }\n    if (assume == -9 && prob(vr.size(), vm.size() + vl.size(),\n                             (int)v.size() - sl, v.size()) > 1 - 1e-2) {\n      assume = ym - 1;\n    }\n  }\n  if (vl.size() > sl) {\n    return recSplit(xl, xm - 1, ym, sl, vl);\n  } else if (vr.size() > (int)v.size() - sl) {\n    return recSplit(xm + 1, xr, ym, sl - int(vl.size() + vm.size()), vr);\n  } else\n    return xm;\n}\nlong long dy;\nvoid solve(long long xl, long long xr, long long yl, long long yr,\n           vector<int>& v) {\n  assert(yr - yl == dy * v.size());\n  if (v.size() <= 1) {\n    for (int i : v) ans[i] = {xl, xr};\n    return;\n  }\n  int sl = v.size() / 2;\n  long long ym = yl + dy * sl;\n  while (1) {\n    long long xm = recSplit(xl, xr, ym, sl, v);\n    vector<int> vl, vr, vm;\n    for (int i : v) {\n      long long y = query(i, xm);\n      if (y > ym)\n        vl.push_back(i);\n      else if (y < ym)\n        vr.push_back(i);\n      else\n        vm.push_back(i);\n    }\n    if (vl.size() > sl || vl.size() + vm.size() < sl) {\n      continue;\n    }\n    while (vl.size() < sl) vl.push_back(vm.back()), vm.pop_back();\n    while (vm.size()) vr.push_back(vm.back()), vm.pop_back();\n    solve(xl, xm, yl, ym, vl);\n    solve(xm, xr, ym, yr, vr);\n    break;\n  }\n}\nint main() {\n  for (int i = 1; i < 2000; i++) log_fac[i] = log_fac[i - 1] + log(i);\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  int n;\n  long long l;\n  cin >> n >> l;\n  dy = l / n;\n  vector<int> v;\n  for (int i = 0; i < n; i++) v.push_back(i);\n  solve(0, 1e18, 0, l, v);\n  cout << \"! \" << endl;\n  for (int i = 0; i < n; i++)\n    cout << ans[i].first << ' ' << ans[i].second << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long SIZE = (long long)1e18;\nint remains = 200000;\nvector<set<pair<long long, long long>>> evals;\nlong long need;\nvector<long long> resLeft;\nvector<long long> resRight;\nlong long realEval(int fid, long long x) {\n  --remains;\n  assert(remains >= 0);\n  printf(\"? %d %lld\\n\", (fid + 1), x);\n  fflush(stdout);\n  long long realY;\n  scanf(\"%lld\", &realY);\n  return realY;\n}\nbool compareAt(int fid, long long x, long long y) {\n  set<pair<long long, long long>>& known = evals[fid];\n  auto next = known.lower_bound(pair<long long, long long>(x + 1, -1));\n  auto prev = next;\n  --prev;\n  assert(prev->first >= 0);\n  assert(prev->first <= x);\n  assert(next->first > x);\n  assert(next->first <= SIZE + 1);\n  if (prev->second >= y) return true;\n  if (prev->second + x - prev->first < y) return false;\n  if (next->second < y) return false;\n  if (next->second + x - next->first >= y) return true;\n  long long realY = realEval(fid, x);\n  known.insert(pair<long long, long long>(x, realY));\n  return realY >= y;\n}\nvoid rec(vector<int>& ids, long long left, long long right, long long base) {\n  if (ids.size() == 1) {\n    resLeft[ids[0]] = left;\n    resRight[ids[0]] = right;\n    return;\n  }\n  int n = ids.size();\n  int n1 = n / 2;\n  long long interesting = base + n1 * need;\n  long long searchLeft = 0;\n  long long searchRight = SIZE;\n  while (searchRight - searchLeft > 1) {\n    long long searchMiddle = (searchLeft + searchRight) / 2;\n    int count = 0;\n    int togo = n;\n    for (int x : ids) {\n      if (compareAt(x, searchMiddle, interesting)) {\n        ++count;\n      }\n      if (count >= n1) break;\n      --togo;\n      if (count + togo < n1) break;\n    }\n    if (count >= n1) {\n      searchRight = searchMiddle;\n    } else {\n      searchLeft = searchMiddle;\n    }\n  }\n  vector<int> ids1(n1);\n  vector<int> ids2(n - n1);\n  int p1 = 0;\n  int p2 = 0;\n  for (int x : ids) {\n    if (compareAt(x, searchLeft, interesting)) {\n      ids1[p1++] = x;\n    } else if (!compareAt(x, searchRight, interesting)) {\n      ids2[p2++] = x;\n    }\n  }\n  for (int x : ids) {\n    if (compareAt(x, searchLeft, interesting)) {\n    } else if (!compareAt(x, searchRight, interesting)) {\n    } else if (p1 == ids1.size()) {\n      ids2[p2++] = x;\n    } else {\n      ids1[p1++] = x;\n    }\n  }\n  rec(ids1, left, searchRight, base);\n  rec(ids2, searchRight, right, interesting);\n}\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  scanf(\"%lld\", &need);\n  need /= n;\n  for (int i = 0; i < n; ++i) {\n    set<pair<long long, long long>> pts;\n    pts.insert(pair<long long, long long>(0, 0));\n    pts.insert(pair<long long, long long>(SIZE, need * n));\n    pts.insert(pair<long long, long long>(SIZE + 1, need * n));\n    evals.push_back(pts);\n  }\n  vector<int> ids;\n  for (int i = 0; i < n; ++i) ids.push_back(i);\n  resLeft.resize(n);\n  resRight.resize(n);\n  rec(ids, 0, SIZE, 0);\n  for (int i = 0; i < n; ++i) {\n    assert(realEval(i, resRight[i]) - realEval(i, resLeft[i]) >= need);\n  }\n  printf(\"!\\n\");\n  for (int i = 0; i < n; ++i) {\n    printf(\"%lld %lld\\n\", resLeft[i], resRight[i]);\n  }\n  fflush(stdout);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e3 + 5;\nvector<int> operator+(vector<int> a, const vector<int>& b) {\n  for (auto x : b) {\n    a.push_back(x);\n  }\n  return a;\n}\nclass rnd {\n public:\n  rnd() { srand((unsigned)time(NULL)); }\n  int rand(int l, int r) { return ::rand() % (r - l) + l; }\n} rnd;\nint n;\nlong long L, m;\npair<long long, long long> ans[N];\nlong long query(int idx, long long x) {\n  long long rt;\n  printf(\"? %d %lld\\n\", idx, x);\n  fflush(stdout);\n  scanf(\"%lld\", &rt);\n  return rt;\n}\nlong long _f(int idx, long long y, long long l = 0, long long r = 1e18) {\n  long long mid, qy;\n  while (true) {\n    mid = (l + r) >> 1;\n    qy = query(idx, mid);\n    if (qy < y) {\n      l = mid + 1;\n    } else if (qy > y) {\n      r = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  assert(false);\n  return -1;\n}\npair<vector<int>, vector<int> > kth_element(vector<int> a, int k, long long v,\n                                            long long xl, long long xr,\n                                            long long& xresult) {\n  int p = a[rnd.rand(0, a.size())];\n  long long xp = _f(p, v, xl, xr);\n  xresult = xp;\n  vector<int> vL, vM, vR;\n  for (auto idx : a) {\n    if (idx == p) {\n      vM.push_back(idx);\n    } else {\n      long long y = query(idx, xp);\n      if (y < v) {\n        vR.push_back(idx);\n      } else if (y > v) {\n        vL.push_back(idx);\n      } else {\n        vM.push_back(idx);\n      }\n    }\n  }\n  while ((signed)vL.size() < k && !vM.empty()) {\n    vL.push_back(vM.back());\n    vM.pop_back();\n  }\n  while (!vM.empty()) {\n    vR.push_back(vM.back());\n    vM.pop_back();\n  }\n  if ((signed)vL.size() == k) {\n    return make_pair(vL, vR);\n  }\n  if ((signed)vL.size() < k) {\n    pair<vector<int>, vector<int> > par =\n        kth_element(vR, k - vL.size(), v, xp, xr, xresult);\n    return make_pair(vL + par.first, par.second);\n  }\n  pair<vector<int>, vector<int> > par = kth_element(vL, k, v, xl, xp, xresult);\n  return make_pair(par.first, vR + par.second);\n}\nvoid dividing(vector<int> a, int l, long long xl, long long xr) {\n  if ((signed)a.size() == 1) {\n    ans[a.back()] = make_pair(xl, xr);\n    return;\n  }\n  int hn = ((signed)a.size()) >> 1;\n  long long xm;\n  pair<vector<int>, vector<int> > par =\n      kth_element(a, hn, (l + hn) * m, xl, xr, xm);\n  dividing(par.first, l, xl, xm);\n  dividing(par.second, l + hn, xm, xr);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  m = L / n;\n  vector<int> idx(n);\n  for (int i = 0; i < n; i++) idx[i] = i + 1;\n  dividing(idx, 0, 0, 1e18);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) {\n    printf(\"%lld %lld\\n\", ans[i].first, ans[i].second);\n  }\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long L;\npair<long long, long long> ans[1005];\nmt19937_64 rng(233);\nlong long F(int i, long long x) {\n  printf(\"? %d %lld\\n\", i, x);\n  fflush(stdout);\n  long long y;\n  scanf(\"%lld\", &y);\n  return y;\n}\nvoid sol(vector<pair<int, long long> > cur, long long l, long long r) {\n  if (((int)(cur).size()) <= 1) {\n    for (auto x : cur) {\n      ans[x.first] = {l, r};\n    }\n    return;\n  }\n  vector<pair<int, long long> > can(cur);\n  auto get = [&](int i, long long x) {\n    return F(can[i].first, x) - can[i].second;\n  };\n  int bs = 0;\n  vector<pair<int, long long> > left;\n  vector<pair<int, long long> > right;\n  int ned = ((int)(cur).size()) / 2;\n  while (1) {\n    int id = rng() % ((int)(can).size());\n    long long lb = l, rb = r, res = -1;\n    while (lb <= rb) {\n      long long mid = (lb + rb) >> 1;\n      if (get(id, mid) >= ned * (L / n)) {\n        res = mid;\n        rb = mid - 1;\n      } else {\n        lb = mid + 1;\n      }\n    }\n    int greater = bs, equal = 0;\n    vector<long long> w(((int)(can).size()));\n    for (int i = (0); i <= (((int)(can).size()) - 1); ++i) {\n      w[i] = get(i, res);\n      if (w[i] > ned * (L / n)) {\n        ++greater;\n      } else if (w[i] == ned * (L / n)) {\n        ++equal;\n      }\n    }\n    if (greater + 1 <= ned && ned <= greater + equal) {\n      vector<bool> bo(((int)(can).size()));\n      for (int i = (0); i <= (((int)(can).size()) - 1); ++i) {\n        if (w[i] > ned * (L / n)) {\n          left.push_back(can[i]);\n          bo[i] = 1;\n        }\n      }\n      for (int i = (0); i <= (((int)(can).size()) - 1); ++i)\n        if (!bo[i]) {\n          if (w[i] >= ned * (L / n) && ((int)(left).size()) < ned) {\n            left.push_back(can[i]);\n          } else {\n            right.push_back(can[i]);\n          }\n        }\n      for (auto& x : right) {\n        x.second = F(x.first, res);\n      }\n      sol(left, l, res);\n      sol(right, res, r);\n      return;\n    }\n    if (greater + 1 > ned) {\n      vector<pair<int, long long> > ncan;\n      for (int i = (0); i <= (((int)(can).size()) - 1); ++i) {\n        if (w[i] < ned * (L / n)) {\n          right.push_back(can[i]);\n        } else\n          ncan.push_back(can[i]);\n      }\n      can = ncan;\n    }\n    if (ned > greater + equal) {\n      vector<pair<int, long long> > ncan;\n      for (int i = (0); i <= (((int)(can).size()) - 1); ++i) {\n        if (w[i] >= ned * (L / n)) {\n          left.push_back(can[i]);\n        } else\n          ncan.push_back(can[i]);\n      }\n      can = ncan;\n      bs = greater + equal;\n    }\n  }\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  vector<pair<int, long long> > tp(n, {0, 0});\n  for (int i = (0); i <= (n - 1); ++i) tp[i].first = i + 1;\n  sol(tp, 0, 1e18);\n  printf(\"!\\n\");\n  for (int i = (1); i <= (n); ++i)\n    printf(\"%lld %lld\\n\", ans[i].first, ans[i].second);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long S = (long long)1e18;\nlong long n, L, p[2005], ansl[2005], ansr[2005], s1[2005], s2[2005], s3[2005];\nlong long rd() {\n  long long x = 0, tp = 1;\n  char c = getchar();\n  while (c < '0' || c > '9') {\n    if (c == '-') tp = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = (x * 10 + c - '0');\n    c = getchar();\n  }\n  return x * tp;\n}\nlong long query(long long id, long long x) {\n  printf(\"? %lld %lld\\n\", id, x);\n  fflush(stdout);\n  return rd();\n}\nlong long getpos(long long id, long long x) {\n  long long l = 0, r = S, mid, pos = 0;\n  while (l <= r) {\n    mid = (l + r) >> 1;\n    if (query(id, mid) >= x)\n      r = mid - 1;\n    else\n      l = mid + 1, pos = mid;\n  }\n  return pos + 1;\n}\nlong long get_kth(long long l, long long r, long long K) {\n  long long pos, val, i, W, nvl, t1, t2, t3, top;\n  pos = rand() % (r - l + 1) + l;\n  W = L / n * K;\n  val = getpos(p[pos], W);\n  t1 = t2 = t3 = 0;\n  for (i = l; i <= r; i++) {\n    nvl = query(p[i], val);\n    if (nvl > W)\n      s1[++t1] = p[i];\n    else if (nvl == W)\n      s2[++t2] = p[i];\n    else\n      s3[++t3] = p[i];\n  }\n  top = l;\n  for (i = 1; i <= t1; i++) p[top++] = s1[i];\n  for (i = 1; i <= t2; i++) p[top++] = s2[i];\n  for (i = 1; i <= t3; i++) p[top++] = s3[i];\n  if (t1 > K - l)\n    return get_kth(l, l + t1 - 1, K);\n  else if (t3 > r - K)\n    return get_kth(r - t3 + 1, r, K);\n  else\n    return val;\n}\nvoid solve(long long l, long long r, long long sl, long long sr) {\n  if (l == r) {\n    ansl[p[l]] = sl, ansr[p[r]] = sr;\n    return;\n  }\n  long long k = (l + r) >> 1, mid;\n  mid = get_kth(l, r, k);\n  solve(l, k, sl, mid), solve(k + 1, r, mid, sr);\n}\nint main() {\n  n = rd(), L = rd();\n  for (int i = 1; i <= n; i++) p[i] = i;\n  solve(1, n, 0, S);\n  printf(\"!\\n\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", ansl[i], ansr[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing vvi = vector<vi>;\nusing vll = vector<ll>;\nusing vvll = vector<vll>;\nusing vb = vector<bool>;\nusing vd = vector<double>;\nusing vs = vector<string>;\ntemplate <typename T>\nvoid ckmin(T& a, const T& b) {\n  a = min(a, b);\n}\ntemplate <typename T>\nvoid ckmax(T& a, const T& b) {\n  a = max(a, b);\n}\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nll eval(int i, ll x) {\n  cout << \"? \" << i + 1 << \" \" << x << endl;\n  ll res;\n  cin >> res;\n  return res;\n}\nll search(int i, ll xL, ll xH, ll v) {\n  ll res = xH--;\n  while (xL <= xH) {\n    ll x = (xL + xH) / 2;\n    if (eval(i, x) >= v)\n      res = x, xH = x - 1;\n    else\n      xL = x + 1;\n  }\n  return res;\n}\nvoid solve(vector<array<ll, 2>>& ans, vi& elts, ll xL, ll xH, ll vL, ll vH) {\n  if (int((elts).size()) == 1) {\n    ans[elts[0]] = {xL, xH};\n    return;\n  }\n  int targ = (int((elts).size()) + 1) / 2;\n  ll vM = vL + (vH - vL) / int((elts).size()) * targ;\n  vi left, middle = elts, right;\n  ll lX = xL, rX = xH;\n  while (true) {\n    int pivot = middle[rng() % int((middle).size())];\n    ll x = search(pivot, lX, rX, vM);\n    vi before, equal = {pivot}, after;\n    for (int i : middle)\n      if (i != pivot) {\n        ll v = eval(i, x);\n        (v == vM ? equal : v > vM ? before : after).push_back(i);\n      }\n    if (int((left).size()) + int((before).size()) >= targ) {\n      middle.clear();\n      for (int i : before) middle.push_back(i);\n      for (int i : equal) middle.push_back(i);\n      for (int i : after) right.push_back(i);\n      rX = x;\n    } else if (int((left).size()) + int((before).size()) +\n                   int((equal).size()) >=\n               targ) {\n      for (int i : before) left.push_back(i);\n      for (int i : equal)\n        (int((left).size()) < targ ? left : right).push_back(i);\n      for (int i : after) right.push_back(i);\n      solve(ans, left, xL, x, vL, vM);\n      solve(ans, right, x, xH, vM, vH);\n      return;\n    } else {\n      middle.clear();\n      for (int i : before) left.push_back(i);\n      for (int i : equal) middle.push_back(i);\n      for (int i : after) middle.push_back(i);\n      lX = x;\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0), cout.tie(0);\n  int N;\n  ll L;\n  cin >> N >> L;\n  vi elts(N);\n  for (int i = 0; i < N; i++) elts[i] = i;\n  vector<array<ll, 2>> ans(N);\n  solve(ans, elts, 0, 1e18, 0, L);\n  cout << \"!\\n\";\n  for (int i = 0; i < N; i++) cout << ans[i][0] << \" \" << ans[i][1] << \"\\n\";\n  cout.flush();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nclass DebugStream {\n} LOG;\ntemplate <typename T>\nDebugStream &operator<<(DebugStream &s, const T &) {\n  return s;\n}\nmt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());\nconst int maxN = 1e3 + 9, maxV = 1e6 + 9, MOD = 1e9 + 7, SQ = 335, lg = 20,\n          bs = 29;\nconst long long MVV = 1e18;\npair<long long, long long> ans[maxN];\nlong long L, U;\nint n, ind[maxN];\nmap<long long, long long> memo[maxN];\nvoid assertion(bool x) {\n  if (!x) exit(0);\n}\nint qcount;\nlong long query(int w, long long x) {\n  if (memo[w].find(x) == memo[w].end()) {\n    assertion(qcount < 200000);\n    qcount++;\n    cout << \"? \" << w + 1 << ' ' << x << '\\n';\n    cout.flush();\n    long long resp;\n    cin >> resp;\n    memo[w][x] = resp;\n  }\n  return memo[w][x];\n}\nlong long bins(int w, long long targ) {\n  long long le = -1, ri = MVV, mi;\n  while (le + 1 < ri) {\n    mi = (le + ri) / 2;\n    if (query(w, mi) >= targ)\n      ri = mi;\n    else\n      le = mi;\n  }\n  return ri;\n}\nvoid solve(int *arr, int n, long long le, long long ri, int acu) {\n  if (n == 1) return void(ans[*arr] = pair<long long, long long>(le, ri));\n  int *one = arr, *two = arr + n, *mid;\n  long long cr;\n  while (one != arr + n / 2) {\n    cr = bins(*(two - 1), (acu + n / 2) * U);\n    mid = stable_partition(\n        one, two, [&](int x) { return query(x, cr) >= (acu + n / 2) * U; });\n    if (mid <= arr + n / 2) {\n      one = mid;\n      continue;\n    }\n    mid = stable_partition(one, mid, [&](int x) {\n      return query(x, cr) > (acu + n / 2) * U ||\n             query(x, cr - 1) != (acu + n / 2) * U - 1;\n    });\n    if (mid <= arr + n / 2)\n      break;\n    else\n      two = mid;\n  }\n  solve(arr, n / 2, le, cr, acu);\n  solve(arr + n / 2, n - n / 2, cr, ri, acu + n / 2);\n}\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  cin >> n >> L;\n  U = L / n;\n  iota(ind, ind + n, 0);\n  int *ptr = ind + n;\n  shuffle(ind, ind + n, rnd);\n  solve(ind, n, 0, MVV, 0);\n  cout << \"!\\n\";\n  for (int i = 0; i < n; i++)\n    cout << ans[i].first << ' ' << ans[i].second << '\\n';\n  LOG << n << ' ' << qcount << '\\n';\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e3 + 10;\nconst long long X = 1e18;\nint n;\nlong long L, l[N], r[N], lst;\nlong long f(int i, long long x) {\n  cout << '?' << ' ' << i << ' ' << x << endl;\n  long long y;\n  cin >> y;\n  return y;\n}\nlong long bin(int i, long long l, long long r, long long v) {\n  while (l < r) {\n    long long mid = (l + r) >> 1;\n    if (f(i, mid) < v)\n      l = mid + 1;\n    else\n      r = mid;\n  }\n  return l;\n}\nvector<int> kth(vector<int> q, long long lx, long long rx, long long y, int k) {\n  int i = q[rand() % int(q.size())];\n  long long x = bin(i, lx, rx, y);\n  vector<int> ls, rs, now;\n  for (auto i : q) {\n    long long v = f(i, x);\n    if (v == y)\n      now.push_back(i);\n    else if (v > y)\n      ls.push_back(i);\n    else\n      rs.push_back(i);\n  }\n  vector<int> ret;\n  if (int(ls.size()) >= k) {\n    ret = kth(ls, lx, rx, y, k);\n    ret.insert(ret.end(), now.begin(), now.end());\n    ret.insert(ret.end(), rs.begin(), rs.end());\n  } else if (int(ls.size()) + int(now.size()) >= k) {\n    lst = x;\n    ret = ls;\n    ret.insert(ret.end(), now.begin(), now.end());\n    ret.insert(ret.end(), rs.begin(), rs.end());\n  } else {\n    ret = ls;\n    ret.insert(ret.end(), now.begin(), now.end());\n    rs = kth(rs, lx, rx, y, k - int(ls.size()) - int(now.size()));\n    ret.insert(ret.end(), rs.begin(), rs.end());\n  }\n  return ret;\n}\nvoid solve(vector<int> q, long long lx, long long rx, int o) {\n  if (int(q.size()) == 1) {\n    l[q[0]] = lx;\n    r[q[0]] = rx;\n    return;\n  }\n  int mid = int(q.size()) / 2;\n  lst = -1;\n  q = kth(q, lx, rx, L / n * (o + mid), mid);\n  long long x = lst;\n  solve(vector<int>(q.begin(), q.begin() + mid), lx, x, o);\n  solve(vector<int>(q.begin() + mid, q.end()), x, rx, o + mid);\n}\nint main() {\n  srand(114514);\n  cin >> n >> L;\n  vector<int> q(n);\n  for (int i = 0; i < n; i++) q[i] = i + 1;\n  solve(q, 0, X, 0);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) cout << l[i] << ' ' << r[i] << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int inf = (int)1.01e9;\nconst long long infll = (long long)1.01e18;\nconst long double eps = 1e-9;\nconst long double pi = acos((long double)-1);\nmt19937 mrand(chrono::steady_clock::now().time_since_epoch().count());\nint rnd(int x) { return mrand() % x; }\nvoid precalc() {}\nconst int maxn = 1005;\nint n;\nlong long s;\nbool read() {\n  if (scanf(\"%d%lld\", &n, &s) < 2) {\n    return false;\n  }\n  return true;\n}\nconst long long X = (long long)1e18;\nint p[maxn];\nlong long vals[maxn];\nlong long ls[maxn], rs[maxn];\nlong long ask(int i, long long x) {\n  printf(\"? %d %lld\\n\", i + 1, x);\n  fflush(stdout);\n  long long res;\n  scanf(\"%lld\", &res);\n  return res;\n}\nlong long get(int i, int k) {\n  long long y = s / n * k;\n  long long l = 0, r = X;\n  while (l < r - 1) {\n    long long m = (l + r) / 2;\n    if (ask(p[i], m) < y) {\n      l = m;\n    } else {\n      r = m;\n    }\n  }\n  return r;\n}\nlong long getKth(int l, int m, int r) {\n  if (l == r - 1) {\n    return get(l, l);\n  }\n  int k = l + rnd(r - l);\n  long long x = get(k, m);\n  long long y = s / n * m;\n  int m0 = l, m1 = l;\n  for (int i = l; i < r; i++) {\n    vals[i] = ask(p[i], x);\n    if (vals[i] > y) {\n      swap(p[i], p[m0]);\n      swap(vals[i], vals[m0]);\n      if (m1 == m0) {\n        m1++;\n      }\n      m0++;\n    }\n    if (vals[i] == y) {\n      swap(p[i], p[m1]);\n      swap(vals[i], vals[m1]);\n      m1++;\n    }\n  }\n  if (m0 <= m && m < m1) {\n    return x;\n  }\n  if (m < m0) {\n    return getKth(l, m, m0);\n  } else {\n    return getKth(m1, m, r);\n  }\n}\nvoid rec(int l, int r, long long lx, long long rx) {\n  if (l == r - 1) {\n    ls[p[l]] = lx;\n    rs[p[l]] = rx;\n    return;\n  }\n  int m = (l + r) / 2;\n  long long mx = getKth(l, m, r);\n  rec(l, m, lx, mx);\n  rec(m, r, mx, rx);\n}\nvoid solve() {\n  for (int i = 0; i < n; i++) {\n    p[i] = i;\n  }\n  rec(0, n, 0, X);\n  printf(\"!\\n\");\n  for (int i = 0; i < n; i++) {\n    printf(\"%lld %lld\\n\", ls[i], rs[i]);\n  }\n  fflush(stdout);\n}\nint main() {\n  precalc();\n  read();\n  solve();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1005;\nint a[N], b[N], c[N];\nll n, len, val;\npair<ll, ll> ans[N];\ninline ll query(ll a, ll b) {\n  cout << \"? \" << a << ' ' << b << endl;\n  ll ret;\n  cin >> ret;\n  return ret;\n}\nll find(int x, ll kk, ll l, ll r) {\n  ll mid = (l + r) >> 1;\n  while (1) {\n    ll y = query(x, mid);\n    if (y == kk) return mid;\n    if (y < kk)\n      l = mid + 1;\n    else\n      r = mid - 1;\n    mid = (l + r) >> 1;\n  }\n}\nll kth(int l, int r, int kk, ll ql, ll qr) {\n  if (l == r) return -1;\n  int x = rand() % (r - l + 1) + l;\n  ll y = find(a[x], (len / n) * kk, ql, qr);\n  int l1 = l - 1, l2 = r + 1, l3 = 0;\n  c[++l3] = a[x];\n  for (int i = l; i <= r; i++) {\n    if (i == x) continue;\n    ll tt = query(a[i], y);\n    if (tt < (len / n) * kk) b[--l2] = a[i];\n    if (tt == (len / n) * kk) c[++l3] = a[i];\n    if (tt > (len / n) * kk) b[++l1] = a[i];\n  }\n  while (l1 < kk && l3) b[++l1] = c[l3--];\n  if (l1 == kk) {\n    val = y;\n    while (l3) b[--l2] = c[l3--];\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return val;\n  }\n  if (l1 < kk) {\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return kth(l1 + 1, r, kk, ql, qr);\n  }\n  while (l3) b[--l2] = c[l3--];\n  for (int i = l; i <= r; i++) a[i] = b[i];\n  return kth(l, l1, kk, ql, qr);\n}\nvoid solve(int l, int r, ll ql, ll qr) {\n  if (l == r) {\n    ans[a[l]] = {ql, qr};\n    return;\n  }\n  int mid = (l + r) >> 1;\n  ll x = kth(l, r, mid, ql, qr);\n  solve(l, mid, ql, x);\n  solve(mid + 1, r, x, qr);\n}\nint main() {\n  ios::sync_with_stdio(false);\n  srand(time(0));\n  cin >> n >> len;\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 0, 1000000000000000000);\n  cout << \"!\\n\";\n  for (int i = 1; i <= n; i++)\n    cout << ans[i].first << ' ' << ans[i].second << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\ninline long long query(int id, long long x) {\n  if (!x) return 0;\n  printf(\"? %d %lld\\n\", id, x);\n  fflush(stdout);\n  long long ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\ninline long long findx(int id, long long L, long long R, long long v) {\n  long long mid;\n  while (L < R) {\n    mid = (L + R) >> 1;\n    long long val = query(id, mid);\n    if (val < v)\n      L = mid + 1;\n    else if (v < val)\n      R = mid - 1;\n    else\n      return mid;\n  }\n  return L;\n}\nlong long inde, vis[N];\nlong long getmid(vector<int> &f, vector<int> &g, long long L, long long R,\n                 long long v, int cnt) {\n  int id = f[rand() % f.size()];\n  long long x = findx(id, L, R, v), val;\n  vector<int> l, r, p;\n  for (int i : g) {\n    if (i == id) continue;\n    val = query(i, x);\n    if (val < v)\n      l.push_back(i);\n    else if (val > v)\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < cnt && !p.empty()) l.push_back(p.back()), p.pop_back();\n  while (p.size()) r.push_back(p.back()), p.pop_back();\n  if (l.size() <= cnt && r.size() < g.size() - cnt) return x;\n  if (l.size() > cnt) {\n    ++inde;\n    for (int i : l) vis[i] = inde;\n    for (int i = 0; i < f.size(); ++i)\n      if (vis[f[i]] ^ inde) swap(f[i], f.back()), f.pop_back(), --i;\n    return getmid(f, g, L, R, v, cnt);\n  } else {\n    ++inde;\n    for (int i : r) vis[i] = inde;\n    for (int i = 0; i < f.size(); i++)\n      if (vis[f[i]] ^ inde) swap(f[i], f.back()), f.pop_back(), --i;\n    return getmid(f, g, L, R, v, cnt);\n  }\n}\nstruct Interval {\n  long long l, r;\n} ans[N];\nvoid work(vector<int> &f, long long L, long long R, long long xl,\n          long long xr) {\n  if (!f.size()) return;\n  if (f.size() == 1) {\n    ans[f[0]].l = xl;\n    ans[f[0]].r = xr;\n    return;\n  }\n  long long m = f.size();\n  long long d = (R - L) / m;\n  vector<int> g = f;\n  long long x = getmid(g, f, xl, xr, L + d * (m / 2), m >> 1);\n  long long val;\n  vector<int> l, r, p;\n  for (int i : f) {\n    val = query(i, x);\n    if (val > L + d * (m / 2))\n      l.push_back(i);\n    else if (val < L + d * (m / 2))\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < (m >> 1) && p.size()) l.push_back(p.back()), p.pop_back();\n  while (!p.empty()) r.push_back(p.back()), p.pop_back();\n  work(l, L, L + d * (m / 2), xl, x);\n  work(r, L + d * (m / 2), R, x, xr);\n}\nvector<int> f;\nint n;\nlong long L;\nint main() {\n  scanf(\"%d %lld\", &n, &L);\n  for (int i = 1; i <= n; ++i) f.push_back(i);\n  work(f, 0, L, 0, 1e18);\n  putchar('!');\n  putchar('\\n');\n  for (int i = 1; i <= n; ++i) printf(\"%lld %lld\\n\", ans[i].l, ans[i].r);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n, t, lt, ut, eq[1010], low[1010], up[1010], id[1010];\nlong long L, l[1010], r[1010];\nlong long ask(int i, long long x) {\n  printf(\"? %d %lld\\n\", i, x);\n  fflush(stdout);\n  scanf(\"%lld\", &x);\n  return x;\n}\nlong long get(int i, long long l, long long r, long long x) {\n  long long mid, res = l;\n  while (l <= r) {\n    mid = (l + r) >> 1;\n    if (ask(i, mid) <= x)\n      l = mid + 1, res = mid;\n    else\n      r = mid - 1;\n  }\n  return res;\n}\nvoid dfs(int nl, int nr, long long pl, long long pr) {\n  if (nl == nr) return l[id[nl]] = pl, r[id[nr]] = pr, void();\n  int md = (nl + nr) >> 1;\n  long long x = L / n * md, md2, res;\n  for (int l = nl, r = nr;;) {\n    int nw = rand() % (r - l + 1) + l;\n    res = get(id[nw], pl, pr, x);\n    t = ut = lt = 0;\n    for (int i = l; i <= r; i++) {\n      if (i == nw) {\n        eq[++t] = id[i];\n        continue;\n      }\n      long long tmp = ask(id[i], res);\n      if (tmp > x)\n        low[++lt] = id[i];\n      else if (tmp < x)\n        up[++ut] = id[i];\n      else\n        eq[++t] = id[i];\n    }\n    for (int i = 1; i <= lt; i++) id[l + i - 1] = low[i];\n    for (int i = 1; i <= t; i++) id[l + lt - 1 + i] = eq[i];\n    for (int i = 1; i <= ut; i++) id[r - i + 1] = up[i];\n    if (l + lt <= md && md <= r - ut) {\n      md2 = res;\n      break;\n    }\n    if (l + lt < md)\n      l = l + lt + 1;\n    else\n      r = l + lt - 1;\n  }\n  dfs(nl, md, pl, md2), dfs(md + 1, nr, md2, pr);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  for (int i = 1; i <= n; i++) id[i] = i;\n  dfs(1, n, 0, 1e18);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", l[i], r[i]);\n  fflush(stdout);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\nconst long long INF = 1E18;\nmt19937_64 mt(133769420);\nvector<int> cl, ce, cr;\nint n, a[N], st[N];\nlong long lim, al[N], ar[N];\nint random(int n) {\n  uniform_int_distribution<int> dis(0, n - 1);\n  return dis(mt);\n}\nlong long ask(int u, long long v) {\n  cout << \"? \" << u << \" \" << v << endl;\n  long long ret;\n  cin >> ret;\n  return ret;\n}\nlong long BS(int u, long long tar, long long le, long long ri) {\n  while (le <= ri) {\n    long long mi = (le + ri) / 2;\n    long long cur = ask(u, mi);\n    if (cur == tar)\n      return mi;\n    else if (cur < tar)\n      le = mi + 1;\n    else\n      ri = mi - 1;\n  }\n}\nvoid solve(long long le, long long ri, int add, vector<int> ve) {\n  int n = ve.size();\n  if (n == 1) {\n    al[ve.back()] = le;\n    ar[ve.back()] = ri;\n    return;\n  }\n  vector<int> ml, mr;\n  long long pos, mid = lim * (add + n / 2);\n  while (!ve.empty()) {\n    int cl = ml.size(), cr = mr.size();\n    pos = BS(ve[random(ve.size())], mid, le, ri);\n    for (int i = 0; i < ve.size(); i++) {\n      long long cur = ask(ve[i], pos);\n      if (cur > mid)\n        st[i] = 0;\n      else if (cur == mid)\n        st[i] = 1;\n      else\n        st[i] = 2;\n      cl += (st[i] == 0);\n      cr += (st[i] == 2);\n    }\n    for (int i = ve.size() - 1; i >= 0; i--) {\n      if (st[i] == 0 && cl <= n / 2) {\n        ml.push_back(ve[i]);\n        ve[i] = ve.back();\n        ve.pop_back();\n      } else if (st[i] == 2 && cr <= n - n / 2) {\n        mr.push_back(ve[i]);\n        ve[i] = ve.back();\n        ve.pop_back();\n      } else if (st[i] == 1 && cl <= n / 2 && cr <= n - n / 2) {\n        if (cl < n / 2) {\n          ml.push_back(ve[i]);\n          cl++;\n        } else {\n          mr.push_back(ve[i]);\n          cr++;\n        }\n        ve[i] = ve.back();\n        ve.pop_back();\n      }\n    }\n  }\n  solve(le, pos, add, ml);\n  solve(pos, ri, add + n / 2, mr);\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cin >> n >> lim;\n  lim /= n;\n  vector<int> ve(n);\n  for (int i = 0; i < n; i++) ve[i] = i + 1;\n  solve(0, INF, 0, ve);\n  cout << \"!\" << endl;\n  for (int i = 1; i <= n; i++) cout << al[i] << \" \" << ar[i] << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nmt19937 mt(48);\nconst int MAXN = 1100;\nint N;\nll L;\nll lind[MAXN];\nll lval[MAXN];\nll rind[MAXN];\nll rval[MAXN];\nmap<pair<int, ll>, ll> cache;\nint numQueries = 0;\nll query(int i, ll x) {\n  pair<int, ll> st(i, x);\n  if (cache.count(st)) return cache[st];\n  if (x == 0) return cache[st] = 0;\n  if (x == ll(1e18)) return cache[st] = L;\n  numQueries++;\n  cout << \"?\" << ' ' << i + 1 << ' ' << x << '\\n' << flush;\n  ll v;\n  cin >> v;\n  return cache[st] = v;\n}\nvoid dfs(vector<int> inds, ll l, ll r) {\n  assert(!inds.empty());\n  if (inds.size() == 1) {\n    lind[inds[0]] = l;\n    rind[inds[0]] = r;\n    return;\n  }\n  assert(inds.size() >= 2);\n  int ltarget = int(inds.size()) / 2;\n  int rtarget = int(inds.size()) - ltarget;\n  shuffle(inds.begin(), inds.end(), mt);\n  vector<int> linds;\n  vector<int> rinds;\n  vector<int> minds = std::move(inds);\n  ll curL = l, curR = r;\n  while (true) {\n    ll mi = 0, ma = ll(1e18);\n    ll md;\n    while (ma - mi > 1) {\n      md = (mi + ma) / 2;\n      if (md >= curR) {\n        ma = md;\n      } else if (md <= curL) {\n        mi = md;\n      } else {\n        int i = minds[0];\n        ll ldiff = query(i, md) - query(i, l);\n        ll rdiff = query(i, r) - query(i, md);\n        if (ldiff < ((L / N) * ltarget)) {\n          mi = md;\n        } else if (rdiff < ((L / N) * rtarget)) {\n          ma = md;\n        } else {\n          break;\n        }\n      }\n    }\n    vector<int> lgoods;\n    vector<int> rgoods;\n    vector<int> bgoods;\n    for (int i : minds) {\n      ll ldiff = query(i, md) - query(i, l);\n      ll rdiff = query(i, r) - query(i, md);\n      bool lgood = ldiff >= ((L / N) * ltarget);\n      bool rgood = rdiff >= ((L / N) * rtarget);\n      assert(lgood || rgood);\n      if (lgood && rgood) {\n        bgoods.push_back(i);\n      } else if (lgood) {\n        lgoods.push_back(i);\n      } else if (rgood) {\n        rgoods.push_back(i);\n      } else\n        assert(false);\n    }\n    if (int(linds.size() + lgoods.size() + bgoods.size()) >= ltarget &&\n        int(rinds.size() + rgoods.size() + bgoods.size()) >= rtarget) {\n      linds.insert(linds.end(), lgoods.begin(), lgoods.end());\n      rinds.insert(rinds.end(), rgoods.begin(), rgoods.end());\n      while (int(linds.size()) < ltarget) {\n        linds.push_back(bgoods.back());\n        bgoods.pop_back();\n      }\n      rinds.insert(rinds.end(), bgoods.begin(), bgoods.end());\n      dfs(linds, l, md);\n      dfs(rinds, md, r);\n      return;\n    } else if (int(linds.size() + lgoods.size() + bgoods.size()) < ltarget) {\n      linds.insert(linds.end(), lgoods.begin(), lgoods.end());\n      linds.insert(linds.end(), bgoods.begin(), bgoods.end());\n      minds = std::move(rgoods);\n      curL = md;\n    } else {\n      rinds.insert(rinds.end(), rgoods.begin(), rgoods.end());\n      rinds.insert(rinds.end(), bgoods.begin(), bgoods.end());\n      minds = std::move(lgoods);\n      curR = md;\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> N >> L;\n  for (int i = 0; i < N; i++) {\n    lind[i] = 0;\n    lval[i] = 0;\n    rind[i] = ll(1e18);\n    rval[i] = L;\n  }\n  vector<int> inds;\n  for (int i = 0; i < N; i++) inds.push_back(i);\n  dfs(inds, 0, ll(1e18));\n  cout << \"!\" << '\\n';\n  for (int i = 0; i < N; i++) {\n    cout << lind[i] << ' ' << rind[i] << '\\n';\n  }\n  cerr << \"numQueries \" << numQueries << '\\n';\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int mxN = 1e3;\nint n, a[mxN], b[mxN];\nlong long L, l[mxN], r[mxN];\nlong long ask(int i, long long x) {\n  cout << \"? \" << i + 1 << \" \" << x << endl;\n  cin >> x;\n  return x;\n}\nvoid dc(int l1, int r1, long long l2, long long r2) {\n  if (l1 == r1) {\n    l[a[l1]] = l2;\n    r[a[l1]] = r2;\n    return;\n  }\n  int m1 = (l1 + r1) / 2;\n  long long x = L / n * (m1 + 1), m2;\n  for (int l = l1, r = r1;;) {\n    int i = rand() % (r - l + 1) + l;\n    long long lb = l2, rb = r2;\n    while (lb < rb) {\n      long long mb = (lb + rb) / 2;\n      if (ask(a[i], mb) < x)\n        lb = mb + 1;\n      else\n        rb = mb;\n    }\n    int l2 = l, r2 = r;\n    vector<int> e;\n    for (int j = l; j <= r; ++j) {\n      long long y = ask(a[j], lb);\n      if (y > x)\n        b[l2++] = a[j];\n      else if (y < x)\n        b[r2--] = a[j];\n      else\n        e.push_back(a[j]);\n    }\n    for (int j = 0; j < e.size(); ++j) b[l2 + j] = e[j];\n    memcpy(a + l, b + l, 4 * (r - l + 1));\n    if (l2 <= m1 && m1 <= r2) {\n      m2 = lb;\n      break;\n    }\n    if (l2 < m1)\n      l = l2 + 1;\n    else\n      r = l2 - 1;\n  }\n  dc(l1, m1, l2, m2);\n  dc(m1 + 1, r1, m2, r2);\n}\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  cin >> n >> L;\n  iota(a, a + n, 0);\n  dc(0, n - 1, 0, 1e18);\n  cout << \"!\\n\";\n  for (int i = 0; i < n; ++i) cout << l[i] << \" \" << r[i] << \"\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\ninline long long query(int id, long long x) {\n  if (!x) return 0;\n  printf(\"? %d %lld\\n\", id, x);\n  fflush(stdout);\n  long long ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\ninline long long findx(int id, long long L, long long R, long long v) {\n  long long mid;\n  while (L < R) {\n    mid = (L + R) >> 1;\n    long long val = query(id, mid);\n    if (val < v)\n      L = mid + 1;\n    else if (v < val)\n      R = mid - 1;\n    else\n      return mid;\n  }\n  return L;\n}\nlong long tim, vis[N];\nlong long getmid(vector<int> &f, vector<int> &g, long long L, long long R,\n                 long long v, int cnt) {\n  int id = f[rand() % f.size()];\n  long long x = findx(id, L, R, v), val;\n  vector<int> l, r, p;\n  for (int i : g) {\n    if (i == id) continue;\n    val = query(i, x);\n    if (val < v)\n      l.push_back(i);\n    else if (val > v)\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < cnt && !p.empty()) l.push_back(p.back()), p.pop_back();\n  while (p.size()) r.push_back(p.back()), p.pop_back();\n  if (l.size() <= cnt && r.size() < g.size() - cnt) {\n    f.clear();\n    return x;\n  }\n  if (l.size() > cnt) {\n    ++tim;\n    for (int i = 0; i < l.size(); ++i) vis[l[i]] = tim;\n    for (int i = 0; i < f.size(); i++)\n      if (vis[f[i]] != tim) swap(f[i], f.back()), f.pop_back(), i--;\n    return getmid(f, g, L, R, v, cnt);\n  } else {\n    ++tim;\n    for (int i = 0; i < r.size(); ++i) vis[r[i]] = tim;\n    for (int i = 0; i < f.size(); i++)\n      if (vis[f[i]] != tim) swap(f[i], f.back()), f.pop_back(), i--;\n    return getmid(f, g, L, R, v, cnt);\n  }\n}\nstruct Interval {\n  long long l, r;\n} ans[N];\nvoid work(vector<int> &f, long long L, long long R, long long xl,\n          long long xr) {\n  if (!f.size()) return;\n  if (f.size() == 1) {\n    ans[f[0]].l = xl;\n    ans[f[0]].r = xr;\n    return;\n  }\n  long long m = f.size();\n  long long d = (R - L) / m;\n  vector<int> g = f;\n  long long x = getmid(g, f, xl, xr, L + d * (m / 2), m >> 1);\n  long long val;\n  vector<int> l, r, p;\n  for (int i : f) {\n    val = query(i, x);\n    if (val > L + d * (m / 2))\n      l.push_back(i);\n    else if (val < L + d * (m / 2))\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < (m >> 1) && p.size()) l.push_back(p.back()), p.pop_back();\n  while (!p.empty()) r.push_back(p.back()), p.pop_back();\n  work(l, L, L + d * (m / 2), xl, x);\n  work(r, L + d * (m / 2), R, x, xr);\n}\nvector<int> f;\nint n;\nlong long L;\nint main() {\n  scanf(\"%d %lld\", &n, &L);\n  for (int i = 1; i <= n; ++i) f.push_back(i);\n  work(f, 0, L, 0, 1e18);\n  putchar('!');\n  putchar('\\n');\n  for (int i = 1; i <= n; ++i) printf(\"%lld %lld\\n\", ans[i].l, ans[i].r);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint const N = 1000;\nlong long const inf = 1000000000000000000;\nint n;\nlong long L;\npair<long long, long long> an[N + 1];\nvector<int> o{0};\nmap<long long, long long> dp[N + 1];\nlong long ask(int i, long long x) {\n  auto it = dp[i].find(x);\n  if (it != dp[i].end()) return it->second;\n  printf(\"? %d %lld\\n\", i, x);\n  fflush(stdout);\n  long long an;\n  scanf(\"%lld\", &an);\n  return dp[i][x] = an;\n}\nlong long gt(int i, long long x, long long l, long long r) {\n  while (r > l) {\n    long long m = l + r >> 1;\n    if (ask(i, m) < x)\n      l = m + 1;\n    else\n      r = m;\n  }\n  return l;\n}\nvoid go(vector<int> const &v, long long l = 0, long long r = inf, int nl = 1,\n        int nr = n) {\n  if (v.size() == 1) {\n    an[v[0]].second = r;\n    o.push_back(v[0]);\n    return;\n  }\n  int m = nl + nr >> 1;\n  long long w = L / n * m, t;\n  vector<int> vl, vr, c(v);\n  while (!c.empty()) {\n    int i = rand() % c.size(), cl = 0, cr = 0;\n    t = gt(c[i], w, l, r);\n    for (int u : c) {\n      long long z = ask(u, t);\n      if (z < w)\n        ++cl;\n      else if (z > w)\n        ++cr;\n    }\n    bool kll = false, klr = false;\n    if (cl + vl.size() <= nr - m && cr + vr.size() <= m + 1 - nl) {\n      kll = true;\n      klr = true;\n    } else if (cl + vl.size() > nr - m)\n      klr = true;\n    else\n      kll = true;\n    for (int &u : c) {\n      long long z = ask(u, t);\n      if (z < w && kll)\n        vl.push_back(u), u = 0, --cl;\n      else if (z > w && klr)\n        vr.push_back(u), u = 0, --cr;\n      else if (z == w) {\n        if (kll && klr) {\n          if (cl + vl.size() < nr - m)\n            vl.push_back(u);\n          else\n            vr.push_back(u);\n        } else if (kll)\n          vl.push_back(u);\n        else\n          vr.push_back(u);\n        u = 0;\n      }\n    }\n    for (int i = 0; i < (int)(c.size()); ++i)\n      if (c[i] == 0) {\n        swap(c[i], c.back());\n        c.pop_back();\n        --i;\n      }\n  }\n  go(vr, l, t, nl, m);\n  go(vl, t + 1, r, m + 1, nr);\n}\nint main() {\n  srand(time(0));\n  scanf(\"%d%lld\", &n, &L);\n  vector<int> v(n);\n  for (int i = 1; i < (int)(n + 1); ++i) v[i - 1] = i;\n  go(v);\n  for (int i = 1; i < (int)(n + 1); ++i) an[o[i]].first = an[o[i - 1]].second;\n  printf(\"!\\n\");\n  for (int i = 1; i < (int)(n + 1); ++i)\n    printf(\"%lld %lld\\n\", an[i].first, an[i].second);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1e3 + 5;\nconst long long Range = 1e18;\ntemplate <typename T>\nvoid chkmax(T &x, T y) {\n  x = max(x, y);\n}\ntemplate <typename T>\nvoid chkmin(T &x, T y) {\n  x = min(x, y);\n}\ntemplate <typename T>\nvoid read(T &x) {\n  x = 0;\n  int f = 1;\n  char c = getchar();\n  for (; !isdigit(c); c = getchar())\n    if (c == '-') f = -f;\n  for (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n  x *= f;\n}\nint n, cnt, a[MAXN];\nlong long L, b[MAXN], c[MAXN];\npair<long long, long long> ans[MAXN];\nlong long locate(int i, long long x, long long l, long long r) {\n  while (l < r) {\n    long long mid = (l + r) / 2, res;\n    cout << '?' << ' ' << i << ' ' << mid << endl;\n    read(res);\n    if (res == x) return mid;\n    if (res > x)\n      r = mid - 1;\n    else\n      l = mid + 1;\n  }\n  return l;\n}\nvoid findkth(int l, int r, int k, long long x, long long pl, long long pr) {\n  random_shuffle(a + l, a + r + 1);\n  b[a[l]] = locate(a[l], x, pl, pr);\n  long long pos = b[a[l]];\n  for (int i = l; i <= r; i++) {\n    cout << '?' << ' ' << a[i] << ' ' << pos << endl;\n    read(c[a[i]]);\n    if (c[a[i]] == x) b[a[i]] = pos;\n  }\n  sort(a + l, a + r + 1, [&](int x, int y) { return c[x] > c[y]; });\n  if (c[a[k]] == x) return;\n  if (c[a[k]] < x) {\n    while (c[a[l]] >= x) l++;\n    findkth(l, r, k, x, pl, pr);\n  } else {\n    while (c[a[r]] <= x) r--;\n    findkth(l, r, k, x, pl, pr);\n  }\n}\nvoid solve(int l, int r, long long vl, long long vr, long long pl,\n           long long pr) {\n  if (l == r) {\n    ans[a[l]] = make_pair(pl, pr);\n    return;\n  }\n  assert((vr - vl) % (r - l + 1) == 0);\n  long long d = (vr - vl) / (r - l + 1), k = (r - l + 1) / 2;\n  findkth(l, r, l + k - 1, vl + k * d, pl, pr);\n  long long mid = b[a[l + k - 1]];\n  solve(l, l + k - 1, vl, vl + k * d, pl, mid);\n  solve(l + k, r, vl + k * d, vr, mid, pr);\n}\nint main() {\n  read(n), read(L);\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 0, L, 0, Range);\n  cout << '!' << endl;\n  for (int i = 1; i <= n; i++)\n    cout << ans[i].first << ' ' << ans[i].second << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst int64_t BILLION = 1000000000LL;\nconst int64_t MAXIN = BILLION * BILLION;\nint64_t N, L;\nstd::map<std::pair<int, int64_t>, int> memo;\nint64_t query(int i, int64_t x) {\n  if (x == 0) return 0;\n  if (x == MAXIN) return L;\n  printf(\"? %d %I64d\\n\", i + 1, x);\n  fflush(stdout);\n  int64_t res;\n  scanf(\"%I64d\", &res);\n  return res;\n}\nstd::pair<int64_t, int64_t> ans[1005];\nint64_t locate(int i, int64_t ll, int64_t rr, int64_t thres) {\n  int64_t low = ll, high = rr;\n  while (high - low > 1) {\n    int64_t mid = (low + high) / 2;\n    if (query(i, mid) >= thres) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n  }\n  return high;\n}\nvoid solve(std::vector<int> is, int64_t ll, int64_t rr, int64_t base) {\n  if (is.size() == 1) {\n    ans[is[0]] = {ll, rr};\n    return;\n  }\n  int64_t crit = L / N * (is.size() / 2) + base;\n  int64_t k = is.size() / 2;\n  std::vector<int> sub(is);\n  std::vector<int> left, right;\n  int64_t pivot_value;\n  while (k > 0) {\n    int pivot_index = sub[rand() % sub.size()];\n    pivot_value = locate(pivot_index, ll, rr, crit);\n    std::vector<int> small, big;\n    for (int i : sub) {\n      if (i >= pivot_index && (query(i, pivot_value - 1) < crit) ||\n          i < pivot_index && (query(i, pivot_value) < crit)) {\n        big.push_back(i);\n      } else {\n        small.push_back(i);\n      }\n    }\n    if (k >= small.size()) {\n      k -= small.size();\n      left.insert(left.end(), small.begin(), small.end());\n      sub = big;\n    } else {\n      right.insert(right.end(), big.begin(), big.end());\n      sub = small;\n    }\n  }\n  right.insert(right.end(), sub.begin(), sub.end());\n  assert(left.size() <= is.size() / 2);\n  assert(right.size() <= is.size() - is.size() / 2);\n  solve(left, ll, pivot_value, base);\n  solve(right, pivot_value, rr, crit);\n}\nint main() {\n  scanf(\"%I64d %I64d\", &N, &L);\n  std::vector<int> is;\n  for (int i = 0; i < N; i++) {\n    is.push_back(i);\n  }\n  solve(is, 0, MAXIN, 0);\n  printf(\"!\\n\");\n  for (int i = 0; i < N; i++) {\n    printf(\"%I64d %I64d\\n\", ans[i].first, ans[i].second);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long L, al[1005], ar[1005];\nint arr[1005][1005] = {{},\n                       {0, 0, 1, 1, 2, 3, 4, 4},\n                       {0, 1, 1, 2, 2, 3, 3, 4},\n                       {0, 1, 2, 2, 2, 3, 3, 4},\n                       {0, 0, 0, 0, 1, 2, 3, 4}};\nlong long getv(int u, long long v) {\n  printf(\"? %d %lld\\n\", u, v);\n  fflush(stdout);\n  long long r;\n  scanf(\"%lld\", &r);\n  return r;\n}\nlong long ser(int u, long long v, long long l, long long r) {\n  long long m;\n  for (; l < r;) {\n    m = l + r >> 1;\n    long long t = getv(u, m);\n    if (t < v)\n      l = m + 1;\n    else if (t > v)\n      r = m - 1;\n    else\n      return m;\n  }\n  return l;\n}\nint vis[1005], tim;\nlong long llc;\nvoid qry(vector<int>& g, vector<int>& p, long long ql, long long qr,\n         long long aim, int ls) {\n  int t = g[rand() % g.size()];\n  long long x = ser(t, aim, ql, qr);\n  vector<int> l, r, z;\n  for (int i = (0), LIM = (p.size() - 1); i <= LIM; i++)\n    if (p[i] != t) {\n      long long y = getv(p[i], x);\n      if (y == aim) z.push_back(p[i]);\n      if (y < aim) l.push_back(p[i]);\n      if (y > aim) r.push_back(p[i]);\n    }\n  for (; l.size() < ls && !z.empty();) l.push_back(z.back()), z.pop_back();\n  for (; !z.empty();) r.push_back(z.back()), z.pop_back();\n  if (l.size() <= ls && r.size() < p.size() - ls) {\n    g.clear();\n    g.push_back(t);\n    llc = x;\n    return;\n  }\n  if (l.size() > ls) {\n    ++tim;\n    for (int i = (0), LIM = (l.size() - 1); i <= LIM; i++) vis[l[i]] = tim;\n    for (int i = 0; i < g.size(); i++)\n      if (vis[g[i]] != tim) swap(g[i], g.back()), g.pop_back(), i--;\n    qry(g, p, ql, qr, aim, ls);\n  } else {\n    ++tim;\n    for (int i = (0), LIM = (r.size() - 1); i <= LIM; i++) vis[r[i]] = tim;\n    for (int i = 0; i < g.size(); i++)\n      if (vis[g[i]] != tim) swap(g[i], g.back()), g.pop_back(), i--;\n    qry(g, p, ql, qr, aim, ls);\n  }\n}\nvoid Solve(vector<int>& p, long long ql, long long qr, long long pl,\n           long long pr) {\n  if (p.empty()) return;\n  if (p.size() == 1) {\n    al[p[0]] = ql, ar[p[0]] = qr;\n    return;\n  }\n  vector<int> g = p;\n  int m = p.size() / 2;\n  qry(g, p, ql, qr, pl + (pr - pl) / p.size() * m, m);\n  int t = g[0];\n  vector<int> l, r, z;\n  for (int i = (0), LIM = (p.size() - 1); i <= LIM; i++) {\n    long long y = getv(p[i], llc);\n    if (y == pl + (pr - pl) / p.size() * m) z.push_back(p[i]);\n    if (y > pl + (pr - pl) / p.size() * m) l.push_back(p[i]);\n    if (y < pl + (pr - pl) / p.size() * m) r.push_back(p[i]);\n  }\n  for (; l.size() < m;) l.push_back(z.back()), z.pop_back();\n  for (; !z.empty();) r.push_back(z.back()), z.pop_back();\n  long long tmp = llc;\n  Solve(l, ql, tmp, pl, pl + (pr - pl) / p.size() * m);\n  Solve(r, tmp, qr, pl + (pr - pl) / p.size() * m, pr);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  vector<int> p;\n  for (int i = (1), LIM = (n); i <= LIM; i++) p.push_back(i);\n  Solve(p, 0, 1e18, 0, L);\n  puts(\"!\");\n  for (int i = (1), LIM = (n); i <= LIM; i++)\n    printf(\"%lld %lld\\n\", al[i], ar[i]);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long SEED = chrono::steady_clock::now().time_since_epoch().count();\nmt19937_64 rng = mt19937_64(SEED);\ninline long long rnd(const long long& a, const long long& b) {\n  return uniform_int_distribution<long long>(a, b)(rng);\n}\nvector<pair<long long, long long> > ans;\nlong long n, L;\nmap<pair<int, long long>, long long> vv;\nlong long valueAt(int i, long long x) {\n  if (vv.count({i, x}) == 0) {\n    cout << \"? \" << i << \" \" << x << endl;\n    long long res;\n    cin >> res;\n    vv[{i, x}] = res;\n  }\n  return vv[{i, x}];\n}\nlong long getX(const int& i, long long l, long long h, long long v) {\n  long long lg = 0;\n  while (l <= h) {\n    long long m = (l + h) / 2;\n    long long x = valueAt(i, m);\n    if (x < v) {\n      lg = m;\n      l = m + 1;\n    } else {\n      h = m - 1;\n    }\n  }\n  return lg + 1;\n}\nlong long splitPoint;\npair<vector<int>, vector<int> > splitInto(vector<int>& fun, long long lx,\n                                          long long hx, long long ly,\n                                          long long hy, long long my, int k) {\n  int rPos = rnd(0, fun.size() - 1);\n  long long x = getX(fun[rPos], lx, hx, my);\n  vector<int> l, e, h;\n  for (int i = 0; i < fun.size(); i++) {\n    long long va = valueAt(fun[i], x);\n    if (va < my) l.push_back(fun[i]);\n    if (va == my) e.push_back(fun[i]);\n    if (va > my) h.push_back(fun[i]);\n  }\n  while (e.size() > 0 && l.size() < k) {\n    l.push_back(e.back());\n    e.pop_back();\n  }\n  while (e.size() > 0) {\n    h.push_back(e.back());\n    e.pop_back();\n  }\n  if (l.size() > k) {\n    auto pr = splitInto(l, x, hx, ly, hy, my, k);\n    l = pr.first;\n    for (auto a : pr.second) h.push_back(a);\n  } else if (l.size() < k) {\n    auto pr = splitInto(h, lx, x, ly, hy, my, k - l.size());\n    h = pr.second;\n    for (auto a : pr.first) l.push_back(a);\n  } else\n    splitPoint = x;\n  return {l, h};\n}\nvoid solve(vector<int>& fun, long long lx, long long hx, long long ly,\n           long long hy) {\n  if (fun.size() == 0) return;\n  if (fun.size() == 1) {\n    ans[fun[0] - 1] = {lx, hx};\n    return;\n  }\n  long long split = fun.size() / 2;\n  long long my = ly + split * (L / n);\n  pair<vector<int>, vector<int> > pr;\n  if (fun.size() % 2 == 0)\n    pr = splitInto(fun, lx, hx, ly, hy, my, split);\n  else\n    pr = splitInto(fun, lx, hx, ly, hy, my, split + 1);\n  vector<int> fl = move(pr.second);\n  vector<int> fr = move(pr.first);\n  long long p = splitPoint;\n  solve(fl, lx, p, ly, my);\n  solve(fr, p, hx, my, hy);\n}\nint32_t main(int argv, char** argc) {\n  ios::sync_with_stdio(false);\n  cin >> n >> L;\n  ans.resize(n);\n  vector<int> fun;\n  for (int i = 0; i < n; i++) fun.push_back(i + 1);\n  shuffle(fun.begin(), fun.end(), rng);\n  solve(fun, 0, 1e18, 0, L);\n  cout << \"!\\n\";\n  for (auto a : ans) cout << a.first << \" \" << a.second << \"\\n\";\n  cout << endl;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst bool TEST = false;\nusing ll = long long;\nconst ll MAXX = ll(1e18);\nint n;\nll l;\nll D;\nint nq = 0;\nmap<pair<int, ll>, ll> cache;\nll f(int i, ll x) {\n  if (cache.count({i, x})) return cache[{i, x}];\n  nq += 1;\n  assert(nq <= 59999);\n  if (TEST) return min(x / (i + 1), 5ll);\n  assert(0 <= i && i < n);\n  assert(0 <= x && x <= MAXX);\n  cout << \"?\"\n       << \" \" << i + 1 << \" \" << x << '\\n';\n  cout << flush;\n  ll val;\n  cin >> val;\n  cache[{i, x}] = val;\n  return val;\n}\nvector<pair<ll, ll> > ans;\nmt19937 mt(48);\nvoid solve(ll s, ll e, vector<int> ids) {\n  int n = ids.size();\n  if (n == 1) {\n    ans[ids.front()] = {s, e};\n    return;\n  }\n  int z = n / 2;\n  vector<int> lids;\n  vector<int> rids;\n  while (!ids.empty()) {\n    shuffle(ids.begin(), ids.end(), mt);\n    int x = ids.front();\n    ll l = s - 1;\n    ll r = e + 1;\n    ll loc = -1;\n    assert(f(x, e) - f(x, s) >= n * D);\n    while (l + 1 < r) {\n      ll m = (l + r) / 2;\n      bool lok = f(x, m) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, m) >= (n - z) * D;\n      if (lok && rok) {\n        loc = m;\n        break;\n      } else if (rok) {\n        l = m;\n      } else if (lok) {\n        r = m;\n      } else\n        assert(false);\n    }\n    assert(loc != -1);\n    vector<int> lt, eq, rt;\n    for (int x : ids) {\n      assert(f(x, e) - f(x, s) >= n * D);\n      bool lok = f(x, loc) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, loc) >= (n - z) * D;\n      if (lok && rok) {\n        eq.push_back(x);\n      } else if (lok) {\n        lt.push_back(x);\n      } else if (rok) {\n        rt.push_back(x);\n      } else\n        assert(false);\n    }\n    ids.clear();\n    if (lids.size() + lt.size() <= z) {\n      for (int x : lt) lids.push_back(x);\n      lt.clear();\n      while (!eq.empty() && (int)lids.size() < z) {\n        lids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    if (rids.size() + rt.size() <= n - z) {\n      for (int x : rt) rids.push_back(x);\n      rt.clear();\n      while (!eq.empty() && (int)rids.size() < n - z) {\n        rids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    for (int x : lt) ids.push_back(x);\n    for (int x : eq) ids.push_back(x);\n    for (int x : rt) ids.push_back(x);\n    if (ids.empty()) {\n      solve(s, loc, lids);\n      solve(loc, e, rids);\n      return;\n    }\n  }\n  assert(false);\n  return;\n}\nvoid answer() {\n  cout << \"!\" << '\\n';\n  for (pair<ll, ll> x : ans) {\n    assert(x.first != -1 && x.second != -1);\n    cout << x.first << ' ' << x.second << '\\n';\n  }\n  cout << flush;\n}\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> l;\n  D = l / n;\n  ans.assign(n, {-1, -1});\n  vector<int> ids;\n  for (int i = 0; i < n; i++) ids.push_back(i);\n  solve(0, MAXX, ids);\n  answer();\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long NMAX = 1000;\npair<long long, long long> func[NMAX + 5];\npair<long long, long long> tmp_func[NMAX + 5];\nlong long initial[NMAX + 5];\npair<long long, long long> ans[NMAX + 5];\nmap<pair<long long, long long>, long long> memo;\nint cnt_queries = 0;\nlong long singular_query(long long id, long long wh) {\n  if (memo.count({id, wh}) == 0) {\n    cout << \"? \" << id << \" \" << wh << endl;\n    cin >> memo[{id, wh}];\n    cnt_queries++;\n  }\n  return memo[{id, wh}];\n}\nvoid query_fun(long long fst, long long lst, long long wh) {\n  for (long long i = fst; i <= lst; i++) {\n    func[i].first = singular_query(func[i].second, wh);\n  }\n}\nvoid solve(long long fst, long long lst, long long l, long long r,\n           long long buck) {\n  if (fst == lst) {\n    ans[func[fst].second] = {l, r};\n    return;\n  }\n  long long target_split = (lst + fst) / 2;\n  long long st = l + 1LL * (target_split - fst + 1) * buck - 1,\n            dr = r - 1LL * (lst - target_split) * buck + 1;\n  while (dr - st > 1) {\n    long long mid = (st + dr) / 2;\n    for (long long i = fst; i <= lst; i++) {\n      map<pair<long long, long long>, long long>::iterator it =\n          memo.lower_bound({func[i].second, mid});\n      if (it != memo.end() && it->first.first == func[i].second &&\n          it->second - initial[func[i].second] <\n              buck * (target_split - fst + 1)) {\n        func[i].first = it->second;\n      } else if (it != memo.begin()) {\n        it--;\n        if (it->first.first == func[i].second &&\n            it->second - initial[func[i].second] >=\n                buck * (target_split - fst + 1)) {\n          func[i].first = it->second;\n        } else {\n          func[i].first = singular_query(func[i].second, mid);\n        }\n      } else {\n        func[i].first = singular_query(func[i].second, mid);\n      }\n    }\n    sort(func + fst, func + 1 + lst,\n         [&](pair<long long, long long> &a, pair<long long, long long> &b) {\n           return a.first - initial[a.second] > b.first - initial[b.second];\n         });\n    if (func[target_split].first - initial[func[target_split].second] >=\n        buck * (target_split - fst + 1)) {\n      dr = mid;\n      for (long long i = fst; i <= lst; i++) {\n        tmp_func[i] = func[i];\n      }\n    } else {\n      st = mid;\n    }\n  }\n  for (long long i = fst; i <= lst; i++) {\n    func[i] = tmp_func[i];\n  }\n  for (int i = target_split + 1; i <= lst; i++) {\n    initial[func[i].second] += buck * (target_split - fst + 1);\n  }\n  solve(fst, target_split, l, dr, buck);\n  solve(target_split + 1, lst, dr, r, buck);\n}\nint main() {\n  long long n;\n  long long l;\n  scanf(\"%lld %lld\", &n, &l);\n  for (long long i = 1; i <= n; i++) {\n    func[i] = {0, i};\n    memo[{i, 0}] = 0;\n    memo[{i, 1e18}] = l;\n  }\n  solve(1, n, 0, 1e18, l / n);\n  cout << \"!\" << endl;\n  for (long long i = 1; i <= n; i++) {\n    cout << ans[i].first << \" \" << ans[i].second << endl;\n  }\n  cerr << \"total queries \" << cnt_queries << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nostream &operator<<(ostream &out, string str) {\n  for (char c : str) out << c;\n  return out;\n}\ntemplate <class L, class R>\nostream &operator<<(ostream &out, pair<L, R> p) {\n  return out << \"(\" << p.first << \", \" << p.second << \")\";\n}\ntemplate <class T>\nauto operator<<(ostream &out, T &&x) -> decltype(x.begin(), out) {\n  out << '{';\n  for (auto &e : x) out << e << (&e == &*--x.end() ? \"\" : \", \");\n  return out << '}';\n}\ntemplate <class... Args>\nvoid dump(Args &&...args) {\n  ((cerr << args << \";  \"), ...);\n}\ntemplate <class T>\nint size(T &&a) {\n  return (int)a.size();\n}\nusing LL = long long;\nusing PII = pair<int, int>;\nmt19937 rng(2137);\nint rd(int a) { return rng() % a; }\nint n;\nLL L;\nLL ask(int i, LL x) {\n  cout << \"? \" << i + 1 << \" \" << x << endl;\n  LL ret;\n  cin >> ret;\n  return ret;\n}\nLL search(int i, LL val, LL l, LL r) {\n  while (l < r) {\n    LL m = (l + r) / 2, a = ask(i, m);\n    if (a == val)\n      return m;\n    else if (a < val)\n      l = m + 1;\n    else\n      r = m - 1;\n  }\n  return l;\n};\nLL divide(vector<int> cur, LL val, LL l, LL r, vector<int> &low,\n          vector<int> &high) {\n  int goal_low = size(cur) / 2;\n  int goal_high = size(cur) - goal_low;\n  while (true) {\n    int f = cur[rd(size(cur))];\n    LL x = search(f, val, l, r);\n    vector<int> left, mid, right;\n    for (int i : cur) {\n      LL a = ask(i, x);\n      if (val < a)\n        left.emplace_back(i);\n      else if (val == a)\n        mid.emplace_back(i);\n      else\n        right.emplace_back(i);\n    }\n    if (size(low) + size(left) <= goal_low) {\n      for (int i : left) low.emplace_back(i);\n      left.clear();\n      while (size(mid) && size(low) < goal_low) {\n        low.emplace_back(mid.back());\n        mid.pop_back();\n      }\n    }\n    if (size(right) + size(high) <= goal_high) {\n      for (int i : right) high.emplace_back(i);\n      right.clear();\n      while (size(mid) && size(high) < goal_high) {\n        high.emplace_back(mid.back());\n        mid.pop_back();\n      }\n    }\n    if (size(left))\n      cur = left;\n    else if (size(right))\n      cur = right;\n    else\n      return x;\n  }\n}\nvector<pair<LL, LL>> ans;\nvoid solve(vector<int> cur, int done, LL l, LL r) {\n  if (size(cur) == 1) {\n    ans[cur.front()] = {l, r};\n    return;\n  }\n  LL q = (L / n) * (done + size(cur) / 2);\n  vector<int> low, high;\n  LL p = divide(cur, q, l, r, low, high);\n  solve(low, done, l, p);\n  solve(high, done + size(low), p, r);\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  cin >> n >> L;\n  ans.resize(n);\n  vector<int> cur(n);\n  for (int i = 0; i < n; i++) cur[i] = i;\n  solve(cur, 0, 0, 1e18);\n  cout << \"!\\n\";\n  for (auto &[l, r] : ans) cout << l << \" \" << r << \"\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst bool TEST = false;\nusing ll = long long;\nconst ll MAXX = ll(1e18);\nint n;\nll l;\nll D;\nint nq = 0;\nmap<pair<int, ll>, ll> cache;\nll f(int i, ll x) {\n  if (cache.count({i, x})) return cache[{i, x}];\n  nq += 1;\n  assert(nq <= 199999);\n  if (TEST) return min(x / (i + 1), 5ll);\n  assert(0 <= i && i < n);\n  assert(0 <= x && x <= MAXX);\n  cout << \"?\"\n       << \" \" << i + 1 << \" \" << x << '\\n';\n  cout << flush;\n  ll val;\n  cin >> val;\n  cache[{i, x}] = val;\n  return val;\n}\nvector<pair<ll, ll> > ans;\nmt19937 mt(48);\nvoid solve(ll s, ll e, vector<int> ids) {\n  int n = ids.size();\n  if (n == 1) {\n    ans[ids.front()] = {s, e};\n    return;\n  }\n  int z = n / 2;\n  vector<int> lids;\n  vector<int> rids;\n  while (!ids.empty()) {\n    shuffle(ids.begin(), ids.end(), mt);\n    int x = ids.front();\n    ll l = s - 1;\n    ll r = e + 1;\n    ll loc = -1;\n    assert(f(x, e) - f(x, s) >= n * D);\n    while (l + 1 < r) {\n      ll m = (l + r) / 2;\n      bool lok = f(x, m) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, m) >= (n - z) * D;\n      if (lok && rok) {\n        loc = m;\n        break;\n      } else if (rok) {\n        l = m;\n      } else if (lok) {\n        r = m;\n      } else\n        assert(false);\n    }\n    assert(loc != -1);\n    vector<int> lt, eq, rt;\n    for (int x : ids) {\n      assert(f(x, e) - f(x, s) >= n * D);\n      bool lok = f(x, loc) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, loc) >= (n - z) * D;\n      if (lok && rok) {\n        eq.push_back(x);\n      } else if (lok) {\n        lt.push_back(x);\n      } else if (rok) {\n        rt.push_back(x);\n      } else\n        assert(false);\n    }\n    ids.clear();\n    if (lids.size() + lt.size() <= z) {\n      for (int x : lt) lids.push_back(x);\n      lt.clear();\n      while (!eq.empty() && (int)lids.size() < z) {\n        lids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    if (rids.size() + rt.size() <= n - z) {\n      for (int x : rt) rids.push_back(x);\n      rt.clear();\n      while (!eq.empty() && (int)rids.size() < n - z) {\n        rids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    for (int x : lt) ids.push_back(x);\n    for (int x : eq) ids.push_back(x);\n    for (int x : rt) ids.push_back(x);\n    if (ids.empty()) {\n      solve(s, loc, lids);\n      solve(loc, e, rids);\n      return;\n    }\n  }\n  assert(false);\n  return;\n}\nvoid answer() {\n  cout << \"!\" << '\\n';\n  for (pair<ll, ll> x : ans) {\n    assert(x.first != -1 && x.second != -1);\n    cout << x.first << ' ' << x.second << '\\n';\n  }\n  cout << flush;\n}\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> l;\n  D = l / n;\n  ans.assign(n, {-1, -1});\n  vector<int> ids;\n  for (int i = 0; i < n; i++) ids.push_back(i);\n  solve(0, MAXX, ids);\n  answer();\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\nlong long a[N][N];\nbool type;\nint n, Qcnt;\nlong long V;\nlong long rnd() {\n  long long x = 0;\n  for (int i = (int)(1); i <= (int)(18); i++) x = x * 10 + rand() % 10;\n  return x;\n}\nvoid init() {\n  type = 1;\n  for (int i = (int)(1); i <= (int)(n); i++) {\n    int top = 0;\n    for (; top != V;) {\n      for (; top != V; a[i][++top] = rnd())\n        ;\n      sort(a[i] + 1, a[i] + V + 1);\n      top = unique(a[i] + 1, a[i] + V + 1) - a[i] - 1;\n    }\n  }\n}\nlong long query(int x, long long y) {\n  ++Qcnt;\n  if (type == 0) {\n    printf(\"? %d %lld\\n\", x, y);\n    fflush(stdout);\n    scanf(\"%lld\", &y);\n    return y;\n  } else {\n    int pos = upper_bound(a[x] + 1, a[x] + V * n + 1, y) - a[x] - 1;\n    return pos;\n  }\n}\nint id[N], idd[N];\nlong long val[N], ansR[N], ansL[N];\nbool cmp(int x, int y) { return val[x] < val[y]; }\nmap<pair<long long, long long>, long long> mp;\nlong long find(int x, long long L, long long R, long long val) {\n  if (mp.find(pair<long long, long long>(x, val)) != mp.end())\n    return mp[pair<long long, long long>(x, val)];\n  long long ans = 0;\n  for (; L <= R;) {\n    long long mid = (L + R) / 2;\n    long long v = query(x, mid);\n    if (v == val) ans = mid;\n    if (v >= val)\n      R = mid - 1;\n    else\n      L = mid + 1;\n  }\n  return mp[pair<long long, long long>(x, val)] = ans;\n}\nvoid divide(long long L, long long R, long long l, long long r) {\n  if (l > r) return;\n  if (L == R) {\n    for (int i = (int)(l); i <= (int)(r); i++) ansR[id[i]] = L;\n    return;\n  }\n  if (l == r) {\n    ansR[id[l]] = find(id[l], L, R, l * V);\n    assert(ansR[id[l]] != 0);\n    return;\n  }\n  int mid = (l + r) / 2;\n  int pl = l, pr = r;\n  long long LL = L, RR = R;\n  for (;;) {\n    int speP = id[pl + rand() % (pr - pl + 1)];\n    long long pos = find(speP, LL, RR, mid * V);\n    int plll = pl, prrr = pr;\n    for (int i = (int)(pl); i <= (int)(pr); i++) {\n      long long val = query(id[i], pos);\n      if (val > mid * V || (val == mid * V && id[i] <= speP))\n        idd[plll++] = id[i];\n      else\n        idd[prrr--] = id[i];\n    }\n    for (int i = (int)(pl); i <= (int)(pr); i++) id[i] = idd[i];\n    if (prrr <= mid)\n      pl = prrr + 1, LL = pos;\n    else\n      pr = plll - 1, RR = pos;\n    if (pr <= mid || pl > mid) break;\n  }\n  divide(L, RR, l, mid);\n  divide(LL, R, mid + 1, r);\n}\nvoid output() {\n  for (int i = (int)(1); i <= (int)(n); i++) ansL[id[i]] = ansR[id[i - 1]];\n  printf(\"!\\n\");\n  for (int i = (int)(1); i <= (int)(n); i++)\n    printf(\"%lld %lld\\n\", ansL[i], ansR[i]);\n  fflush(stdout);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &V);\n  srand(time(NULL));\n  V /= n;\n  for (int i = (int)(1); i <= (int)(n); i++) id[i] = i;\n  divide(0, 1000000000000000000ll, 1, n);\n  output();\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long NMAX = 1000;\npair<long long, long long> func[NMAX + 5];\npair<long long, long long> tmp_func[NMAX + 5];\nlong long initial[NMAX + 5];\npair<long long, long long> ans[NMAX + 5];\nmap<pair<long long, long long>, long long> memo;\nlong long singular_query(long long id, long long wh) {\n  if (memo.count({id, wh}) == 0) {\n    cout << \"? \" << id << \" \" << wh << endl;\n    cin >> memo[{id, wh}];\n  }\n  return memo[{id, wh}];\n}\nvoid query_fun(long long fst, long long lst, long long wh) {\n  for (long long i = fst; i <= lst; i++) {\n    func[i].first = singular_query(func[i].second, wh);\n  }\n}\nvoid solve(long long fst, long long lst, long long l, long long r,\n           long long buck) {\n  if (fst == lst) {\n    ans[func[fst].second] = {l, r};\n    return;\n  }\n  query_fun(fst, lst, l);\n  for (long long i = fst; i <= lst; i++) {\n    initial[func[i].second] = func[i].first;\n  }\n  long long target_split = (lst + fst) / 2;\n  long long st = l + 1LL * (target_split - fst + 1) * buck - 1,\n            dr = r - 1LL * (lst - target_split) * buck + 1;\n  while (dr - st > 1) {\n    long long mid = (st + dr) / 2;\n    for (long long i = fst; i <= lst; i++) {\n      map<pair<long long, long long>, long long>::iterator it =\n          memo.lower_bound({func[i].second, mid});\n      if (it != memo.end() && it->first.first == func[i].second &&\n          it->second - initial[func[i].second] <\n              buck * (target_split - fst + 1)) {\n        func[i].first = it->second;\n      } else if (it != memo.begin()) {\n        it--;\n        if (it->first.first == func[i].second &&\n            it->second - initial[func[i].second] >=\n                buck * (target_split - fst + 1)) {\n          func[i].first = it->second;\n        } else {\n          func[i].first = singular_query(func[i].second, mid);\n        }\n      } else {\n        func[i].first = singular_query(func[i].second, mid);\n      }\n    }\n    sort(func + fst, func + 1 + lst,\n         [&](pair<long long, long long> &a, pair<long long, long long> &b) {\n           return a.first - initial[a.second] > b.first - initial[b.second];\n         });\n    if (func[target_split].first - initial[func[target_split].second] >=\n        buck * (target_split - fst + 1)) {\n      dr = mid;\n      for (long long i = fst; i <= lst; i++) {\n        tmp_func[i] = func[i];\n      }\n    } else {\n      st = mid;\n    }\n  }\n  for (long long i = fst; i <= lst; i++) {\n    func[i] = tmp_func[i];\n  }\n  solve(fst, target_split, l, dr, buck);\n  solve(target_split + 1, lst, dr, r, buck);\n}\nint main() {\n  long long n;\n  long long l;\n  scanf(\"%lld %lld\", &n, &l);\n  for (long long i = 1; i <= n; i++) {\n    func[i] = {0, i};\n    memo[{i, 0}] = 0;\n    memo[{i, 1e18}] = l;\n  }\n  solve(1, n, 0, 1e18, l / n);\n  cout << \"!\" << endl;\n  for (long long i = 1; i <= n; i++) {\n    cout << ans[i].first << \" \" << ans[i].second << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ninline char gc() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2)\n             ? EOF\n             : *p1++;\n}\ninline long long read() {\n  long long x = 0;\n  char ch = getchar();\n  bool positive = 1;\n  for (; !isdigit(ch); ch = getchar())\n    if (ch == '-') positive = 0;\n  for (; isdigit(ch); ch = getchar()) x = x * 10 + ch - '0';\n  return positive ? x : -x;\n}\ninline void write(long long a) {\n  if (a < 0) {\n    a = -a;\n    putchar('-');\n  }\n  if (a >= 10) write(a / 10);\n  putchar('0' + a % 10);\n}\ninline void writeln(long long a) {\n  write(a);\n  puts(\"\");\n}\ninline void wri(long long a) {\n  write(a);\n  putchar(' ');\n}\ninline unsigned long long rnd() {\n  return ((unsigned long long)rand() << 30 ^ rand()) << 4 | rand() % 4;\n}\nconst long long inf = 1e18;\nconst long long N = 1005;\npair<long long, long long> ans[N];\nlong long L;\nlong long n;\nvoid hb(vector<long long> &a, vector<long long> &b) {\n  for (auto i : b) a.push_back(i);\n}\nlong long ask(long long id, long long pos) {\n  putchar('?');\n  putchar(' ');\n  wri(id);\n  writeln(pos);\n  fflush(stdout);\n  return read();\n}\nlong long get(long long id, long long x, long long l, long long r) {\n  while (l < r) {\n    long long mid = (l + r) >> 1;\n    if (ask(id, mid) >= x)\n      r = mid;\n    else\n      l = mid + 1;\n  }\n  return l;\n}\nvoid solve(long long fl, long long fr, vector<long long> v, long long lll,\n           long long rrr) {\n  if (v.size() == 1) {\n    ans[v[0]] = make_pair(fl, fr);\n    return;\n  }\n  assert(v.size() == rrr - lll + 1);\n  long long dq;\n  long long dd;\n  long long k = (v.size() + 1) >> 1;\n  long long mid = (lll + rrr) / 2 * (L / n);\n  vector<long long> LL, RR;\n  long long gl = fl, gr = fr;\n  while (1) {\n    vector<long long> jb, jj, md;\n    random_shuffle(v.begin(), v.end());\n    dq = v[v.size() - 1];\n    v.pop_back();\n    dd = get(dq, mid, fl, fr);\n    md.push_back(dq);\n    assert(k && k <= v.size() + 1);\n    for (auto i : v) {\n      long long t = ask(i, dd);\n      if (t == mid)\n        md.push_back(i);\n      else if (t > mid)\n        jb.push_back(i);\n      else\n        jj.push_back(i);\n    }\n    if (k > jb.size() && k <= md.size() + jb.size()) {\n      hb(LL, jb);\n      for (long long i = (long long)(1); i <= (long long)(k - jb.size()); i++) {\n        LL.push_back(md.back());\n        md.pop_back();\n      }\n      hb(RR, md);\n      hb(RR, jj);\n      break;\n    } else if (k <= jb.size()) {\n      hb(RR, md);\n      hb(RR, jj);\n      swap(v, jb);\n      gr = dd;\n    } else {\n      hb(LL, md);\n      hb(LL, jb);\n      k -= md.size() + jb.size();\n      swap(v, jj);\n      gl = dd + 1;\n    }\n  }\n  solve(fl, dd, LL, lll, (lll + rrr) / 2);\n  solve(dd, fr, RR, (lll + rrr) / 2 + 1, rrr);\n}\nsigned main() {\n  n = read();\n  L = read();\n  vector<long long> v;\n  for (long long i = (long long)(1); i <= (long long)(n); i++) v.push_back(i);\n  solve(0, inf, v, 1, n);\n  puts(\"!\");\n  for (long long i = (long long)(1); i <= (long long)(n); i++) {\n    wri(ans[i].first);\n    writeln(ans[i].second);\n  }\n  fflush(stdout);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\ninline long long query(int id, long long x) {\n  if (!x) return 0;\n  printf(\"? %d %lld\\n\", id, x);\n  fflush(stdout);\n  long long ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\ninline long long findx(int id, long long L, long long R, long long v) {\n  long long mid;\n  while (L < R) {\n    mid = (L + R) >> 1;\n    long long val = query(id, mid);\n    if (val < v)\n      L = mid + 1;\n    else if (v < val)\n      R = mid - 1;\n    else\n      return mid;\n  }\n  return L;\n}\nlong long inde, vis[N];\nlong long getmid(vector<int> f, long long L, long long R, long long v,\n                 int cnt) {\n  int id = f[rand() % f.size()];\n  long long x = findx(id, L, R, v), val;\n  vector<int> l, r, p;\n  p.push_back(id);\n  for (int i : f) {\n    if (i == id) continue;\n    val = query(i, x);\n    if (val > v)\n      l.push_back(i);\n    else if (val < v)\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < cnt && !p.empty()) l.push_back(p.back()), p.pop_back();\n  while (p.size()) r.push_back(p.back()), p.pop_back();\n  if (l.size() == cnt) return x;\n  if (l.size() > cnt)\n    return getmid(l, L, R, v, cnt);\n  else\n    return getmid(r, L, R, v, cnt - l.size());\n}\nstruct Interval {\n  long long l, r;\n} ans[N];\nvoid work(vector<int> f, long long L, long long R, long long xl, long long xr) {\n  if (!f.size()) return;\n  if (f.size() == 1) {\n    ans[f[0]].l = xl;\n    ans[f[0]].r = xr;\n    return;\n  }\n  long long m = f.size();\n  long long d = (R - L) / m;\n  long long x = getmid(f, xl, xr, L + d * (m / 2), m >> 1);\n  long long val;\n  vector<int> l, r, p;\n  for (int i : f) {\n    val = query(i, x);\n    if (val > L + d * (m / 2))\n      l.push_back(i);\n    else if (val < L + d * (m / 2))\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < (m >> 1) && p.size()) l.push_back(p.back()), p.pop_back();\n  while (!p.empty()) r.push_back(p.back()), p.pop_back();\n  work(l, L, L + d * (m / 2), xl, x);\n  work(r, L + d * (m / 2), R, x, xr);\n}\nvector<int> f;\nint n;\nlong long L;\nint main() {\n  scanf(\"%d %lld\", &n, &L);\n  for (int i = 1; i <= n; ++i) f.push_back(i);\n  work(f, 0, L, 0, 1e18);\n  puts(\"!\");\n  for (int i = 1; i <= n; ++i) printf(\"%lld %lld\\n\", ans[i].l, ans[i].r);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long S = (long long)1e18;\nlong long n, L, p[2005], ansl[2005], ansr[2005], s1[2005], s2[2005], s3[2005];\nlong long rd() {\n  long long x = 0, tp = 1;\n  char c = getchar();\n  while (c < '0' || c > '9') {\n    if (c == '-') tp = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = (x * 10 + c - '0');\n    c = getchar();\n  }\n  return x * tp;\n}\nlong long query(long long id, long long x) {\n  printf(\"? %lld %lld\\n\", id, x);\n  fflush(stdout);\n  long long res;\n  scanf(\"%lld\", &res);\n  return res;\n}\nlong long getpos(long long id, long long x) {\n  long long l = 0, r = S, mid, pos = 0;\n  while (l < r) {\n    mid = (l + r) >> 1;\n    if (query(id, mid) >= x)\n      r = mid;\n    else\n      l = mid + 1;\n  }\n  return l;\n}\nlong long get_kth(long long l, long long r, long long K) {\n  long long pos, val, i, W, nvl, t1, t2, t3, top;\n  pos = rand() % (r - l + 1) + l;\n  W = L / n * K;\n  val = getpos(p[pos], W);\n  t1 = t2 = t3 = 0;\n  for (i = l; i <= r; i++) {\n    nvl = query(p[i], val);\n    if (nvl > W)\n      s1[++t1] = p[i];\n    else if (nvl == W)\n      s2[++t2] = p[i];\n    else\n      s3[++t3] = p[i];\n  }\n  top = l;\n  for (i = 1; i <= t1; i++) p[top++] = s1[i];\n  for (i = 1; i <= t2; i++) p[top++] = s2[i];\n  for (i = 1; i <= t3; i++) p[top++] = s3[i];\n  if (t1 > K - l)\n    return get_kth(l, l + t1 - 1, K);\n  else if (t3 > r - K)\n    return get_kth(r - t3 + 1, r, K);\n  else\n    return val;\n}\nvoid solve(long long l, long long r, long long sl, long long sr) {\n  if (l == r) {\n    ansl[p[l]] = sl, ansr[p[r]] = sr;\n    return;\n  }\n  long long k = (l + r) >> 1, mid;\n  mid = get_kth(l, r, k);\n  solve(l, k, sl, mid), solve(k + 1, r, mid, sr);\n}\nint main() {\n  scanf(\"%lld %lld\", &n, &L);\n  for (int i = 1; i <= n; i++) p[i] = i;\n  solve(1, n, 0, S);\n  printf(\"!\\n\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", ansl[i], ansr[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\npair<long long, long long> h[1010];\nlong long L;\nint a[1010], a1[1010], a2[1010], n;\nbool vis[1010];\ninline long long rd() {\n  long long x = 0;\n  char ch = getchar();\n  for (; ch < '0' || ch > '9'; ch = getchar())\n    ;\n  for (; ch >= '0' && ch <= '9'; ch = getchar()) x = x * 10 + ch - '0';\n  return x;\n}\ninline long long ask(int x, long long y) {\n  printf(\"? %d %lld\\n\", x, y);\n  fflush(stdout);\n  return rd();\n}\ninline long long calc(int x, long long y, long long ql, long long qr) {\n  long long l = ql, r = qr;\n  while (l < r) {\n    long long mid = ((l + r) >> 1) + 1;\n    if (ask(x, mid) <= y)\n      l = mid;\n    else\n      r = mid - 1;\n  }\n  return l;\n}\nlong long hhh;\ninline vector<int> select(vector<int> v, long long hh, int k, long long ql,\n                          long long qr) {\n  long long mid = calc(v[rand() % v.size()], hh, ql, qr);\n  hhh = mid;\n  vector<int> v1, v2, v3;\n  for (int t : v) {\n    long long p = ask(t, mid);\n    if (p < hh)\n      v3.push_back(t);\n    else if (p > hh)\n      v1.push_back(t);\n    else {\n      long long q = ask(t, mid + 1);\n      if (q == hh)\n        v3.push_back(t);\n      else\n        v2.push_back(t);\n    }\n  }\n  if (v1.size() >= k)\n    return select(v1, hh, k, ql, mid);\n  else if (v1.size() + v2.size() < k) {\n    vector<int> res;\n    for (int t : v1) res.push_back(t);\n    for (int t : v2) res.push_back(t);\n    vector<int> res1 = select(v3, hh, k - v1.size() - v2.size(), mid, qr);\n    for (int t : res1) res.push_back(t);\n    return res;\n  } else {\n    vector<int> res;\n    for (int t : v1) res.push_back(t);\n    for (int i = 0; i < k - v1.size(); i++) res.push_back(v2[i]);\n    return res;\n  }\n}\ninline void solve(int l, int r, long long ql, long long qr) {\n  if (l == r) {\n    h[a[l]].first = ql;\n    h[a[l]].second = qr;\n    return;\n  }\n  vector<int> v;\n  for (int i = l; i <= r; i++) v.push_back(a[i]);\n  int mid = (l + r) >> 1;\n  long long hh = L / n * mid;\n  vector<int> g = select(v, hh, mid - l + 1, ql, qr);\n  for (int i = l; i <= r; i++) vis[a[i]] = false;\n  for (int t : g) vis[t] = true;\n  int t1 = 0, t2 = 0;\n  for (int i = l; i <= r; i++)\n    if (vis[a[i]])\n      a1[++t1] = a[i];\n    else\n      a2[++t2] = a[i];\n  for (int i = 1; i <= t1; i++) a[l + i - 1] = a1[i];\n  for (int i = 1; i <= t2; i++) a[l + t1 + i - 1] = a2[i];\n  long long now = hhh;\n  solve(l, mid, ql, now);\n  solve(mid + 1, r, now, qr);\n}\nint main() {\n  srand(19260816);\n  n = rd();\n  L = rd();\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 0, 1000000000000000000LL);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", h[i].first, h[i].second);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long L, al[1005], ar[1005];\nlong long getv(int u, long long v) {\n  printf(\"? %d %lld\\n\", u, v);\n  fflush(stdout);\n  long long r;\n  scanf(\"%lld\", &r);\n  return r;\n}\nlong long ser(int u, long long v, long long l, long long r) {\n  long long m;\n  for (; l < r;) {\n    m = l + r >> 1;\n    long long t = getv(u, m);\n    if (t < v)\n      l = m + 1;\n    else if (t > v)\n      r = m - 1;\n    else\n      return m;\n  }\n  return l;\n}\nint vis[1005], tim;\nlong long llc;\nvoid qry(vector<int>& g, vector<int>& p, long long ql, long long qr,\n         long long aim, int ls) {\n  int t = g[rand() % g.size()];\n  long long x = ser(t, aim, ql, qr);\n  vector<int> l, r, z;\n  for (int i = (0), LIM = (p.size() - 1); i <= LIM; i++)\n    if (p[i] != t) {\n      long long y = getv(p[i], x);\n      if (y == aim) z.push_back(p[i]);\n      if (y < aim) l.push_back(p[i]);\n      if (y > aim) r.push_back(p[i]);\n    }\n  for (; l.size() < ls && !z.empty();) l.push_back(z.back()), z.pop_back();\n  for (; !z.empty();) r.push_back(z.back()), z.pop_back();\n  if (l.size() <= ls && r.size() < p.size() - ls) {\n    g.clear();\n    g.push_back(t);\n    llc = x;\n    return;\n  }\n  if (l.size() > ls) {\n    ++tim;\n    for (int i = (0), LIM = (l.size() - 1); i <= LIM; i++) vis[l[i]] = tim;\n    for (int i = 0; i < g.size(); i++)\n      if (vis[g[i]] != tim) swap(g[i], g.back()), g.pop_back(), i--;\n    qry(g, p, ql, qr, aim, ls);\n  } else {\n    ++tim;\n    for (int i = (0), LIM = (r.size() - 1); i <= LIM; i++) vis[r[i]] = tim;\n    for (int i = 0; i < g.size(); i++)\n      if (vis[g[i]] != tim) swap(g[i], g.back()), g.pop_back(), i--;\n    qry(g, p, ql, qr, aim, ls);\n  }\n}\nvoid Solve(vector<int>& p, long long ql, long long qr, long long pl,\n           long long pr) {\n  if (!p.size()) return;\n  if (p.size() == 1) {\n    al[p[0]] = ql, ar[p[0]] = qr;\n    return;\n  }\n  vector<int> g = p;\n  int m = p.size() / 2;\n  qry(g, p, ql, qr, pl + (pr - pl) / p.size() * m, m);\n  vector<int> l, r, z;\n  for (int i = (0), LIM = (p.size() - 1); i <= LIM; i++) {\n    long long y = getv(p[i], llc);\n    if (y == pl + (pr - pl) / p.size() * m) z.push_back(p[i]);\n    if (y > pl + (pr - pl) / p.size() * m) l.push_back(p[i]);\n    if (y < pl + (pr - pl) / p.size() * m) r.push_back(p[i]);\n  }\n  for (; l.size() < m;) l.push_back(z.back()), z.pop_back();\n  for (; !z.empty();) r.push_back(z.back()), z.pop_back();\n  long long tmp = llc;\n  Solve(l, ql, tmp, pl, pl + (pr - pl) / p.size() * m);\n  Solve(r, tmp, qr, pl + (pr - pl) / p.size() * m, pr);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  vector<int> p;\n  for (int i = (1), LIM = (n); i <= LIM; i++) p.push_back(i);\n  Solve(p, 0, 1e18, 0, L);\n  puts(\"!\");\n  for (int i = (1), LIM = (n); i <= LIM; i++)\n    printf(\"%lld %lld\\n\", al[i], ar[i]);\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }\nconst int MAXN = 1000;\nconst long long XMIN = 0LL;\nconst long long XMAX = 1000000000000000000LL;\nmt19937 rnd((int)std::chrono::steady_clock::now().time_since_epoch().count());\nint n;\nlong long ymax;\nlong long lans[MAXN], rans[MAXN];\nlong long eval(int idx, long long x) {\n  printf(\"? %d %lld\\n\", idx + 1, x);\n  fflush(stdout);\n  long long y;\n  scanf(\"%lld\", &y);\n  return y;\n}\nlong long findx(int idx, long long y, long long lx, long long hx) {\n  --lx;\n  while (lx + 1 < hx) {\n    long long mx = lx + (hx - lx) / 2;\n    long long cy = eval(idx, mx);\n    if (cy < y)\n      lx = mx;\n    else\n      hx = mx;\n  }\n  return hx;\n}\nvoid rec(const vector<int> &rem, long long lx, long long hx, long long ly,\n         long long hy) {\n  if (((int)(rem).size()) == 1) {\n    lans[rem[0]] = lx, rans[rem[0]] = hx;\n    return;\n  }\n  vector<int> cand = rem;\n  int n1 = ((int)(rem).size()) / 2, n2 = ((int)(rem).size()) - n1;\n  assert((hy - ly) % (n1 + n2) == 0);\n  long long mx = -1, my = ly + (hy - ly) / (n1 + n2) * n1;\n  vector<int> lft, rgt;\n  while (true) {\n    int cur = cand[rnd() % ((int)(cand).size())];\n    long long cx = findx(cur, my, lx, hx);\n    vector<int> candbefore, candeq, candafter;\n    candeq.push_back(cur);\n    for (int i = (0); i < (((int)(cand).size())); ++i) {\n      int idx = cand[i];\n      if (idx == cur) continue;\n      long long cy = eval(idx, cx);\n      if (cy < my)\n        candafter.push_back(idx);\n      else if (cy > my)\n        candbefore.push_back(idx);\n      else\n        candeq.push_back(idx);\n    }\n    if (((int)(lft).size()) + ((int)(candbefore).size()) > n1) {\n      for (int i = (0); i < (((int)(candafter).size())); ++i)\n        rgt.push_back(candafter[i]);\n      for (int i = (0); i < (((int)(candeq).size())); ++i)\n        rgt.push_back(candeq[i]);\n      cand = candbefore;\n      continue;\n    }\n    if (((int)(rgt).size()) + ((int)(candafter).size()) > n2) {\n      for (int i = (0); i < (((int)(candbefore).size())); ++i)\n        lft.push_back(candbefore[i]);\n      for (int i = (0); i < (((int)(candeq).size())); ++i)\n        lft.push_back(candeq[i]);\n      cand = candafter;\n      continue;\n    }\n    mx = cx;\n    for (int i = (0); i < (((int)(candbefore).size())); ++i)\n      lft.push_back(candbefore[i]);\n    for (int i = (0); i < (((int)(candafter).size())); ++i)\n      rgt.push_back(candafter[i]);\n    for (int i = (0); i < (((int)(candeq).size())); ++i)\n      if (((int)(lft).size()) < n1)\n        lft.push_back(candeq[i]);\n      else\n        rgt.push_back(candeq[i]);\n    assert(((int)(lft).size()) == n1 && ((int)(rgt).size()) == n2);\n    break;\n  }\n  rec(lft, lx, mx, ly, my);\n  rec(rgt, mx, hx, my, hy);\n}\nvoid solve() {\n  vector<int> all(n);\n  for (int i = (0); i < (n); ++i) all[i] = i;\n  rec(all, XMIN, XMAX, 0, ymax);\n}\nvoid run() {\n  scanf(\"%d%lld\", &n, &ymax);\n  solve();\n  printf(\"!\\n\");\n  for (int i = (0); i < (n); ++i) printf(\"%lld %lld\\n\", lans[i], rans[i]);\n  fflush(stdout);\n}\nint main() {\n  run();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1005;\nint a[N], b[N], c[N];\nll n, len, val;\npair<ll, ll> ans[N];\ninline ll query(ll a, ll b) {\n  cout << \"? \" << a << ' ' << b << endl;\n  ll ret;\n  cin >> ret;\n  return ret;\n}\nll find(int x, ll kk, ll l, ll r) {\n  ll mid = (l + r) >> 1;\n  while (1) {\n    ll y = query(x, mid);\n    if (y == kk) return mid;\n    if (y < kk)\n      l = mid + 1;\n    else\n      r = mid - 1;\n    mid = (l + r) >> 1;\n  }\n}\nvoid kth(int l, int r, int kk, ll ql, ll qr) {\n  if (l == r) return;\n  int x = rand() % (r - l + 1) + l;\n  ll y = find(a[x], (len / n) * kk, ql, qr);\n  int l1 = l - 1, l2 = r + 1, l3 = 0;\n  c[++l3] = a[x];\n  for (int i = l; i <= r; i++) {\n    if (i == x) continue;\n    ll tt = query(a[i], y);\n    if (tt < (len / n) * kk) b[--l2] = a[i];\n    if (tt == (len / n) * kk) c[++l3] = a[i];\n    if (tt > (len / n) * kk) b[++l1] = a[i];\n  }\n  while (l1 < kk && l3) b[++l1] = c[l3--];\n  if (l1 == kk) {\n    val = y;\n    while (l3) b[--l2] = c[l3--];\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return;\n  }\n  if (l1 < kk) {\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return kth(l1 + 1, r, kk, ql, qr);\n  }\n  while (l3) b[--l2] = c[l3--];\n  for (int i = l; i <= r; i++) a[i] = b[i];\n  return kth(l, l1, kk, ql, qr);\n}\nvoid solve(int l, int r, ll ql, ll qr) {\n  if (l == r) {\n    ans[a[l]] = {ql, qr};\n    return;\n  }\n  int mid = (l + r) >> 1;\n  kth(l, r, mid, ql, qr);\n  ll x = val;\n  solve(l, mid, ql, x);\n  solve(mid + 1, r, x, qr);\n}\nint main() {\n  ios::sync_with_stdio(false);\n  srand(time(0));\n  cin >> n >> len;\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 0, 1000000000000000000);\n  cout << \"!\\n\";\n  for (int i = 1; i <= n; i++)\n    cout << ans[i].first << ' ' << ans[i].second << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nmt19937 rnd;\nlong long T;\nlong long ask(int x, long long y) {\n  printf(\"? %d %lld\\n\", x, y);\n  fflush(stdout);\n  scanf(\"%lld\", &y);\n  return y;\n}\nlong long query(int x, int d, long long l, long long r) {\n  while (l < r) {\n    long long m = ((l + r) >> 1);\n    if (ask(x, m) >= d * T)\n      r = m;\n    else\n      l = m + 1;\n  }\n  return l;\n}\nint a[1005];\nlong long pos[1005], val;\nvoid getkth(int l, int r, int k, int mid, long long nl, long long nr) {\n  static int q1[1005], q2[1005], q3[1005];\n  int x = l + rnd() % (r - l + 1);\n  long long v = query(a[x], mid, nl, nr);\n  int s1 = 0, s2 = 0, s3 = 0;\n  q2[++s2] = a[x];\n  for (int i = l; i <= r; i++)\n    if (i != x) {\n      long long t = ask(a[i], v);\n      if (t > mid * T)\n        q1[++s1] = a[i];\n      else if (t < mid * T)\n        q3[++s3] = a[i];\n      else\n        q2[++s2] = a[i];\n    }\n  for (int i = 1; i <= s1; i++) a[l + i - 1] = q1[i];\n  for (int i = 1; i <= s2; i++) a[l + s1 + i - 1] = q2[i];\n  for (int i = 1; i <= s3; i++) a[l + s1 + s2 + i - 1] = q3[i];\n  if (s1 >= k)\n    getkth(l, l + s1 - 1, k, mid, nl, v);\n  else if (s1 + s2 < k)\n    getkth(l + s1 + s2, r, k - s1 - s2, mid, v, nr);\n  else\n    val = v;\n}\nvoid solve(int l, int r, long long nl, long long nr) {\n  if (l == r) {\n    pos[l] = query(a[l], l, nl, nr);\n    return;\n  }\n  int m = ((l + r) >> 1);\n  getkth(l, r, m - l + 1, m, nl, nr);\n  long long t = val;\n  solve(l, m, nl, t);\n  solve(m + 1, r, t, nr);\n}\npair<long long, long long> ans[1005];\nint main() {\n  int n;\n  scanf(\"%d%lld\", &n, &T);\n  T /= n;\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 1, 1e18);\n  for (int i = 1; i <= n; i++)\n    ans[a[i]] = pair<long long, long long>(pos[i - 1], pos[i]);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++)\n    printf(\"%lld %lld\\n\", ans[i].first, ans[i].second);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing ul = std::uint32_t;\nusing li = std::int32_t;\nusing ll = std::int64_t;\nusing ull = std::uint64_t;\nusing vul = std::vector<ul>;\nusing vvul = std::vector<vul>;\nusing pulul = std::pair<ul, ul>;\nul n;\null L;\nstd::mt19937 rands;\nclass func {\n public:\n  ul id = 0;\n  ull x = 0;\n  ull x_ = 0;\n};\nfunc data[1001];\nvoid deal(ul nl, ul nr, ul tar, ull lx, ull rx) {\n  if (nr + 1 == nl) {\n    return;\n  }\n  ul key = nl + rands() % (nr - nl + 1);\n  ull l = lx, r = rx;\n  while (l + 1 != r) {\n    ull mid = l + r >> 1;\n    std::printf(\"? %u %llu\\n\", data[key].id, mid);\n    std::fflush(stdout);\n    ull val;\n    std::scanf(\"%llu\", &val);\n    if (val <= tar * (L / n)) {\n      l = mid;\n    } else {\n      r = mid;\n    }\n  }\n  data[key].x = l;\n  ull xf = tar * (L / n);\n  std::swap(data[key], data[nl]);\n  ul i = nl + 1, j = nr;\n  for (; i <= j;) {\n    std::printf(\"? %u %llu\\n\", data[i].id, data[nl].x);\n    std::fflush(stdout);\n    ull val;\n    std::scanf(\"%llu\", &val);\n    if (val < xf) {\n      std::swap(data[i], data[j]);\n      --j;\n    } else if (val > xf) {\n      ++i;\n    } else {\n      if (data[nl].x == 1e18) {\n        if (data[i].id > data[nl].id) {\n          std::swap(data[i], data[j]);\n          --j;\n        } else {\n          ++i;\n        }\n      } else {\n        std::printf(\"? %u %llu\\n\", data[i].id, data[nl].x + 1);\n        std::fflush(stdout);\n        ull val;\n        std::scanf(\"%llu\", &val);\n        if (val == xf || data[i].id > data[nl].id) {\n          std::swap(data[i], data[j]);\n          --j;\n        } else {\n          ++i;\n        }\n      }\n    }\n  }\n  std::swap(data[nl], data[j]);\n  if (j < tar) {\n    deal(j + 1, nr, tar, data[j].x, rx);\n  } else if (j > tar) {\n    deal(nl, j - 1, tar, lx, data[j].x + 1);\n  }\n}\nvoid deal(ul nl, ul nr, ull lx, ull rx) {\n  if (nr + 1 == nl) {\n    return;\n  }\n  ul nmid = nr + nl >> 1;\n  deal(nl, nr, nmid, lx, rx);\n  if (nmid != nl) {\n    deal(nl, nmid, lx, data[nmid].x + 1);\n  }\n  deal(nmid + 1, nr, data[nmid].x + 1, rx);\n}\nint main() {\n  std::scanf(\"%u%llu\", &n, &L);\n  rands.seed(std::time(0));\n  for (ul i = 1; i <= n; ++i) {\n    data[i].id = i;\n  }\n  deal(1, n, 0, ull(1e18) + 1);\n  std::printf(\"!\\n\");\n  std::fflush(stdout);\n  for (ul i = 1; i <= n; ++i) {\n    data[i].x_ = data[i - 1].x;\n  }\n  std::sort(data + 1, data + n + 1,\n            [](const func& a, const func& b) { return a.id < b.id; });\n  for (ul i = 1; i <= n; ++i) {\n    std::printf(\"%llu %llu\\n\", data[i].x_, data[i].x);\n    std::fflush(stdout);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e3 + 10;\nconst long long X = 1e18;\nint n;\nlong long L, l[N], r[N], F[N][N], lst;\nlong long f(int i, long long x) {\n  cout << '?' << ' ' << i << ' ' << x << endl;\n  long long y;\n  cin >> y;\n  return y;\n}\nlong long bin(int i, long long l, long long r, long long v) {\n  while (l < r) {\n    long long mid = (l + r) >> 1;\n    if (f(i, mid) < v)\n      l = mid + 1;\n    else\n      r = mid;\n  }\n  return l;\n}\nvector<int> kth(vector<int> q, long long lx, long long rx, long long y, int k) {\n  int i = q[rand() % int(q.size())];\n  long long x = bin(i, lx, rx, y);\n  assert(f(i, lx) <= y && y <= f(i, rx));\n  assert(f(i, x) == y);\n  vector<int> ls, rs, now;\n  for (auto i : q) {\n    long long v = f(i, x);\n    if (v == y)\n      now.push_back(i);\n    else if (v > y)\n      ls.push_back(i);\n    else\n      rs.push_back(i);\n  }\n  vector<int> ret;\n  if (int(ls.size()) >= k) {\n    assert(int(ls.size()) < int(q.size()));\n    ret = kth(ls, lx, rx, y, k);\n    ret.insert(ret.end(), now.begin(), now.end());\n    ret.insert(ret.end(), rs.begin(), rs.end());\n  } else if (int(ls.size()) + int(now.size()) >= k) {\n    lst = x;\n    ret = ls;\n    ret.insert(ret.end(), now.begin(), now.end());\n    ret.insert(ret.end(), rs.begin(), rs.end());\n  } else {\n    assert(int(rs.size()) < int(q.size()));\n    ret = ls;\n    ret.insert(ret.end(), now.begin(), now.end());\n    rs = kth(rs, lx, rx, y, k - int(ls.size()) - int(now.size()));\n    ret.insert(ret.end(), rs.begin(), rs.end());\n  }\n  return ret;\n}\nvoid solve(vector<int> q, long long lx, long long rx, int o) {\n  if (int(q.size()) == 1) {\n    l[q[0]] = lx;\n    r[q[0]] = rx;\n    return;\n  }\n  int mid = int(q.size()) / 2;\n  lst = -1;\n  q = kth(q, lx, rx, L / n * (o + mid), mid);\n  assert(lst >= 0);\n  long long x = lst;\n  solve(vector<int>(q.begin(), q.begin() + mid), lx, x, o);\n  solve(vector<int>(q.begin() + mid, q.end()), x, rx, o + mid);\n}\nint main() {\n  srand(114514);\n  cin >> n >> L;\n  vector<int> q(n);\n  for (int i = 0; i < n; i++) q[i] = i + 1;\n  solve(q, 0, X, 0);\n  for (int i = 1; i <= n; i++) assert(f(i, r[i]) - f(i, l[i]) >= L / n);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) cout << l[i] << ' ' << r[i] << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T>\ninline void read(T &x) {\n  x = 0;\n  char c = getchar();\n  int f = 1;\n  while (!isdigit(c)) {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (isdigit(c)) {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  x *= f;\n}\ntemplate <class T>\ninline void umin(T &x, T y) {\n  x = x < y ? x : y;\n}\ntemplate <class T>\ninline void umax(T &x, T y) {\n  x = x > y ? x : y;\n}\ninline unsigned int R() {\n  static unsigned int seed = 613;\n  return seed ^= seed >> 5, seed ^= seed << 17, seed ^= seed >> 13;\n}\nconst int N = 66666;\nconst long long inf = 1e18;\nint n;\nlong long l, ans1[N], ans2[N], piece;\nstruct node {\n  int idx;\n  long long l, r;\n};\nmap<long long, long long> Map[N];\nlong long query(int i, long long x) {\n  if (Map[i].count(x)) return Map[i][x];\n  printf(\"? %d %lld\\n\", i, x);\n  fflush(stdout);\n  long long y;\n  read(y);\n  return Map[i][x] = y;\n}\nlong long find(int i, long long val, long long l, long long r) {\n  while (l < r) {\n    long long mid = (l + r) >> 1, x = query(i, mid);\n    if (x < val)\n      l = mid + 1;\n    else\n      r = mid;\n  }\n  return l;\n}\nvoid solve(vector<node> a, long long l, long long r) {\n  assert(l <= r);\n  if (((int)a.size()) == 1) {\n    ans1[a.back().idx] = l;\n    ans2[a.back().idx] = r;\n    return;\n  }\n  vector<node> zuo, you;\n  int mid = ((int)a.size()) / 2, tot = ((int)a.size());\n  long long MID = l;\n  while (((int)a.size())) {\n    int u = R() % ((int)a.size());\n    long long p =\n        find(a[u].idx, (a[u].l + (a[u].r - a[u].l) / tot * mid), l, r);\n    MID = p;\n    vector<node> x, y, z;\n    int rec = ((int)zuo.size());\n    for (register int i = (0); i <= (((int)a.size()) - 1); i++)\n      if (i != u) {\n        if ((a[i].l + (a[i].r - a[i].l) / tot * mid) <= query(a[i].idx, p)) {\n          if (query(a[i].idx, p - 1) < (a[i].l + (a[i].r - a[i].l) / tot * mid))\n            y.push_back(a[i]);\n          else\n            x.push_back(a[i]);\n        } else\n          z.push_back(a[i]);\n      } else\n        y.push_back(a[i]);\n    int s1 = ((int)x.size()), s2 = ((int)y.size()), s3 = ((int)z.size());\n    if (rec + s1 <= mid) zuo.insert(zuo.end(), x.begin(), x.end()), x.clear();\n    if (rec >= mid) you.insert(you.end(), x.begin(), x.end()), x.clear();\n    for (register int i = (0); i <= (((int)y.size()) - 1); i++)\n      if (rec + s1 + i + 1 <= mid)\n        zuo.push_back(y[i]);\n      else\n        you.push_back(y[i]);\n    if (rec + s1 + s2 + s3 <= mid)\n      zuo.insert(zuo.end(), z.begin(), z.end()), z.clear();\n    if (rec + s1 + s2 >= mid)\n      you.insert(you.end(), z.begin(), z.end()), z.clear();\n    a = x;\n    a.insert(a.end(), z.begin(), z.end());\n  }\n  assert(((int)zuo.size()) == mid);\n  for (register int i = (0); i <= (((int)zuo.size()) - 1); i++)\n    zuo[i].r = query(zuo[i].idx, MID);\n  for (register int i = (0); i <= (((int)you.size()) - 1); i++)\n    you[i].l = query(you[i].idx, MID);\n  solve(zuo, l, MID);\n  solve(you, MID, r);\n}\nint main() {\n  read(n);\n  read(l);\n  piece = l / n;\n  vector<node> a;\n  for (register int i = (1); i <= (n); i++) a.push_back((node){i, 0, l});\n  solve(a, 0, inf);\n  puts(\"!\");\n  for (register int i = (1); i <= (n); i++)\n    printf(\"%lld %lld\\n\", ans1[i], ans2[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1010;\nmap<pair<int, long long>, long long> w;\nint n;\nlong long L, each;\npair<long long, long long> ans[N];\nlong long ask(int id, long long x) {\n  if (w[make_pair(id, x)] > 0) return w[make_pair(id, x)];\n  cout << \"? \" << id << \" \" << x << endl;\n  long long ret;\n  cin >> ret;\n  return w[make_pair(id, x)] = ret;\n}\nlong long get(int id, long long req) {\n  long long low = 0, high = 1e18, ans = high;\n  while (low <= high) {\n    long long mid = (low + high) >> 1;\n    if (ask(id, mid) >= req) {\n      ans = mid;\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return ans;\n}\nint kth(vector<int> vec, long long req, int k) {\n  if (vec.size() == 1) return vec.back();\n  int p = (1LL * rand() * rand() + rand()) % vec.size();\n  long long at = get(vec[p], req);\n  assert(vec.size());\n  vector<int> s, g, e(1, vec[p]);\n  for (int id : vec)\n    if (id != vec[p]) {\n      long long val = ask(id, at);\n      if (val < req) {\n        g.push_back(id);\n      } else if (val > req) {\n        s.push_back(id);\n      } else\n        e.push_back(id);\n    }\n  if (s.size() + e.size() >= k && s.size() < k) return vec[p];\n  if (k <= s.size()) return kth(s, req, k);\n  return kth(g, req, k - s.size() - e.size());\n}\nvoid solve(vector<int> vec, int l, int r, long long X, long long Y) {\n  if (vec.size() == 1) {\n    ans[vec.back()].first = X;\n    ans[vec.back()].second = Y;\n    return;\n  }\n  int mid = vec.size() >> 1;\n  long long val_mid = (l + mid - 1) * each;\n  int p = kth(vec, val_mid, mid);\n  long long at = get(p, val_mid);\n  vector<int> s, g, e;\n  for (int id : vec) {\n    long long val = ask(id, at);\n    if (val < val_mid) {\n      g.push_back(id);\n    } else if (val > val_mid)\n      s.push_back(id);\n    else {\n      e.push_back(id);\n    }\n  }\n  while (s.size() < mid) {\n    s.push_back(e.back());\n    e.pop_back();\n  }\n  while (e.size()) {\n    g.push_back(e.back());\n    e.pop_back();\n  }\n  solve(s, l, l + mid - 1, X, at);\n  solve(g, l + mid, r, at, Y);\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  srand(time(NULL));\n  cin >> n >> L;\n  each = L / n;\n  vector<int> id;\n  for (int i = 1; i <= n; ++i) id.push_back(i);\n  solve(id, 1, n, 0, (long long)1e18);\n  cout << \"!\" << endl;\n  for (int i = 1; i <= n; ++i)\n    cout << ans[i].first << \" \" << ans[i].second << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long Lim = 1e18;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nlong long tot = 0;\nunordered_map<long long, long long> mmp;\nlong long query(long long w, long long first) {\n  if (mmp.count((w << 31) + first)) return mmp[(w << 31) + first];\n  long long v;\n  if (++tot == 2e5) exit(0);\n  printf(\"? %lld %lld\\n\", w, first), fflush(stdout);\n  scanf(\"%lld\", &v);\n  return mmp[(w << 31) + first] = v;\n}\nlong long findx(long long w, long long first, long long L, long long R) {\n  for (; L <= R;) {\n    long long md = (L + R) / 2, v = query(w, md);\n    if (v == first) return md;\n    if (v < first)\n      L = md + 1;\n    else\n      R = md - 1;\n  }\n}\npair<long long, long long> Ans[2010];\nlong long det;\nvoid Solve(vector<int> V, long long rL, long long rR, long long vL,\n           long long vR) {\n  if (vL + 1 == vR) {\n    assert(V.size() == 1);\n    Ans[V[0]] = pair<long long, long long>(\n        query(V[0], rL) == vL * det ? rL : findx(V[0], vL * det, rL, rR),\n        query(V[0], rR) == vR * det ? rR : findx(V[0], vR * det, rL, rR));\n    return;\n  }\n  long long md = (vL + vR) / 2, lsz = md - vL, rsz = vR - md;\n  vector<int> LV(0), RV(0);\n  for (;;) {\n    int w = V[rng() % V.size()];\n    long long o = findx(w, md * det, rL, rR);\n    vector<int> tmpL(0), tmpR(0), tmpmd(0);\n    for (int i = 0; i < V.size(); i++) {\n      long long tmp = query(V[i], o);\n      if (tmp < md * det)\n        tmpR.push_back(V[i]);\n      else if (tmp == md * det)\n        tmpmd.push_back(V[i]);\n      else\n        tmpL.push_back(V[i]);\n    }\n    if ((int)tmpL.size() + (int)LV.size() > lsz) {\n      RV.insert(RV.end(), tmpR.begin(), tmpR.end());\n      RV.insert(RV.end(), tmpmd.begin(), tmpmd.end());\n      V = tmpL;\n    } else if ((int)tmpR.size() + (int)RV.size() > rsz) {\n      LV.insert(LV.end(), tmpL.begin(), tmpL.end());\n      LV.insert(LV.end(), tmpmd.begin(), tmpmd.end());\n      V = tmpR;\n    } else {\n      LV.insert(LV.end(), tmpL.begin(), tmpL.end());\n      RV.insert(RV.end(), tmpR.begin(), tmpR.end());\n      LV.insert(LV.end(), tmpmd.begin(), tmpmd.begin() + (lsz - LV.size()));\n      RV.insert(RV.end(), tmpmd.end() - (rsz - RV.size()), tmpmd.end());\n      Solve(LV, rL, o, vL, md);\n      Solve(RV, o, rR, md, vR);\n      return;\n    }\n  }\n}\nint main() {\n  long long n, L;\n  scanf(\"%lld%lld\", &n, &L), det = L / n;\n  vector<int> V(n);\n  for (int i = 0; i < n; i++) V[i] = i + 1;\n  Solve(V, 0, Lim, 0, n);\n  putchar('!');\n  putchar('\\n');\n  for (int i = 1; i <= n; i++)\n    printf(\"%lld %lld\\n\", Ans[i].first, Ans[i].second);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst bool TEST = false;\nusing ll = long long;\nconst ll MAXX = ll(1e18);\nint n;\nll l;\nll D;\nint nq = 0;\nmap<pair<int, ll>, ll> cache;\nll f(int i, ll x) {\n  if (cache.count({i, x})) return cache[{i, x}];\n  nq += 1;\n  assert(nq <= 99999);\n  if (TEST) return min(x / (i + 1), 5ll);\n  assert(0 <= i && i < n);\n  assert(0 <= x && x <= MAXX);\n  cout << \"?\"\n       << \" \" << i + 1 << \" \" << x << '\\n';\n  cout << flush;\n  ll val;\n  cin >> val;\n  cache[{i, x}] = val;\n  return val;\n}\nvector<pair<ll, ll> > ans;\nmt19937 mt(48);\nvoid solve(ll s, ll e, vector<int> ids) {\n  int n = ids.size();\n  if (n == 1) {\n    ans[ids.front()] = {s, e};\n    return;\n  }\n  int z = n / 2;\n  vector<int> lids;\n  vector<int> rids;\n  while (!ids.empty()) {\n    shuffle(ids.begin(), ids.end(), mt);\n    int x = ids.front();\n    ll l = s - 1;\n    ll r = e + 1;\n    ll loc = -1;\n    assert(f(x, e) - f(x, s) >= n * D);\n    while (l + 1 < r) {\n      ll m = (l + r) / 2;\n      bool lok = f(x, m) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, m) >= (n - z) * D;\n      if (lok && rok) {\n        loc = m;\n        break;\n      } else if (rok) {\n        l = m;\n      } else if (lok) {\n        r = m;\n      } else\n        assert(false);\n    }\n    assert(loc != -1);\n    vector<int> lt, eq, rt;\n    for (int x : ids) {\n      assert(f(x, e) - f(x, s) >= n * D);\n      bool lok = f(x, loc) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, loc) >= (n - z) * D;\n      if (lok && rok) {\n        eq.push_back(x);\n      } else if (lok) {\n        lt.push_back(x);\n      } else if (rok) {\n        rt.push_back(x);\n      } else\n        assert(false);\n    }\n    ids.clear();\n    if (lids.size() + lt.size() <= z) {\n      for (int x : lt) lids.push_back(x);\n      lt.clear();\n      while (!eq.empty() && (int)lids.size() < z) {\n        lids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    if (rids.size() + rt.size() <= n - z) {\n      for (int x : rt) rids.push_back(x);\n      rt.clear();\n      while (!eq.empty() && (int)rids.size() < n - z) {\n        rids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    for (int x : lt) ids.push_back(x);\n    for (int x : eq) ids.push_back(x);\n    for (int x : rt) ids.push_back(x);\n    if (ids.empty()) {\n      solve(s, loc, lids);\n      solve(loc, e, rids);\n      return;\n    }\n  }\n  assert(false);\n  return;\n}\nvoid answer() {\n  cout << \"!\" << '\\n';\n  for (pair<ll, ll> x : ans) {\n    assert(x.first != -1 && x.second != -1);\n    cout << x.first << ' ' << x.second << '\\n';\n  }\n  cout << flush;\n}\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> l;\n  D = l / n;\n  ans.assign(n, {-1, -1});\n  vector<int> ids;\n  for (int i = 0; i < n; i++) ids.push_back(i);\n  solve(0, MAXX, ids);\n  answer();\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long int L, al[1000], ar[1000];\nmap<long long int, long long int> M[1000], M2[1000];\nlong long int query(int i, long long int x) {\n  if (M[i].count(x)) return M[i][x];\n  long long int y;\n  cout << \"? \" << i + 1 << \" \" << x << endl;\n  cin >> y;\n  M[i][x] = y, M2[i][y] = x;\n  return y;\n}\nlong long int pos(int i, long long int y) {\n  auto it = M2[i].lower_bound(y);\n  if ((it != M2[i].end()) && (it->first == y)) return it->second;\n  long long int s = 0, e = 1e18;\n  if (it != M2[i].end()) e = it->second - 1;\n  if (it != M2[i].begin()) it--, s = it->second + 1;\n  while (s < e) {\n    long long int m = (s + e) / 2;\n    if (query(i, m) < y)\n      s = m + 1;\n    else\n      e = m;\n  }\n  return s;\n}\nint getMid(long long int m, int q, vector<int> v) {\n  int t = 0;\n  while (v.size() > 1) {\n    t++;\n    if (t > 20) break;\n    random_shuffle(v.begin(), v.end());\n    int i, p = 1;\n    while ((1 << p) <= v.size()) p++;\n    p /= 2, p = max(p, 2), p = min(p, (int)v.size());\n    vector<pair<long long int, int> > vv;\n    for (i = 0; i < p; i++) vv.push_back(make_pair(pos(v[i], m), v[i]));\n    sort(vv.begin(), vv.end());\n    vector<int> vvv[15];\n    for (i = 0; i < vv.size(); i++) vvv[i].push_back(vv[i].second);\n    for (i = p; i < v.size(); i++) {\n      int ll = 0, rr = p;\n      while (ll < rr) {\n        int mm = (ll + rr) / 2;\n        if (query(v[i], vv[mm].first) < m)\n          ll = mm + 1;\n        else\n          rr = mm;\n      }\n      vvv[ll].push_back(v[i]);\n    }\n    int s = 0;\n    for (i = 0; i < p + 1; i++) {\n      s += vvv[i].size();\n      if (s >= q) {\n        s -= vvv[i].size();\n        break;\n      }\n    }\n    v = vvv[i], q -= s;\n  }\n  return v[0];\n}\nint findAns(long long int s, long long int e, long long int l, long long int r,\n            vector<int> v) {\n  if (v.size() == 1) {\n    al[v[0]] = s, ar[v[0]] = e;\n    return 0;\n  }\n  int i;\n  vector<int> ll, mm, rr;\n  long long int m = (l / (L / n) + r / (L / n)) / 2 * (L / n);\n  int x = getMid(m, v.size() / 2, v);\n  long long int y = pos(x, m);\n  for (i = 0; i < v.size(); i++) {\n    if (query(v[i], y) == m)\n      mm.push_back(v[i]);\n    else if (query(v[i], y) < m)\n      rr.push_back(v[i]);\n    else\n      ll.push_back(v[i]);\n  }\n  while (!mm.empty()) {\n    if (ll.size() >= rr.size())\n      rr.push_back(mm.back());\n    else\n      ll.push_back(mm.back());\n    mm.pop_back();\n  }\n  findAns(s, y, l, m, ll), findAns(y, e, m, r, rr);\n  return 0;\n}\nint main() {\n  int i;\n  cin >> n >> L;\n  vector<int> v;\n  for (i = 0; i < n; i++) v.push_back(i);\n  findAns(0, 1e18, 0, L, v);\n  cout << \"!\" << endl;\n  for (i = 0; i < n; i++) cout << al[i] << \" \" << ar[i] << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\ninline long long query(int id, long long x) {\n  if (!x) return 0;\n  printf(\"? %d %lld\\n\", id, x);\n  fflush(stdout);\n  long long ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\ninline long long findx(int id, long long L, long long R, long long v) {\n  long long mid;\n  while (L < R) {\n    mid = (L + R) >> 1;\n    long long val = query(id, mid);\n    if (val < v)\n      L = mid + 1;\n    else if (v < val)\n      R = mid - 1;\n    else\n      return mid;\n  }\n  return L;\n}\nlong long inde, vis[N];\nlong long getmid(vector<int> f, long long L, long long R, long long v,\n                 int cnt) {\n  int id = f[rand() % f.size()];\n  long long x = findx(id, L, R, v), val;\n  vector<int> l, r, p;\n  p.push_back(id);\n  for (int i : f) {\n    if (i == id) continue;\n    val = query(i, x);\n    if (val > v)\n      l.push_back(i);\n    else if (val < v)\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < cnt && !p.empty()) l.push_back(p.back()), p.pop_back();\n  while (p.size()) r.push_back(p.back()), p.pop_back();\n  if (l.size() == cnt) return x;\n  if (l.size() > cnt)\n    return getmid(l, L, R, v, cnt);\n  else\n    return getmid(r, L, R, v, cnt - l.size());\n}\nstruct Interval {\n  long long l, r;\n} ans[N];\nvoid work(vector<int> f, long long L, long long R, long long xl, long long xr) {\n  if (!f.size()) return;\n  if (f.size() == 1) {\n    ans[f[0]].l = xl;\n    ans[f[0]].r = xr;\n    return;\n  }\n  long long m = f.size();\n  long long d = (R - L) / m;\n  long long x = getmid(f, xl, xr, L + d * (m / 2), m >> 1);\n  long long val;\n  vector<int> l, r, p;\n  for (int i : f) {\n    val = query(i, x);\n    if (val > L + d * (m / 2))\n      l.push_back(i);\n    else if (val < L + d * (m / 2))\n      r.push_back(i);\n    else\n      p.push_back(i);\n  }\n  while (l.size() < (m >> 1) && p.size()) l.push_back(p.back()), p.pop_back();\n  while (!p.empty()) r.push_back(p.back()), p.pop_back();\n  work(l, L, L + d * (m / 2), xl, x);\n  work(r, L + d * (m / 2), R, x, xr);\n}\nvector<int> f;\nint n;\nlong long L;\nint main() {\n  scanf(\"%d %lld\", &n, &L);\n  for (int i = 1; i <= n; ++i) f.push_back(i);\n  work(f, 0, L, 0, 1e18);\n  putchar('!');\n  putchar('\\n');\n  for (int i = 1; i <= n; ++i) printf(\"%lld %lld\\n\", ans[i].l, ans[i].r);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long L;\ninline long long qry(int id, long long x) {\n  cout << \"? \" << id << \" \" << x << endl;\n  long long ans;\n  cin >> ans;\n  return ans;\n}\nlong long get(int x, int d, long long l, long long r) {\n  while (l < r) {\n    long long mid = (l + r) >> 1;\n    if (qry(x, mid) >= d * L)\n      r = mid;\n    else\n      l = mid + 1;\n  }\n  return l;\n}\nconst int N = 2010;\nint a[N];\nlong long pos[N], val;\nvoid getKth(int l, int r, int k, int mid, long long nl, long long nr) {\n  static int q1[N], q2[N], q3[N];\n  int x = l + rand() % (r - l + 1);\n  long long v = get(a[x], mid, nl, nr);\n  int s1 = 0, s2 = 0, s3 = 0;\n  q2[++s2] = a[x];\n  for (int i = l; i <= r; i++)\n    if (i != x) {\n      long long t = qry(a[i], v);\n      if (t > mid * L)\n        q1[++s1] = a[i];\n      else if (t < mid * L)\n        q3[++s3] = a[i];\n      else\n        q2[++s2] = a[i];\n    }\n  for (int i = 1; i <= s1; i++) a[l + i - 1] = q1[i];\n  for (int i = 1; i <= s2; i++) a[l + s1 + i - 1] = q2[i];\n  for (int i = 1; i <= s3; i++) a[l + s1 + s2 + i - 1] = q3[i];\n  if (s1 >= k)\n    getKth(l, l + s1 - 1, k, mid, nl, v);\n  else if (s1 + s2 < k)\n    getKth(l + s1 + s2, r, k - s1 - s2, mid, v, nr);\n  else\n    val = v;\n}\ninline void solve(int l, int r, long long nl, long long nr) {\n  if (l == r) {\n    pos[l] = get(a[l], l, nl, nr);\n    return;\n  }\n  int mid = (l + r) >> 1;\n  getKth(l, r, mid - l + 1, mid, nl, nr);\n  long long t = val;\n  solve(l, mid, nl, t);\n  solve(mid + 1, r, t, nr);\n}\npair<long long, long long> ans[N];\nint main() {\n  srand(time(0));\n  cin >> n >> L;\n  L /= n;\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 1, 1e18);\n  for (int i = 1; i <= n; i++)\n    ans[a[i]] = pair<long long, long long>(pos[i - 1], pos[i]);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++)\n    printf(\"%lld %lld\\n\", ans[i].first, ans[i].second);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst int64_t BILLION = 1000000000LL;\nconst int64_t MAXIN = BILLION * BILLION;\nint64_t N, L;\nint64_t query(int i, int64_t x) {\n  if (x == 0) return 0;\n  if (x == MAXIN) return L;\n  printf(\"? %d %I64d\\n\", i + 1, x);\n  fflush(stdout);\n  int64_t res;\n  scanf(\"%I64d\", &res);\n  return res;\n}\nstd::pair<int64_t, int64_t> ans[1005];\nint64_t locate(int i, int64_t ll, int64_t rr, int64_t thres) {\n  int64_t low = ll, high = rr;\n  while (high - low > 1) {\n    int64_t mid = (low + high) / 2;\n    if (query(i, mid) >= thres) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n  }\n  return high;\n}\nvoid solve(std::vector<int> is, int64_t ll, int64_t rr, int64_t base) {\n  if (is.size() == 1) {\n    ans[is[0]] = {ll, rr};\n    return;\n  }\n  int64_t crit = L / N * (is.size() / 2) + base;\n  int64_t k = is.size() / 2;\n  std::vector<int> sub(is);\n  std::vector<int> left, right;\n  int64_t pivot_value;\n  while (k > 0) {\n    int pivot_index = sub[rand() % sub.size()];\n    pivot_value = locate(pivot_index, ll, rr, crit);\n    std::vector<int> small, big;\n    for (int i : sub) {\n      if (i >= pivot_index && (query(i, pivot_value - 1) < crit) ||\n          i < pivot_index && (query(i, pivot_value) < crit)) {\n        big.push_back(i);\n      } else {\n        small.push_back(i);\n      }\n    }\n    if (k >= small.size()) {\n      k -= small.size();\n      left.insert(left.end(), small.begin(), small.end());\n      sub.swap(big);\n    } else {\n      right.insert(right.end(), big.begin(), big.end());\n      sub.swap(small);\n    }\n  }\n  right.insert(right.end(), sub.begin(), sub.end());\n  assert(left.size() <= is.size() / 2);\n  assert(right.size() <= is.size() - is.size() / 2);\n  solve(left, ll, pivot_value, base);\n  solve(right, pivot_value, rr, crit);\n}\nint main() {\n  scanf(\"%I64d %I64d\", &N, &L);\n  std::vector<int> is;\n  for (int i = 0; i < N; i++) {\n    is.push_back(i);\n  }\n  solve(is, 0, MAXIN, 0);\n  printf(\"!\\n\");\n  for (int i = 0; i < N; i++) {\n    printf(\"%I64d %I64d\\n\", ans[i].first, ans[i].second);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long S = (long long)1e18;\nlong long n, L, p[2005], ansl[2005], ansr[2005], s1[2005], s2[2005], s3[2005];\nlong long rd() {\n  long long x = 0, tp = 1;\n  char c = getchar();\n  while (c < '0' || c > '9') {\n    if (c == '-') tp = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = (x * 10 + c - '0');\n    c = getchar();\n  }\n  return x * tp;\n}\nlong long query(long long id, long long x) {\n  printf(\"? %lld %lld\\n\", id, x);\n  fflush(stdout);\n  return rd();\n}\nlong long getpos(long long id, long long x) {\n  long long l = 0, r = S, mid, pos = 0;\n  while (l <= r) {\n    mid = (l + r) >> 1;\n    if (query(id, mid) >= x)\n      r = mid - 1;\n    else\n      l = mid + 1, pos = mid;\n  }\n  return pos + 1;\n}\nlong long get_kth(long long l, long long r, long long k) {\n  long long val, pos = rand() % (r - l + 1) + l, W = L / n * k, t1 = 0, t2 = 0,\n                 t3 = 0, Top = l - 1;\n  val = getpos(p[pos], W);\n  for (int i = l; i <= r; i++) {\n    long long tmp = query(p[i], val);\n    if (tmp > W)\n      s1[++t1] = p[i];\n    else if (tmp == W)\n      s2[++t2] = p[i];\n    else\n      s3[++t3] = p[i];\n  }\n  for (int i = 1; i <= t1; i++) p[++Top] = s1[i];\n  for (int i = 1; i <= t2; i++) p[++Top] = s2[i];\n  for (int i = 1; i <= t3; i++) p[++Top] = s3[i];\n  if (t1 > k - l)\n    return get_kth(l, l + t1 - 1, k);\n  else if (t3 > r - k)\n    return get_kth(r - t3 + 1, r, k);\n  return val;\n}\nvoid solve(long long l, long long r, long long sl, long long sr) {\n  if (l == r) {\n    ansl[p[l]] = sl, ansr[p[r]] = sr;\n    return;\n  }\n  long long k = (l + r) >> 1, mid;\n  mid = get_kth(l, r, k);\n  solve(l, k, sl, mid), solve(k + 1, r, mid, sr);\n}\nint main() {\n  n = rd(), L = rd();\n  for (int i = 1; i <= n; i++) p[i] = i;\n  solve(1, n, 0, S);\n  printf(\"!\\n\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", ansl[i], ansr[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nmt19937 rnd(20030102);\nlong long query(int id, long long x) {\n  printf(\"? %d %lld\\n\", id, x);\n  fflush(stdout);\n  long long ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\nint n;\nlong long lres[1010], rres[1010];\nlong long L;\nlong long get(int id, long long vl) {\n  long long L = 0, R = 1000000000000000000, pos = -1;\n  while (L <= R) {\n    long long mid = (L + R) >> 1;\n    if (query(id, mid) >= vl)\n      pos = mid, R = mid - 1;\n    else\n      L = mid + 1;\n  }\n  return pos;\n}\npair<int, long long> getkth(vector<int> dat, int K, long long mpos) {\n  int p = rnd() % dat.size();\n  long long pos = get(dat[p], mpos);\n  vector<int> ls, rs, ms;\n  for (int i = 0; i < dat.size(); i++) {\n    if (i == p) continue;\n    long long c = query(dat[i], pos);\n    if (c == mpos)\n      ms.push_back(dat[i]);\n    else if (c > mpos)\n      ls.push_back(dat[i]);\n    else\n      rs.push_back(dat[i]);\n  }\n  while (ls.size() < K - 1 && !ms.empty()) {\n    ls.push_back(ms.back());\n    ms.pop_back();\n  }\n  while (!ms.empty()) {\n    rs.push_back(ms.back());\n    ms.pop_back();\n  }\n  if (ls.size() == K - 1)\n    return make_pair(dat[p], pos);\n  else if (ls.size() < K - 1)\n    return getkth(rs, K - ls.size() - 1, mpos);\n  else\n    return getkth(ls, K, mpos);\n}\nvoid solve(vector<int> s, long long l, long long r, long long lv) {\n  if (s.size() == 1) {\n    lres[s.front()] = l;\n    rres[s.front()] = r;\n    return;\n  }\n  long long midv = lv + (L / n) * (s.size() / 2);\n  pair<int, long long> mm = getkth(s, s.size() / 2, midv);\n  vector<int> ls, rs, ms;\n  for (int i = 0; i < s.size(); i++) {\n    long long c = query(s[i], mm.second);\n    if (c > midv)\n      ls.push_back(s[i]);\n    else if (c == midv)\n      ms.push_back(s[i]);\n    else\n      rs.push_back(s[i]);\n  }\n  while (ls.size() < s.size() / 2) {\n    ls.push_back(ms.back());\n    ms.pop_back();\n  }\n  while (!ms.empty()) {\n    rs.push_back(ms.back());\n    ms.pop_back();\n  }\n  solve(ls, l, mm.second, lv);\n  solve(rs, mm.second, r, midv);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  vector<int> res(n);\n  iota(res.begin(), res.end(), 1);\n  solve(res, 0, 1000000000000000000, 0);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", lres[i], rres[i]);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst double pi = acos(-1.0);\nconst double eps = 1e-11;\ntemplate <class T>\ninline void ckmin(T &a, T b) {\n  if (b < a) a = b;\n}\ntemplate <class T>\ninline void ckmax(T &a, T b) {\n  if (b > a) a = b;\n}\ntemplate <class T>\ninline T sqr(T x) {\n  return x * x;\n}\nusing VI = vector<int>;\nconst int MAXN = 2048;\nconst long long SIZE = 1000000000LL * 1000000000LL;\nint n;\nlong long L;\npair<long long, long long> ret[MAXN];\nmap<long long, long long> cache[MAXN];\nlong long real_query(int idx, long long pos) {\n  printf(\"? %d %lld\\n\", idx + 1, pos);\n  fflush(stdout);\n  long long val;\n  scanf(\"%lld\", &val);\n  return val;\n}\nlong long query(int idx, long long pos) {\n  auto it = cache[idx].find(pos);\n  if (it != cache[idx].end()) return it->second;\n  return cache[idx][pos] = real_query(idx, pos);\n}\nbool is_greator_or_equal(int idx, long long pos, long long limit) {\n  auto &w = cache[idx];\n  if (!w.count(pos)) {\n    auto it = w.lower_bound(pos);\n    if (it != w.end()) {\n      if (it->second < limit) return false;\n      if (it->second - abs(pos - it->first) >= limit) return true;\n    }\n    if (it != w.begin()) {\n      --it;\n      if (it->second >= limit) return true;\n      if (it->second + abs(pos - it->first) < limit) return false;\n    }\n  }\n  return query(idx, pos) >= limit;\n}\nvoid solve(long long sx, long long tx, long long sL, long long tL, VI a) {\n  assert(tL - sL == ((int)a.size()));\n  if (tL - sL == 1) {\n    ret[a[0]] = make_pair(sx, tx);\n    return;\n  }\n  long long mL = (sL + tL) / 2;\n  long long low = sx - 1, high = tx;\n  for (; low + 1 < high;) {\n    long long mid = (low + high) / 2;\n    int cnt = 0;\n    int left_cnt = ((int)a.size());\n    for (int idx : a) {\n      if (is_greator_or_equal(idx, mid, L * mL)) ++cnt;\n      --left_cnt;\n      if (cnt >= ((int)a.size()) / 2) break;\n      if (cnt + left_cnt < ((int)a.size()) / 2) break;\n    }\n    if (cnt >= ((int)a.size()) / 2)\n      high = mid;\n    else\n      low = mid;\n  }\n  long long mx = high;\n  sort(a.begin(), a.end(),\n       [&](int idx1, int idx2) { return query(idx1, mx) > query(idx2, mx); });\n  VI b, c;\n  for (int i = 0; i < (((int)a.size())); ++i)\n    if (i < mL - sL)\n      b.push_back(a[i]);\n    else\n      c.push_back(a[i]);\n  solve(sx, mx, sL, mL, b);\n  solve(mx, tx, mL, tL, c);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  L /= n;\n  VI a;\n  for (int i = 0; i < (n); ++i) a.push_back(i);\n  solve(0, SIZE, 0, n, a);\n  random_shuffle(a.begin(), a.end());\n  printf(\"!\\n\");\n  for (int i = 0; i < (n); ++i)\n    printf(\"%lld %lld\\n\", ret[i].first, ret[i].second);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nmt19937 rng;\nll MAX = 1e18;\nconst int MN = 1e3 + 100;\nint get_rand(int x) {\n  return static_cast<int>(static_cast<ll>(rng()) * x /\n                          (static_cast<ll>(rng.max()) - rng.min() + 1));\n}\nint N;\nll L, E;\narray<ll, 2> ans[MN];\nll get(int f, ll x) {\n  printf(\"? %d %lld\\n\", f, x);\n  fflush(stdout);\n  ll r;\n  scanf(\"%lld\", &r);\n  return r;\n}\nll loc(int f, ll v, ll l = 0, ll r = MAX) {\n  r++;\n  ll m;\n  while (r - l > 1) {\n    m = l + (r - l >> 1);\n    if (get(f, m) > v)\n      r = m;\n    else\n      l = m;\n  }\n  return l;\n}\nvoid solve(vector<int>& v, int l, int r, ll lp, ll rp) {\n  if (v.size() == 1) return ans[v[0]] = {lp, rp}, void();\n  random_shuffle(v.begin(), v.end(), get_rand);\n  int m = l + (r - l >> 1);\n  ll mp;\n  function<ll(vector<int>&, int)> kth_element = [&](vector<int>& x, int k) {\n    vector<int> a, b, c;\n    b.push_back(x.back());\n    ll t = loc(x.back(), m * E, lp, rp);\n    for (x.pop_back(); !x.empty(); x.pop_back()) {\n      ll q = get(x.back(), t);\n      if (m * E < q)\n        a.push_back(x.back());\n      else if (q < m * E)\n        c.push_back(x.back());\n      else\n        b.push_back(x.back());\n    }\n    if (k < a.size())\n      t = kth_element(a, k);\n    else if (a.size() + b.size() <= k)\n      t = kth_element(c, k - a.size() - b.size());\n    for (int i : a) x.push_back(i);\n    for (int i : b) x.push_back(i);\n    for (int i : c) x.push_back(i);\n    return t;\n  };\n  mp = kth_element(v, m - l);\n  vector<int> L, R;\n  for (int i = 0; i < m - l; i++) L.push_back(v[i]);\n  for (int i = m - l; i < r - l; i++) R.push_back(v[i]);\n  solve(L, l, m, lp, mp);\n  solve(R, m, r, mp, rp);\n}\nint main(void) {\n  srand(clock());\n  scanf(\"%d%lld\", &N, &L);\n  E = L / N;\n  vector<int> a;\n  for (int i = 1; i <= N; i++) a.push_back(i);\n  solve(a, 0, N, 0, MAX);\n  printf(\"!\\n\");\n  for (int i = 1; i <= N; i++) printf(\"%lld %lld\\n\", ans[i][0], ans[i][1]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\ninline long long query(int id, long long x) {\n  if (!x) return 0;\n  printf(\"? %d %lld\\n\", id, x);\n  fflush(stdout);\n  long long ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\ninline long long findx(int id, long long L, long long R, long long v) {\n  long long mid;\n  while (L < R) {\n    mid = (L + R) >> 1;\n    long long val = query(id, mid);\n    if (val < v)\n      L = mid + 1;\n    else if (v < val)\n      R = mid - 1;\n    else\n      return mid;\n  }\n  return L;\n}\nlong long tim, vis[N];\nlong long getmid(vector<int> &f, vector<int> &g, long long L, long long R,\n                 long long v, int cnt) {\n  int id = f[rand() % f.size()];\n  long long x = findx(id, L, R, v), val;\n  vector<int> l, r, p;\n  for (int i = 0; i < g.size(); ++i) {\n    if (g[i] == id) continue;\n    val = query(g[i], x);\n    if (val < v)\n      l.push_back(g[i]);\n    else if (val > v)\n      r.push_back(g[i]);\n    else\n      p.push_back(g[i]);\n  }\n  while (l.size() < cnt && !p.empty()) l.push_back(p.back()), p.pop_back();\n  while (p.size()) r.push_back(p.back()), p.pop_back();\n  if (l.size() <= cnt && r.size() < g.size() - cnt) {\n    f.clear();\n    return x;\n  }\n  if (l.size() > cnt) {\n    ++tim;\n    for (int i = 0; i < l.size(); ++i) vis[l[i]] = tim;\n    for (int i = 0; i < f.size(); i++)\n      if (vis[f[i]] != tim) swap(f[i], f.back()), f.pop_back(), i--;\n    return getmid(f, g, L, R, v, cnt);\n  } else {\n    ++tim;\n    for (int i = 0; i < r.size(); ++i) vis[r[i]] = tim;\n    for (int i = 0; i < f.size(); i++)\n      if (vis[f[i]] != tim) swap(f[i], f.back()), f.pop_back(), i--;\n    return getmid(f, g, L, R, v, cnt);\n  }\n}\nstruct Interval {\n  long long l, r;\n} ans[N];\nvoid work(vector<int> &f, long long L, long long R, long long xl,\n          long long xr) {\n  if (!f.size()) return;\n  if (f.size() == 1) {\n    ans[f[0]].l = xl;\n    ans[f[0]].r = xr;\n    return;\n  }\n  long long m = f.size();\n  long long d = (R - L) / m;\n  vector<int> g = f;\n  long long x = getmid(g, f, xl, xr, L + d * (m / 2), m >> 1);\n  long long val;\n  vector<int> l, r, p;\n  for (int i = 0; i < f.size(); ++i) {\n    val = query(f[i], x);\n    if (val > L + d * (m / 2))\n      l.push_back(f[i]);\n    else if (val < L + d * (m / 2))\n      r.push_back(f[i]);\n    else\n      p.push_back(f[i]);\n  }\n  while (l.size() < (m >> 1) && p.size()) l.push_back(p.back()), p.pop_back();\n  while (!p.empty()) r.push_back(p.back()), p.pop_back();\n  work(l, L, L + d * (m / 2), xl, x);\n  work(r, L + d * (m / 2), R, x, xr);\n}\nvector<int> f;\nint n;\nlong long L;\nint main() {\n  scanf(\"%d %lld\", &n, &L);\n  for (int i = 1; i <= n; ++i) f.push_back(i);\n  work(f, 0, L, 0, 1e18);\n  putchar('!');\n  putchar('\\n');\n  for (int i = 1; i <= n; ++i) printf(\"%lld %lld\\n\", ans[i].l, ans[i].r);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long N = 2050, S = (long long)1e18;\nlong long n, L;\nlong long p[N], hl[N], hr[N], s1[N], s2[N], s3[N], f[100][100];\nlong long qry(long long id, long long x) {\n  long long ras;\n  printf(\"? %I64d %I64d\\n\", id, x);\n  fflush(stdout);\n  scanf(\"%I64d\", &ras);\n  return ras;\n}\nlong long gval(long long id, long long w) {\n  long long sl, sr, mid;\n  sl = 0;\n  sr = S;\n  while (sl < sr) {\n    mid = (sl + sr) >> 1;\n    if (qry(id, mid) >= w)\n      sr = mid;\n    else\n      sl = mid + 1;\n  }\n  return sl;\n}\nlong long getkth(long long l, long long r, long long K) {\n  long long pos, val, i, W, nvl, t1, t2, t3, top;\n  pos = rand() % (r - l + 1) + l;\n  W = (L / n * (K));\n  val = gval(p[pos], W);\n  t1 = t2 = t3 = 0;\n  for (i = l; i <= r; i++) {\n    nvl = qry(p[i], val);\n    if (nvl > W)\n      s1[++t1] = p[i];\n    else if (nvl == W)\n      s2[++t2] = p[i];\n    else\n      s3[++t3] = p[i];\n  }\n  top = l;\n  for (i = 1; i <= t1; i++) p[top++] = s1[i];\n  for (i = 1; i <= t2; i++) p[top++] = s2[i];\n  for (i = 1; i <= t3; i++) p[top++] = s3[i];\n  if (t1 > K - l)\n    return getkth(l, l + t1 - 1, K);\n  else if (t3 > r - K)\n    return getkth(r - t3 + 1, r, K);\n  else\n    return val;\n}\nvoid Solve(long long l, long long r, long long wl, long long wr) {\n  if (l == r) {\n    hl[p[l]] = wl;\n    hr[p[r]] = wr;\n    return;\n  }\n  long long mid, W;\n  mid = (l + r) >> 1;\n  W = getkth(l, r, mid);\n  Solve(l, mid, wl, W);\n  Solve(mid + 1, r, W, wr);\n}\nint main() {\n  long long i, j;\n  scanf(\"%I64d%I64d\", &n, &L);\n  for (i = 1; i <= n; i++) p[i] = i;\n  Solve(1, n, 0, S);\n  puts(\"!\");\n  for (i = 1; i <= n; i++) printf(\"%I64d\\n%I64d\\n\", hl[i], hr[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1005;\nstruct result {\n  long long l, r;\n} ans[MAXN];\nmt19937 gen(time(NULL));\nlong long L;\nint id[MAXN], tmp[MAXN];\nlong long query(int f, long long p) {\n  printf(\"? %d %lld\\n\", f, p);\n  fflush(stdout);\n  long long v;\n  scanf(\"%lld\", &v);\n  return v;\n}\nlong long get_pos(int x, long long l, long long r, long long v) {\n  while (l <= r) {\n    long long m = l + r >> 1;\n    long long val = query(x, m);\n    if (val >= v)\n      r = m - 1;\n    else\n      l = m + 1;\n  }\n  return l;\n}\nvoid solve(int fl, int fr, long long wl, long long wr) {\n  if (fl == fr) {\n    ans[id[fl]] = {wl, wr};\n    return;\n  }\n  int l = fl, r = fr, m = (fl + fr) / 2;\n  long long V = m * L, p;\n  for (;;) {\n    int x = uniform_int_distribution<int>(l, r)(gen);\n    p = get_pos(id[x], wl, wr, V);\n    int h1 = l, h2 = r;\n    vector<int> eq;\n    for (int i = l; i <= r; i++)\n      if (i != x) {\n        long long val = query(id[i], p);\n        if (val < V)\n          tmp[h2--] = id[i];\n        else if (val > V)\n          tmp[h1++] = id[i];\n        else\n          eq.push_back(id[i]);\n      }\n    eq.push_back(id[x]);\n    int th = h1;\n    for (int &x : eq) tmp[th++] = x;\n    for (int i = l; i <= r; i++) id[i] = tmp[i];\n    if (m >= h1 && m <= h2) break;\n    if (m < h1)\n      r = h1 - 1;\n    else\n      l = h2 + 1;\n  }\n  solve(fl, m, wl, p);\n  solve(m + 1, fr, p, wr);\n}\nint main() {\n  int n;\n  scanf(\"%d%lld\", &n, &L);\n  L /= n;\n  for (int i = 1; i <= n; i++) id[i] = i;\n  solve(1, n, 0, 1000000000000000000);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", ans[i].l, ans[i].r);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long resl[1000], resr[1000];\nmap<pair<int, long long>, long long> cache;\nlong long query(int f, long long x) {\n  if (cache.count({f, x})) return cache[{f, x}];\n  cout << \"? \" << f << \" \" << x << \"\\n\" << flush;\n  long long r;\n  cin >> r;\n  cache[{f, x}] = r;\n  return r;\n}\nlong long findx(int f, long long a, long long b, long long m) {\n  while (a < b) {\n    long long c = (a + b) / 2;\n    long long r = query(f, c);\n    if (r < m)\n      a = c + 1;\n    else\n      b = c;\n  }\n  return a;\n}\nvector<int> kth(vector<int> f, int k, long long a, long long b, long long &c,\n                long long m) {\n  swap(f[0], f[rand() % f.size()]);\n  vector<int> x, eq, y;\n  long long p = findx(f[0], a, b, m);\n  eq.push_back(f[0]);\n  for (int i = 1; i < f.size(); ++i) {\n    long long r = query(f[i], p);\n    if (r > m)\n      x.push_back(f[i]);\n    else if (r < m)\n      y.push_back(f[i]);\n    else\n      eq.push_back(f[i]);\n  }\n  if (x.size() <= k && k < x.size() + eq.size())\n    c = p;\n  else if (k < x.size())\n    x = kth(x, k, a, p - 1, c, m);\n  else\n    y = kth(y, k - x.size() - eq.size(), p + 1, b, c, m);\n  for (int yy : eq) x.push_back(yy);\n  for (int yy : y) x.push_back(yy);\n  return x;\n}\nvoid calc(vector<int> f, long long a, long long b, long long l, long long s) {\n  if (f.size() == 0) return;\n  if (f.size() == 1) {\n    resl[f[0] - 1] = a;\n    resr[f[0] - 1] = b;\n    return;\n  }\n  long long m = l + s * (f.size() / 2);\n  long long c;\n  f = kth(f, f.size() / 2, a, b, c, m);\n  vector<int> x, y;\n  for (int i = 0; i < f.size() / 2; ++i) x.push_back(f[i]);\n  for (int i = f.size() / 2; i < f.size(); ++i) y.push_back(f[i]);\n  calc(x, a, c, l, s);\n  calc(y, c, b, m, s);\n}\nint main() {\n  int n;\n  long long L;\n  cin >> n >> L;\n  vector<int> f;\n  for (int i = 1; i <= n; ++i) f.push_back(i);\n  calc(f, 0, 1e18, 0, L / n);\n  cout << \"!\\n\";\n  for (int i = 0; i < n; ++i) cout << resl[i] << \" \" << resr[i] << \"\\n\";\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing vi = vector<int>;\nusing vvi = vector<vi>;\nusing vll = vector<ll>;\nusing vvll = vector<vll>;\nusing vb = vector<bool>;\nusing vd = vector<double>;\nusing vs = vector<string>;\ntemplate <typename T>\nvoid ckmin(T& a, const T& b) {\n  a = min(a, b);\n}\ntemplate <typename T>\nvoid ckmax(T& a, const T& b) {\n  a = max(a, b);\n}\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\nmap<pair<int, ll>, ll> cache;\nll eval(int i, ll x) {\n  auto key = make_pair(i, x);\n  if (cache.count(key)) return cache[key];\n  cout << \"? \" << i + 1 << \" \" << x << endl;\n  ll res;\n  cin >> res;\n  return cache[key] = res;\n}\nll search(int i, ll xL, ll xH, ll v) {\n  ll res = xH--;\n  while (xL <= xH) {\n    ll x = (xL + xH) / 2;\n    if (eval(i, x) >= v)\n      res = x, xH = x - 1;\n    else\n      xL = x + 1;\n  }\n  return res;\n}\nvoid solve(vector<array<ll, 2>>& ans, vi& elts, ll xL, ll xH, ll vL, ll vH) {\n  if (int((elts).size()) == 1) {\n    ans[elts[0]] = {xL, xH};\n    return;\n  }\n  int targ = (int((elts).size()) + 1) / 2;\n  ll vM = vL + (vH - vL) / int((elts).size()) * targ;\n  vi left, middle = elts, right;\n  ll lX = xL, rX = xH;\n  while (true) {\n    int pivot = middle[rng() % int((middle).size())];\n    ll x = search(pivot, lX, rX, vM);\n    vi before, equal = {pivot}, after;\n    for (int i : middle)\n      if (i != pivot) {\n        ll v = eval(i, x);\n        (v == vM ? equal : v > vM ? before : after).push_back(i);\n      }\n    if (int((left).size()) + int((before).size()) >= targ) {\n      middle.clear();\n      for (int i : before) middle.push_back(i);\n      for (int i : equal) middle.push_back(i);\n      for (int i : after) right.push_back(i);\n      rX = x;\n    } else if (int((left).size()) + int((before).size()) +\n                   int((equal).size()) >=\n               targ) {\n      for (int i : before) left.push_back(i);\n      for (int i : equal)\n        (int((left).size()) < targ ? left : right).push_back(i);\n      for (int i : after) right.push_back(i);\n      solve(ans, left, xL, x, vL, vM);\n      solve(ans, right, x, xH, vM, vH);\n      return;\n    } else {\n      middle.clear();\n      for (int i : before) left.push_back(i);\n      for (int i : equal) middle.push_back(i);\n      for (int i : after) middle.push_back(i);\n      lX = x;\n    }\n  }\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0), cout.tie(0);\n  int N;\n  ll L;\n  cin >> N >> L;\n  vi elts(N);\n  for (int i = 0; i < N; i++) elts[i] = i;\n  vector<array<ll, 2>> ans(N);\n  solve(ans, elts, 0, 1e18, 0, L);\n  cout << \"!\\n\";\n  for (int i = 0; i < N; i++) cout << ans[i][0] << \" \" << ans[i][1] << \"\\n\";\n  cout.flush();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst bool TEST = false;\nusing ll = long long;\nconst ll MAXX = ll(1e18);\nint n;\nll l;\nll D;\nint nq = 0;\nmap<pair<int, ll>, ll> cache;\nll f(int i, ll x) {\n  if (cache.count({i, x})) return cache[{i, x}];\n  nq += 1;\n  assert(nq <= 29999);\n  if (TEST) return min(x / (i + 1), 5ll);\n  assert(0 <= i && i < n);\n  assert(0 <= x && x <= MAXX);\n  cout << \"?\"\n       << \" \" << i + 1 << \" \" << x << '\\n';\n  cout << flush;\n  ll val;\n  cin >> val;\n  cache[{i, x}] = val;\n  return val;\n}\nvector<pair<ll, ll> > ans;\nmt19937 mt(48);\nvoid solve(ll s, ll e, vector<int> ids) {\n  int n = ids.size();\n  if (n == 1) {\n    ans[ids.front()] = {s, e};\n    return;\n  }\n  int z = n / 2;\n  vector<int> lids;\n  vector<int> rids;\n  while (!ids.empty()) {\n    shuffle(ids.begin(), ids.end(), mt);\n    int x = ids.front();\n    ll l = s - 1;\n    ll r = e + 1;\n    ll loc = -1;\n    assert(f(x, e) - f(x, s) >= n * D);\n    while (l + 1 < r) {\n      ll m = (l + r) / 2;\n      bool lok = f(x, m) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, m) >= (n - z) * D;\n      if (lok && rok) {\n        loc = m;\n        break;\n      } else if (rok) {\n        l = m;\n      } else if (lok) {\n        r = m;\n      } else\n        assert(false);\n    }\n    assert(loc != -1);\n    vector<int> lt, eq, rt;\n    for (int x : ids) {\n      assert(f(x, e) - f(x, s) >= n * D);\n      bool lok = f(x, loc) - f(x, s) >= z * D;\n      bool rok = f(x, e) - f(x, loc) >= (n - z) * D;\n      if (lok && rok) {\n        eq.push_back(x);\n      } else if (lok) {\n        lt.push_back(x);\n      } else if (rok) {\n        rt.push_back(x);\n      } else\n        assert(false);\n    }\n    ids.clear();\n    if (lids.size() + lt.size() <= z) {\n      for (int x : lt) lids.push_back(x);\n      lt.clear();\n      while (!eq.empty() && (int)lids.size() < z) {\n        lids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    if (rids.size() + rt.size() <= n - z) {\n      for (int x : rt) rids.push_back(x);\n      rt.clear();\n      while (!eq.empty() && (int)rids.size() < n - z) {\n        rids.push_back(eq.back());\n        eq.pop_back();\n      }\n    }\n    for (int x : lt) ids.push_back(x);\n    for (int x : eq) ids.push_back(x);\n    for (int x : rt) ids.push_back(x);\n    if (ids.empty()) {\n      solve(s, loc, lids);\n      solve(loc, e, rids);\n      return;\n    }\n  }\n  assert(false);\n  return;\n}\nvoid answer() {\n  cout << \"!\" << '\\n';\n  for (pair<ll, ll> x : ans) {\n    assert(x.first != -1 && x.second != -1);\n    cout << x.first << ' ' << x.second << '\\n';\n  }\n  cout << flush;\n}\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> l;\n  D = l / n;\n  ans.assign(n, {-1, -1});\n  vector<int> ids;\n  for (int i = 0; i < n; i++) ids.push_back(i);\n  solve(0, MAXX, ids);\n  answer();\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T>\nint getbit(T s, int i) {\n  return (s >> i) & 1;\n}\ntemplate <class T>\nT onbit(T s, int i) {\n  return s | (T(1) << i);\n}\ntemplate <class T>\nT offbit(T s, int i) {\n  return s & (~(T(1) << i));\n}\ntemplate <class T>\nint cntbit(T s) {\n  return __builtin_popcountll(s);\n}\ntemplate <class T>\nT gcd(T a, T b) {\n  T r;\n  while (b != 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return a;\n}\ntemplate <class T>\nT lcm(T a, T b) {\n  return a / gcd(a, b) * b;\n}\nlong long n, L, d;\nint RR[2025];\nlong long f[2025][2025];\nmap<pair<int, long long>, long long> M;\nlong long cal(int id, long long x) {\n  if (M[make_pair(id, x)]) return M[make_pair(id, x)] - 1;\n  fflush(stdout);\n  cout << \"? \" << id << \" \" << x << endl;\n  long long res;\n  cin >> res;\n  M[make_pair(id, x)] = res + 1;\n  return res;\n}\nlong long find(int id, int vt) {\n  long long &res = f[id][vt];\n  if (res != -1) return res;\n  long long x = vt * d;\n  long long l = 0, r = (long long)(1e18);\n  while (l < r) {\n    long long mid = (l + r) / 2;\n    if (cal(id, mid) < x)\n      l = mid + 1;\n    else\n      r = mid;\n  }\n  res = l;\n  return res;\n}\npair<vector<int>, vector<int> > divide(vector<int> V, int u, int v, int k) {\n  int len = (v - u + 1);\n  int id = V[rand() % len];\n  long long vt = find(id, k);\n  vector<int> behon, lonhon, bang;\n  for (int i = 0; i < (((int)(V).size())); ++i) {\n    int x = V[i];\n    long long y = cal(x, vt);\n    if (y > k * d)\n      behon.push_back(x);\n    else if (y == k * d)\n      bang.push_back(x);\n    else\n      lonhon.push_back(x);\n  }\n  pair<vector<int>, vector<int> > res;\n  if (((int)(behon).size()) > k - u) {\n    pair<vector<int>, vector<int> > temp =\n        divide(behon, u, u + ((int)(behon).size()) - 1, k);\n    res = temp;\n    for (int i = 0; i < (((int)(bang).size())); ++i)\n      res.second.push_back(bang[i]);\n    for (int i = 0; i < (((int)(lonhon).size())); ++i)\n      res.second.push_back(lonhon[i]);\n    temp.first.clear();\n    temp.second.clear();\n  } else if (((int)(lonhon).size()) > v - k) {\n    pair<vector<int>, vector<int> > temp =\n        divide(lonhon, v - ((int)(lonhon).size()) + 1, v, k);\n    res = temp;\n    for (int i = 0; i < (((int)(behon).size())); ++i)\n      res.first.push_back(behon[i]);\n    for (int i = 0; i < (((int)(bang).size())); ++i)\n      res.first.push_back(bang[i]);\n    temp.first.clear();\n    temp.second.clear();\n  } else {\n    for (int i = 0; i < (((int)(behon).size())); ++i)\n      res.first.push_back(behon[i]);\n    for (int i = 0; i < (((int)(bang).size())); ++i) {\n      if (((int)(res.first).size()) < k - u + 1)\n        res.first.push_back(bang[i]);\n      else\n        res.second.push_back(bang[i]);\n    }\n    for (int i = 0; i < (((int)(lonhon).size())); ++i)\n      res.second.push_back(lonhon[i]);\n  }\n  V.clear();\n  behon.clear();\n  bang.clear();\n  lonhon.clear();\n  return res;\n}\nvoid go(vector<int> V, int u, int v) {\n  int mid = (u + v) / 2;\n  int len = (v - u + 1);\n  if (u == v) {\n    RR[V[0]] = u;\n    return;\n  }\n  pair<vector<int>, vector<int> > VV = divide(V, u, v, mid);\n  go(VV.first, u, mid);\n  go(VV.second, mid + 1, v);\n}\nvoid sol() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  srand(time(NULL));\n  memset(f, -1, sizeof(f));\n  cin >> n >> L;\n  d = L / n;\n  vector<int> V;\n  for (int i = (1); i <= (n); ++i) V.push_back(i);\n  go(V, 1, n);\n  vector<long long> vv;\n  vv.push_back(0);\n  for (int i = (1); i <= (n); ++i) vv.push_back(find(i, RR[i]));\n  sort((vv).begin(), (vv).end());\n  cout << \"!\" << endl;\n  for (int i = (1); i <= (n); ++i)\n    cout << vv[RR[i] - 1] << \" \" << vv[RR[i]] << endl;\n}\nint main() {\n  sol();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long NMAX = 1000;\npair<long long, long long> func[NMAX + 5];\npair<long long, long long> tmp_func[NMAX + 5];\nlong long initial[NMAX + 5];\npair<long long, long long> ans[NMAX + 5];\nmap<pair<long long, long long>, long long> memo;\nlong long singular_query(long long id, long long wh) {\n  if (memo.count({id, wh}) == 0) {\n    cout << \"? \" << id << \" \" << wh << endl;\n    cin >> memo[{id, wh}];\n  }\n  return memo[{id, wh}];\n}\nvoid query_fun(long long fst, long long lst, long long wh) {\n  for (long long i = fst; i <= lst; i++) {\n    func[i].first = singular_query(func[i].second, wh);\n  }\n}\nvoid solve(long long fst, long long lst, long long l, long long r,\n           long long buck) {\n  if (fst == lst) {\n    ans[func[fst].second] = {l, r};\n    return;\n  }\n  long long target_split = (lst + fst) / 2;\n  long long st = l + 1LL * (target_split - fst + 1) * buck - 1,\n            dr = r - 1LL * (lst - target_split) * buck + 1;\n  while (dr - st > 1) {\n    long long mid = (st + dr) / 2;\n    for (long long i = fst; i <= lst; i++) {\n      map<pair<long long, long long>, long long>::iterator it =\n          memo.lower_bound({func[i].second, mid});\n      if (it != memo.end() && it->first.first == func[i].second &&\n          it->second - initial[func[i].second] <\n              buck * (target_split - fst + 1)) {\n        func[i].first = it->second;\n      } else if (it != memo.begin()) {\n        it--;\n        if (it->first.first == func[i].second &&\n            it->second - initial[func[i].second] >=\n                buck * (target_split - fst + 1)) {\n          func[i].first = it->second;\n        } else {\n          func[i].first = singular_query(func[i].second, mid);\n        }\n      } else {\n        func[i].first = singular_query(func[i].second, mid);\n      }\n    }\n    sort(func + fst, func + 1 + lst,\n         [&](pair<long long, long long> &a, pair<long long, long long> &b) {\n           return a.first - initial[a.second] > b.first - initial[b.second];\n         });\n    if (func[target_split].first - initial[func[target_split].second] >=\n        buck * (target_split - fst + 1)) {\n      dr = mid;\n      for (long long i = fst; i <= lst; i++) {\n        tmp_func[i] = func[i];\n      }\n    } else {\n      st = mid;\n    }\n  }\n  for (long long i = fst; i <= lst; i++) {\n    func[i] = tmp_func[i];\n  }\n  for (int i = target_split + 1; i <= lst; i++) {\n    initial[func[i].second] += buck * (target_split - fst + 1);\n  }\n  solve(fst, target_split, l, dr, buck);\n  solve(target_split + 1, lst, dr, r, buck);\n}\nint main() {\n  long long n;\n  long long l;\n  scanf(\"%lld %lld\", &n, &l);\n  for (long long i = 1; i <= n; i++) {\n    func[i] = {0, i};\n    memo[{i, 0}] = 0;\n    memo[{i, 1e18}] = l;\n  }\n  solve(1, n, 0, 1e18, l / n);\n  cout << \"!\" << endl;\n  for (long long i = 1; i <= n; i++) {\n    cout << ans[i].first << \" \" << ans[i].second << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long S = (long long)1e18;\nlong long n, L, p[2005], ansl[2005], ansr[2005], s1[2005], s2[2005], s3[2005];\nlong long rd() {\n  long long x = 0, tp = 1;\n  char c = getchar();\n  while (c < '0' || c > '9') {\n    if (c == '-') tp = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = (x * 10 + c - '0');\n    c = getchar();\n  }\n  return x * tp;\n}\nlong long query(long long id, long long x) {\n  printf(\"? %lld %lld\\n\", id, x);\n  fflush(stdout);\n  long long res;\n  scanf(\"%lld\", &res);\n  return res;\n}\nlong long getpos(long long id, long long x) {\n  long long l = 0, r = S, mid, pos = 0;\n  while (l <= r) {\n    mid = (l + r) >> 1;\n    if (query(id, mid) >= x)\n      r = mid - 1;\n    else\n      l = mid + 1, pos = mid;\n  }\n  return pos + 1;\n}\nlong long get_kth(long long l, long long r, long long K) {\n  long long pos, val, i, W, nvl, t1, t2, t3, top;\n  pos = rand() % (r - l + 1) + l;\n  W = L / n * K;\n  val = getpos(p[pos], W);\n  t1 = t2 = t3 = 0;\n  for (i = l; i <= r; i++) {\n    nvl = query(p[i], val);\n    if (nvl > W)\n      s1[++t1] = p[i];\n    else if (nvl == W)\n      s2[++t2] = p[i];\n    else\n      s3[++t3] = p[i];\n  }\n  top = l;\n  for (i = 1; i <= t1; i++) p[top++] = s1[i];\n  for (i = 1; i <= t2; i++) p[top++] = s2[i];\n  for (i = 1; i <= t3; i++) p[top++] = s3[i];\n  if (t1 > K - l)\n    return get_kth(l, l + t1 - 1, K);\n  else if (t3 > r - K)\n    return get_kth(r - t3 + 1, r, K);\n  else\n    return val;\n}\nvoid solve(long long l, long long r, long long sl, long long sr) {\n  if (l == r) {\n    ansl[p[l]] = sl, ansr[p[r]] = sr;\n    return;\n  }\n  long long k = (l + r) >> 1, mid;\n  mid = get_kth(l, r, k);\n  solve(l, k, sl, mid), solve(k + 1, r, mid, sr);\n}\nint main() {\n  scanf(\"%lld %lld\", &n, &L);\n  for (int i = 1; i <= n; i++) p[i] = i;\n  solve(1, n, 0, S);\n  printf(\"!\\n\");\n  for (int i = 1; i <= n; i++) printf(\"%lld %lld\\n\", ansl[i], ansr[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nlong long n, L, q[1005], q1[1005], q2[1005], q3[1005], q1_cnt, q2_cnt, q3_cnt,\n    ansl[1005], ansr[1005], rec;\nvoid work(long long ql, long long qr, long long level, long long tar,\n          long long nl, long long nr) {\n  if (ql > qr) return;\n  q1_cnt = q2_cnt = q3_cnt = 0;\n  long long w = ql + rand() % (qr - ql + 1);\n  long long l = nl, r = nr;\n  while (l <= r) {\n    long long mid = l + r >> 1;\n    cout << '?' << ' ' << q[w] << ' ' << mid << endl;\n    long long val;\n    cin >> val;\n    if (val >= level)\n      r = mid - 1;\n    else\n      l = mid + 1;\n  }\n  rec = l;\n  q2[++q2_cnt] = q[w];\n  for (long long i = ql; i <= qr; i++)\n    if (i != w) {\n      cout << '?' << ' ' << q[i] << ' ' << l << endl;\n      long long val;\n      cin >> val;\n      if (val < level)\n        q3[++q3_cnt] = q[i];\n      else if (val > level)\n        q1[++q1_cnt] = q[i];\n      else\n        q2[++q2_cnt] = q[i];\n    }\n  for (long long i = 1; i <= q1_cnt; i++) q[ql + i - 1] = q1[i];\n  for (long long i = 1; i <= q2_cnt; i++) q[ql + q1_cnt + i - 1] = q2[i];\n  for (long long i = 1; i <= q3_cnt; i++)\n    q[ql + q1_cnt + q2_cnt + i - 1] = q3[i];\n  if (tar >= ql + q1_cnt && tar < ql + q1_cnt + q2_cnt) return;\n  if (tar < ql + q1_cnt)\n    work(ql, ql + q1_cnt - 1, level, tar, nl, nr);\n  else\n    work(ql + q1_cnt + 1, qr, level, tar, nl, nr);\n}\nvoid solve(long long nl, long long nr, long long low, long long top,\n           long long ql, long long qr) {\n  if (ql == qr) {\n    ansl[q[ql]] = nl;\n    ansr[q[qr]] = nr;\n    return;\n  }\n  long long cnt = qr - ql + 1 >> 1, level = low + L / n * cnt;\n  work(ql, qr, level, ql + cnt - 1, nl, nr);\n  long long tmp = rec;\n  solve(nl, tmp, low, level, ql, ql + cnt - 1);\n  solve(tmp, nr, level, top, ql + cnt, qr);\n}\nsigned main() {\n  srand(time(NULL));\n  cin >> n >> L;\n  for (long long i = 1; i <= n; i++) q[i] = i;\n  solve(0, 1e18, 0, L, 1, n);\n  cout << '!' << '\\n';\n  for (long long i = 1; i <= n; i++) cout << ansl[i] << ' ' << ansr[i] << '\\n';\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing ll = long long;\nconst int N = 1010;\nconst ll MAX = (ll)1e18;\nint n;\nint rand(int n) { return rand() % n; }\nll ask(int id, ll pos) {\n  printf(\"? %d %lld\\n\", id + 1, pos);\n  fflush(stdout);\n  ll ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\nll left[N], right[N];\nvoid solve(std::vector<int> vec, ll l, ll r, ll l_value, ll r_value) {\n  if ((int)vec.size() == 1) {\n    left[vec[0]] = l;\n    right[vec[0]] = r;\n    return;\n  }\n  ll diff = (r_value - l_value) / vec.size();\n  ll target;\n  if (vec.size() % 2 == 0) {\n    target = (l_value + r_value) / 2;\n  } else {\n    target = (l_value + r_value - diff) / 2;\n  }\n  int target_sit = ((int)vec.size() + 1) / 2;\n  std::vector<int> small, big, possible = vec;\n  ll cur_l = l, cur_r = r;\n  while (true) {\n    int pos = possible[rand(possible.size())];\n    std::vector<std::pair<ll, int>> value;\n    ll l1 = cur_l, r1 = cur_r;\n    while (l1 < r1) {\n      ll mid = (l1 + r1) / 2;\n      if (ask(pos, mid) >= target) {\n        r1 = mid;\n      } else {\n        l1 = mid + 1;\n      }\n    }\n    for (auto u : possible) {\n      value.emplace_back(ask(u, l1), u);\n    }\n    std::sort(value.begin(), value.end());\n    int sit = target_sit - (int)small.size();\n    if (value[sit].first < target) {\n      std::vector<int> npossible;\n      for (auto p : value) {\n        if (p.first >= target) {\n          big.push_back(p.second);\n        } else {\n          npossible.push_back(p.second);\n        }\n      }\n      possible = npossible;\n      cur_l = l1 + 1;\n    } else if (value[sit].first > target) {\n      std::vector<int> npossible;\n      for (auto p : value) {\n        if (p.first <= target) {\n          small.push_back(p.second);\n        } else {\n          npossible.push_back(p.second);\n        }\n      }\n      possible = npossible;\n      cur_r = l1 - 1;\n    } else {\n      for (int i = 0; i < sit; ++i) {\n        small.push_back(value[i].second);\n      }\n      for (int i = sit; i < (int)value.size(); ++i) {\n        big.push_back(value[i].second);\n      }\n      solve(small, l1, r, target, r_value);\n      solve(big, l, l1, l_value, target);\n      break;\n    }\n  }\n}\nint main() {\n  srand((unsigned)time(nullptr));\n  ll l;\n  scanf(\"%d%lld\", &n, &l);\n  std::vector<int> vec(n);\n  for (int i = 0; i < n; ++i) {\n    vec[i] = i;\n  }\n  solve(vec, 0, MAX, 0, l);\n  puts(\"!\");\n  for (int i = 0; i < n; ++i) {\n    printf(\"%lld %lld\\n\", left[i], right[i]);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst ll H = 1e18;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\ntemplate <class T>\nT rand(T a, T b) {\n  return uniform_int_distribution<T>(a, b)(rng);\n}\nmap<pair<int, ll>, ll> memo;\nll ask(int i, ll x) {\n  pair<int, ll> pr = {i, x};\n  if (memo.find(pr) != memo.end()) return memo[pr];\n  cout << \"? \" << i + 1 << ' ' << x << endl;\n  ll r;\n  cin >> r;\n  memo[pr] = r;\n  return r;\n}\nll getInd(int i, ll t) {\n  ll low = 0;\n  ll high = H;\n  while (low != high) {\n    ll mid = (low + high) >> 1;\n    if (ask(i, mid) >= t)\n      high = mid;\n    else\n      low = mid + 1;\n  }\n  return low;\n}\nvector<int> recSort(ll t, vector<int> act, int orig_k = 0) {\n  int n = act.size();\n  if (n == 1) return act;\n  int le_tc = (n + 1) / 2;\n  int ri_tc = n / 2;\n  int k = orig_k + le_tc;\n  ll v = k * t;\n  vector<int> le, ri;\n  while (!act.empty()) {\n    int m = act.size();\n    int i = rand(0, m - 1);\n    ll x = getInd(act[i], v);\n    vector<ll> offs(m, 0);\n    offs[i] = 0;\n    int lesses = 0;\n    int mores = 0;\n    for (int j = 0; j < m; ++j) {\n      if (j == i) continue;\n      ll cou = ask(act[j], x - 1);\n      if (cou >= v)\n        offs[j] = -1;\n      else if (cou < v - 1)\n        offs[j] = 1;\n      else {\n        ll cou2 = ask(act[j], x);\n        if (cou2 == v - 1) offs[j] = 1;\n      }\n      if (offs[j] < 0) ++lesses;\n      if (offs[j] > 0) ++mores;\n    }\n    if (le.size() + lesses <= le_tc && ri.size() + mores <= ri_tc) {\n      int add_le = le_tc - lesses - le.size();\n      for (int j = 0; j < m; ++j) {\n        if (offs[j] == -1)\n          le.push_back(act[j]);\n        else if (offs[j] == 1)\n          ri.push_back(act[j]);\n        else {\n          if (add_le > 0) {\n            le.push_back(act[j]);\n            --add_le;\n          } else {\n            ri.push_back(act[j]);\n          }\n        }\n      }\n      act.clear();\n    } else if (le.size() + lesses <= le_tc) {\n      vector<int> nxt_act;\n      for (int j = 0; j < m; ++j) {\n        if (offs[j] <= 0)\n          le.push_back(act[j]);\n        else\n          nxt_act.push_back(act[j]);\n      }\n      act = nxt_act;\n    } else {\n      vector<int> nxt_act;\n      for (int j = 0; j < m; ++j) {\n        if (offs[j] >= 0)\n          ri.push_back(act[j]);\n        else\n          nxt_act.push_back(act[j]);\n      }\n      act = nxt_act;\n    }\n  }\n  vector<int> le_sorted = recSort(t, le, orig_k);\n  vector<int> ri_sorted = recSort(t, ri, orig_k + le_tc);\n  vector<int> res;\n  for (auto i : le_sorted) res.push_back(i);\n  for (auto i : ri_sorted) res.push_back(i);\n  return res;\n}\nint main() {\n  int n;\n  ll v;\n  cin >> n >> v;\n  ll t = v / n;\n  vector<int> inds(n);\n  for (int i = 0; i < n; ++i) inds[i] = i;\n  vector<int> ord = recSort(t, inds);\n  ll pre = 0;\n  vector<pair<ll, ll>> ints(n);\n  for (int j = 0; j < n; ++j) {\n    int i = ord[j];\n    ll x = getInd(i, t * (j + 1));\n    ints[i] = {pre, x};\n    pre = x;\n  }\n  cout << \"!\" << endl;\n  for (int i = 0; i < n; ++i) {\n    cout << ints[i].first << ' ' << ints[i].second << endl;\n  }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nconst int64_t BILLION = 1000000000LL;\nconst int64_t MAXIN = BILLION * BILLION;\nint64_t N, L;\nint64_t query(int i, int64_t x) {\n  if (x == 0) return 0;\n  if (x == MAXIN) return L;\n  printf(\"? %d %I64d\\n\", i + 1, x);\n  fflush(stdout);\n  int64_t res;\n  scanf(\"%I64d\", &res);\n  return res;\n}\nstd::pair<int64_t, int64_t> ans[1005];\nint64_t locate(int i, int64_t low, int64_t high, int64_t thres) {\n  while (high - low > 1) {\n    int64_t mid = (low + high) / 2;\n    if (query(i, mid) >= thres) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n  }\n  return high;\n}\nvoid solve(std::vector<int> is, int64_t ll, int64_t rr, int64_t base) {\n  if (is.size() == 1) {\n    ans[is[0]] = {ll, rr};\n    return;\n  }\n  int64_t crit = L / N * (is.size() / 2) + base;\n  int64_t k = is.size() / 2;\n  std::vector<int> sub(is);\n  std::vector<int> left, right;\n  int64_t pivot_value;\n  while (sub.size()) {\n    int pivot_index = sub[rand() % sub.size()];\n    pivot_value = locate(pivot_index, ll, rr, crit);\n    std::vector<int> small, medium, big;\n    for (int i : sub) {\n      if (query(i, pivot_value) < crit) {\n        big.push_back(i);\n      } else if (query(i, pivot_value - 1) < crit) {\n        medium.push_back(i);\n      } else {\n        small.push_back(i);\n      }\n    }\n    if (k >= small.size() + medium.size()) {\n      k -= small.size() + medium.size();\n      left.insert(left.end(), small.begin(), small.end());\n      left.insert(left.end(), medium.begin(), medium.end());\n      sub = big;\n    } else if (k >= small.size()) {\n      k -= small.size();\n      left.insert(left.end(), small.begin(), small.end());\n      left.insert(left.end(), medium.begin(), medium.begin() + k);\n      right.insert(right.end(), big.begin(), big.end());\n      right.insert(right.end(), medium.begin() + k, medium.end());\n      break;\n    } else {\n      right.insert(right.end(), big.begin(), big.end());\n      right.insert(right.end(), medium.begin(), medium.end());\n      sub = small;\n    }\n  }\n  assert(left.size() <= is.size() / 2);\n  assert(right.size() <= is.size() - is.size() / 2);\n  solve(left, ll, pivot_value, base);\n  solve(right, pivot_value, rr, crit);\n}\nint main() {\n  scanf(\"%I64d %I64d\", &N, &L);\n  std::vector<int> is;\n  for (int i = 0; i < N; i++) {\n    is.push_back(i);\n  }\n  solve(is, 0, MAXIN, 0);\n  printf(\"!\\n\");\n  for (int i = 0; i < N; i++) {\n    printf(\"%I64d %I64d\\n\", ans[i].first, ans[i].second);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long N = 2050, S = (long long)1e18;\nlong long n, L;\nlong long p[N], hl[N], hr[N], s1[N], s2[N], s3[N];\nlong long qry(long long id, long long x) {\n  long long ras;\n  printf(\"? %I64d %I64d\\n\", id, x);\n  fflush(stdout);\n  scanf(\"%I64d\", &ras);\n  return ras;\n}\nlong long gval(long long id, long long w) {\n  long long sl, sr, mid;\n  sl = 0;\n  sr = S;\n  while (sl < sr) {\n    mid = (sl + sr) >> 1;\n    if (qry(id, mid) >= w)\n      sr = mid;\n    else\n      sl = mid + 1;\n  }\n  return sl;\n}\nlong long getkth(long long l, long long r, long long K) {\n  long long pos, val, i, W, nvl, t1, t2, t3, top;\n  pos = rand() % (r - l + 1) + l;\n  W = (L / n * (K));\n  val = gval(p[pos], W);\n  t1 = t2 = t3 = 0;\n  for (i = l; i <= r; i++) {\n    nvl = qry(p[i], val);\n    if (nvl > W)\n      s1[++t1] = p[i];\n    else if (nvl == W)\n      s2[++t2] = p[i];\n    else\n      s3[++t3] = p[i];\n  }\n  top = l;\n  for (i = 1; i <= t1; i++) p[top++] = s1[i];\n  for (i = 1; i <= t2; i++) p[top++] = s2[i];\n  for (i = 1; i <= t3; i++) p[top++] = s3[i];\n  if (t1 > K - l)\n    return getkth(l, l + t1 - 1, K);\n  else if (t3 > r - K)\n    return getkth(r - t3 + 1, r, K);\n  else\n    return val;\n}\nvoid Solve(long long l, long long r, long long wl, long long wr) {\n  if (l == r) {\n    hl[p[l]] = wl;\n    hr[p[r]] = wr;\n    return;\n  }\n  long long mid, W;\n  mid = (l + r) >> 1;\n  W = getkth(l, r, mid);\n  Solve(l, mid, wl, W);\n  Solve(mid + 1, r, W, wr);\n}\nint main() {\n  long long i, j;\n  scanf(\"%I64d%I64d\", &n, &L);\n  for (i = 1; i <= n; i++) p[i] = i;\n  Solve(1, n, 0, S);\n  puts(\"!\");\n  for (i = 1; i <= n; i++) printf(\"%I64d\\n%I64d\\n\", hl[i], hr[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int inf = 2147483647;\nconst int N = 1001;\nint _max(int x, int y) { return x > y ? x : y; }\nint _min(int x, int y) { return x < y ? x : y; }\ninline long long read() {\n  long long x = 0, f = 1;\n  char ch = getchar();\n  while (ch < '0' || ch > '9') {\n    if (ch == '-') f = -1;\n    ch = getchar();\n  }\n  while (ch >= '0' && ch <= '9')\n    x = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar();\n  return x * f;\n}\nvoid put(long long x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x >= 10) put(x / 10);\n  putchar(x % 10 + '0');\n}\nlong long v, L;\nint n, id[N], c[N], b[N];\npair<long long, long long> ans[N];\nlong long query(int x, long long y) {\n  putchar('?'), putchar(' ');\n  put(x), putchar(' '), put(y), puts(\"\");\n  fflush(stdout);\n  long long hh = read();\n  return hh;\n}\nlong long findpos(int x, long long k, long long ql, long long qr) {\n  long long mid = (ql + qr) / 2;\n  while (1) {\n    long long hh = query(x, mid);\n    if (hh == k) return mid;\n    if (hh < k)\n      ql = mid + 1;\n    else\n      qr = mid - 1;\n    mid = (ql + qr) / 2;\n  }\n}\nvoid qst(int l, int r, int mid, long long ql, long long qr) {\n  int x = rand() % (r - l + 1) + l;\n  long long uu = (L / n) * mid, pos = findpos(id[x], uu, ql, qr);\n  int tp = 0, l1 = l - 1, l2 = r + 1;\n  c[++tp] = id[x];\n  for (int i = l; i <= r; i++)\n    if (x != i) {\n      long long hh = query(id[i], pos);\n      if (hh > uu)\n        b[++l1] = id[i];\n      else if (hh < uu)\n        b[--l2] = id[i];\n      else\n        c[++tp] = id[i];\n    }\n  while (tp && l1 < mid) b[++l1] = c[tp--];\n  if (l1 == mid) {\n    v = pos;\n    while (tp) b[--l2] = c[tp--];\n    for (int i = l; i <= r; i++) id[i] = b[i];\n    return;\n  }\n  if (l1 < mid) {\n    for (int i = l; i <= r; i++) id[i] = b[i];\n    qst(l2, r, mid, ql, qr);\n    return;\n  }\n  while (tp) b[--l2] = c[tp--];\n  for (int i = l; i <= r; i++) id[i] = b[i];\n  qst(l, l1, mid, ql, qr);\n}\nvoid solve(int l, int r, long long ql, long long qr) {\n  if (l == r) {\n    ans[id[l]] = pair<long long, long long>(ql, qr);\n    return;\n  }\n  int mid = (l + r) / 2;\n  qst(l, r, mid, ql, qr);\n  long long zz = v;\n  solve(l, mid, ql, zz);\n  solve(mid + 1, r, zz, qr);\n}\nint main() {\n  n = read(), L = read();\n  for (int i = 1; i <= n; i++) id[i] = i;\n  solve(1, n, 0, 1e18);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++)\n    put(ans[i].first), putchar(' '), put(ans[i].second), puts(\"\");\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1005;\nint n, a[N], b[N];\nlong long L, l[N], r[N];\ninline long long qry(int i, long long x) {\n  printf(\"? %d %lld\\n\", i + 1, x);\n  fflush(stdout);\n  scanf(\"%lld\", &x);\n  return x;\n}\nvoid sol(int l1, int r1, long long l2, long long r2) {\n  if (l1 == r1) {\n    l[a[l1]] = l2;\n    r[a[l1]] = r2;\n    return;\n  }\n  int m1 = (l1 + r1) / 2;\n  long long x = L / n * (m1 + 1), m2;\n  for (int l = l1, r = r1;;) {\n    int i = rand() % (r - l + 1) + l;\n    long long lb = l2, rb = r2;\n    while (lb < rb) {\n      long long mb = (lb + rb) / 2;\n      if (qry(a[i], mb) < x)\n        lb = mb + 1;\n      else\n        rb = mb;\n    }\n    int l2 = l, r2 = r;\n    vector<int> e;\n    for (int j = l; j <= r; ++j) {\n      long long y = qry(a[j], lb);\n      if (y > x)\n        b[l2++] = a[j];\n      else if (y < x)\n        b[r2--] = a[j];\n      else\n        e.push_back(a[j]);\n    }\n    for (int j = 0; j < e.size(); ++j) b[l2 + j] = e[j];\n    memcpy(a + l, b + l, 4 * (r - l + 1));\n    if (l2 <= m1 && m1 <= r2) {\n      m2 = lb;\n      break;\n    }\n    if (l2 < m1)\n      l = l2 + 1;\n    else\n      r = l2 - 1;\n  }\n  sol(l1, m1, l2, m2);\n  sol(m1 + 1, r1, m2, r2);\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  for (int i = 0; i < n; ++i) a[i] = i;\n  sol(0, n - 1, 0, 1e18);\n  puts(\"!\");\n  for (int i = 0; i < n; ++i) printf(\"%lld %lld\\n\", l[i], r[i]);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class TH>\nvoid _dbg(const char *sdbg, TH h) {\n  cerr << sdbg << '=' << h << endl;\n}\ntemplate <class TH, class... TA>\nvoid _dbg(const char *sdbg, TH h, TA... a) {\n  while (*sdbg != ',') cerr << *sdbg++;\n  cerr << '=' << h << ',';\n  _dbg(sdbg + 1, a...);\n}\ntemplate <class T>\nostream &operator<<(ostream &os, vector<T> V) {\n  os << \"[\";\n  for (auto vv : V) os << vv << \", \";\n  return os << \"]\";\n}\ntemplate <class L, class R>\nostream &operator<<(ostream &os, pair<L, R> P) {\n  return os << \"(\" << P.first << \", \" << P.second << \")\";\n}\nlong long n, last;\nlong long tab[1123][1123];\nmap<pair<long long, long long>, long long> gettab;\nlong long get(long long i, long long x) {\n  if (gettab.find(pair<long long, long long>(i, x)) != gettab.end())\n    return gettab[pair<long long, long long>(i, x)];\n  long long retv = x;\n  cout << \"? \" << i << \" \" << x << endl;\n  cin >> retv;\n  return gettab[pair<long long, long long>(i, x)] = retv;\n}\npair<long long, long long> ans[1123];\nint pick(int a, int b) { return a + (rand() % (b - a + 1)); }\nlong long find_fmid(int i, long long l, long long r, long long val) {\n  while (l != r) {\n    long long mid = (l + r) / 2;\n    if (get(i, mid) >= val)\n      r = mid;\n    else\n      l = mid + 1;\n  }\n  return l;\n}\nlong long split(long long l, long long r, long long prev, vector<int> pi,\n                vector<int> &lpi, vector<int> &rpi) {\n  int a = 0, b = pi.size() - 1;\n  int k = pi.size() / 2;\n  long long xp;\n  while (a != b) {\n    assert(a <= k && k <= b);\n    int pivot = pick(a, b);\n    xp = find_fmid(pi[pivot], l, r, (prev + k) * (last / n));\n    lpi.clear();\n    rpi.clear();\n    vector<int> eq;\n    for (int i = a; i <= b; i++)\n      if (i != pivot) {\n        if (get(pi[i], xp) > (prev + k) * (last / n))\n          lpi.push_back(pi[i]);\n        else if (get(pi[i], xp) < (prev + k) * (last / n))\n          rpi.push_back(pi[i]);\n        else\n          eq.push_back(pi[i]);\n      }\n    int bla = pi[pivot];\n    int tmp = a;\n    for (int i = 0; i < lpi.size(); i++) pi[tmp++] = lpi[i];\n    for (int i = 0; i < eq.size(); i++) pi[tmp++] = eq[i];\n    int breakpoint = tmp;\n    pi[tmp++] = bla;\n    for (int i = 0; i < rpi.size(); i++) pi[tmp++] = rpi[i];\n    if (k > breakpoint) {\n      a = breakpoint + 1;\n    } else if (k < breakpoint - eq.size()) {\n      b = breakpoint - 1;\n    } else {\n      swap(pi[k], pi[breakpoint]);\n      break;\n    }\n  }\n  lpi.clear();\n  rpi.clear();\n  for (int i = 0; i < k; i++) lpi.push_back(pi[i]);\n  for (int i = k; i < pi.size(); i++) rpi.push_back(pi[i]);\n  return find_fmid(pi[k], l, r, (prev + k) * (last / n));\n}\nvoid solve(long long l, long long r, long long prev, vector<int> pi) {\n  if (pi.size() == 1) {\n    ans[pi[0]] = {l, r};\n    return;\n  }\n  vector<int> lpi, rpi;\n  long long mid = split(l, r, prev, pi, lpi, rpi);\n  solve(l, mid, prev, lpi);\n  solve(mid, r, prev + lpi.size(), rpi);\n}\nint main(void) {\n  cin >> n >> last;\n  while (true) {\n    vector<int> pi;\n    for (int i = 1; i <= n; i++) pi.push_back(i);\n    solve(0, 1e18, 0, pi);\n    cout << \"!\" << endl;\n    for (int i = 1; i <= n; i++) {\n      cout << ans[i].first << \" \" << ans[i].second << endl;\n    }\n    break;\n  }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long NMAX = 1000;\npair<long long, long long> func[NMAX + 5];\npair<long long, long long> tmp_func[NMAX + 5];\nlong long initial[NMAX + 5];\npair<long long, long long> ans[NMAX + 5];\nmap<pair<long long, long long>, long long> memo;\nlong long singular_query(long long id, long long wh) {\n  if (memo.count({id, wh}) == 0) {\n    cout << \"? \" << id << \" \" << wh << endl;\n    cin >> memo[{id, wh}];\n  }\n  return memo[{id, wh}];\n}\nvoid query_fun(long long fst, long long lst, long long wh) {\n  for (long long i = fst; i <= lst; i++) {\n    func[i].first = singular_query(func[i].second, wh);\n  }\n}\nvoid solve(long long fst, long long lst, long long l, long long r,\n           long long buck) {\n  if (fst == lst) {\n    ans[func[fst].second] = {l, r};\n    return;\n  }\n  long long target_split = (lst + fst) / 2;\n  long long st = l + 1LL * (target_split - fst + 1) * buck - 1,\n            dr = r - 1LL * (lst - target_split) * buck + 1;\n  while (dr - st > 1) {\n    long long mid = (st + dr) / 2;\n    for (long long i = fst; i <= lst; i++) {\n      map<pair<long long, long long>, long long>::iterator it =\n          memo.lower_bound({func[i].second, mid});\n      if (it != memo.end() && it->first.first == func[i].second &&\n          it->second - initial[func[i].second] <\n              buck * (target_split - fst + 1)) {\n        func[i].first = it->second;\n      } else if (it != memo.begin()) {\n        it--;\n        if (it->first.first == func[i].second &&\n            it->second - initial[func[i].second] >=\n                buck * (target_split - fst + 1)) {\n          func[i].first = it->second;\n        } else {\n          func[i].first = singular_query(func[i].second, mid);\n        }\n      } else {\n        func[i].first = singular_query(func[i].second, mid);\n      }\n    }\n    sort(func + fst, func + 1 + lst,\n         [&](pair<long long, long long> &a, pair<long long, long long> &b) {\n           return a.first - initial[a.second] > b.first - initial[b.second];\n         });\n    if (func[target_split].first - initial[func[target_split].second] >=\n        buck * (target_split - fst + 1)) {\n      dr = mid;\n      for (long long i = fst; i <= lst; i++) {\n        tmp_func[i] = func[i];\n      }\n    } else {\n      st = mid;\n    }\n  }\n  for (long long i = fst; i <= lst; i++) {\n    func[i] = tmp_func[i];\n  }\n  for (int i = target_split + 1; i <= lst; i++) {\n    initial[func[i].second] += buck * (target_split - fst + 1);\n  }\n  solve(fst, target_split, l, dr, buck);\n  solve(target_split + 1, lst, dr, r, buck);\n}\nint main() {\n  long long n;\n  long long l;\n  scanf(\"%lld %lld\", &n, &l);\n  for (long long i = 1; i <= n; i++) {\n    func[i] = {0, i};\n    memo[{i, 0}] = 0;\n    memo[{i, 1e18}] = l;\n  }\n  solve(1, n, 0, 1e18, l / n);\n  cout << \"!\" << endl;\n  for (long long i = 1; i <= n; i++) {\n    cout << ans[i].first << \" \" << ans[i].second << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1234;\nconst long long MAX = (long long)1e18;\nmt19937 mrand(chrono::high_resolution_clock::now().time_since_epoch().count());\npair<long long, long long> intervals[N];\nlong long m, y;\nint n;\nlong long query(int x, long long y) {\n  cout << \"? \" << x + 1 << \" \" << y << endl;\n  long long p;\n  cin >> p;\n  return p;\n}\nlong long binary_search(int who, long long w, long long l, long long r) {\n  while (true) {\n    long long m = (l + r) >> 1;\n    long long v = query(who, m);\n    if (v > w) {\n      r = m - 1;\n    } else if (v < w) {\n      l = m + 1;\n    } else {\n      return m;\n    }\n  }\n}\npair<vector<int>, vector<int>> split_leftmost_k(vector<int> a, int o, int k,\n                                                long long l, long long r) {\n  vector<int> left, middle, right;\n  int p = a[mrand() % a.size()];\n  long long q = binary_search(p, m / n * o, l, r);\n  middle.push_back(p);\n  for (auto i : a) {\n    if (i != p) {\n      long long v = query(i, q);\n      if (v > m / n * o) {\n        left.push_back(i);\n      } else if (v < m / n * o) {\n        right.push_back(i);\n      } else {\n        middle.push_back(i);\n      }\n    }\n  }\n  while ((int)left.size() < k && !middle.empty()) {\n    left.push_back(middle.back());\n    middle.pop_back();\n  }\n  if ((int)left.size() == k) {\n    y = q;\n    for (auto x : middle) {\n      right.push_back(x);\n    }\n    return make_pair(left, right);\n  } else if ((int)left.size() < k) {\n    pair<vector<int>, vector<int>> down =\n        split_leftmost_k(right, o, k - left.size(), l, r);\n    for (auto x : left) {\n      down.first.push_back(x);\n    }\n    return down;\n  } else {\n    pair<vector<int>, vector<int>> down = split_leftmost_k(left, o, k, l, r);\n    for (auto x : right) {\n      down.second.push_back(x);\n    }\n    for (auto x : middle) {\n      down.second.push_back(x);\n    }\n    return down;\n  }\n}\nvoid solve(vector<int> a, int o, long long l, long long r) {\n  if ((int)a.size() == 1) {\n    intervals[a.back()] = make_pair(l, r);\n  } else {\n    int m = a.size() / 2;\n    pair<vector<int>, vector<int>> left_and_right =\n        split_leftmost_k(a, o + m, m, l, r);\n    long long y = ::y;\n    solve(left_and_right.first, o, l, y);\n    solve(left_and_right.second, o + m, y, r);\n  }\n}\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cin >> n >> m;\n  vector<int> a(n);\n  for (int i = 0; i < n; ++i) {\n    a[i] = i;\n  }\n  solve(a, 0, 0, MAX);\n  cout << \"!\" << endl;\n  for (int i = 0; i < n; ++i) {\n    cout << intervals[i].first << \" \" << intervals[i].second << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing pll = pair<ll, ll>;\nmt19937 rng(chrono::steady_clock().now().time_since_epoch().count());\nint rand(int a, int b) { return uniform_int_distribution<int>(a, b)(rng); }\nint que = 0;\nll ask(int func, ll x) {\n  que++;\n  if (que > 200000) exit(-1);\n  printf(\"? %d %lld\\n\", func, x);\n  fflush(stdout);\n  ll ans;\n  scanf(\"%lld\", &ans);\n  return ans;\n}\nll find_first(int func, ll val) {\n  ll pocz = 0, kon = 1e18, mid;\n  while (pocz < kon) {\n    mid = (pocz + kon) / 2;\n    if (ask(func, mid) >= val)\n      kon = mid;\n    else\n      pocz = mid + 1;\n  }\n  return pocz;\n}\nll find_last(int func, ll val) {\n  ll pocz = 0, kon = 1e18, mid;\n  while (pocz < kon) {\n    mid = (pocz + kon + 1) / 2;\n    if (ask(func, mid) <= val)\n      pocz = mid;\n    else\n      kon = mid - 1;\n  }\n  return pocz;\n}\nvector<int> find_k_smallest(vector<int> func, int k, ll val) {\n  assert(k >= 0 && k <= func.size());\n  if (k == 0 || func.empty()) return {};\n  if (k == (int)func.size()) return func;\n  swap(func[0], func[rand(0, func.size() - 1)]);\n  ll where0 = find_first(func[0], val);\n  vector<int> smaller, equal, larger;\n  for (int i = 0; i < func.size(); i++) {\n    ll hlp;\n    if ((hlp = ask(func[i], where0)) > val)\n      smaller.push_back(func[i]);\n    else if (hlp < val)\n      larger.push_back(func[i]);\n    else\n      equal.push_back(func[i]);\n  }\n  if (k <= smaller.size()) return find_k_smallest(smaller, k, val);\n  if (k <= smaller.size() + equal.size()) {\n    int ss = smaller.size();\n    for (int i = 0; i < k - ss; i++) smaller.push_back(equal[i]);\n    return smaller;\n  }\n  vector<int> hlp =\n      find_k_smallest(larger, k - smaller.size() - equal.size(), val);\n  for (int x : equal) smaller.push_back(x);\n  for (int x : hlp) smaller.push_back(x);\n  return smaller;\n}\npll res[1007];\nint n;\nll L;\nint counter[1007];\nint cnt;\nvoid solve(vector<int> func, ll l1, ll l2) {\n  if (func.empty()) return;\n  ll l = L / n;\n  assert(l2 >= l1);\n  assert((l2 - l1) % l == 0);\n  assert((l2 - l1) / l == func.size());\n  if (func.size() == 1) {\n    res[func[0]] = {0, find_first(func[0], l2)};\n    return;\n  }\n  int n = func.size();\n  int sn = n / 2;\n  ll lmid = l1 + (l2 - l1) / n * sn;\n  int qer = que;\n  vector<int> fst = find_k_smallest(func, sn, lmid);\n  solve(fst, l1, lmid);\n  cnt++;\n  for (int x : fst) counter[x] = cnt;\n  vector<int> sc;\n  for (int x : func)\n    if (counter[x] != cnt) sc.push_back(x);\n  solve(sc, lmid, l2);\n}\nvoid answer() {\n  printf(\"!\\n\");\n  vector<pll> hlp;\n  for (int i = 1; i <= n; i++) hlp.emplace_back(res[i].second, i);\n  sort(hlp.begin(), hlp.end());\n  for (int i = 1; i < n; i++)\n    res[hlp[i].second].first = res[hlp[i - 1].second].second;\n  for (int i = 1; i <= n; i++) {\n    printf(\"%lld %lld\\n\", res[i].first, res[i].second);\n  }\n}\nint main() {\n  scanf(\"%d%lld\", &n, &L);\n  vector<int> hlp;\n  for (int i = 1; i <= n; i++) hlp.push_back(i);\n  solve(hlp, 0, L);\n  answer();\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ninline char gc() { return getchar(); }\ntemplate <class T>\nint read(T &ans) {\n  ans = 0;\n  char ch = gc();\n  T f = 1;\n  while (!isdigit(ch)) {\n    if (ch == EOF) return -1;\n    if (ch == '-') f = -1;\n    ch = gc();\n  }\n  while (isdigit(ch)) ans = ans * 10 + ch - '0', ch = gc();\n  ans *= f;\n  return 1;\n}\ntemplate <class T1, class T2>\nint read(T1 &a, T2 &b) {\n  return read(a) != EOF && read(b) != EOF ? 2 : EOF;\n}\ntemplate <class T1, class T2, class T3>\nint read(T1 &a, T2 &b, T3 &c) {\n  return read(a, b) != EOF && read(c) != EOF ? 3 : EOF;\n}\nconst int Maxn = 1100;\nconst int inf = 0x3f3f3f3f;\nint a[Maxn], b[Maxn], c[Maxn], tims;\nlong long n, L, v;\npair<long long, long long> ans[Maxn];\nlong long query(long long a, long long b) {\n  printf(\"? %I64d %I64d\\n\", a, b);\n  fflush(stdout);\n  long long ans;\n  read(ans);\n  return ans;\n}\nlong long find(int x, long long k, long long l, long long r) {\n  long long mid = l + r >> 1;\n  while (1) {\n    long long y = query(x, mid);\n    if (y == k) return mid;\n    if (y < k)\n      l = mid + 1;\n    else\n      r = mid - 1;\n    mid = l + r >> 1;\n  }\n}\nvoid kth(int l, int r, int k, long long ql, long long qr) {\n  if (l == r) return;\n  int x = rand() % (r - l + 1) + l;\n  long long y = find(a[x], (L / n) * k, ql, qr);\n  int mid = k - l + 1;\n  int l1 = l - 1, l2 = r + 1, l3 = 0;\n  c[++l3] = a[x];\n  for (int i = l; i <= r; i++) {\n    if (i == x) continue;\n    long long sxz = query(a[i], y);\n    if (sxz < (L / n) * k) b[--l2] = a[i];\n    if (sxz == (L / n) * k) c[++l3] = a[i];\n    if (sxz > (L / n) * k) b[++l1] = a[i];\n  }\n  while (l1 < k && l3) b[++l1] = c[l3--];\n  if (l1 == k) {\n    v = y;\n    while (l3) b[--l2] = c[l3--];\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return;\n  }\n  if (l1 < k) {\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    kth(l1 + 1, r, k, ql, qr);\n    return;\n  }\n  while (l3) b[--l2] = c[l3--];\n  for (int i = l; i <= r; i++) a[i] = b[i];\n  kth(l, l1, k, ql, qr);\n}\nvoid solve(int l, int r, long long ql, long long qr) {\n  if (l == r) {\n    ans[a[l]] = make_pair(ql, qr);\n    return;\n  }\n  int mid = l + r >> 1;\n  kth(l, r, mid, ql, qr);\n  long long x = v;\n  solve(l, mid, ql, x);\n  solve(mid + 1, r, x, qr);\n}\nsigned main() {\n  read(n, L);\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 0, 1000000000000000000ll);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++)\n    printf(\"%I64d %I64d\\n\", ans[i].first, ans[i].second);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nvector<pair<long long, long long> > ans;\nlong long dist;\nlong long inter(int i, long long x) {\n  long long a = 0;\n  cout << \"? \" << i << \" \" << x << endl;\n  cin >> a;\n  return a;\n}\nvoid divide(long long l, long long r, int mi, int ma, vector<int>& todo) {\n  if (ma - mi == 1) {\n    ans[todo[0]] = make_pair(l, r);\n    return;\n  }\n  int next = (ma + mi) / 2;\n  long long low = l + 1;\n  long long high = r - 1;\n  vector<int> big_todo, small_todo;\n  vector<bool> poss(todo.size(), true);\n  while (true) {\n    int piv = rand() % todo.size();\n    while (!poss[piv]) piv = rand() % todo.size();\n    piv = todo[piv];\n    long long low_piv = low;\n    long long high_piv = high;\n    long long tr;\n    while (true) {\n      tr = (low_piv + high_piv) / 2;\n      long long ans_piv = inter(piv, tr);\n      if (ans_piv == next * dist)\n        break;\n      else if (ans_piv < next * dist)\n        low_piv = tr + 1;\n      else\n        high_piv = tr - 1;\n    }\n    int cnt_big = 0;\n    int cnt_small = 0;\n    vector<int> dir(todo.size());\n    for (int i = 0; i < todo.size(); i++) {\n      if (!poss[i]) continue;\n      long long a = inter(todo[i], tr);\n      if (a > next * dist) {\n        cnt_big++;\n        dir[i] = 1;\n      } else if (a < next * dist) {\n        cnt_small++;\n        dir[i] = -1;\n      }\n    }\n    if (cnt_big + big_todo.size() <= next - mi &&\n        cnt_small + small_todo.size() <= ma - next) {\n      for (int i = 0; i < todo.size(); i++) {\n        if (!poss[i]) continue;\n        if (dir[i] == 1) {\n          big_todo.push_back(todo[i]);\n          poss[i] = false;\n        } else if (dir[i] == -1) {\n          small_todo.push_back(todo[i]);\n          poss[i] = false;\n        }\n      }\n      for (int i = 0; i < todo.size(); i++) {\n        if (!poss[i]) continue;\n        if (big_todo.size() < next - mi) {\n          big_todo.push_back(todo[i]);\n          poss[i] = false;\n        } else {\n          small_todo.push_back(todo[i]);\n          poss[i] = false;\n        }\n      }\n      divide(l, tr, mi, next, big_todo);\n      divide(tr, r, next, ma, small_todo);\n      return;\n    }\n    if (cnt_big + big_todo.size() > next - mi) {\n      high = tr - 1;\n      for (int i = 0; i < todo.size(); i++) {\n        if (poss[i] && dir[i] <= 0) {\n          small_todo.push_back(todo[i]);\n          poss[i] = false;\n        }\n      }\n    } else if (cnt_small + small_todo.size() > ma - next) {\n      low = tr + 1;\n      for (int i = 0; i < todo.size(); i++) {\n        if (poss[i] && dir[i] >= 0) {\n          big_todo.push_back(todo[i]);\n          poss[i] = false;\n        }\n      }\n    }\n  }\n}\nint main() {\n  int n;\n  long long L;\n  cin >> n >> L;\n  ans.resize(n + 1);\n  dist = L / n;\n  vector<int> todo(n);\n  for (int i = 0; i < n; i++) todo[i] = i + 1;\n  divide(0, 1000000000000000000, 0, n, todo);\n  cout << \"! \" << endl;\n  for (int i = 1; i <= n; i++) {\n    cout << ans[i].first << \" \" << ans[i].second << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 271199;\nconst long long MAX = (long long)1e18;\nmt19937 mrand(chrono::high_resolution_clock::now().time_since_epoch().count());\npair<long long, long long> intervals[N];\nlong long m, y;\nint n;\nlong long query(int x, long long y) {\n  cout << \"? \" << x + 1 << \" \" << y << endl;\n  long long p;\n  cin >> p;\n  return p;\n}\nlong long binary_search(int who, long long w, long long l, long long r) {\n  while (true) {\n    long long m = (l + r) >> 1;\n    long long v = query(who, m);\n    if (v > w) {\n      r = m - 1;\n    } else if (v < w) {\n      l = m + 1;\n    } else {\n      return m;\n    }\n  }\n}\npair<vector<int>, vector<int>> split_leftmost_k(vector<int> a, int o, int k,\n                                                long long l, long long r) {\n  vector<int> left, middle, right;\n  int p = a[mrand() % a.size()];\n  long long q = binary_search(p, m / n * o, l, r);\n  middle.push_back(p);\n  for (auto i : a) {\n    if (i != p) {\n      long long v = query(i, q);\n      if (v > m / n * o) {\n        left.push_back(i);\n      } else if (v < m / n * o) {\n        right.push_back(i);\n      } else {\n        middle.push_back(i);\n      }\n    }\n  }\n  while ((int)left.size() < k && !middle.empty()) {\n    left.push_back(middle.back());\n    middle.pop_back();\n  }\n  if ((int)left.size() == k) {\n    y = q;\n    for (auto x : middle) {\n      right.push_back(x);\n    }\n    return make_pair(left, right);\n  } else if ((int)left.size() < k) {\n    pair<vector<int>, vector<int>> down =\n        split_leftmost_k(right, o, k - left.size(), l, r);\n    for (auto x : left) {\n      down.first.push_back(x);\n    }\n    return down;\n  } else {\n    pair<vector<int>, vector<int>> down = split_leftmost_k(left, o, k, l, r);\n    for (auto x : right) {\n      down.second.push_back(x);\n    }\n    for (auto x : middle) {\n      down.second.push_back(x);\n    }\n    return down;\n  }\n}\nvoid solve(vector<int> a, int o, long long l, long long r) {\n  if ((int)a.size() == 1) {\n    intervals[a.back()] = make_pair(l, r);\n  } else {\n    int m = a.size() / 2;\n    pair<vector<int>, vector<int>> left_and_right =\n        split_leftmost_k(a, o + m, m, l, r);\n    long long y = ::y;\n    solve(left_and_right.first, o, l, y);\n    solve(left_and_right.second, o + m, y, r);\n  }\n}\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cin >> n >> m;\n  vector<int> a(n);\n  for (int i = 0; i < n; ++i) {\n    a[i] = i;\n  }\n  solve(a, 0, 0, MAX);\n  cout << \"!\" << endl;\n  for (int i = 0; i < n; ++i) {\n    cout << intervals[i].first << \" \" << intervals[i].second << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long int L, al[1000], ar[1000];\nmap<long long int, long long int> M[1000], M2[1000];\nlong long int query(int i, long long int x) {\n  if (M[i].count(x)) return M[i][x];\n  long long int y;\n  cout << \"? \" << i + 1 << \" \" << x << endl;\n  cin >> y;\n  M[i][x] = y, M2[i][y] = x;\n  return y;\n}\nlong long int pos(int i, long long int y) {\n  auto it = M2[i].lower_bound(y);\n  if ((it != M2[i].end()) && (it->first == y)) return it->second;\n  long long int s = 0, e = 1e18;\n  if (it != M2[i].end()) e = it->second - 1;\n  if (it != M2[i].begin()) it--, s = it->second + 1;\n  while (s < e) {\n    long long int m = (s + e) / 2;\n    if (query(i, m) < y)\n      s = m + 1;\n    else\n      e = m;\n  }\n  return s;\n}\nint findAns(long long int s, long long int e, long long int l, long long int r,\n            vector<int> v) {\n  if (v.size() == 1) {\n    al[v[0]] = s, ar[v[0]] = e;\n    return 0;\n  }\n  int i;\n  vector<int> ll, mm = v, rr;\n  long long int m = (l / (L / n) + r / (L / n)) / 2 * (L / n), x;\n  while (1) {\n    swap(mm[0], mm[rand() % mm.size()]);\n    x = pos(mm[0], m);\n    vector<int> l2, m2, r2;\n    for (i = 0; i < mm.size(); i++) {\n      long long int y = query(mm[i], x);\n      if (y > m)\n        l2.push_back(mm[i]);\n      else if (y < m)\n        r2.push_back(mm[i]);\n      else\n        m2.push_back(mm[i]);\n    }\n    if ((ll.size() + l2.size() <= v.size() / 2) &&\n        (ll.size() + l2.size() + m2.size() >= v.size() / 2)) {\n      ll.insert(ll.end(), l2.begin(), l2.end());\n      rr.insert(rr.end(), r2.begin(), r2.end());\n      mm = m2;\n      break;\n    } else {\n      if (ll.size() + l2.size() < v.size() / 2)\n        ll.insert(ll.end(), l2.begin(), l2.end()), l2.clear();\n      else\n        rr.insert(rr.end(), r2.begin(), r2.end()), r2.clear();\n      mm.clear();\n      mm.insert(mm.end(), l2.begin(), l2.end());\n      mm.insert(mm.end(), m2.begin(), m2.end());\n      mm.insert(mm.end(), r2.begin(), r2.end());\n    }\n  }\n  while (!mm.empty()) {\n    if (ll.size() >= rr.size())\n      rr.push_back(mm.back());\n    else\n      ll.push_back(mm.back());\n    mm.pop_back();\n  }\n  findAns(s, x, l, m, ll), findAns(x, e, m, r, rr);\n  return 0;\n}\nint main() {\n  int i;\n  cin >> n >> L;\n  vector<int> v;\n  for (i = 0; i < n; i++) v.push_back(i);\n  findAns(0, 1e18, 0, L, v);\n  cout << \"!\" << endl;\n  for (i = 0; i < n; i++) cout << al[i] << \" \" << ar[i] << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long N = 1e3 + 2;\npair<long long, long long> ans[N];\nlong long n;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nlong long ask(long long idx, long long val, long long debt) {\n  cout << \"? \" << idx << ' ' << val << endl;\n  cin >> idx;\n  return idx - debt;\n}\nvoid solve(long long lef, long long rig, vector<long long> idx, long long val,\n           long long debt) {\n  if (!idx.size()) {\n    return;\n  }\n  if (idx.size() == 1) {\n    ans[idx[0]] = {lef, rig};\n    return;\n  }\n  long long sz = idx.size() / 2, newval = (val / idx.size()) * sz, i, j, k, l,\n            m, need = sz;\n  vector<long long> temp, lis1, lis2, lis3, idx1, idx2;\n  for (i = 0; i < idx.size(); i++) {\n    temp.push_back(idx[i]);\n  }\n  while (temp.size() > 1) {\n    i = temp[rng() % temp.size()];\n    j = lef;\n    k = rig;\n    while (j < k) {\n      m = (j + k) / 2;\n      l = ask(i, m, debt);\n      if (l >= newval) {\n        k = m;\n      } else {\n        j = m + 1;\n      }\n    }\n    lis1.clear();\n    lis2.clear();\n    lis3.clear();\n    for (i = 0; i < temp.size(); i++) {\n      j = ask(temp[i], k, debt);\n      if (j > newval) {\n        lis1.push_back(temp[i]);\n      } else {\n        if (j == newval) {\n          lis3.push_back(temp[i]);\n        } else {\n          lis2.push_back(temp[i]);\n        }\n      }\n    }\n    if (lis1.size() <= need && lis2.size() <= temp.size() - need) {\n      while (lis1.size() + 1 <= need) {\n        lis1.push_back(lis3.back());\n        lis3.pop_back();\n      }\n      while (lis3.size()) {\n        lis2.push_back(lis3.back());\n        lis3.pop_back();\n      }\n      while (lis1.size()) {\n        idx1.push_back(lis1.back());\n        lis1.pop_back();\n      }\n      while (lis2.size()) {\n        idx2.push_back(lis2.back());\n        lis2.pop_back();\n      }\n      break;\n    } else {\n      if (lis1.size() > need) {\n        temp = lis1;\n        while (lis2.size()) {\n          idx2.push_back(lis2.back());\n          lis2.pop_back();\n        }\n        while (lis3.size()) {\n          idx2.push_back(lis3.back());\n          lis3.pop_back();\n        }\n      } else {\n        need -= (lis1.size() + lis3.size());\n        temp = lis2;\n        while (lis1.size()) {\n          idx1.push_back(lis1.back());\n          lis1.pop_back();\n        }\n        while (lis3.size()) {\n          idx1.push_back(lis3.back());\n          lis3.pop_back();\n        }\n      }\n    }\n  }\n  solve(lef, k, idx1, newval, debt);\n  solve(k, rig, idx2, (val / idx.size()) * (idx.size() - sz), debt + newval);\n}\nsigned main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n  long long m, i, j, k, l;\n  cin >> n >> l;\n  vector<long long> idx;\n  for (i = 1; i <= n; i++) {\n    idx.push_back(i);\n  }\n  solve(0, 1e18, idx, l, 0);\n  cout << \"!\" << endl;\n  for (i = 1; i <= n; i++) {\n    cout << ans[i].first << ' ' << ans[i].second << '\\n';\n  }\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\nvoid maxtt(T& t1, T t2) {\n  t1 = max(t1, t2);\n}\ntemplate <typename T>\nvoid mintt(T& t1, T t2) {\n  t1 = min(t1, t2);\n}\nbool debug = 0;\nint n, m, k;\nint dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\nstring direc = \"URDL\";\nconst long long MOD2 = (long long)998244353 * (long long)998244353;\nlong long ln, lk, lm;\nvoid etp(bool f = 0) {\n  puts(f ? \"YES\" : \"NO\");\n  exit(0);\n}\nvoid addmod(int& x, int y, int mod = 998244353) {\n  assert(y >= 0);\n  x += y;\n  if (x >= mod) x -= mod;\n  assert(x >= 0 && x < mod);\n}\nvoid et(int x = -1) {\n  printf(\"%d\\n\", x);\n  exit(0);\n}\nlong long fastPow(long long x, long long y, int mod = 998244353) {\n  long long ans = 1;\n  while (y > 0) {\n    if (y & 1) ans = (x * ans) % mod;\n    x = x * x % mod;\n    y >>= 1;\n  }\n  return ans;\n}\nlong long gcd1(long long x, long long y) { return y ? gcd1(y, x % y) : x; }\nlong long rL;\nint a[1035], b[1035];\nlong long ansl[1035], ansr[1035];\nlong long rd(int id, long long x) {\n  printf(\"? %d %lld\\n\", id, x);\n  fflush(stdout);\n  scanf(\"%lld\", &lk);\n  return lk;\n}\nvoid cal(int l, int r, long long L, long long R) {\n  if (l == r) {\n    ansl[a[l]] = L;\n    ansr[a[l]] = R;\n    return;\n  }\n  int m1 = (l + r) / 2;\n  long long X = rL / n * m1, m2;\n  mt19937 ttrand((int)time(0));\n  for (int p = l, q = r;;) {\n    int i = uniform_int_distribution<int>(p, q)(ttrand);\n    long long lb = L, rb = R;\n    while (lb < rb) {\n      long long mb = (lb + rb) / 2;\n      if (rd(a[i], mb) < X)\n        lb = mb + 1;\n      else\n        rb = mb;\n    }\n    int l2 = p, r2 = q;\n    vector<int> e;\n    for (int j = p; j <= q; ++j) {\n      long long y = rd(a[j], lb);\n      if (y > X)\n        b[l2++] = a[j];\n      else if (y < X)\n        b[r2--] = a[j];\n      else\n        e.push_back(a[j]);\n    }\n    for (int(j) = 0; (j) < (int)(e.size()); (j)++) b[l2 + j] = e[j];\n    for (int z = p; z <= q; z++) a[z] = b[z];\n    if (l2 <= m1 && m1 <= r2) {\n      m2 = lb;\n      break;\n    }\n    if (l2 < m1)\n      p = l2 + 1;\n    else\n      q = l2 - 1;\n  }\n  cal(l, m1, L, m2);\n  cal(m1 + 1, r, m2, R);\n}\nvoid fmain(int tid) {\n  scanf(\"%d%lld\", &n, &rL);\n  for (int(i) = 1; (i) <= (int)(n); (i)++) a[i] = i;\n  cal(1, n, 0, 1e18);\n  puts(\"!\");\n  for (int(i) = 1; (i) <= (int)(n); (i)++)\n    printf(\"%lld %lld\\n\", ansl[i], ansr[i]);\n}\nint main() {\n  int t = 1;\n  for (int(i) = 1; (i) <= (int)(t); (i)++) {\n    fmain(i);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long L;\nlong long func(int i, long long x) {\n  printf(\"? %d %I64d\\n\", i, x);\n  fflush(stdout);\n  long long ans;\n  scanf(\"%I64d\", &ans);\n  return ans;\n}\nlong long _find(int i, long long val, long long lo, long long hi) {\n  while (hi - lo > 1) {\n    long long me = lo + hi >> 1;\n    long long cur = func(i, me);\n    if (cur == val)\n      return me;\n    else if (cur < val)\n      lo = me;\n    else\n      hi = me;\n  }\n  return lo;\n}\nint id[1010], jd[1010];\nlong long le[1010], ri[1010];\nint Rand(int up) { return (rand() << 15 | rand()) % up; }\nlong long _find(long long lo, long long hi, int le, int ri, int me,\n                long long tar) {\n  if (le == ri) return _find(id[le], tar, lo, hi);\n  int cur = Rand(ri - le + 1) + le;\n  assert(le <= cur && cur <= ri);\n  int tle = le, tri = ri;\n  long long pos = _find(id[cur], tar, lo, hi);\n  vector<int> tmp;\n  tmp.push_back(id[cur]);\n  for (int i = le; i <= ri; i++) {\n    if (i == cur) continue;\n    long long now = func(id[i], pos);\n    if (now > tar)\n      jd[tle++] = id[i];\n    else if (now < tar)\n      jd[tri--] = id[i];\n    else\n      tmp.push_back(id[i]);\n  }\n  for (int i = 0; i < tmp.size(); i++) jd[tle + i] = tmp[i];\n  for (int i = le; i <= ri; i++) id[i] = jd[i];\n  if (tle > me)\n    return _find(lo, pos + 1, le, tle - 1, me, tar);\n  else if (tri < me)\n    return _find(pos, hi, tle + 1, ri, me, tar);\n  else\n    return pos;\n}\nvoid solve(int l, int r, long long lo, long long hi) {\n  if (l == r) {\n    le[id[l]] = lo;\n    ri[id[l]] = hi - 1;\n    return;\n  }\n  int me = l + r >> 1;\n  long long pos = _find(lo, hi, l, r, me, L * me);\n  solve(l, me, lo, pos + 1);\n  solve(me + 1, r, pos, hi);\n}\nint main() {\n  cin >> n >> L;\n  L /= n;\n  long long up = 1e18;\n  for (int i = 1; i <= n; i++) id[i] = i;\n  solve(1, n, 0, up + 1);\n  puts(\"!\");\n  for (int i = 1; i <= n; i++) printf(\"%I64d %I64d\\n\", le[i], ri[i]);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1005;\nint a[N], b[N], c[N];\nll n, len, val;\npair<ll, ll> ans[N];\ninline ll query(ll a, ll b) {\n  cout << \"? \" << a << ' ' << b << endl;\n  ll ret;\n  cin >> ret;\n  return ret;\n}\nll find(int x, ll kk, ll l, ll r) {\n  ll mid = (l + r) >> 1;\n  while (1) {\n    ll y = query(x, mid);\n    if (y == kk) return mid;\n    if (y < kk)\n      l = mid + 1;\n    else\n      r = mid - 1;\n    mid = (l + r) >> 1;\n  }\n}\nvoid kth(int l, int r, int kk, ll ql, ll qr) {\n  if (l == r) exit(1);\n  int x = rand() % (r - l + 1) + l;\n  ll y = find(a[x], (len / n) * kk, ql, qr);\n  int l1 = l - 1, l2 = r + 1, l3 = 0;\n  c[++l3] = a[x];\n  for (int i = l; i <= r; i++) {\n    if (i == x) continue;\n    ll tt = query(a[i], y);\n    if (tt < (len / n) * kk) b[--l2] = a[i];\n    if (tt == (len / n) * kk) c[++l3] = a[i];\n    if (tt > (len / n) * kk) b[++l1] = a[i];\n  }\n  while (l1 < kk && l3) b[++l1] = c[l3--];\n  if (l1 == kk) {\n    val = y;\n    while (l3) b[--l2] = c[l3--];\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return;\n  }\n  if (l1 < kk) {\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return kth(l1 + 1, r, kk, ql, qr);\n  }\n  while (l3) b[--l2] = c[l3--];\n  for (int i = l; i <= r; i++) a[i] = b[i];\n  return kth(l, l1, kk, ql, qr);\n}\nvoid solve(int l, int r, ll ql, ll qr) {\n  if (l == r) {\n    ans[a[l]] = {ql, qr};\n    return;\n  }\n  int mid = (l + r) >> 1;\n  kth(l, r, mid, ql, qr);\n  ll x = val;\n  solve(l, mid, ql, x);\n  solve(mid + 1, r, x, qr);\n}\nint main() {\n  ios::sync_with_stdio(false);\n  srand(time(0));\n  cin >> n >> len;\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 0, 1000000000000000000);\n  cout << \"!\\n\";\n  for (int i = 1; i <= n; i++)\n    cout << ans[i].first << ' ' << ans[i].second << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nint n;\nlong long L;\nlong long l[1111], r[1111], f[1111];\nbool cmp(int a, int b) { return f[a] == f[b] ? a < b : f[a] > f[b]; }\nlong long qtl = 1000000000000000000ll;\nlong long Query(int a, long long b) {\n  printf(\"?\\n%d %lld\\n\", a, b);\n  fflush(stdout);\n  long long f;\n  scanf(\"%lld\", &f);\n  return f;\n}\nlong long getX(int id, long long f, long long l, long long r) {\n  int QAQ = 0;\n  for (; l < r;) {\n    ++QAQ;\n    if (QAQ > 111) exit(25);\n    long long mid = (l + r) >> 1;\n    if (Query(id, mid) < f)\n      l = mid + 1;\n    else\n      r = mid;\n  }\n  return l;\n}\nvoid solve(vector<int> x, long long l, long long r, int fl, int fr,\n           int dep = 0) {\n  if (dep > 233) exit(233);\n  if (fr - fl != x.size()) exit(66);\n  if (fr - fl == 0) return;\n  if (fr - fl == 1) {\n    ::l[x[0]] = l;\n    ::r[x[0]] = r;\n    return;\n  }\n  int fmid = (fl + fr) >> 1;\n  int reql = fmid - fl;\n  int reqr = fr - fmid;\n  long long y;\n  vector<int> vl, vr, cvl, cvr, vmid;\n  int QAQ = 0;\n  for (; x.size();) {\n    int key = x[rand() % x.size()];\n    y = getX(key, fmid * L, l, r);\n    for (auto val : x) {\n      long long qwq = Query(val, y);\n      if (qwq > fmid * L) cvl.push_back(val);\n      if (qwq == fmid * L) vmid.push_back(val);\n      if (qwq < fmid * L) cvr.push_back(val);\n    }\n    if (cvl.size() + vl.size() > reql) {\n      x = cvl;\n      cvl.clear();\n      for (auto val : vmid) vr.push_back(val);\n      vmid.clear();\n      for (auto val : cvr) vr.push_back(val);\n      cvr.clear();\n    } else if (cvr.size() + vr.size() > reqr) {\n      x = cvr;\n      cvr.clear();\n      for (auto val : vmid) vl.push_back(val);\n      vmid.clear();\n      for (auto val : cvl) vl.push_back(val);\n      cvl.clear();\n    } else {\n      for (auto val : cvl) vl.push_back(val);\n      for (auto val : cvr) vr.push_back(val);\n      int i = 0;\n      for (; vl.size() < reql; ++i) vl.push_back(vmid[i]);\n      for (; vr.size() < reqr; ++i) vr.push_back(vmid[i]);\n      x.clear();\n    }\n    ++QAQ;\n    if (QAQ > 111) exit(45);\n  }\n  solve(vl, l, y, fl, fmid, dep + 1);\n  solve(vr, y, r, fmid, fr, dep + 1);\n}\nint main() {\n  int seed = time(0) + (new char - (char*)NULL);\n  srand(seed);\n  scanf(\"%d%lld\", &n, &L);\n  L /= n;\n  vector<int> qwq;\n  for (int i = 1; i <= n; ++i) qwq.push_back(i);\n  solve(qwq, 0, qtl, 0, n);\n  puts(\"!\");\n  for (int i = 1; i <= n; ++i) printf(\"%lld %lld\\n\", l[i], r[i]);\n  fflush(stdout);\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T>\nvoid splitstr(const string &s, vector<T> &out) {\n  istringstream in(s);\n  out.clear();\n  copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\ntemplate <class T>\nT gcd(T a, T b) {\n  return b ? gcd(b, a % b) : a;\n}\nstatic void redirect(int argc, const char **argv) {\n  ios::sync_with_stdio(false);\n  cin.tie(NULL);\n  if (argc > 1) {\n    static filebuf f;\n    f.open(argv[1], ios::in);\n    cin.rdbuf(&f);\n    if (!cin) {\n      cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n      exit(1);\n    }\n  }\n  if (argc > 2) {\n    static filebuf f;\n    f.open(argv[2], ios::out | ios::trunc);\n    cout.rdbuf(&f);\n    if (!cout) {\n      cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n    }\n  }\n  cin.exceptions(ios::failbit);\n}\nstatic map<pair<long long, long long>, long long> cache;\nstatic long long query(long long idx, long long pos) {\n  pair<long long, long long> key(idx, pos);\n  if (cache.count(key)) return cache[key];\n  cout << \"? \" << idx + 1 << ' ' << pos << endl;\n  long long ans;\n  cin >> ans;\n  cache[key] = ans;\n  return ans;\n}\nstatic long long rev(int idx, long long trg, long long A, long long B) {\n  while (B - A > 1) {\n    long long M = (A + B) / 2;\n    if (query(idx, M) >= trg)\n      B = M;\n    else\n      A = M;\n  }\n  return B;\n}\nstatic mt19937 engine;\nstatic constexpr long long BIG = 1000000000000000000LL;\nstatic void recurse(vector<int> &funcs,\n                    vector<pair<long long, long long> > &ranges, long long lo,\n                    long long hi, long long P, long long Q) {\n  if (((long long)(funcs).size()) == 1) {\n    ranges[funcs[0]] = pair<long long, long long>(lo, hi);\n    return;\n  }\n  long long N = ((long long)(funcs).size());\n  long long N0 = N / 2;\n  long long trg = P + (Q - P) / N * N0;\n  int A = 0;\n  int B = N;\n  long long pos;\n  while (true) {\n    int M = uniform_int_distribution<int>(A, B - 1)(engine);\n    swap(funcs[M], funcs[B - 1]);\n    pos = rev(funcs[B - 1], trg, lo, hi);\n    int g2 = partition(funcs.begin() + A, funcs.begin() + (B - 1),\n                       [&](int i) { return query(i, pos) >= trg; }) -\n             funcs.begin();\n    swap(funcs[B - 1], funcs[g2]);\n    int g1 = g2;\n    while (g1 > A && query(funcs[g1 - 1], pos - 1) == trg - 1) {\n      g1--;\n    }\n    if (g2 < N0)\n      A = g2 + 1;\n    else if (g1 > N0)\n      B = g1;\n    else\n      break;\n  }\n  vector<int> f0(funcs.begin(), funcs.begin() + N0);\n  vector<int> f1(funcs.begin() + N0, funcs.end());\n  recurse(f0, ranges, lo, pos, P, trg);\n  recurse(f1, ranges, pos, hi, trg, Q);\n}\nint main(int argc, const char **argv) {\n  redirect(argc, argv);\n  int N;\n  long long L;\n  cin >> N >> L;\n  vector<int> funcs;\n  vector<pair<long long, long long> > ranges(N);\n  for (int i = 0; i < N; i++) funcs.push_back(i);\n  recurse(funcs, ranges, 0, BIG, 0, L);\n  cout << \"!\" << endl;\n  for (int i = 0; i < N; i++) {\n    assert(ranges[i].first < ranges[i].second);\n    cout << ranges[i].first << ' ' << ranges[i].second << endl;\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 1005;\nint a[N], b[N], c[N];\nll n, len, val;\npair<ll, ll> ans[N];\ninline ll query(ll a, ll b) {\n  cout << \"? \" << a << ' ' << b << endl;\n  ll ret;\n  cin >> ret;\n  return ret;\n}\nll find(int x, ll kk, ll l, ll r) {\n  ll mid = (l + r) >> 1;\n  while (1) {\n    ll y = query(x, mid);\n    if (y == kk) return mid;\n    if (y < kk)\n      l = mid + 1;\n    else\n      r = mid - 1;\n    mid = (l + r) >> 1;\n  }\n}\nll kth(int l, int r, int kk, ll ql, ll qr) {\n  if (l == r) exit(1);\n  int x = rand() % (r - l + 1) + l;\n  ll y = find(a[x], (len / n) * kk, ql, qr);\n  int l1 = l - 1, l2 = r + 1, l3 = 0;\n  c[++l3] = a[x];\n  for (int i = l; i <= r; i++) {\n    if (i == x) continue;\n    ll tt = query(a[i], y);\n    if (tt < (len / n) * kk) b[--l2] = a[i];\n    if (tt == (len / n) * kk) c[++l3] = a[i];\n    if (tt > (len / n) * kk) b[++l1] = a[i];\n  }\n  while (l1 < kk && l3) b[++l1] = c[l3--];\n  if (l1 == kk) {\n    val = y;\n    while (l3) b[--l2] = c[l3--];\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return val;\n  }\n  if (l1 < kk) {\n    for (int i = l; i <= r; i++) a[i] = b[i];\n    return kth(l1 + 1, r, kk, ql, qr);\n  }\n  while (l3) b[--l2] = c[l3--];\n  for (int i = l; i <= r; i++) a[i] = b[i];\n  return kth(l, l1, kk, ql, qr);\n}\nvoid solve(int l, int r, ll ql, ll qr) {\n  if (l == r) {\n    ans[a[l]] = {ql, qr};\n    return;\n  }\n  int mid = (l + r) >> 1;\n  ll x = kth(l, r, mid, ql, qr);\n  solve(l, mid, ql, x);\n  solve(mid + 1, r, x, qr);\n}\nint main() {\n  ios::sync_with_stdio(false);\n  srand(time(0));\n  cin >> n >> len;\n  for (int i = 1; i <= n; i++) a[i] = i;\n  solve(1, n, 0, 1000000000000000000);\n  cout << \"!\\n\";\n  for (int i = 1; i <= n; i++)\n    cout << ans[i].first << ' ' << ans[i].second << endl;\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing ll = long long;\nconst int N = 1010;\nconst ll MAX = (ll)1e18;\nint n;\nint rand(int n) { return rand() % n; }\nll answer(int id, ll pos) { return std::min(pos / (id + 1), 5ll); }\nll ask(int id, ll pos) {\n  assert(pos >= 0 && pos <= MAX);\n  assert(1 <= id + 1 && id + 1 <= n);\n  printf(\"? %d %lld\\n\", id + 1, pos);\n  fflush(stdout);\n  ll ret;\n  scanf(\"%lld\", &ret);\n  return ret;\n}\nll left[N], right[N];\nvoid solve(std::vector<int> vec, ll l, ll r, ll l_value, ll r_value) {\n  if ((int)vec.size() == 1) {\n    left[vec[0]] = l;\n    right[vec[0]] = r;\n    return;\n  }\n  ll diff = (r_value - l_value) / vec.size();\n  ll target;\n  if (vec.size() % 2 == 0) {\n    target = (l_value + r_value) / 2;\n  } else {\n    target = (l_value + r_value - diff) / 2;\n  }\n  int target_sit = ((int)vec.size() + 1) / 2;\n  std::vector<int> small, big, possible = vec;\n  ll cur_l = l, cur_r = r;\n  while (true) {\n    int pos = possible[rand(possible.size())];\n    std::vector<std::pair<ll, int>> value;\n    ll l1 = cur_l, r1 = cur_r;\n    while (l1 < r1) {\n      ll mid = (l1 + r1) / 2;\n      if (ask(pos, mid) >= target) {\n        r1 = mid;\n      } else {\n        l1 = mid + 1;\n      }\n    }\n    for (auto u : possible) {\n      value.emplace_back(ask(u, l1), u);\n    }\n    std::sort(value.begin(), value.end());\n    int sit = target_sit - (int)small.size();\n    if (value[sit].first < target) {\n      std::vector<int> npossible;\n      for (auto p : value) {\n        if (p.first >= target) {\n          big.push_back(p.second);\n        } else {\n          npossible.push_back(p.second);\n        }\n      }\n      possible = npossible;\n      cur_l = l1 + 1;\n    } else if (value[sit].first > target) {\n      std::vector<int> npossible;\n      for (auto p : value) {\n        if (p.first <= target) {\n          small.push_back(p.second);\n        } else {\n          npossible.push_back(p.second);\n        }\n      }\n      possible = npossible;\n      cur_r = l1 - 1;\n    } else {\n      for (int i = 0; i < sit; ++i) {\n        small.push_back(value[i].second);\n      }\n      for (int i = sit; i < (int)value.size(); ++i) {\n        big.push_back(value[i].second);\n      }\n      solve(small, l1, r, target, r_value);\n      solve(big, l, l1, l_value, target);\n      break;\n    }\n  }\n}\nint main() {\n  srand((unsigned)time(nullptr));\n  ll l;\n  scanf(\"%d%lld\", &n, &l);\n  std::vector<int> vec(n);\n  for (int i = 0; i < n; ++i) {\n    vec[i] = i;\n  }\n  solve(vec, 0, MAX, 0, l);\n  puts(\"!\");\n  for (int i = 0; i < n; ++i) {\n    printf(\"%lld %lld\\n\", left[i], right[i]);\n  }\n  return 0;\n}\n"
        },
        {
            "language": 2,
            "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int NMAX = 1010;\nmap<pair<int, long long>, long long> poz;\nlong long ans[2][NMAX];\nmt19937 rnd(time(0));\nlong long L;\nlong long ask(int id, long long p) {\n  if (poz.find({id, p}) != poz.end()) return poz[{id, p}];\n  cout << \"? \" << id << ' ' << p << endl;\n  cin >> poz[{id, p}];\n  return poz[{id, p}];\n}\nlong long interval(int x, long long a, long long b) {\n  return ask(x, b) - ask(x, a);\n}\nlong long find(int id, long long st, long long dr, long long S) {\n  long long ans = st;\n  for (long long i = (1LL << 60); i; i /= 2)\n    if (ans + i <= dr && interval(id, st, ans + i) <= S) ans += i;\n  assert(interval(id, st, ans) == S);\n  return ans;\n}\nvoid kthelement(vector<int>& v, long long st, long long dr, long long S,\n                int from, int to, int k) {\n  if (from == to) return;\n  shuffle(v.begin() + from, v.begin() + to + 1, rnd);\n  int id = v[from];\n  long long loc = find(id, st, dr, S);\n  int last = from;\n  for (int i = from + 1; i <= to; i++) {\n    if (make_pair(interval(v[i], st, loc), i) > make_pair(S, id)) {\n      swap(v[last], v[last + 1]);\n      if (last != i - 1) swap(v[last], v[i]);\n      last++;\n    }\n  }\n  assert(v[last] == id);\n  if (k < last)\n    kthelement(v, st, dr, S, from, last - 1, k);\n  else if (k > last)\n    kthelement(v, st, dr, S, last + 1, to, k);\n}\nvoid solve(vector<int> v, long long st, long long dr) {\n  while (st >= dr)\n    ;\n  int n = v.size();\n  int m = n / 2;\n  if (n == 1) {\n    ans[0][v[0]] = st, ans[1][v[0]] = dr;\n    return;\n  }\n  long long S = m * L;\n  kthelement(v, st, dr, S, 0, v.size() - 1, m - 1);\n  vector<int> left, right;\n  for (int i = 0; i < v.size(); i++) {\n    if (i < m)\n      left.push_back(v[i]);\n    else\n      right.push_back(v[i]);\n  }\n  long long mij = find(left.back(), st, dr, S);\n  assert(interval(left.back(), st, mij) == S);\n  solve(left, st, mij);\n  solve(right, mij, dr);\n}\nint main() {\n  int n;\n  cin >> n >> L;\n  L /= n;\n  vector<int> v(n);\n  iota(v.begin(), v.end(), 1);\n  long long MAX = 1000 * 1000 * 1000;\n  MAX = MAX * MAX;\n  solve(v, 0, MAX);\n  cout << \"!\\n\";\n  for (int i = 1; i <= n; i++) cout << ans[0][i] << ' ' << ans[1][i] << '\\n';\n  cout.flush();\n  return 0;\n}\n"
        }
    ]
}