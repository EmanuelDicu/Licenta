{
    "name": "480_B. Long Jumps",
    "source": "CODEFORCES",
    "description": "Valery is a PE teacher at a school in Berland. Soon the students are going to take a test in long jumps, and Valery has lost his favorite ruler! \n\nHowever, there is no reason for disappointment, as Valery has found another ruler, its length is l centimeters. The ruler already has n marks, with which he can make measurements. We assume that the marks are numbered from 1 to n in the order they appear from the beginning of the ruler to its end. The first point coincides with the beginning of the ruler and represents the origin. The last mark coincides with the end of the ruler, at distance l from the origin. This ruler can be repesented by an increasing sequence a1, a2, ..., an, where ai denotes the distance of the i-th mark from the origin (a1 = 0, an = l).\n\nValery believes that with a ruler he can measure the distance of d centimeters, if there is a pair of integers i and j (1 \u2264 i \u2264 j \u2264 n), such that the distance between the i-th and the j-th mark is exactly equal to d (in other words, aj - ai = d). \n\nUnder the rules, the girls should be able to jump at least x centimeters, and the boys should be able to jump at least y (x < y) centimeters. To test the children's abilities, Valery needs a ruler to measure each of the distances x and y. \n\nYour task is to determine what is the minimum number of additional marks you need to add on the ruler so that they can be used to measure the distances x and y. Valery can add the marks at any integer non-negative distance from the origin not exceeding the length of the ruler.\n\nInput\n\nThe first line contains four positive space-separated integers n, l, x, y (2 \u2264 n \u2264 105, 2 \u2264 l \u2264 109, 1 \u2264 x < y \u2264 l) \u2014 the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (0 = a1 < a2 < ... < an = l), where ai shows the distance from the i-th mark to the origin.\n\nOutput\n\nIn the first line print a single non-negative integer v \u2014 the minimum number of marks that you need to add on the ruler.\n\nIn the second line print v space-separated integers p1, p2, ..., pv (0 \u2264 pi \u2264 l). Number pi means that the i-th mark should be at the distance of pi centimeters from the origin. Print the marks in any order. If there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n3 250 185 230\n0 185 250\n\n\nOutput\n\n1\n230\n\n\nInput\n\n4 250 185 230\n0 20 185 250\n\n\nOutput\n\n0\n\n\nInput\n\n2 300 185 230\n0 300\n\n\nOutput\n\n2\n185 230\n\nNote\n\nIn the first sample it is impossible to initially measure the distance of 230 centimeters. For that it is enough to add a 20 centimeter mark or a 230 centimeter mark.\n\nIn the second sample you already can use the ruler to measure the distances of 185 and 230 centimeters, so you don't have to add new marks.\n\nIn the third sample the ruler only contains the initial and the final marks. We will need to add two marks to be able to test the children's skills.",
    "difficulty": "B",
    "tags": [
        "binary search",
        "greedy",
        "implementation"
    ],
    "rating": 1700,
    "public_test": [
        {
            "input": "3 250 185 230\n0 185 250\n",
            "output": "1\n230\n"
        },
        {
            "input": "2 300 185 230\n0 300\n",
            "output": "2\n185 230\n"
        },
        {
            "input": "4 250 185 230\n0 20 185 250\n",
            "output": "0\n"
        }
    ],
    "generated_test": [
        {
            "input": "4 100 90 91\n0 7 8 110\n",
            "output": "1\n98\n"
        },
        {
            "input": "3 10 1 5\n0 3 10\n",
            "output": "2\n1 5\n"
        },
        {
            "input": "3 10 7 8\n0 10 10\n",
            "output": "2\n7 8\n"
        },
        {
            "input": "5 550 175 400\n0 151 251 450 550\n",
            "output": "2\n175 400\n"
        },
        {
            "input": "112 1867 1261 1606\n0 7 17 43 67 70 87 112 129 141 148 162 179 180 189 202 211 220 231 247 250 277 308 311 327 376 400 406 409 417 418 444 480 512 514 515 518 547 572 575 578 587 612 617 654 684 701 742 757 761 788 821 825 835 841 843 850 858 869 872 881 936 939 969 970 971 997 1026 1040 817 1068 1070 1073 1076 1095 1110 1115 1154 1166 1178 1179 1203 1204 1225 1237 1241 1246 1275 1302 1305 1311 1312 1315 1338 1340 1419 1428 1560 1561 1576 1591 1594 1618 1643 1658 1660 1664 1689 1803 1822 1835 1867\n",
            "output": "1\n1808\n"
        },
        {
            "input": "4 100 80 81\n0 0 3 100\n",
            "output": "2\n80 81\n"
        },
        {
            "input": "4 1001 10 20\n0 500 530 1000\n",
            "output": "1\n510\n"
        },
        {
            "input": "6 504 400 500\n0 3 5 201 105 504\n",
            "output": "2\n400 500\n"
        },
        {
            "input": "6 12 7 10\n0 0 3 4 6 12\n",
            "output": "1\n10\n"
        },
        {
            "input": "16 115 62 112\n0 5 24 32 38 43 44 57 62 72 74 92 108 105 113 115\n",
            "output": "1\n112\n"
        },
        {
            "input": "18 187 27 157\n0 17 18 31 36 37 40 53 73 121 96 107 119 150 167 181 184 187\n",
            "output": "1\n27\n"
        },
        {
            "input": "4 300 4 5\n-1 6 7 300\n",
            "output": "1\n2\n"
        },
        {
            "input": "3 2 1 2\n0 0 2\n",
            "output": "1\n1\n"
        },
        {
            "input": "2 1000000000 100000000 247211576\n0 1000000000\n",
            "output": "2\n100000000 247211576\n"
        },
        {
            "input": "3 10 2 6\n0 9 10\n",
            "output": "2\n2 6\n"
        },
        {
            "input": "4 100 10 11\n0 4 10 100\n",
            "output": "1\n11\n"
        },
        {
            "input": "3 450 100 400\n0 75 450\n",
            "output": "2\n100 400\n"
        },
        {
            "input": "4 20 6 7\n0 1 12 20\n",
            "output": "1\n7\n"
        },
        {
            "input": "4 600 100 400\n0 50 350 733\n",
            "output": "1\n450\n"
        },
        {
            "input": "5 200000 1 100029\n0 100000 100009 100010 155981\n",
            "output": "1\n100029\n"
        },
        {
            "input": "19 180 117 148\n0 1 19 20 21 28 57 65 68 70 78 19 100 116 154 157 173 179 180\n",
            "output": "2\n117 148\n"
        },
        {
            "input": "4 300 120 189\n0 110 140 300\n",
            "output": "2\n120 189\n"
        },
        {
            "input": "5 401 300 400\n0 000 250 350 401\n",
            "output": "2\n300 400\n"
        },
        {
            "input": "3 8 1 3\n0 7 8\n",
            "output": "1\n3\n"
        },
        {
            "input": "5 1000 89 778\n0 1 500 501 1000\n",
            "output": "2\n89 778\n"
        },
        {
            "input": "3 11 3 5\n-1 9 11\n",
            "output": "1\n6\n"
        },
        {
            "input": "4 1000 900 901\n0 950 951 1001\n",
            "output": "1\n50\n"
        },
        {
            "input": "4 250 185 114\n0 20 185 250\n",
            "output": "1\n114\n"
        },
        {
            "input": "4 100 77 91\n0 7 8 110\n",
            "output": "2\n77 91\n"
        },
        {
            "input": "3 10 2 5\n0 3 10\n",
            "output": "1\n5\n"
        },
        {
            "input": "3 2 0 2\n0 0 2\n",
            "output": "0\n"
        },
        {
            "input": "4 600 100 453\n0 50 350 733\n",
            "output": "2\n100 453\n"
        },
        {
            "input": "4 300 120 290\n0 110 140 300\n",
            "output": "2\n120 290\n"
        },
        {
            "input": "3 8 2 3\n0 7 13\n",
            "output": "2\n2 3\n"
        },
        {
            "input": "5 1000 126 778\n0 1 500 501 1000\n",
            "output": "2\n126 778\n"
        },
        {
            "input": "2 100 80 152\n0 0 3 100\n",
            "output": "2\n80 152\n"
        },
        {
            "input": "16 115 22 112\n0 5 24 11 38 43 44 57 62 72 74 92 108 105 113 115\n",
            "output": "2\n22 112\n"
        },
        {
            "input": "18 187 27 120\n0 17 18 31 36 37 40 53 73 121 96 107 97 150 167 181 184 187\n",
            "output": "1\n64\n"
        },
        {
            "input": "1 10 7 8\n0 5 6 10\n",
            "output": "2\n7 8\n"
        },
        {
            "input": "6 35 29 30\n0 10 15 31 32 35\n",
            "output": "1\n2\n"
        },
        {
            "input": "3 13 8 10\n0 2 21\n",
            "output": "1\n10\n"
        },
        {
            "input": "3 10 7 8\n0 4 10\n",
            "output": "2\n7 8\n"
        },
        {
            "input": "5 550 175 400\n0 200 251 450 550\n",
            "output": "2\n175 400\n"
        },
        {
            "input": "112 1867 1261 1606\n0 7 17 43 67 70 87 112 129 141 148 162 179 180 189 202 211 220 231 247 250 277 308 311 327 376 400 406 409 417 418 444 480 512 514 515 518 547 572 575 578 587 612 617 654 684 701 742 757 761 788 821 825 835 841 843 850 858 869 872 881 936 939 969 970 971 997 1026 1040 817 1068 1070 1073 1076 1095 1110 1115 1154 1166 1178 1179 1203 1204 1225 1012 1241 1246 1275 1302 1305 1311 1312 1315 1338 1340 1419 1428 1560 1561 1576 1591 1594 1618 1643 1658 1660 1664 1689 1803 1822 1835 1867\n",
            "output": "1\n1808\n"
        },
        {
            "input": "2 100 80 81\n0 0 3 100\n",
            "output": "2\n80 81\n"
        },
        {
            "input": "16 115 62 112\n0 5 24 11 38 43 44 57 62 72 74 92 108 105 113 115\n",
            "output": "1\n112\n"
        },
        {
            "input": "18 187 27 157\n0 17 18 31 36 37 40 53 73 121 96 107 97 150 167 181 184 187\n",
            "output": "1\n27\n"
        },
        {
            "input": "1 1000000000 100000000 247211576\n0 1000000000\n",
            "output": "2\n100000000 247211576\n"
        },
        {
            "input": "3 10 2 6\n-1 9 10\n",
            "output": "2\n2 6\n"
        },
        {
            "input": "4 100 10 11\n0 4 10 110\n",
            "output": "1\n11\n"
        },
        {
            "input": "5 150074 1 100029\n0 100000 100009 100010 155981\n",
            "output": "1\n100029\n"
        },
        {
            "input": "19 180 117 148\n0 2 19 20 21 28 57 65 68 70 78 19 100 116 154 157 173 179 180\n",
            "output": "2\n117 148\n"
        },
        {
            "input": "5 401 300 400\n0 110 250 350 401\n",
            "output": "2\n300 400\n"
        },
        {
            "input": "3 10 2 8\n0 3 10\n",
            "output": "1\n2\n"
        },
        {
            "input": "5 550 175 400\n0 10 251 450 550\n",
            "output": "2\n175 400\n"
        },
        {
            "input": "3 2 0 1\n0 0 2\n",
            "output": "1\n1\n"
        },
        {
            "input": "1 1000000010 100000000 247211576\n0 1000000000\n",
            "output": "2\n100000000 247211576\n"
        },
        {
            "input": "4 100 10 11\n0 6 10 110\n",
            "output": "1\n11\n"
        },
        {
            "input": "4 600 100 453\n1 50 350 733\n",
            "output": "2\n100 453\n"
        }
    ]
}