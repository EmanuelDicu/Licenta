{
    "name": "1109_F. Sasha and Algorithm of Silence's Sounds",
    "source": "CODEFORCES",
    "description": "One fine day Sasha went to the park for a walk. In the park, he saw that his favorite bench is occupied, and he had to sit down on the neighboring one. He sat down and began to listen to the silence. Suddenly, he got a question: what if in different parts of the park, the silence sounds in different ways? So it was. Let's divide the park into 1 \u00d7 1 meter squares and call them cells, and numerate rows from 1 to n from up to down, and columns from 1 to m from left to right. And now, every cell can be described with a pair of two integers (x, y), where x \u2014 the number of the row, and y \u2014 the number of the column. Sasha knows that the level of silence in the cell (i, j) equals to f_{i,j}, and all f_{i,j} form a permutation of numbers from 1 to n \u22c5 m. Sasha decided to count, how many are there pleasant segments of silence?\n\nLet's take some segment [l \u2026 r]. Denote S as the set of cells (i, j) that l \u2264 f_{i,j} \u2264 r. Then, the segment of silence [l \u2026 r] is pleasant if there is only one simple path between every pair of cells from S (path can't contain cells, which are not in S). In other words, set S should look like a tree on a plain. Sasha has done this task pretty quickly, and called the algorithm \u2014 \"algorithm of silence's sounds\".\n\nTime passed, and the only thing left from the algorithm is a legend. To prove the truthfulness of this story, you have to help Sasha and to find the number of different pleasant segments of silence. Two segments [l_1 \u2026 r_1], [l_2 \u2026 r_2] are different, if l_1 \u2260 l_2 or r_1 \u2260 r_2 or both at the same time.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 1000, 1 \u2264 n \u22c5 m \u2264 2 \u22c5 10^5) \u2014 the size of the park.\n\nEach from next n lines contains m integers f_{i,j} (1 \u2264 f_{i,j} \u2264 n \u22c5 m) \u2014 the level of silence in the cell with number (i, j).\n\nIt is guaranteed, that all f_{i,j} are different.\n\nOutput\n\nPrint one integer \u2014 the number of pleasant segments of silence.\n\nExamples\n\nInput\n\n1 5\n1 2 3 4 5\n\n\nOutput\n\n15\n\nInput\n\n2 3\n1 2 3\n4 5 6\n\n\nOutput\n\n15\n\nInput\n\n4 4\n4 3 2 16\n1 13 14 15\n5 7 8 12\n6 11 9 10\n\n\nOutput\n\n50\n\nNote\n\nIn the first example, all segments of silence are pleasant.\n\nIn the second example, pleasant segments of silence are the following:\n\n<image>",
    "difficulty": "F",
    "tags": [
        "data structures",
        "trees"
    ],
    "rating": 3200,
    "public_test": [
        {
            "input": "4 4\n4 3 2 16\n1 13 14 15\n5 7 8 12\n6 11 9 10\n",
            "output": "50\n"
        },
        {
            "input": "2 3\n1 2 3\n4 5 6\n",
            "output": "15\n"
        },
        {
            "input": "1 5\n1 2 3 4 5\n",
            "output": "15\n"
        }
    ],
    "generated_test": [
        {
            "input": "1 5\n2 1 3 4 5\n",
            "output": "12\n"
        },
        {
            "input": "1 1\n1 2 3 4 5\n",
            "output": "1\n"
        },
        {
            "input": "1 2\n1 2 3 4 2\n",
            "output": "3\n"
        },
        {
            "input": "4 1\n1 2 3 4 2\n",
            "output": "10\n"
        },
        {
            "input": "3 1\n1 2 3 4 2\n",
            "output": "6\n"
        },
        {
            "input": "1 1\n1 2 3 4 2\n",
            "output": "1\n"
        },
        {
            "input": "2 1\n1 2 3 4 2\n",
            "output": "3\n"
        },
        {
            "input": "1 2\n1 2 5 4 2\n",
            "output": "3\n"
        },
        {
            "input": "1 1\n1 2 5 4 2\n",
            "output": "1\n"
        },
        {
            "input": "1 1\n1 2 5 4 3\n",
            "output": "1\n"
        },
        {
            "input": "1 1\n1 2 3 4 0\n",
            "output": "1\n"
        },
        {
            "input": "2 1\n1 2 3 1 2\n",
            "output": "3\n"
        },
        {
            "input": "1 2\n1 2 5 4 0\n",
            "output": "3\n"
        },
        {
            "input": "1 1\n1 2 6 4 2\n",
            "output": "1\n"
        },
        {
            "input": "1 1\n1 2 5 4 0\n",
            "output": "1\n"
        },
        {
            "input": "1 1\n1 4 3 4 0\n",
            "output": "1\n"
        },
        {
            "input": "1 2\n1 2 7 4 0\n",
            "output": "3\n"
        },
        {
            "input": "1 1\n1 2 3 1 2\n",
            "output": "1\n"
        },
        {
            "input": "1 1\n1 2 5 4 -1\n",
            "output": "1\n"
        },
        {
            "input": "1 1\n1 2 3 1 4\n",
            "output": "1\n"
        },
        {
            "input": "1 1\n1 2 5 4 -2\n",
            "output": "1\n"
        },
        {
            "input": "2 1\n1 2 5 4 -2\n",
            "output": "3\n"
        },
        {
            "input": "2 1\n1 2 5 3 -2\n",
            "output": "3\n"
        },
        {
            "input": "1 2\n1 2 3 4 5\n",
            "output": "3\n"
        },
        {
            "input": "1 2\n1 2 3 4 4\n",
            "output": "3\n"
        },
        {
            "input": "2 1\n1 2 3 4 0\n",
            "output": "3\n"
        },
        {
            "input": "1 2\n1 2 9 4 2\n",
            "output": "3\n"
        },
        {
            "input": "1 1\n1 2 4 4 2\n",
            "output": "1\n"
        },
        {
            "input": "1 2\n1 2 5 4 3\n",
            "output": "3\n"
        },
        {
            "input": "3 1\n1 2 3 1 2\n",
            "output": "6\n"
        },
        {
            "input": "1 2\n1 2 0 4 0\n",
            "output": "3\n"
        }
    ]
}