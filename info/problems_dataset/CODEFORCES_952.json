{
    "name": "952_C. Ravioli Sort",
    "source": "CODEFORCES",
    "description": "Everybody knows of [spaghetti sort](https://en.wikipedia.org/wiki/Spaghetti_sort). You decided to implement an analog sorting algorithm yourself, but as you survey your pantry you realize you're out of spaghetti! The only type of pasta you have is ravioli, but you are not going to let this stop you...\n\nYou come up with the following algorithm. For each number in the array ai, build a stack of ai ravioli. The image shows the stack for ai = 4.\n\n<image>\n\nArrange the stacks in one row in the order in which the corresponding numbers appear in the input array. Find the tallest one (if there are several stacks of maximal height, use the leftmost one). Remove it and add its height to the end of the output array. Shift the stacks in the row so that there is no gap between them. Repeat the procedure until all stacks have been removed.\n\nAt first you are very happy with your algorithm, but as you try it on more inputs you realize that it doesn't always produce the right sorted array. Turns out when two stacks of ravioli are next to each other (at any step of the process) and differ in height by two or more, the top ravioli of the taller stack slides down on top of the lower stack.\n\nGiven an input array, figure out whether the described algorithm will sort it correctly.\n\nInput\n\nThe first line of input contains a single number n (1 \u2264 n \u2264 10) \u2014 the size of the array.\n\nThe second line of input contains n space-separated integers ai (1 \u2264 ai \u2264 100) \u2014 the elements of the array.\n\nOutput\n\nOutput \"YES\" if the array can be sorted using the described procedure and \"NO\" if it can not.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\nYES\n\n\nInput\n\n3\n3 1 2\n\n\nOutput\n\nNO\n\nNote\n\nIn the second example the array will change even before the tallest stack is chosen for the first time: ravioli from stack of height 3 will slide on the stack of height 1, and the algorithm will output an array {2, 2, 2}.",
    "difficulty": "C",
    "tags": [
        "implementation"
    ],
    "rating": 1600,
    "public_test": [
        {
            "input": "3\n3 1 2\n",
            "output": "NO"
        },
        {
            "input": "3\n1 2 3\n",
            "output": "YES"
        }
    ],
    "generated_test": [
        {
            "input": "4\n90 91 83 91\n",
            "output": "NO\n"
        },
        {
            "input": "1\n17\n",
            "output": "YES\n"
        },
        {
            "input": "4\n59 54 54 55\n",
            "output": "NO\n"
        },
        {
            "input": "10\n55 39 93 63 97 40 36 38 11 97\n",
            "output": "NO\n"
        },
        {
            "input": "5\n21 57 40 94 0\n",
            "output": "NO\n"
        },
        {
            "input": "8\n86 4 30 85 52 6 84 13\n",
            "output": "NO\n"
        },
        {
            "input": "6\n47 110 96 2 96 43\n",
            "output": "NO\n"
        },
        {
            "input": "4\n61 28 4 81\n",
            "output": "NO\n"
        },
        {
            "input": "5\n14 91 91 91 0\n",
            "output": "NO\n"
        },
        {
            "input": "3\n22 6 24\n",
            "output": "NO\n"
        },
        {
            "input": "9\n13 80 13 38 98 85 11 73 30\n",
            "output": "NO\n"
        },
        {
            "input": "10\n95 51 52 8 44 39 60 17 96 88\n",
            "output": "NO\n"
        },
        {
            "input": "3\n47 40 40\n",
            "output": "NO\n"
        },
        {
            "input": "4\n83 110 81 75\n",
            "output": "NO\n"
        },
        {
            "input": "10\n9 9 4 10 10 9 8 8 9 9\n",
            "output": "NO\n"
        },
        {
            "input": "3\n30 9 12\n",
            "output": "NO\n"
        },
        {
            "input": "4\n61 49 60 60\n",
            "output": "NO\n"
        },
        {
            "input": "7\n23 37 46 8 72 31 85\n",
            "output": "NO\n"
        },
        {
            "input": "4\n92 26 29 93\n",
            "output": "NO\n"
        },
        {
            "input": "10\n79 84 22 29 23 22 33 42 13 96\n",
            "output": "NO\n"
        },
        {
            "input": "7\n20 21 95 73 49 153 53\n",
            "output": "NO\n"
        },
        {
            "input": "10\n28 61 23 73 61 62 45 55 18 43\n",
            "output": "NO\n"
        },
        {
            "input": "5\n46 86 47 46 45\n",
            "output": "NO\n"
        },
        {
            "input": "7\n35 91 87 85 17 71 63\n",
            "output": "NO\n"
        },
        {
            "input": "3\n65 26 73\n",
            "output": "NO\n"
        },
        {
            "input": "10\n16 17 16 4 14 15 16 17 16 15\n",
            "output": "NO\n"
        },
        {
            "input": "9\n95 8 97 61 90 7 30 65 39\n",
            "output": "NO\n"
        },
        {
            "input": "10\n2 83 18 65 58 44 37 51 86 47\n",
            "output": "NO\n"
        },
        {
            "input": "6\n59 59 60 59 59 58\n",
            "output": "YES\n"
        },
        {
            "input": "3\n2 1 2\n",
            "output": "YES\n"
        },
        {
            "input": "3\n1 2 1\n",
            "output": "YES\n"
        },
        {
            "input": "4\n90 30 83 91\n",
            "output": "NO\n"
        },
        {
            "input": "10\n105 39 93 63 97 40 36 38 11 97\n",
            "output": "NO\n"
        },
        {
            "input": "5\n21 94 40 94 0\n",
            "output": "NO\n"
        },
        {
            "input": "8\n86 4 30 85 98 6 84 13\n",
            "output": "NO\n"
        },
        {
            "input": "6\n47 110 178 2 96 43\n",
            "output": "NO\n"
        },
        {
            "input": "4\n3 28 4 81\n",
            "output": "NO\n"
        },
        {
            "input": "5\n14 91 91 91 1\n",
            "output": "NO\n"
        },
        {
            "input": "3\n41 6 24\n",
            "output": "NO\n"
        },
        {
            "input": "1\n7\n",
            "output": "YES\n"
        },
        {
            "input": "9\n13 80 13 38 98 85 11 79 30\n",
            "output": "NO\n"
        },
        {
            "input": "10\n95 51 0 8 44 39 60 17 96 88\n",
            "output": "NO\n"
        },
        {
            "input": "3\n66 40 40\n",
            "output": "NO\n"
        },
        {
            "input": "4\n83 110 81 47\n",
            "output": "NO\n"
        },
        {
            "input": "10\n9 9 4 10 10 9 10 8 9 9\n",
            "output": "NO\n"
        },
        {
            "input": "3\n46 9 12\n",
            "output": "NO\n"
        },
        {
            "input": "7\n23 37 46 3 72 31 85\n",
            "output": "NO\n"
        },
        {
            "input": "4\n92 26 29 65\n",
            "output": "NO\n"
        },
        {
            "input": "10\n79 91 22 29 23 22 33 42 13 96\n",
            "output": "NO\n"
        },
        {
            "input": "7\n20 21 95 73 49 153 103\n",
            "output": "NO\n"
        },
        {
            "input": "10\n28 61 41 73 61 62 45 55 18 43\n",
            "output": "NO\n"
        },
        {
            "input": "5\n46 78 47 46 45\n",
            "output": "NO\n"
        },
        {
            "input": "7\n35 91 87 85 17 106 63\n",
            "output": "NO\n"
        },
        {
            "input": "3\n72 26 73\n",
            "output": "NO\n"
        },
        {
            "input": "10\n16 17 16 4 14 15 16 7 16 15\n",
            "output": "NO\n"
        },
        {
            "input": "9\n95 8 97 61 90 7 30 128 39\n",
            "output": "NO\n"
        },
        {
            "input": "10\n2 83 18 65 58 44 37 13 86 47\n",
            "output": "NO\n"
        },
        {
            "input": "6\n59 59 60 20 59 58\n",
            "output": "NO\n"
        },
        {
            "input": "3\n3 0 2\n",
            "output": "NO\n"
        },
        {
            "input": "3\n1 4 1\n",
            "output": "NO\n"
        },
        {
            "input": "4\n90 16 83 91\n",
            "output": "NO\n"
        },
        {
            "input": "10\n105 39 79 63 97 40 36 38 11 97\n",
            "output": "NO\n"
        },
        {
            "input": "5\n21 94 40 161 0\n",
            "output": "NO\n"
        },
        {
            "input": "8\n86 6 30 85 98 6 84 13\n",
            "output": "NO\n"
        },
        {
            "input": "6\n47 100 178 2 96 43\n",
            "output": "NO\n"
        },
        {
            "input": "4\n3 28 0 81\n",
            "output": "NO\n"
        },
        {
            "input": "5\n14 91 91 0 1\n",
            "output": "NO\n"
        },
        {
            "input": "3\n41 5 24\n",
            "output": "NO\n"
        },
        {
            "input": "1\n14\n",
            "output": "YES\n"
        },
        {
            "input": "9\n13 80 22 38 98 85 11 79 30\n",
            "output": "NO\n"
        },
        {
            "input": "10\n95 51 0 8 44 39 60 16 96 88\n",
            "output": "NO\n"
        },
        {
            "input": "3\n66 40 68\n",
            "output": "NO\n"
        },
        {
            "input": "4\n83 110 97 47\n",
            "output": "NO\n"
        },
        {
            "input": "3\n62 9 12\n",
            "output": "NO\n"
        },
        {
            "input": "7\n23 37 76 3 72 31 85\n",
            "output": "NO\n"
        },
        {
            "input": "4\n92 26 29 122\n",
            "output": "NO\n"
        },
        {
            "input": "10\n109 91 22 29 23 22 33 42 13 96\n",
            "output": "NO\n"
        },
        {
            "input": "7\n20 21 74 73 49 153 103\n",
            "output": "NO\n"
        },
        {
            "input": "10\n1 61 41 73 61 62 45 55 18 43\n",
            "output": "NO\n"
        },
        {
            "input": "7\n35 91 87 85 6 106 63\n",
            "output": "NO\n"
        },
        {
            "input": "3\n72 16 73\n",
            "output": "NO\n"
        },
        {
            "input": "10\n16 17 16 7 14 15 16 7 16 15\n",
            "output": "NO\n"
        },
        {
            "input": "9\n95 8 97 45 90 7 30 128 39\n",
            "output": "NO\n"
        },
        {
            "input": "10\n2 83 18 65 58 44 37 13 86 33\n",
            "output": "NO\n"
        },
        {
            "input": "6\n59 59 60 20 59 91\n",
            "output": "NO\n"
        },
        {
            "input": "3\n3 0 4\n",
            "output": "NO\n"
        },
        {
            "input": "3\n1 6 1\n",
            "output": "NO\n"
        },
        {
            "input": "4\n90 16 155 91\n",
            "output": "NO\n"
        },
        {
            "input": "10\n105 15 79 63 97 40 36 38 11 97\n",
            "output": "NO\n"
        },
        {
            "input": "5\n21 94 40 139 0\n",
            "output": "NO\n"
        },
        {
            "input": "8\n41 6 30 85 98 6 84 13\n",
            "output": "NO\n"
        },
        {
            "input": "6\n47 100 178 2 96 82\n",
            "output": "NO\n"
        },
        {
            "input": "4\n3 28 1 81\n",
            "output": "NO\n"
        },
        {
            "input": "5\n14 130 91 0 1\n",
            "output": "NO\n"
        },
        {
            "input": "3\n41 5 17\n",
            "output": "NO\n"
        },
        {
            "input": "1\n18\n",
            "output": "YES\n"
        },
        {
            "input": "9\n13 80 22 23 98 85 11 79 30\n",
            "output": "NO\n"
        },
        {
            "input": "10\n95 51 0 8 44 52 60 16 96 88\n",
            "output": "NO\n"
        },
        {
            "input": "3\n66 36 68\n",
            "output": "NO\n"
        },
        {
            "input": "4\n80 110 97 47\n",
            "output": "NO\n"
        }
    ]
}