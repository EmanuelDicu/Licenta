{
    "name": "245_D. Restoring Table",
    "source": "CODEFORCES",
    "description": "Recently Polycarpus has learned the \"bitwise AND\" operation (which is also called \"AND\") of non-negative integers. Now he wants to demonstrate the school IT teacher his superb manipulation with the learned operation.\n\nFor that Polycarpus came to school a little earlier and wrote on the board a sequence of non-negative integers a1, a2, ..., an. He also wrote a square matrix b of size n \u00d7 n. The element of matrix b that sits in the i-th row in the j-th column (we'll denote it as bij) equals:\n\n  * the \"bitwise AND\" of numbers ai and aj (that is, bij = ai & aj), if i \u2260 j; \n  * -1, if i = j. \n\n\n\nHaving written out matrix b, Polycarpus got very happy and wiped a off the blackboard. But the thing is, the teacher will want this sequence to check whether Polycarpus' calculations were correct. Polycarus urgently needs to restore the removed sequence of integers, or else he won't prove that he can count correctly.\n\nHelp Polycarpus, given matrix b, restore the sequence of numbers a1, a2, ..., an, that he has removed from the board. Polycarpus doesn't like large numbers, so any number in the restored sequence mustn't exceed 109.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the size of square matrix b. Next n lines contain matrix b. The i-th of these lines contains n space-separated integers: the j-th number represents the element of matrix bij. It is guaranteed, that for all i (1 \u2264 i \u2264 n) the following condition fulfills: bii = -1. It is guaranteed that for all i, j (1 \u2264 i, j \u2264 n; i \u2260 j) the following condition fulfills: 0 \u2264 bij \u2264 109, bij = bji.\n\nOutput\n\nPrint n non-negative integers a1, a2, ..., an (0 \u2264 ai \u2264 109) \u2014 the sequence that Polycarpus wiped off the board. Separate the numbers by whitespaces. \n\nIt is guaranteed that there is sequence a that satisfies the problem conditions. If there are multiple such sequences, you are allowed to print any of them.\n\nExamples\n\nInput\n\n1\n-1\n\n\nOutput\n\n0 \n\nInput\n\n3\n-1 18 0\n18 -1 0\n0 0 -1\n\n\nOutput\n\n18 18 0 \n\nInput\n\n4\n-1 128 128 128\n128 -1 148 160\n128 148 -1 128\n128 160 128 -1\n\n\nOutput\n\n128 180 148 160 \n\nNote\n\nIf you do not know what is the \"bitwise AND\" operation please read: http://en.wikipedia.org/wiki/Bitwise_operation.",
    "difficulty": "D",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "rating": 1500,
    "public_test": [
        {
            "input": "3\n-1 18 0\n18 -1 0\n0 0 -1\n",
            "output": "18 18 0 "
        },
        {
            "input": "4\n-1 128 128 128\n128 -1 148 160\n128 148 -1 128\n128 160 128 -1\n",
            "output": "128 180 148 160 "
        },
        {
            "input": "1\n-1\n",
            "output": "0 "
        }
    ],
    "generated_test": [
        {
            "input": "1\n0\n",
            "output": "0\n"
        },
        {
            "input": "9\n-1 0 0 2 0 2 10 2 0\n0 0 17 16 16 17 0 17 16\n0 17 -1 16 16 17 0 17 16\n2 16 16 -1 16 18 2 18 16\n0 16 16 16 -1 16 0 16 16\n2 17 17 18 16 -1 2 19 16\n10 0 0 2 0 2 -1 2 0\n2 17 17 18 16 19 2 -1 16\n0 16 16 16 16 16 0 16 -1\n",
            "output": "10 17 17 18 16 19 10 19 16 "
        },
        {
            "input": "7\n-1 1000000000 999999488 999999488 1000000000 1000000000 999999488\n1000000000 -1 999999488 999999488 1000000000 1000000000 999999488\n999999488 999999488 0 999999999 999999488 999999488 999999999\n999999488 999999488 999999999 -1 999999488 999999488 999999999\n1000000000 1000000000 999999488 999999488 -1 1000000000 999999488\n1000000000 1000000000 999999488 999999488 1000000000 -1 999999488\n999999488 999999488 999999999 999999999 999999488 999999488 -1\n",
            "output": "1000000000 1000000000 999999999 999999999 1000000000 1000000000 999999999 "
        },
        {
            "input": "2\n-1 0\n0 0\n",
            "output": "0 0 "
        },
        {
            "input": "3\n-1 18 0\n18 0 0\n0 0 -1\n",
            "output": "18 18 0 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "4\n0 128 128 128\n128 -1 148 160\n128 148 -1 128\n128 160 128 -1\n",
            "output": "128 180 148 160 "
        },
        {
            "input": "3\n-1 18 1\n18 0 0\n1 0 -1\n",
            "output": "19 18 1 "
        },
        {
            "input": "2\n0 1\n1 -1\n",
            "output": "1 1 "
        },
        {
            "input": "7\n-1 1000000000 999999488 999999488 1000000000 1000000000 999999488\n1000000000 -1 999999488 999999488 1000000000 1000000000 999999488\n999999488 999999488 0 999999999 999999488 999999488 999999999\n999999488 999999488 999999999 -1 999999488 999999488 999999999\n1000000000 1000000000 999999488 999999488 -1 1000000000 999999488\n1000000000 1000000000 999999488 999999488 1000000000 -1 999999488\n999999488 999999488 999999999 999999999 999999488 999999488 0\n",
            "output": "1000000000 1000000000 999999999 999999999 1000000000 1000000000 999999999 "
        },
        {
            "input": "9\n-1 0 0 2 0 2 10 2 0\n0 -1 17 16 16 17 0 17 16\n0 17 -1 16 16 17 0 17 16\n2 16 16 -1 16 18 2 18 16\n0 16 16 16 -1 16 0 16 16\n2 17 17 18 16 -1 2 19 16\n10 0 0 2 0 2 -1 2 0\n2 1 17 18 16 19 2 -1 16\n0 16 16 16 16 16 0 16 -1\n",
            "output": "10 17 17 18 16 19 10 19 16 "
        },
        {
            "input": "7\n-1 1000000000 999999488 999999488 1000000000 1000000000 999999488\n1000000000 0 999999488 999999488 1000000000 1000000000 999999488\n999999488 999999488 -1 999999999 999999488 999999488 999999999\n999999488 999999488 999999999 -1 999999488 999999488 999999999\n1000000000 1000000000 999999488 999999488 -1 1000000000 999999488\n1000000000 1000000000 999999488 999999488 1000000000 -1 999999488\n999999488 999999488 999999999 999999999 999999488 999999488 -1\n",
            "output": "1000000000 1000000000 999999999 999999999 1000000000 1000000000 999999999 "
        },
        {
            "input": "4\n-1 128 128 128\n128 0 148 160\n128 148 -1 128\n128 160 128 -1\n",
            "output": "128 180 148 160 "
        },
        {
            "input": "7\n-1 1000000000 999999488 999999488 1000000000 1000000000 999999488\n1000000000 -1 999999488 999999488 1000000000 1000000000 999999488\n999999488 999999488 0 999999999 999999488 999999488 999999999\n999999488 999999488 999999999 -1 999999488 999999488 999999999\n1000000000 1000000000 999999488 999999488 0 1000000000 999999488\n1000000000 1000000000 999999488 999999488 1000000000 -1 999999488\n999999488 999999488 999999999 999999999 999999488 999999488 -1\n",
            "output": "1000000000 1000000000 999999999 999999999 1000000000 1000000000 999999999 "
        },
        {
            "input": "3\n0 18 0\n18 0 0\n0 0 -1\n",
            "output": "18 18 0 "
        },
        {
            "input": "2\n0 0\n0 -1\n",
            "output": "0 0 "
        },
        {
            "input": "2\n0 0\n0 0\n",
            "output": "0 0 "
        },
        {
            "input": "3\n0 18 0\n18 0 0\n0 0 0\n",
            "output": "18 18 0 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 12 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 2 2 2 0 16 0 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "3\n-1 18 0\n18 0 0\n0 0 0\n",
            "output": "18 18 0 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n0 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 0 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 0 8 0 2 0\n0 0 0 12 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "3\n0 18 0\n18 -1 0\n0 0 -1\n",
            "output": "18 18 0 "
        },
        {
            "input": "4\n-1 128 128 128\n128 -1 148 160\n128 148 0 128\n128 160 128 -1\n",
            "output": "128 180 148 160 "
        },
        {
            "input": "10\n0 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 0 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 0 8 0 2 0\n0 0 0 12 12 8 -1 0 0 0\n16 17 16 1 1 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 0 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "3\n-1 18 0\n18 -1 0\n0 0 0\n",
            "output": "18 18 0 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 0 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 0 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "3\n0 18 0\n18 -1 0\n0 0 0\n",
            "output": "18 18 0 "
        },
        {
            "input": "7\n-1 1000000000 999999488 999999488 1000000000 1000000000 999999488\n1000000000 -1 999999488 999999488 1000000000 1000000000 999999488\n999999488 999999488 -1 999999999 999999488 999999488 999999999\n999999488 999999488 999999999 -1 999999488 999999488 999999999\n1000000000 1000000000 999999488 999999488 -1 1000000000 999999488\n1000000000 1000000000 999999488 999999488 1000000000 -1 999999488\n999999488 999999488 999999999 999999999 999999488 999999488 0\n",
            "output": "1000000000 1000000000 999999999 999999999 1000000000 1000000000 999999999 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 14 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "7\n-1 1000000000 999999488 999999488 1000000000 1000000000 999999488\n1000000000 -1 999999488 999999488 1000000000 1000000000 999999488\n999999488 999999488 0 999999999 999999488 999999488 999999999\n999999488 999999488 999999999 0 999999488 999999488 999999999\n1000000000 1000000000 999999488 999999488 0 1000000000 999999488\n1000000000 1000000000 999999488 999999488 1000000000 -1 999999488\n999999488 999999488 999999999 999999999 999999488 999999488 -1\n",
            "output": "1000000000 1000000000 999999999 999999999 1000000000 1000000000 999999999 "
        },
        {
            "input": "10\n0 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 0 8 0 2 0\n0 0 0 12 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "2\n-1 1\n1 -1\n",
            "output": "1 1 "
        },
        {
            "input": "2\n0 1\n1 0\n",
            "output": "1 1 "
        },
        {
            "input": "3\n-1 18 1\n18 -1 0\n1 0 -1\n",
            "output": "19 18 1 "
        },
        {
            "input": "3\n-1 18 1\n18 0 0\n1 0 0\n",
            "output": "19 18 1 "
        },
        {
            "input": "10\n0 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 0 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 0 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "7\n-1 1000000000 999999488 999999488 1000000000 1000000000 999999488\n1000000000 -1 999999488 999999488 1000000000 1000000000 999999488\n999999488 999999488 0 999999999 999999488 999999488 999999999\n999999488 999999488 999999999 0 999999488 999999488 999999999\n1000000000 1000000000 999999488 999999488 0 1000000000 999999488\n1000000000 1000000000 999999488 999999488 1000000000 -1 999999488\n999999488 999999488 999999999 999999999 999999488 999999488 0\n",
            "output": "1000000000 1000000000 999999999 999999999 1000000000 1000000000 999999999 "
        },
        {
            "input": "2\n1 1\n1 -1\n",
            "output": "1 1 "
        },
        {
            "input": "2\n0 1\n1 1\n",
            "output": "1 1 "
        },
        {
            "input": "10\n0 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 0 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 0 0 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "9\n-1 0 0 2 0 2 10 2 0\n0 -1 17 16 16 17 0 17 16\n0 17 -1 16 16 17 0 17 16\n2 16 16 -1 16 18 2 18 16\n0 16 16 16 -1 16 0 16 16\n2 17 17 18 16 -1 2 19 16\n10 0 0 2 0 2 -1 0 0\n2 1 17 18 16 19 2 -1 16\n0 16 16 16 16 16 0 16 -1\n",
            "output": "10 17 17 18 16 19 10 19 16 "
        },
        {
            "input": "3\n-1 18 1\n18 0 0\n1 0 1\n",
            "output": "19 18 1 "
        },
        {
            "input": "2\n1 1\n1 0\n",
            "output": "1 1 "
        },
        {
            "input": "10\n0 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 0 2 0\n0 2 0 10 10 -1 8 0 2 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 0 0 0 0 0 16 16\n16 18 16 0 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 -1 8 0 0 0\n0 0 0 4 12 8 -1 0 0 0\n16 17 16 1 1 0 0 0 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 0 8 0 2 0\n0 0 0 12 12 8 -1 0 0 0\n16 17 16 1 1 0 0 0 16 16\n16 18 16 2 2 2 0 16 0 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n0 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 0\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 0 8 0 2 0\n0 0 0 12 12 8 -1 0 0 0\n16 17 16 1 1 0 0 -1 16 16\n16 18 16 2 2 2 0 16 -1 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        },
        {
            "input": "10\n-1 16 16 0 0 0 0 16 16 16\n16 -1 16 3 3 2 0 17 18 16\n16 16 -1 0 0 0 0 16 16 16\n0 3 0 -1 15 10 12 1 2 0\n0 3 0 15 -1 10 12 1 2 0\n0 2 0 10 10 0 8 0 2 0\n0 0 0 12 12 8 -1 0 0 0\n16 17 16 1 1 0 0 1 16 16\n16 18 16 2 2 2 0 16 0 16\n16 16 16 0 0 0 0 16 16 -1\n",
            "output": "16 19 16 15 15 10 12 17 18 16 "
        }
    ]
}